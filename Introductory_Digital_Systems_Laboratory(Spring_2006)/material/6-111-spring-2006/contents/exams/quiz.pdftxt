MASSACHUSETTS INSTITUTE OF TECHNOLOGY
Department of Electrical Engineering and Computer Sciences

Introductory Digital Systems Lab (6.111) 
Quiz - Spring 2004
Prof. Anantha Chandrakasan 

Student Name:                                                             

             

  
                                          
 
  

Problem 1 (16 Points): _____________________

Problem 2 (24 Points): _____________________

Problem 3 (24 Points): _____________________

Problem 4 (16 Points): _____________________

Problem 5 (20 Points): _____________________

Total (100 Points):       _____________________

1 of 10

Problem 1: Sequential Building Block Characterization: 
Consider the following implementation of a register. Assume that an inverter has a delay of 1 and that the 
switch is ideal. The switch is closed when the control input is high. 

CLK

CLK

CLK

D

CLK

Q

Master (inverting) Latch

Slave (inverting) Latch

(a) What type of register is shown above (circle one)?(4 points)

positive edge-triggered 

negative edge-triggered

(b) What  is  the setup  time  (tsu), hold  time  (thold),  and propagation  (tcq) delay. Assume  that CLK and CLK
are ideal (i.e., the delay to derive CLK from CLK is zero). (12 points)

2 of 10

Problem 2: Clock Gating Circuit 
Assume for the entire problem that the counter reset is synchronous. 
(a) Consider the one second clock from lab2. The 1Hz enable is derived from  the circuit below (the clock 
is  the  1.8432Mhz  clock).  Assume  that  a  global  reset  signal  puts  the  count  to  0  (the  circuit  is  not  shown 
here). Suppose the 1Hz enable is used to clock other circuits that need to be updated once per second (e.g., 
the register shown below). Identify the main problem with this circuit. (4 points) 

register

In

D Q

Out

reset

r
e
t
n
u
o
C

Q

Count[20:0]

21

1Hz Enable

Combinational 

Logic (comparator)
=

CLK

21’d1843199

(b) The following is a simple modification that is proposed to solve the problem of part (a). The counter is 
negative  edge-triggered  and  the AND  gate  is  introduced  before  the  register  clock. Assume  that  the AND 
gate is ideal (i.e., has zero delay). Does this circuit fix the problem of part (a)? If so, under what conditions 
does this circuit function properly? If not, explain why.  (6 points)

register

In

D Q

Out

reset

r
e
t
n
u
o
C

Q

Count [20:0]

21

1Hz Enable

Combinational 

Logic (comparator)
=

CLK

21 ’d1843199

CLK

3 of 10

(c) The solution of (b) is not a synchronous one (i.e., a single global clock to every register). Propose a fix 
to  the  problem  in  part  (a)  using  a  single  clock  (CLK).  That  is,  both  the  counter  and  register  are  clocked 
from the same clock (CLK). The signal In should be loaded into the register once per second. You may add 
additional components in the diagram below. (6 points)

reset

r
e
t
n
u
o
C

Q

Count [20:0]

21

1Hz Enable

Combinational 

Logic (comparator)
=

CLK

21 ’d1843199

register

D Q

Out

CLK

In

(d) For each of the following signals, specify if  glitches are allowed. (circle one) (8 points)

(i)  Data lines to the M6264  when
      writing (when W is low, G is high, chip is enabled)
      as long as it settles well before W goes high 

(ii)  Address lines to the M6264 when 
      reading  (when W is high, G is low, chip is enabled)
      as long as it settles well before the output
      data is required 

Glitches Not Allowed        Glitches are Allowed

Glitches Not Allowed        Glitches are Allowed

(iii) R/W for the AD670 (ADC)
        when CE and CS are low

(iv) Data inputs for the AD558 (DAC)
     when CE and CS are low

Glitches Not Allowed        Glitches are Allowed

Glitches Not Allowed        Glitches are Allowed

4 of 10

Problem 3: Arithmetic 

(a) Consider the following 16-bit Carry Bypass Adder. Assume that the Sum Logic (SL) block for stage i has as 
inputs Pi, Gi, and Cin,i. Assume the following delays: 
Delay to produce the  Pi, Gi signals from the Ai, Bi inputs is 1 (i.e., the delay of the PG logic block)
Delay to compute  Cout_i  from Pi, Gi and Cin,i inputs is 1  (i.e., the delay of the Carry Logic (CL) block)
Delay to compute  Si from Cin,i, Pi, Gi being valid is 2 (i.e., the delay of the Sum Logic (SL) block)
Delay for the 2:1 multiplexor is 2 
Delay to compute the group propagate,  GPi, is 1 

Highlight the critical path for this 16-bit adder directly on figure below (6 points)

A0 B0

A1 B1

A2 B2

A3 B3

PG

PG

PG

PG

Cin,0

CL

CL

CL

CL

3
P
2
P
1
P
0
P
 
=
0
P
G

0

1

A4 B4

A5 B5

A6 B6

A7 B7

PG

PG

PG

PG

CL

CL

CL

CL

7
P
6
P
5
P
4
P
 
=
1
P
G

0

1

A8 B8

A9 B9

A10B10

A11 B11

PG

PG

PG

PG

CL

CL

CL

CL

1
1
P
0
1
P
9
P
8
P
 
=
2
P
G

0

1

A12B12

A13B13

A14B14

A15 B15

PG

PG

PG

PG

CL

CL

CL

CL

Cout,15

SL

SL

SL

SL

SL

SL

SL

SL

SL

SL

SL

SL

SL

SL

SL

SL

S0

S1

S2

S3

S4

S5

S6

S7

S8

S9

S10

S11

S12

S13

S14

S15

(b) Based on the structure in (a), assuming a block size equal to 4, write down an equation for the delay of 
an N input adder, where N is a multiple of 4. (6 points)

5 of 10

(cid:127)
(cid:127)
(cid:127)
(cid:127)
(cid:127)
(c) Consider a 64-tap filter implemented using an accumulator architecture as shown below. How many 
bits will be required for the adder? (6 points)

In 
(twos complement) 

8-bits

Coefficient
(twos complement)

Twos
Complement
Multiplier 

8-bits

?

+

16-bits
Twos complement,
sign extended to
match the adder width 

reset_accumulator

?

D Q

CLK

(d) There is an error in the following implementation of the carry out logic. Identify the error and propose 
a simple solution (it might involve changing the logic). (6 points)

A B

A
B

0

1

Cin

Cout

6 of 10

Problem 4: FPGA 

(a) Consider an FPGA architecture with three identical 4-input SRAM based lookup tables. For this prob-
lem do not worry about the circuits  to perform the write operation into the SRAM. Each SRAM is shown 
to have 4 inputs (i.e., address bits) and one output bit. Draw the circuit diagram for using the three SRAMs 
shown below to implement an arbitrary function Y of 5-input variables in4,  in3,    in2, in1, in0? Do not add 
any additional components. (8 points)

in4
in3
in2
in1
in0

SRAM1

SRAM2

Y

SRAM3

A3
A2
A1
A0

7 of 10

(b)What is the function implemented by SRAM3 corresponding to your solution in part 4(a)? Explain. (8 points)

  

8 of 10

PROBLEM 5: Verilog

(a)  Consider  the  follow  piece  of  code  to  implement  a  synchronizer  (with  two  registers).  Does  the  code 
implement  the  required  functionality?  (explain).  If  the  code  does  not  properly  implement  a  synchronizer, 
modify the code as necessary. (6 points)

input in;
reg q1, q2;

always @ (posedge clk)
begin
 q1 = in;
 q2 = q1;
end

 
 

(b)  The  following  Verilog  code  should  synthesize  to  a  purely  combinational  logic  function  (3:1  multi-
plexor, where we don ’t care about the case when sel = 11). Does it? If not, fix the code so that there are  no 
memory elements. (6 points)

module mux_3to1 (a, b,c, sel, out);

input [1:0] sel;
input a,b,  c;
output out;
reg out;

 
 
 

always @ (a or b or c or sel)
begin
 case (sel)
 2’b00: out = a;
 2’b01: out = b;
 2’b10: out = c;
endcase
  end
endmodule

9 of 10

(c)  A  simple  digital  system  consists  of  a  four  state  FSM  which  increments  a  4-bit  synchronous  counter 
when the FSM is in state 10. An asynchronous reset signal is used to force both the state machine and the 
counter  to  all  zeros whenever  it  is  high.  Identify  the major problem with  this  code when  synthesized  and 
propose a fix (i.e., make the necessary modifications to the code below. You may add a control signal). (8 
points)

module simple_fsm(clk, reset, count);
  input reset, clk;
  output [3:0] count;
  reg [3:0] count;
  reg [1:0] state;
  reg [1:0] next;
 
  always @ (posedge clk or posedge reset) begin
    if (reset) 
     begin
      state <= 2'b00;
     end
    else 
     begin
      state <= next;
     end
  end

  always @ (state or reset) begin
   if (reset)
   count = 4'b0000;

    case (state)
      2'b00:  next = 2'b01;
   2'b01:  next = 2'b10;
      2'b10:  begin
               next = 2'b11;
               count = count +1;
              end
      2'b11:  next = 2'b00;
    endcase
  end //always

  endmodule

10 of 10

