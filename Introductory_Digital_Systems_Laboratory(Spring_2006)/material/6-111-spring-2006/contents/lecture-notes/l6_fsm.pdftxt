FSMs and Synchronization
L6: L6: FSMs
and Synchronization

Acknowledgements: 
re courtesy of the following sources and are used with permission.
Materials in this lecture a
Rex Min

 J. Rabaey, A. Chandrakasan, B. Nikolic. Digital Integrated Circuits: A Design Perspective.
Prentice Hall/Pearson, 2003.

, 2003.

L6: 6.111 Spring 2006

Introductory Digital Systems Laboratory

1

Asynchronous Inputs in Sequential Systems
Asynchronous Inputs in Sequential Systems

What about external signals?

Sequential System

Can’t guarantee 
setup and hold 
times will be met!

Clock
When an asynchronous signal causes a setup/hold 
violation...

I

II

III

Q
D
Clock

?

Transition is missed 
on first clock cycle, 
but caught on next 
clock cycle.

Transition is caught  
on first clock cycle.

Output is metastable
for an indeterminate 
amount of time.
Q: Which cases are problematic?
Courtesy of Nathan Ickes.  Used with permission.

L6: 6.111 Spring 2006

Introductory Digital Systems Laboratory

2

Asynchronous Inputs in Sequential Systems
Asynchronous Inputs in Sequential Systems

All of them can be, if more than one happens 
simultaneously within the same circuit.
Idea: ensure that external signals directly feed 
exactly one flip-flop

Sequential System

D Q

Clock

Courtesy of Nathan Ickes.  Used with permission.

Clocked  
Synchronous 
System

Async
Input

D Q

Q0

Clock

D Q

Q1

Clock

This prevents the possibility of I and II occurring in different places in 
the circuit, but what about metastability?

L6: 6.111 Spring 2006

Introductory Digital Systems Laboratory

3

Handling Metastability
Metastability
Handling 

(cid:132) Preventing metastability turns out to be an impossible problem
(cid:132) High gain of digital devices makes it likely that metastable conditions will 
resolve themselves quickly
(cid:132) Solution to metastability: allow time for signals to stabilize

Likely to be 
metastable
right after 
sampling

Very unlikely to 
be metastable for 
>1 clock cycle

Extremely unlikely 
to be metastable for 
>2 clock cycle

D Q

D Q D Q

Complicated 
Sequential Logic 
System

Clock

How many registers are necessary?
(cid:132) Depends on many design parameters(clock speed, device speeds, …)
(cid:132) In 6.111, one or maybe two synchronization registers is sufficient

L6: 6.111 Spring 2006

Introductory Digital Systems Laboratory

4

Finite State Machines
Finite State Machines

(cid:132) Finite State Machines (FSMs) are a useful abstraction for sequential 
circuits with centralized “states” of operation
(cid:132) At each clock edge, combinational logic computes outputs and next 
state as a function of inputs and present state

inputs
+
present
state

n

CLK

Combinational
Logic

Q

Flip-
Flops

D

outputs
+
next
state

n

L6: 6.111 Spring 2006

Introductory Digital Systems Laboratory

5

Two Types of FSMs
FSMs
Two Types of 

Moore and Mealy FSMs are distinguished by their output generation

Moore FSM:

inputs
x0...xn

Comb.
Logic

next
state
S+

n

CLK

Mealy FSM:

present state S

direct combinational path!

inputs
x0...xn

Comb.
Logic

S+
n

CLK

D

Q

Flip-
Flops

S

Q

D

Flip-
Flops

Comb.
Logic

outputs
yk = fk(S)

n

n

outputs
yk = fk(S, x0...xn)

Comb.
Logic

L6: 6.111 Spring 2006

Introductory Digital Systems Laboratory

6

Design Example: Level -- toto --Pulse
Pulse
Design Example: Level

(cid:132) A level-to-pulse converter produces a 
single-cycle pulse each time its input goes 
high.
(cid:132) In other words, it’s a synchronous rising-
edge detector.
(cid:132) Sample uses:
(cid:134) Buttons and switches pressed by humans for 
arbitrary periods of time
(cid:134) Single-cycle enable signals for counters

Whenever input L goes 
from low to high...

CLK

L

Level to
Pulse
Converter

P

...output P produces a 
single pulse, one clock 
period wide.

L6: 6.111 Spring 2006

Introductory Digital Systems Laboratory

7

State Transition Diagrams
State Transition Diagrams

(cid:132) Block diagram of desired system:
Synchronizer

unsynchronized
user input

D Q

D Q

CLK

Edge Detector

L

Level to
Pulse
FSM

P

(cid:132) State transition diagram is a useful FSM representation and design aid

“if L=1 at the clock edge, 
then jump to state 01.”

L=1

L=1

Binary values of states

L=0

00
Low input, 
Waiting for rise
P = 0

01
Edge Detected!
P = 1

L=0

“if L=0 at the clock edge, 
then stay in state 00.”

11
High input,
Waiting for fall
P = 0

L=1

L=0

This is the output that results from 
this state. (Moore or Mealy?)

L6: 6.111 Spring 2006

Introductory Digital Systems Laboratory

8

Logic Derivation for a Moore FSM
Logic Derivation for a Moore FSM

(cid:132) Transition diagram is readily converted to a 
state transition table (just a truth table)
L=1

L=1

L=0

00
Low input, 
Waiting for rise
P = 0

01
Edge Detected!
P = 1

L=0

11
High input,
Waiting for fall
P = 0

L=0

L=1

Current 
State
S0
S1
0
0
0
0
1
0
0
1
1
1
1
1

In

L
0
1
0
1
0
1

Next  
State
S1
+ S0
+
0
0
1
0
0
0
1
1
0
0
1
1

Out
P
0
0
1
1
0
0

(cid:132) Combinational logic may be derived by Karnaugh maps

0
1

for S1
+:
S1S0
10
01
00
11
L
0
0
X0
1
0
X1
+:
for S0
S1S0
10
01
00
11
L
0
0
X0
1
1
X1

0
1

L

Comb.
Logic

S+

n
CLK

S1
+ = LS0
S1
+ = LS0
S0
+ = L
S0
+ = L

D

Q

Flip-
Flops

S

P

Comb.
Logic

n

P = S1S0
P = S1S0

S0

for P:
1
0
X0
0
1

S1

0
1

L6: 6.111 Spring 2006

Introductory Digital Systems Laboratory

9

Moore Level -- toto --Pulse Converter
Pulse Converter
Moore Level

inputs
x0...xn

Comb.
Logic

next
state
S+

n

CLK

Q

D

Flip-
Flops

Comb.
Logic

outputs
yk = fk(S)

present state S

S1
+ = LS0
S1
+ = LS0
S0
+ = L
S0
+ = L

n

P = S1S0
P = S1S0

Moore FSM circuit implementation of level-to-pulse converter:

L

S0
+

CLK

S1
+

S0

S1

D Q

Q

D Q

Q

P

L6: 6.111 Spring 2006

Introductory Digital Systems Laboratory

10

Design of a Mealy Level -- toto --Pulse
Pulse
Design of a Mealy Level

direct combinational path!

Comb.
Logic

S+
n
CLK

Q

D

Flip-
Flops

Comb.
Logic

n

S
(cid:132) Since outputs are determined by state and inputs, Mealy FSMs may 
need fewer states than Moore FSM implementations

1. When L=1 and S=0, this output is 
asserted immediately and until the 
state transition occurs (or L changes).

L=0 | P=0

0
Input is low

L=1 | P=1

L=0 | P=0

1
Input is high

L=1 | P=0

2. After the transition to S=1 and as long 
as L remains at 1, this output is 0.

1

2

L
P
Clock
State

Output transitions 
immediately.
State transitions at the 
clock edge.

L6: 6.111 Spring 2006

Introductory Digital Systems Laboratory

11

Mealy Level -- toto --Pulse Converter
Pulse Converter
Mealy Level

0
Input is low

L=1 | P=1

L=0 | P=0

1
Input is high

L=0 | P=0

L=1 | P=0

Pres. 
State
S
0
0
1
1

In

L
0
1
0
1

Next  
State Out
P
S+
0
0
1
1
0
0
0
1

Mealy FSM circuit implementation of level-to-pulse converter:

L

S+

CLK

D Q

Q

S

S

P

(cid:132) FSM’s state simply remembers the previous value of L
(cid:132) Circuit benefits from the Mealy FSM’s implicit single-cycle 
assertion of outputs during state transitions

L6: 6.111 Spring 2006

Introductory Digital Systems Laboratory

12

Moore/Mealy Trade --OffsOffs
Moore/Mealy Trade

(cid:132) Remember that the difference is in the output:
(cid:134) Moore outputs are based on state only
(cid:134) Mealy outputs are based on state and input
(cid:134) Therefore, Mealy outputs generally occur one cycle earlier than a Moore:

Moore: delayed assertion of P

Mealy: immediate assertion of P

L

P

Clock

State[0]

L

P

Clock

State

(cid:132) Compared to a Moore FSM, a Mealy FSM might...
(cid:134) Be more difficult to conceptualize and design
(cid:134) Have fewer states

L6: 6.111 Spring 2006

Introductory Digital Systems Laboratory

13

Review: FSM Timing Requirements
Review: FSM Timing Requirements

(cid:132) Timing requirements for FSM are identical to any generic 
sequential system with feedback

Minimum Clock Period

Minimum Delay

inputs
+
present
state

n

CLK

T

outputs
+
next
state

n

Combinational
Logic
Tlogic

Tcq

Q

D

Flip-
Flops

Tsu

inputs
+
present
state

n

CLK

Combinational
Logic

Tlogic,cd

outputs
+
next
state

n

Tcq,cd

Q

Flip-
Flops

D

Thold

T > Tcq + Tlogic + Tsu

Tcq,cd + Tlogic,cd > Thold

L6: 6.111 Spring 2006

Introductory Digital Systems Laboratory

14

The 6.111 Vending Machine
The 6.111 Vending Machine

(cid:132) Lab assistants demand a new 
soda machine for the 6.111 lab. 
You design the FSM controller.
(cid:132) All selections are $0.30.
(cid:132) The machine makes change. 
(Dimes and nickels only.)
(cid:132) Inputs: limit 1 per clock
(cid:134) Q - quarter inserted
(cid:134) D - dime inserted
(cid:134) N - nickel inserted
(cid:132) Outputs: limit 1 per clock
(cid:134) DC - dispense can
(cid:134) DD - dispense dime
(cid:134) DN - dispense nickel

30¢

30¢

COINS ONLY

25¢

5¢

10¢

Co
Sprite
Jolt
Water
LS163

L6: 6.111 Spring 2006

Introductory Digital Systems Laboratory

15

What States are in the System?
What States are in the System?

(cid:132) A starting (idle) state:
idle
(cid:132) A state for each possible amount of money captured:
...

got5c

got15c

got10c

(cid:132) What’s the maximum amount of money captured before purchase? 
25 cents (just shy of a purchase) + one quarter (largest coin)
...

got45c

got40c

got35c

got50c

(cid:132) States to dispense change (one per coin dispensed):

got45c

Dispense
Dime

Dispense
Nickel

L6: 6.111 Spring 2006

Introductory Digital Systems Laboratory

16

A Moore Vender
A Moore Vender

Here’s a first cut at the 
state transition diagram.

See a better way?
So do we.
Don’t go away...

idle

N=1
got5c
N=1
got10c
N=1
got15c
N=1
got20c
N=1
got25c
N=1
got30c
DC=1

D=1

D=1

D=1

D=1

D=1

D=1

got35c
DC=1

got40c
DC=1

got45c
DC=1

got50c
DC=1

Q=1

Q=1

Q=1

Q=1

Q=1

*

*
*

*

*

*
chg35
DN=1

chg40
DD=1

chg45
DD=1

chg50
DD=1

*

*

chg45b
DN=1

*

chg50b
DD=1

L6: 6.111 Spring 2006

Introductory Digital Systems Laboratory

17

State Reduction
State Reduction

idle

N=1
got5c
N=1
got10c
N=1
got15c
N=1
got20c
N=1
got25c
N=1
got30c
DC=1

D=1

D=1

D=1

D=1

D=1

D=1

got35c
DC=1

got40c
DC=1

got45c
DC=1

got50c
DC=1

Q=1

Q=1

Q=1

Q=1

Q=1

*

*
*

*

*
chg35
DN=1

chg40
DD=1

chg45
DD=1

chg50
DD=1

Duplicate states have:
Duplicate states have:
(cid:132) The same outputs, and
(cid:132) The same outputs, and
(cid:132) The same transitions
(cid:132) The same transitions
There are two duplicates
There are two duplicates
in our original diagram.
in our original diagram.

idle

N=1
got5c
N=1
got10c
N=1
got15c
N=1
got20c
N=1
got25c
N=1
got30c
DC=1

D=1

D=1

D=1

D=1

D=1

D=1

17 states
5 state bits

15 states
4 state bits

*

*

chg45b
DN=1

*

chg50b
DD=1

got35c
DC=1

got40c
DC=1

got45c
DC=1

got50c
DC=1

L6: 6.111 Spring 2006

Introductory Digital Systems Laboratory

Q=1

Q=1

Q=1

Q=1

Q=1

*

*
*

*

*

*

*

rtn5
DN=1

rtn10
DD=1

rtn15
DD=1

rtn20
DD=1

*

*

18

Verilog for the Moore Vender
for the Moore Vender
Verilog

Comb.
Logic

Q
D
State
Register

n

CLK

Comb.
Logic

n

FSMs are easy in Verilog.
Simply write one of each:
(cid:132) State register
(sequential always block)
(cid:132) Next-state 
combinational logic
(comb. always block with case)
(cid:132) Output combinational 
logic block
(comb. always block or assign
statements)

module mooreVender (N, D, Q, DC, DN, DD, 
clk, reset, state);
input N, D, Q, clk, reset;
output DC, DN, DD;
output [3:0] state;
reg [3:0] state, next;
States defined with parameter keyword
parameter IDLE = 0;
parameter GOT_5c = 1;
parameter GOT_10c = 2;
parameter GOT_15c = 3;
parameter GOT_20c = 4;
parameter GOT_25c = 5;
parameter GOT_30c = 6;
parameter GOT_35c = 7;
parameter GOT_40c = 8;
parameter GOT_45c = 9;
parameter GOT_50c = 10;
parameter RETURN_20c = 11;
parameter RETURN_15c = 12;
parameter RETURN_10c = 13;
parameter RETURN_5c = 14;
State register defined with sequential 
always block

always @ (posedge clk or negedge reset)
if (!reset)   state <= IDLE;
else          state <= next;

L6: 6.111 Spring 2006

Introductory Digital Systems Laboratory

19

Verilog for the Moore Vender
for the Moore Vender
Verilog

Next-state logic within a 
combinational always block

GOT_25c:   if (Q) next = GOT_50c;
else if (D) next = GOT_35c;
else if (N) next = GOT_30c;
else next = GOT_25c;

always @ (state or N or D or Q) begin

case (state)
IDLE:      if (Q) next = GOT_25c;
else if (D) next = GOT_10c;
else if (N) next = GOT_5c;
else next = IDLE;

GOT_5c:    if (Q) next = GOT_30c;
else if (D) next = GOT_15c;
else if (N) next = GOT_10c;
else next = GOT_5c;

GOT_10c:   if (Q) next = GOT_35c;
else if (D) next = GOT_20c;
else if (N) next = GOT_15c;
else next = GOT_10c;

GOT_15c:   if (Q) next = GOT_40c;
else if (D) next = GOT_25c;
else if (N) next = GOT_20c;
else next = GOT_15c;

GOT_20c:   if (Q) next = GOT_45c;
else if (D) next = GOT_30c;
else if (N) next = GOT_25c;
else next = GOT_20c;

GOT_30c:  next = IDLE;
GOT_35c:  next = RETURN_5c;
GOT_40c:  next = RETURN_10c;
GOT_45c:  next = RETURN_15c;
GOT_50c:  next = RETURN_20c;

RETURN_20c:  next = RETURN_10c;
RETURN_15c:  next = RETURN_5c;
RETURN_10c:  next = IDLE;
RETURN_5c:   next = IDLE;

default: next = IDLE;
endcase
end

Combinational output assignment

assign DC = (state == GOT_30c || state == GOT_35c ||
state == GOT_40c || state == GOT_45c || 
state == GOT_50c);
assign DN = (state == RETURN_5c);
assign DD = (state == RETURN_20c || state == RETURN_15c || 
state == RETURN_10c);

endmodule

L6: 6.111 Spring 2006

Introductory Digital Systems Laboratory

20

Simulation of Moore Vender
Simulation of Moore Vender

State

Output

idle

got5c

got20c

rtn15

idle

got15c

got45c

rtn5

C

10¢

5¢

L6: 6.111 Spring 2006

Introductory Digital Systems Laboratory

21

Coding Alternative: Two Blocks
Coding Alternative: Two Blocks

Next-state and output logic combined into a single always block

always @ (state or N or D or Q) begin

DC = 0; DD = 0; DN = 0;    // defaults

case (state)
IDLE:      if (Q) next = GOT_25c;
else if (D) next = GOT_10c;
else if (N) next = GOT_5c;
else next = IDLE;

GOT_5c:    if (Q) next = GOT_30c;
else if (D) next = GOT_15c;
else if (N) next = GOT_10c;
else next = GOT_5c;

GOT_10c:   if (Q) next = GOT_35c;
else if (D) next = GOT_20c;
else if (N) next = GOT_15c;
else next = GOT_10c;

GOT_15c:   if (Q) next = GOT_40c;
else if (D) next = GOT_25c;
else if (N) next = GOT_20c;
else next = GOT_15c;

GOT_20c:   if (Q) next = GOT_45c;
else if (D) next = GOT_30c;
else if (N) next = GOT_25c;
else next = GOT_20c;

GOT_25c:   if (Q) next = GOT_50c;
else if (D) next = GOT_35c;
else if (N) next = GOT_30c;
else next = GOT_25c;

GOT_30c:  begin
DC = 1; next = IDLE;
end
GOT_35c:  begin
DC = 1; next = RETURN_5c;
end
GOT_40c:  begin
DC = 1; next = RETURN_10c;
end
GOT_45c:  begin
DC = 1; next = RETURN_15c;
end
GOT_50c:  begin 
DC = 1; next = RETURN_20c;
end

RETURN_20c: begin
DD = 1; next = RETURN_10c;
end
RETURN_15c: begin
DD = 1; next = RETURN_5c;
end
RETURN_10c: begin
DD = 1; next = IDLE;
end
RETURN_5c:  begin
DN = 1; next = IDLE;
end

default: next = IDLE;
endcase
end

L6: 6.111 Spring 2006

Introductory Digital Systems Laboratory

22

FSM Output Glitching
Glitching
FSM Output 

(cid:132) FSM state bits may not transition at precisely the same time
(cid:132) Combinational logic for outputs may contain hazards  
(cid:132) Result: your FSM outputs may glitch!

during this state 
transition...

...the state registers may 
transtion like this...

D=1

got10c

got20c

0010

got10c

0110

got30c

0100

got20c

...causing the 
DC output to 
glitch like this!

0

1

0

glitch

assign DC = (state == GOT_30c || state == GOT_35c ||
state == GOT_40c || state == GOT_45c || 
state == GOT_50c);

If the soda dispenser is glitch-sensitive, your customers can get a 20-cent soda!

L6: 6.111 Spring 2006

Introductory Digital Systems Laboratory

23

Registered FSM Outputs are Glitch --FreeFree
Registered FSM Outputs are Glitch

inputs

next
state

n

Next-
State
Comb.
Logic

registered 
outputs

Output
Comb.
Logic

Q
D
Output
Registers

Q
D
State
Registers

CLK

CLK

n

present state S

(cid:132) Move output 
generation into the 
sequential always 
block
(cid:132) Calculate outputs 
based on next state

reg DC,DN,DD;

// Sequential always block for state assignment
always @ (posedge clk or negedge reset) begin
if (!reset)   state <= IDLE;
else if (clk) state <= next;

DC <= (next == GOT_30c || next == GOT_35c ||
next == GOT_40c || next == GOT_45c || 
next == GOT_50c);
DN <= (next == RETURN_5c);
DD <= (next == RETURN_20c || next == RETURN_15c || 
next == RETURN_10c);

end

L6: 6.111 Spring 2006

Introductory Digital Systems Laboratory

24

Mealy Vender (covered in Recitation)
Mealy Vender (covered in Recitation)

idle

N=1
got5c
N=1
got10c
N=1
got15c
N=1
got20c
N=1
got25c
N=1
got30c
DC=1

D=1

D=1

D=1

D=1

D=1

D=1

got35c
DC=1

got40c
DC=1

got45c
DC=1

got50c
DC=1

A Mealy machine can eliminate states devoted solely 
A Mealy machine can eliminate states devoted solely 
to holding an output value.
to holding an output value.

Q=1

Q=1

*

*

Q=1

Q=1

Q=1
*

*
*

*

rtn5
DN=1

rtn10
DD=1

rtn15
DD=1

rtn20
DD=1

*

*

idle
N=1

got5c
N=1

got10c
N=1

got15c
N=1

got20c
N=1

got25c

D=1

Q=1 | DC=1

D=1

D=1

D=1 | DC=1

D=1

N=1 | DC=1

Q=1

* | DN=1

* | DD=1

Q=1 | DC=1

Q=1 | DC=1

Q=1 | DC=1

D=1 | 
DC=1

Q=1 | DC=1

rtn5

rtn10

rtn15

rtn20

* | DD=1

* | DD=1

L6: 6.111 Spring 2006

Introductory Digital Systems Laboratory

25

Verilog for Mealy FSM 
for Mealy FSM 
Verilog

module mealyVender (N, D, Q, DC, DN, DD, clk, reset, state);
input N, D, Q, clk, reset;
output DC, DN, DD;
reg DC, DN, DD;

output [3:0] state;
reg [3:0] state, next;

parameter IDLE = 0;
parameter GOT_5c = 1;
parameter GOT_10c = 2;
parameter GOT_15c = 3;
parameter GOT_20c = 4;
parameter GOT_25c = 5;
parameter RETURN_20c = 6;
parameter RETURN_15c = 7;
parameter RETURN_10c = 8;
parameter RETURN_5c = 9;

// Sequential always block for state assignment
always @ (posedge clk or negedge reset)
if (!reset)   state <= IDLE;
else          state <= next;

L6: 6.111 Spring 2006

Introductory Digital Systems Laboratory

26

Verilog for Mealy FSM 
for Mealy FSM 
Verilog

always @ (state or N or D or Q) begin

DC = 0; DN = 0; DD = 0;   // defaults

case (state)
IDLE:      if (Q) next = GOT_25c;
else if (D) next = GOT_10c;
else if (N) next = GOT_5c;
else next = IDLE;

GOT_5c:    if (Q) begin
DC = 1; next = IDLE; 
end
else if (D) next = GOT_15c;
else if (N) next = GOT_10c;
else next = GOT_5c;

GOT_10c:   if (Q) begin
DC = 1; next = RETURN_5c;
end
else if (D) next = GOT_20c;
else if (N) next = GOT_15c;
else next = GOT_10c;

GOT_15c:   if (Q) begin
DC = 1; next = RETURN_10c;
end
else if (D) next = GOT_25c;
else if (N) next = GOT_20c;
else next = GOT_15c;

GOT_20c:   if (Q) begin
DC = 1; next = RETURN_15c;
end
else if (D) begin
DC = 1; next = IDLE;

end
else if (N) next = GOT_25c;
else next = GOT_20c;

For state GOT_5c, output DC 
is only asserted if Q=1

GOT_25c:   if (Q) begin
DC = 1; next = RETURN_20c;
end
else if (D) begin
DC = 1; next = RETURN_5c;
end
else if (N) begin
DC = 1; next = IDLE;
end
else next = GOT_25c;

RETURN_20c:  begin
DD = 1; next = RETURN_10c;
end
RETURN_15c:  begin
DD = 1; next = RETURN_5c;
end
RETURN_10c:  begin
DD = 1; next = IDLE;
end
RETURN_5c:   begin
DN = 1; next = IDLE;
end

default: next = IDLE;
endcase
end

endmodule

L6: 6.111 Spring 2006

Introductory Digital Systems Laboratory

27

Simulation of Mealy Vender
Simulation of Mealy Vender

State

Output

idle

got5c

got20c

rtn5

idle

got15c

rtn15

C

10¢

5¢

(note: outputs should be registered)

L6: 6.111 Spring 2006

Introductory Digital Systems Laboratory

28

Delay Estimation : Simple RC Networks
Delay Estimation : Simple RC Networks

VDD

Vin

V DD

Vout

CL

V DD

R on

(a) Low-to-high

(b) High-to-low

V in

V out

50%

tpHL

tpLH

t

90%

50%

tf

10%

t

tr

review

R

V out

C L

R on

V out

vin

C L

vout

C

L6: 6.111 Spring 2006

tp = ln (2) τ = 0.69 RC
Introductory Digital Systems Laboratory

29

Clocks are Not Perfect: Clock Skew
Clock Skew
Clocks are Not Perfect: 

CLout

D Q

Combinational
Logic

Wire delay

ClkD

In

D

Q

Clk

CLK

CLKD

δ>0
T >
Tcq + Tlogic + Tsu - δ
Tcq,cd + Tlogic,cd > Thold + δ
Introductory Digital Systems Laboratory

L6: 6.111 Spring 2006

30

Positive and Negative Skew
Positive and Negative Skew

In

R1
D Q

CLK

tCLK1

Combinational
Logic

R2
D Q

tCLK2

Combinational
Logic

delay

delay

(a) Positive skew

TCLK + δ
TCLK

3

R3
D Q

• • •

CLK1

1

tCLK3

CLK2

δ

2

+ thδ

Launching edge arrives before the receiving edge

In

R1
D Q

Combinational
Logic

tCLK1

R2
D Q

tCLK2

Combinational
Logic

delay

delay

R3
D Q

tCLK3
CLK

• • •

CLK1

1

(b) Negative skew
Receiving edge arrives before the launching edge

TCLK + δ
TCLK

4

CLK2

2

δ

4

3

L6: 6.111 Spring 2006

Introductory Digital Systems Laboratory

31

Clocks are Not Perfect: Clock Jitter
Clock Jitter
Clocks are Not Perfect: 

2

TCLK

5

CLK

1

3

REGS

In

CLK 
tc-q, tc-q, cd
tsu, thold
tjitter
TCL K 2 t j i t te r
–

q–

tc
>
or

tjitter

6

4
-tjitter

Combinational
Logic 

t logic
t logic, cd

+

t

log

i c  

+

t s u

T tc
>

q–

+

t

log

i c

+

ts u

+

2 t j i t te r

L6: 6.111 Spring 2006

Introductory Digital Systems Laboratory

32

Summary
Summary

(cid:132) Synchronize all asynchronous inputs
(cid:134)Use two back to back registers
(cid:132) Two types of Finite State Machines introduced
(cid:134) Moore – outputs are a function of current state
(cid:134) Mealy – outputs a function of current state and input
(cid:132) A standard template can be used for coding FSMs
(cid:132) Register outputs of combinational logic for critical 
control signals
(cid:132) Clock skew and jitter are important considerations

L6: 6.111 Spring 2006

Introductory Digital Systems Laboratory

33

