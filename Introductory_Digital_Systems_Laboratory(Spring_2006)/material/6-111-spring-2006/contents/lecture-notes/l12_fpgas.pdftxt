L12: Reconfigurable Logic Architectures
L12: Reconfigurable Logic Architectures

Acknowledgements:

Materials in this lecture are courtesy of the following sources and are used with permission.
Frank Honore
Prof. Randy Katz (Unified Microelectronics Corporation Distinguished Professor 
in Electrical Engineering and Computer Science at the University of California, Berkeley) and 
Prof. Gaetano Borriello (University of Washington Department of Computer Science & 
Engineering) From Chapter 2 of R. Katz, G. Borriello. Contemporary Logic Design. 2nd ed. 
Prentice-Hall/Pearson Education, 2005.
L12: 6.111 Spring 2006
Introductory Digital Systems Laboratory

1

History of Computational Fabrics
History of Computational Fabrics

(cid:132) Discrete devices: relays, transistors (1940s-50s)
(cid:132) Discrete logic gates (1950s-60s)
(cid:132) Integrated circuits (1960s-70s)
(cid:134) e.g. TTL packages: Data Book for 100’s of different parts
(cid:132) Gate Arrays (IBM 1970s)
(cid:134) Transistors are pre-placed on the chip & Place and Route 
software puts the chip together automatically – only program the 
interconnect (mask programming)
(cid:132) Software Based Schemes (1970’s- present)
(cid:134) Run instructions on a general purpose core
(cid:132) Programmable Logic (1980’s to present)
(cid:134) A chip that be reprogrammed after it has been fabricated
(cid:134) Examples: PALs, EPROM, EEPROM, PLDs, FPGAs
(cid:134) Excellent support for mapping from Verilog
(cid:132) ASIC Design (1980’s to present)
(cid:134) Turn Verilog directly into layout using a library of standard cells 
(cid:134) Effective for high-volume and efficient use of silicon area

L12: 6.111 Spring 2006

Introductory Digital Systems Laboratory

2

Reconfigurable Logic
Reconfigurable Logic

(cid:132) Logic blocks
(cid:134) To implement combinational
and sequential logic
(cid:132) Interconnect
(cid:134) Wires to connect inputs and
outputs to logic blocks
(cid:132) I/O blocks
(cid:134) Special logic blocks at 
periphery of device for
external connections

(cid:132) Key questions:
(cid:134) How to make logic blocks programmable?
(after chip has been fabbed!)
(cid:134) What should the logic granularity be?
(cid:134) How to make the wires programmable?
(after chip has been fabbed!)
(cid:134) Specialized wiring structures for local
vs. long distance routes?
(cid:134) How many wires per logic block?

n
Inputs

Logic
Logic
D

QSET

Q

CLR

m

Outputs

Configuration

L12: 6.111 Spring 2006

Introductory Digital Systems Laboratory

3

Programmable Array Logic (PAL)
Programmable Array Logic (PAL)

(cid:132) Based on the fact that any combinational logic can be 
realized as a sum-of-products
(cid:132) PALs feature an array of AND-OR gates with 
programmable interconnect

input
signals

AND
array

OR array

output
signals

programming of 
product terms

programming of 
sum terms

L12: 6.111 Spring 2006

Introductory Digital Systems Laboratory

4

Inside the 22v10 PAL
Inside the 22v10 PAL

(cid:132) Each input pin (and its complement) sent to the AND array
(cid:132) OR gates for each output can take 8-16 product terms, depending on output 
pin
(cid:132) “Macrocell” block provides additional output flexibility...

Image removed due to copyright restrictions.

L12: 6.111 Spring 2006

Introductory Digital Systems Laboratory

5

Cypress PAL CE22V10
Cypress PAL CE22V10

From Lattice Semiconductor

Image removed due to copyright restrictions.

Images courtesy of Lattice Semiconductor Corporation. Used with permission.

(cid:132) Outputs may be registered 
or combinational, positive 
or inverted

L12: 6.111 Spring 2006

Introductory Digital Systems Laboratory

6

AntiAnti --FuseFuse --Based Approach (
Based Approach (Actel
Actel ))

Rows of programmable
logic building blocks
+
rows of interconnect

Anti-fuse Technology:
Program Once

Use Anti-fuses to build
up long wiring runs from
short segments

c
i
g
o
L
 
t
s
e
T
 
d
n
a
 
g
n
i
m
m
a
r
g
o
r
P
 
,
s
r
e
f
f
u
B
 
O
/
I

I/O Buffers, Programming and Test Logic

I
/
O
 
B
u
f
f
e
r
s
,
 
P
r
o
g
r
a
m
m
i
n
g
 
a
n
d
 
T
e
s
t
 
L
o
g
i
c

I/O Buffers, Programming and Test Logic

Logic Module
Wiring Tracks
8 input, single output combinational logic blocks
FFs constructed from discrete cross coupled gates

L12: 6.111 Spring 2006

Introductory Digital Systems Laboratory

7

Actel Logic Module
Logic Module
Actel

Combinational block does not have the output FF

Example Gate Mapping

00
01
10
11

Y

GND
A

D
E

B
C

S-R Flip-Flop

00
01
10
11

Q

GND
VDD

S
GND

R
VDD

L12: 6.111 Spring 2006

Introductory Digital Systems Laboratory

8

Actel Routing & Programming
Routing & Programming
Actel

Courtesy of Actel.  Used with permission.

Input Segments

Horizontal
Channel

Inputs
Outputs

Logic 
Module

Precharge
Phase
Vpp/2
Vpp/2

Gnd

Vpp/2

Vpp/2

Vpp/2

Vpp/2

Vpp

Antifuse
shorted

Long Vertical Tracks

Programming an Antifuse
Output Segments
Programming is Permanent (one time)
Courtesy of Actel. Used with permission.
Introductory Digital Systems Laboratory

9

L12: 6.111 Spring 2006

RAM Based Field Programmable 
RAM Based Field Programmable 
Logic  -- Xilinx
Xilinx
Logic 

Vcc

Slew
Rate
Control

Passive
Pull-Up,
Pull-Down

D    Q

Output
Buffer

Pad 

Input
Buffer

Q    D

Delay

I/O Blocks (IOBs)

CLB

CLB

Switch
Matrix

CLB

CLB

Programmable
Interconnect

C1 C2 C3

C4

  H1 DIN S/R EC   
S/R
Control

H
Func.
Gen.

DIN
F'
G'
H'

G'
H'

DIN
F'
G'
H'

H'
F'

SD

Q

D

EC
RD

SD

Q

D

EC
RD

1

S/R
Control

1

Y

X

G
Func.
Gen.

F
Func.
Gen.

G4
G3
G2
G1

F4
F3
F2
F1

  K

Configurable
Logic Blocks (CLBs)
Courtesy of Xilinx. Used with permission.

L12: 6.111 Spring 2006

Introductory Digital Systems Laboratory

10

The Xilinx 4000 CLB
The Xilinx 4000 CLB

Courtesy of Xilinx. Used with permission.

L12: 6.111 Spring 2006

Introductory Digital Systems Laboratory

11

Two 4 -- input Functions, Registered Output
input Functions, Registered Output
Two 4
and a Two Input Function
and a Two Input Function
Courtesy of Xilinx. Used with permission.

L12: 6.111 Spring 2006

Introductory Digital Systems Laboratory

12

55 -- input Function, Combinational Output
input Function, Combinational Output

Courtesy of Xilinx. Used with permission.

L12: 6.111 Spring 2006

Introductory Digital Systems Laboratory

13

LUT Mapping
LUT Mapping

(cid:132) N-LUT direct implementation of a truth table: any 
function of n-inputs.
(cid:132) N-LUT requires 2N storage elements (latches)
(cid:132) N-inputs select one latch location (like a memory)
Inputs

Why Latches and Not Registers?

Courtesy of Xilinx.  
Used with permission.

Output

Latches set by configuration bitstream

4LUT example

L12: 6.111 Spring 2006

Introductory Digital Systems Laboratory

14

Configuring the CLB as a RAM
Configuring the CLB as a RAM

Memory is built using Latches not FFs

Courtesy of Xilinx.  
Used with permission.

16x2

L12: 6.111 Spring 2006

Read is same a LUT Function!
Introductory Digital Systems Laboratory

15

Xilinx 4000 Interconnect
Xilinx 4000 Interconnect

L12: 6.111 Spring 2006

Introductory Digital Systems Laboratory

Courtesy of Xilinx.  
Used with permission.

16

Xilinx 4000 Interconnect Details
Xilinx 4000 Interconnect Details

Wires are not ideal!

L12: 6.111 Spring 2006

Introductory Digital Systems Laboratory

Courtesy of Xilinx.  
Used with permission.

17

Xilinx 4000 Flexible IOB
Xilinx 4000 Flexible IOB

Adjust Transition Time

Outputs through FF or bypassed

Courtesy of Xilinx.  
Used with permission.

Adjust the Sampling Edge

L12: 6.111 Spring 2006

Introductory Digital Systems Laboratory

18

Add Bells & Whistles
Add Bells & Whistles

Hard
Processor 

Gigabit 
Serial

18 Bit

18 Bit

36 Bit

Multiplier
Programmable
Termination

VCCIO

Z

Z

Z
Impedance
Control

I/O

Clock
Mgmt

BRAM

Courtesy of David B. Parlour, ISSCC 2004 Tutorial, “The Reality and Promise of 
  Reconfigurable Computing in Digital Signal Processing.” and Xilinx. Used with permission.

L12: 6.111 Spring 2006

Introductory Digital Systems Laboratory

19

Virtex II CLB (Half Slice Shown)
The The Virtex
II CLB (Half Slice Shown)

L12: 6.111 Spring 2006

Introductory Digital Systems Laboratory

Courtesy of Xilinx.  
Used with permission.

20

Adder Implementation
Adder Implementation

LUT: A⊕B

Cout

B

A

Y = A ⊕ B ⊕ Cin

Dedicated carry logic 

1 half-Slice = 1-bit adder

L12: 6.111 Spring 2006

Introductory Digital Systems Laboratory

Cin

Courtesy of Xilinx.  
Used with permission.

21

Courtesy of Xilinx.  
Used with permission.

Carry Chain
Carry Chain

1 CLB = 4 Slices = 2, 4-bit adders
64-bit Adder: 16 CLBs

A[63:0]

B[63:0]

+

Y[63:0]

Y[64]

CLB15

Y[63:60]

CLB1

Y[7:4]

A[63:60]
B[63:60]

A[7:4]
B[7:4]

A[3:0]
B[3:0]
CLBs must be in same column

CLB0

Y[3:0]

L12: 6.111 Spring 2006

Introductory Digital Systems Laboratory

22

Virtex II Features
II Features
Virtex

Double Data Rate registers

Digital Clock Manager

Embedded Multiplier

L12: 6.111 Spring 2006

Block SelectRAM
Courtesy of Xilinx.  
Used with permission.
Introductory Digital Systems Laboratory

23

Virtex -- II Pro
The Latest Generation: Virtex
II Pro
The Latest Generation: 

FPGA Fabric

Embedded memories

Embedded PowerPc

Hardwired multipliers

High-speed I/O

L12: 6.111 Spring 2006

Introductory Digital Systems Laboratory

24

Courtesy of Xilinx. Used with permission.

FPGA Evolution Summary [Parlour04]
FPGA Evolution Summary [Parlour04]

Distributed RAM

Arithmetic Support

Logic + FF

1000

DSP System 
Design Tools

Block RAM

Hard MAC

Hard CPU

High Speed 
Serial IO

Transistors
x 106

10

0.1
1980

1985
G lu e
L o gic

1995
1990
L o gic
C ore
F u n ctio n ality
Platfor m
Courtesy of Xilinx. Used with permission.(cid:13)(cid:10)

2000
S y ste m
Platfor m

2005
D o m ain 
S p e cific 
Platfor m

L12: 6.111 Spring 2006

Introductory Digital Systems Laboratory

25

Design Flow  -- Mapping
Mapping
Design Flow 

(cid:132) Technology Mapping:  Schematic/HDL to Physical 
Logic units
(cid:132) Compile functions into basic LUT-based groups 
(function of target architecture)

a
c
b

b
d

D

QSET

Q

CLR

LUT

D

QSET

Q

CLR

always @(posedge Clock or negedge Reset)
begin
if (! Reset)
q <= 0;
else
q <= (a & b & c) | (b & d);
end

L12: 6.111 Spring 2006

Introductory Digital Systems Laboratory

26

Design Flow –– Placement & Route
Placement & Route
Design Flow 

(cid:132) Placement – assign logic location on a particular device 

LUT

LUT

LUT

(cid:132) Routing – iterative process to connect CLB inputs/outputs and IOBs. Optimizes 
critical path delay – can take hours or days for large, dense designs

Iterate placement if timing 
not met

Satisfy timing? (cid:198) Generate 
Bitstream to config device

Challenge!  Cannot use full chip for reasonable speeds (wires are not ideal). 
Typically no more than 50% utilization.
Introductory Digital Systems Laboratory

L12: 6.111 Spring 2006

27

Verilog to FPGA
Example: Verilog
to FPGA
Example: 

module adder64 (a, b, sum); 
input  [63:0] a, b;  
output [63:0] sum;  

assign sum = a + b;
endmodule

• Synthesis
• Tech Map
• Place&Route

64-bit Adder Example

Virtex II – XC2V2000

Courtesy of Xilinx.  
Used with permission.

L12: 6.111 Spring 2006

Introductory Digital Systems Laboratory

28

FPGAs Used?
How are FPGAs
Used?
How are 

(cid:132) Prototyping
(cid:134) Ensemble of gate arrays used to emulate a circuit to be manufactured
(cid:134) Get more/better/faster debugging done than with simulation
(cid:132) Reconfigurable hardware
(cid:134) One hardware block used to implement more than one function
(cid:132) Special-purpose computation engines
(cid:134) Hardware dedicated to solving one problem (or class of problems)
(cid:134) Accelerators attached to general-purpose computers (e.g., in a cell 
phone!)

L12: 6.111 Spring 2006

Introductory Digital Systems Laboratory

29

Summary
Summary

(cid:132) FPGA provide a flexible platform for implementing 
digital computing
(cid:132) A rich set of macros and I/Os supported (multipliers, 
block RAMS, ROMS, high-speed I/O)
(cid:132) A wide range of applications from prototyping (to 
validate a design before ASIC mapping) to high-
performance spatial computing
(cid:132) Interconnects are a major bottleneck (physical design  
and locality are important considerations)

“College students will study concurrent programming instead of “C” as their first 
computing experience.”
-- David B. Parlour, ISSCC 2004 Tutorial

L12: 6.111 Spring 2006

Introductory Digital Systems Laboratory

30

