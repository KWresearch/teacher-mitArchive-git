L8/9: Arithmetic Structures 
L8/9: Arithmetic Structures 

Acknowledgements:

Materials in this lecture are courtesy of the following sources and are used with permission.
(cid:190)Rex Min
(cid:190)Kevin Atkinson
(cid:190)Prof. Randy Katz (Unified Microelectronics Corporation Distinguished Professor in Electrical
Engineering and Computer Science at the University of California, Berkeley) and Prof. Gaetano 
Borriello (University of Washington Department of Computer Science & Engineering) from 
Chapter 2 of R. Katz,  G. Borriello. Contemporary Logic Design. 2nd ed. Prentice-Hall/Pearson 
Education, 2005.
(cid:190) J. Rabaey, A. Chandrakasan, B. Nikolic, Digital Integrated Circuits: A Design Perspective
Prentice Hall/Pearson, 2003.

L8/9: 6.111 Spring 2006

Introductory Digital Systems Laboratory

1

Number Systems Basics
Number Systems Basics

How to represent negative numbers?
(cid:132) Three common schemes: sign-magnitude, ones 
complement, twos complement
(cid:132) Sign-magnitude: MSB = 0 for positive, 1 for negative
(cid:134)Range: -(2N-1 – 1) to +(2N-1 – 1)
(cid:134) Two representations for zero: 0000… & 1000…
(cid:134) Simple multiplication but complicated addition/subtraction
_
(cid:132) Ones complement: if N is positive then its negative is N
(cid:134) Example: 0111 = 7,  1000 = -7
(cid:134)Range: -(2N-1 – 1) to +(2N-1 – 1)
(cid:134) Two representations for zero: 0000… & 1111…
(cid:134) Subtraction implemented as addition and negation

L8/9: 6.111 Spring 2006

Introductory Digital Systems Laboratory

2

Twos Complement Representation
Twos Complement Representation

Twos complement = bitwise complement + 1
0111 → 1000 + 1 = 1001 = -7
1001 → 0110 + 1 = 0111 =  7

(cid:131) Asymmetric range:  -2N-1 to +2N-1-1
(cid:131) Only one representation for zero
(cid:131) Simple addition and subtraction
(cid:131) Most common representation

4
+ 3
7

0100
0011
0111

-4
+ (-3)
-7

L8/9: 6.111 Spring 2006

4
- 3
1

0100
1101
10001

1100
1101
11001
[Katz05]
Introductory Digital Systems Laboratory

-4
+ 3
-1

1100
0011
1111

3

Overflow Conditions
Overflow Conditions

Add two positive numbers to get a negative number or two negative numbers 
to get a positive number
-1
+0
-1
0000
0001
0010
0011

+0
0000
0001
0010
0011

1111
1110
1101
1100

-2

1111
1110
1101
1100

-2

-3

+2
+3

+2
+3

+1

+1

-3

-4
-5

-4
-5

-6

-7

1011

1010
1001

1000

-8

0100

+4

0101
0110
0111

+6

+5

+7

-6

-7

1011

1010
1001

1000

-8

0100

+4

0101
0110
0111

+6

+5

+7

5 + 3 = -8!

-7 - 2 = +7!

1 00 0
0 1 1 1
-7
1 0 0 1
5
0 1 0 1
-2
1 1 0 0
3
0 0 1 1
7
1 0 1 1 1
-8
0 1 0 0 0
If carry in to sign equals carry out then can ignore carry out, otherwise have overflow 
L8/9: 6.111 Spring 2006
Introductory Digital Systems Laboratory
4

Binary Full Adder
Binary Full Adder

Ci

A B

Full 
Adder

S
B 
0 
0 
1 
1 
0 
0 
1 
1

CI 
0 
1 
0 
1 
0 
1 
0 
1

A 
0 
0 
0 
0 
1 
1 
1 
1

Co

S 
0 
1 
1 
0 
1 
0 
0 
1

CO 
0 
0 
0 
1 
0 
1 
1 
1

S  =  A ⊕ B ⊕ Ci
=  ABCi + ABCi + ABCi + ABCi

Co =  AB + Ci (A+B)

A B
00
0

A B
00
0

1

0

CI

S

CI

CO

0
1

0
1

01
1

0

01
0

1

11
0

1

11
1

1

10
1

0

10
0

1

L8/9: 6.111 Spring 2006

Introductory Digital Systems Laboratory

5

Ripple Carry Adder Structure
Ripple Carry Adder Structure

Co,3

Co,2

B3

A3

Full 
Adder

S3

B2

A2

Full 
Adder

S2

Co,1

B1

A1

Full 
Adder

S1

Co,0

Ci,0

B0

A0

Full 
Adder

S0

Worst case propagation delay linear with the number of bits
tadder = (N-1)tcarry + tsum

L8/9: 6.111 Spring 2006

Introductory Digital Systems Laboratory

6

Extension to Subtraction
Extension to Subtraction

(cid:190)Under twos complement, subtracting B is the same as 
adding the bitwise complement of B then adding 1
Combination addition/subtraction system:
_
mux selects B for addition, B for subtraction

B3

B3

B2

B2

B1

B1

B0

B0

A3

0    1

A2

0    1

A1

0    1

A0

0    1

Co,3

FA

S3

FA

FA

FA

Co,0

Co,1

Co,2

Add/Subtract

S2

S1

S0

Add 1 for 
subtraction using 
carry in

Overflow occurs if carry in to sign bit differs from final carry out

overflow

L8/9: 6.111 Spring 2006

Introductory Digital Systems Laboratory

7

Comparator (one approach)
Comparator (one approach)

B3

B3

B2

B2

B1

B1

B0

B0

A3

0    1

A2

0    1

A1

0    1

A0

0    1

FA

Co,2

Co,3

FA

FA

FA

Co,0

Co,1

1

S3

S2

S1

S0

N
true if negative 
result

Z

true if zero result

A < B   =   N 
A = B   =   Z
A ≤ B   =   Z + N 

L8/9: 6.111 Spring 2006

Introductory Digital Systems Laboratory

8

Alternate Adder Logic Formulation
Alternate Adder Logic Formulation

How to Speed up the Critical (Carry) Path?
(How to Build a Fast Adder?) 

A

B

Cin

Full 
Adder

Co

S
Generate (G) = AB
Propagate (P) = A ⊕ B

L8/9: 6.111 Spring 2006

Introductory Digital Systems Laboratory

9

Note: can also use P = A + B for Co

Carry Bypass Adder
Carry Bypass Adder

A0

B0

A1

B1

A2

B2

A3

B3

P,G

P,G

P,G

P,G

P0

G0

P1

G1

P2

G2

P3

G3

Can compute P, G 
in parallel for all bits

FA

Ci,0

FA

FA

FA

Co,2

Co,1

Co,0

Co,3

P,G

P,G

P,G

P,G

P0

G0

P1

G1

P2

G2

P3

G3

Ci,0

FA

FA

FA

FA

Co,2

Co,1

Co,0

BP= P0P1P2P3

Co,3

0

1

Key Idea: if (P0 P1 P2 P3) then Co,3 = Ci,0
L8/9: 6.111 Spring 2006
Introductory Digital Systems Laboratory

10

1616 --bit Carry Bypass Adder
bit Carry Bypass Adder

P,G

P,G

BP= P0P1P2P3
P,G

P,G

BP= P4P5P6P7
P,G
P,G

P,G

P,G

Ci,0

FA

FA
Co,0

FA
Co,1

FA
Co,2

0

1

Co,3

FA

FA
Co,4

FA
Co,5

FA
Co,6

0

1

P,G
Co,7 FA

BP= P8P9P10P11
P,G

P,G

P,G

BP= P12P13P14P15
P,G
P,G

P,G

P,G

FA
Co,8

FA
Co,9

FA
Co,10

0

1

Co,11

FA

FA
Co,12

FA
Co,13

FA
Co,14

0

1

Co,15

Assume the following for delay each gate:
P, G from A, B: 1 delay unit
P, G, Ci to Co or Sum for a FA: 1 delay unit
2:1 mux delay: 1 delay unit

What is the worst case propagation delay for the 16-bit adder? 

L8/9: 6.111 Spring 2006

Introductory Digital Systems Laboratory

11

Critical Path Analysis
Critical Path Analysis

BP= P0P1P2P3
P,G

P,G

P,G

P,G

P,G

P,G

BP2= P4P5P6P7
P,G
P,G

Ci,0

FA

FA
Co,0

FA
Co,1

FA
Co,2

0

1

Co,3

FA

FA
Co,4

FA
Co,5

FA
Co,6

0

1

P,G
Co,7 FA

BP3= P8P9P10P11
P,G

P,G

P,G

BP4= P12P13P14P15
P,G
P,G

P,G

P,G

FA
Co,8

FA
Co,9

FA
Co,10

0

1

Co,11

FA

FA
Co,12

FA
Co,13

FA
Co,14

0

1

Co,15

For the second stage,  is the critical path:

BP2 = 0 or BP2 = 1? 
Message: Timing Analysis is Very Tricky –
Must Carefully  Consider Data Dependencies For 
False Paths
Introductory Digital Systems Laboratory

L8/9: 6.111 Spring 2006

12

Lookahead Adder
Carry Lookahead
Adder
Carry 

Re-express the carry logic as follows:

C1 = G0 + P0 C0

C2 = G1 + P1 C1 = G1 + P1 G0 + P1 P0 C0

C3 = G2 + P2 C2 = G2 + P2 G1 + P2 P1 G0 + P2 P1 P0 C0

C4 = G3 + P3 C3 = G3 + P3 G2 + P3 P2 G1 + P3 P2 P1 G0 + P3 P2 P1 P0 C0
…

(cid:131) Each of the carry equations can be implemented in a two-level logic 
network

(cid:131)Variables are the adder inputs and carry in to stage 0

Ripple effect has been eliminated!

L8/9: 6.111 Spring 2006

Introductory Digital Systems Laboratory

13

Lookahead Logic
Carry Lookahead
Logic
Carry 

Pi

Si

Gi

Adder with propagate and 
generate outputs

Later stages have increasingly complex logic

C1

C2

C0
P0
P1
P2
G0
P1
P2

G1
P2

G2

C3

C0
P0
P1
P2
P3
G0
P1
P2
P3
G1
P2
P3
G2
P3

G3

C4

Ai
Bi

Ci

C0
P0
G0

C0
P0
P1
G0
P1

G1

L8/9: 6.111 Spring 2006

Introductory Digital Systems Laboratory

14

Block Generate and Propagate
Block Generate and Propagate

Gj:i and Pj:i denote the Generate and Propagate functions, respectively, for a group of bits
from positions i to j. We call them Block Generate and Block Propagate. Gj:i equals 1 if 
the group generates a carry independent of the incoming carry. Pj:i equals 1 if an 
incoming carry propagates through the entire group. For example, G3:2 is equal to 1 if a 
carry is generated at bit position 3, or if a carry out is generated at bit position 2 and 
propagates through position 3. G3:2 = G3 + P3G2. P3:2 is true if an incoming carry 
propagates through both bit positions 2 and 3. P3:2 = P3P2

C2 =  (G1 + P1 G0 ) + (P1 P0 )C0 =  G1:0 + P1:0 C0

C4  =  G3 + P3 G2 + P3 P2 G1 + P3 P2 P1 G0 + P3 P2 P1 P0 C0

= (G3 + P3 G2 ) + (P3 P2 )Co,1 =  G3:2 + P3:2 C2

=  G3:2 + P3:2(G1:0 + P1:0 C0) = G3:0 + P3:0 C0

The carry out of a 4-bit block can thus be computed using only the block generate and propagate 
signals for each 2-bit section, plus the carry in to bit 0. The same formulation will be used to generate 
the carry out signals for a 16-bit adder using the block generate and propagate from 4-bit sections.

L8/9: 6.111 Spring 2006

Introductory Digital Systems Laboratory

15

More Definitions……
More Definitions

g p,(

)

•

(

g' p'
,

)

=

g
+(

p g' p p'
,

)

The above dot operator obeys the associative property,  but it is not commutative

(G3: 2,P3: 2) = (G3,P3) • (G2,P2)

(

Co 3,

0,

)

=

(

(

G3 P 3,

) G2 P 2,
•
(

) G1 P 1,
•
(

) G0 P 0,
(
•

)
)

•

(

0,
C i 0,

)

(

G3 :0 P3 :0
,

)

=

=

[

(

) G2 P2,
G1 P1,
G3 P 3,
(
•
(
)
]
(
[
•
) G1 :0 P1 :0
G 3 :2 P3 :2
,
•
(
)
,

) G0 P0,
•
(

)

]

(

Co k,

0,

)

=

(

(

Gk Pk,

) Gk
(
•

,

Pk

1–

) … G0 P0,
•
(
•

1–

)

) • C i 0,
0,
(

)

L8/9: 6.111 Spring 2006

Introductory Digital Systems Laboratory

16

Logarithmic Look --Ahead Adder
Ahead Adder
Logarithmic Look

A0

A1

A2

A3

F

A4
A5
tp: O(N)

A6

A7

A0
A1
A2
A3
A4
A5
A6
A7

F

tp:O(log2N)

L8/9: 6.111 Spring 2006

Introductory Digital Systems Laboratory

17

bit Kogge --Stone Tree Adder
1616 --bit Kogge
Stone Tree Adder

Sum Logic

0
S

1
S

2
S

3
S

4
S

5
S

6
S

7
S

8
S

9
S

0
1
S

1
1
S

2
1
S

3
1
S

4
1
S

5
1
S

)
0
B
 
,
0
A
(

)
1
B
 
,
1
A
(

)
2
B
 
,
2
A
(

)
3
B
 
,
3
A
(

)
4
B
 
,
4
A
(

)
5
B
 
,
5
A
(

)
6
B
 
,
6
A
(

)
7
B
 
,
7
A
(

)
8
B
 
,
8
A
(

)
9
B
 
,
9
A
(

)
0
1
B
 
,
0
1
A
(

)
1
1
B
 
,
1
1
A
(

)
2
1
B
 
,
2
1
A
(

)
3
1
B
 
,
3
1
A
(

)
4
1
B
 
,
4
1
A
(

)
5
1
B
 
,
5
1
A
(

Propagate, Generate Logic

L8/9: 6.111 Spring 2006

Introductory Digital Systems Laboratory

18

Adder Performance
Adder Performance

Ripple

Bypass

Select

Lookahead

Delay vs.  number of bits 

L8/9: 6.111 Spring 2006

Introductory Digital Systems Laboratory

19

Addition of M, N --bit Numbers
bit Numbers
Addition of M, N

IN1N-1
IN0N-1

IN1N-2
IN0N-2

IN11
IN01

IN10
IN00

+

+

+

+

IN2N-1

IN2N-2

IN21

IN20

+

+

+

+

IN3N-1

IN3N-2

IN31

IN30

+

+

+

+

INM-1N-1

INM-1N-2

INM-11

INM-10

+

+

+

+

Cin =0

Cin =0

Cin =0

Cin =0

L8/9: 6.111 Spring 2006

Introductory Digital Systems Laboratory

20

Lookahead Schematic
1616 --bit Carry 
bit Carry Lookahead
Schematic

181 configured for A+B: 
M = 0, S3-0 = 1001
A3:0
B3:0

A7:4

B7:4

A11:8 B11:8

A15:12 B15:12

Cn

Cn+4

181
P G

Cn

Cn+4

181
P G

Cn

Cn+4

181
P G

Cn

Cn+4

181
P G

S3:0

S7:4

P3:0

S11:8

S15:12

G3:0

Cin

P0  G0  P1  G1  P2  G2  P3  G3
G
182
P
Cn+y

Cn+z

Cn

Cn+x

182 computes Cin for later stages, 
using block G & P from earlier stages

L8/9: 6.111 Spring 2006

Introductory Digital Systems Laboratory

21

Binary Multiplication
Binary Multiplication

(cid:190) Partial product computation
is simple (single and gate)

x3

FA

z6

z7

L8/9: 6.111 Spring 2006

x3

x2

x1

y0

x0

y1

x0

z0

y2

HA

z1

x3

HA

x2

FA

x1

FA

x1

FA

x0

HA

z2

y3

x2

FA

x1

FA

x0

HA

x3

FA

x2

FA

z5
z4
z3
Introductory Digital Systems Laboratory

22

A Serial (Magnitude) Multiplier
A Serial (Magnitude) Multiplier

0

0

0

0

x3
x2
x1

x0

Shift/LD

0
1

0
1

0
1

0
1

0
1

0
1

0
1

0
1

D

Q

D

Q

D

Q

D

Q

D

Q

D

Q

D

Q

D

Q

CLK

0

xBus

[7]

[6]

[5]

[4]

[3]

[2]

[1]

[0]

Shift

rst

t
u
o
_
d
d
a

8

+

D Q

acc_out

8

xBus

8

Shift

LD

D Q

XY

CLK

yReg

CLK

Q

D

Q

D

Q

D

Q

D

CLK

D
L
/
t
f
i
h
S

0 1

0 1

0 1

3
Y

0
Y

1
Y

2
Y

L8/9: 6.111 Spring 2006

Introductory Digital Systems Laboratory

23

Timing Diagram
Timing Diagram

CLK

Shift

xreg

yreg

Acc_out

0 0 0 0 x3 x2 x1 x0

0 0 0 x3 x2 x1 x0 0

0 0 x3 x2 x1 x0 0 0

0 x3 x2 x1 x0 0 0 0

0 0 0 0 x3 x2 x1 x0

y0 y1 y2 y3

y1 y2 y3 X

y2 y3 X X

y3 X X X

y0 y1 y2 y3

00000000

Accum_1

Accum_2

Accum_3

00000000

X*Y

PRODUCT

PRODUCT

L8/9: 6.111 Spring 2006

Introductory Digital Systems Laboratory

24

Verilog of Serial Multiplier 
of Serial Multiplier 
Verilog

module serialmult(shift, clk, 
x, y, xy);
input shift, clk;
input [3:0] x, y;
output [7:0] xy;
reg [7:0] xReg;
reg [3:0] yReg;
reg [7:0] xBus, acc_out, 
xy_int;
wire[7:0] add_out;
assign add_out = xBus + 
acc_out;
assign xy = xy_int;

always @ (yReg[0] or xReg) 
begin
if (yReg[0] == 1'b0) xBus = 
8'b0;
else xBus = xReg;
end

always @ (posedge clk) 

begin
if (shift == 1'b0) 
begin 
xReg <= {4'b0, x};
yReg <= y;
acc_out <= 8'b0;
xy_int <= add_out;
end
else 
begin          
xReg <= {xReg[6:0], 1'b0};
yReg <= {y[3], yReg[3:1]};
acc_out <= add_out;
xy_int <= xy;
end // if shift
end // always
endmodule

L8/9: 6.111 Spring 2006

Introductory Digital Systems Laboratory

25

Simulation
Simulation

L8/9: 6.111 Spring 2006

Introductory Digital Systems Laboratory

26

Twos Complement Multiplication
Twos Complement Multiplication

x3

x2

x1

y0

x0

y1

x0

z0

y2

HA

z1

x3

1

FA

x2

FA

x1

FA

x1

FA

x0

HA

z2

y3

x2

FA

x1

FA

x0

HA

x3

FA

x2

FA

z5
z4
z3
Introductory Digital Systems Laboratory

27

1

HA

z7
L8/9: 6.111 Spring 2006

x3

FA

z6

Summary
Summary

(cid:132) Performance of arithmetic blocks dictate the 
performance of a digital system
(cid:132) Architectural and logic transformations can 
enable significant speed up (e.g., adder delay 
from O(N) to O(log2(N))
(cid:132) Similar concepts and formulation can be applied 
at the system level
(cid:132) Timing analysis is tricky: watch out for false 
paths!
(cid:132) Area-Delay trade-offs (serial vs. parallel 
implementations)

L8/9: 6.111 Spring 2006

Introductory Digital Systems Laboratory

28

