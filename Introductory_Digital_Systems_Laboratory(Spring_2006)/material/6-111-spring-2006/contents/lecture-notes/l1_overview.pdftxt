L1: 6.111 Course Overview
L1: 6.111 Course Overview

Acknowledgements: 

Materials in this lecture are courtesy of the following sources and are used with
permission.
 

Rex Min
 
J. Rabaey, A. Chandrakasan, B. Nikolic. Digital Integrated Circuits: A Design Perspective.
Prentice Hall/Pearson, 2003.

L1: 6.111 Spring 2006

Introductory Digital Systems Laboratory

1

Recommended Books
Recommended Books

(cid:132) Logic Design:
(cid:134) Randy Katz, Gaetano Borriello, Contemporary Logic Design, 
Pearson Education, 2005 

(cid:132) Verilog: there are plenty of good Verilog books and on-line 
resources. We recommend the book below for a basic 
introduction to Verilog:
(cid:134) Samir Palnitkar, Verilog HDL, Pearson Education (2nd edition)

L1: 6.111 Spring 2006

Introductory Digital Systems Laboratory

2

6.111 Goals and Prerequisite
6.111 Goals and Prerequisite

(cid:132) Design and Implement Complex Digital Systems
(cid:134) Fundamentals of logic design : combinational and sequential blocks
(cid:134) System integration with multiple components (memories, discrete 
components, FPGAs, etc.)
(cid:134) Use a Hardware Design Language (Verilog) for digital design
(cid:134) Interfacing issues with analog components (ADC, DAC, sensors, etc.)
(cid:134) Understand different design metrics: component/gate count and 
implementation area, switching speed, energy dissipation and power
(cid:134) Understand different design methodologies and mapping strategies
(discrete logic, FPGAs vs. custom integrated circuits)
(cid:134) Design for test 
(cid:134) Demonstrate a large scale digital or mixed-signal system
(cid:132) Prerequisite
(cid:134) Prior digital design experience is NOT Required
(cid:134) 6.004 is not a prerequisite!
(cid:129) Take 6.004 before 6.111 or
(cid:129) Take 6.004 after 6.111 or
(cid:129) Take both in the same term
(cid:134) Must have basic background in circuit theory
(cid:134) Some basic material might be a review for those who have taken 6.004

L1: 6.111 Spring 2006

Introductory Digital Systems Laboratory

3

Overview of Labs
Overview of Labs

(cid:132) Lab 1: Basics of Digital Logic (Discrete Devices)
(cid:134) Learn about lab equipment in the Digital Lab (38-600): oscilloscopes 
and logic analyzers
(cid:134) Experiment with logic gates, flip-flops, device characterization
(cid:134) Introduction to Verilog
(cid:132) Lab 2: Simple FSM (Traffic Light Controller)
(cid:134) Design and implement simple Finite State Machines (FSM)
(cid:134) Use Verilog to program an FPGA
(cid:134) Report and its revision will be evaluated for CI-M 
(cid:132) Lab 3: Simple FSM (Memory Tester)
(cid:134) Learn how to use an SRAM and testing techniques
(cid:132) Lab 4: Complex FSM (Pong Game)
(cid:134) Design a system with multiple FSMs (Major/Minor FSM)
(cid:134) Video interface

L1: 6.111 Spring 2006

Introductory Digital Systems Laboratory

4

Final Project
Final Project

(cid:132) Done in groups of two or three 
(cid:132) Open ended
(cid:132) You and the staff negotiate a project proposal
(cid:134) Must emphasize digital concepts, but inclusion of analog interfaces 
(e.g., data converters, sensors or motors) common and often 
desirable
(cid:134) Proposal Conference
(cid:134) Design Review(s)
(cid:132) Design presentation in class (% of the final grade for the in-
class presentation)
(cid:132) Top projects will be considered for design awards
(cid:132) Staff will provide help with project definition and scope, 
design, debugging, and testing
(cid:132) It is extremely difficult for a student to receive an A without 
completing the final project. 

L1: 6.111 Spring 2006

Introductory Digital Systems Laboratory

5

Grading and Collaboration
Grading and Collaboration

10%
3%

(cid:132) Grading Policy
(cid:134) Approximate breakdown:
(cid:122) Quiz
(cid:122) 3 Problem Sets
(cid:122) 4 Lab exercises      
(cid:129) Lab 1
(cid:129) Lab 2
(cid:129) Lab 3 
(cid:129) Lab 4 
(cid:122) Writing (Lab 2 revision- part of CIM requirement)
(cid:122) Participation (lecture, recitation, project presentations)    
(cid:122) Final Project   
(cid:132) We impose late penalties
(cid:134) Labs are penalized 20% per day
(cid:134) Final Project  MUST be done on time
(cid:132) Collaboration
(cid:134) Discuss labs with anyone (staff, former students, other students, etc.)
(cid:122) Then do them individually
(cid:122) Do not copy anything, including computer files, from anyone else
(cid:134) Collaboration (with your partners) on the project is desirable
(cid:122) Project reports should be joint with individual authors specified for each section
(cid:122) Copy anything you want (with attribution) for your project report

9%
10%
7%
11%
10%
3%
37%             

L1: 6.111 Spring 2006

Introductory Digital Systems Laboratory

6

The First Computer
The First Computer

Photograph of the 
Babbage Difference Engine.
Image removed due to 
copyright restrictions.

The Babbage
Difference Engine
(1834)
25,000 parts
cost: £17,470

(cid:132) The first digital systems were mechanical and used base-
10 representation. 
(cid:132) Most popular applications: arithmetic and scientific 
computation
L1: 6.111 Spring 2006

Introductory Digital Systems Laboratory

7

Meanwhile, in the World of Theory……
Meanwhile, in the World of Theory

Photograph of 
George Boole.
Image removed due to 
copyright restrictions.

AND

OR

NOT

0
0
0
1
1
0
1
1

0

0

0

1

0
0
0
1
1
0
1
1

0

1

1

1

0

1

1

0

(cid:132) 1854: George Boole shows that logic is math, not just 
philosophy!
(cid:132) Boolean algebra: the mathematics of binary values

L1: 6.111 Spring 2006

Introductory Digital Systems Laboratory

8

Key Link Between Logic and Circuits
Key Link Between Logic and Circuits

0
1

1
0

0

1

+

The 
Vacuum 
Tube

Lee de Forest, 1906

Digital 
Electronics

Claude Shannon 
Courtesy of Jonah Sacks. Used with permission. 

(cid:132) Despite existence of relays and introduction of vacuum tube in 1906, 
digital electronics did not emerge for thirty years!
(cid:132) Claude Shannon notices similarities between Boolean algebra 
and electronic telephone switches
(cid:132) Shannon’s 1937 MIT Master’s Thesis introduces the world to 
binary digital electronics
L1: 6.111 Spring 2006
Introductory Digital Systems Laboratory

9

Evolution of Digital Electronics
Evolution of Digital Electronics

Vacuum Tubes

Transistors 

VLSI Circuits

ENIAC, 1946

First Transistor
Bell Labs, 1948

4004, 1971

UNIVAC, 1951
1900 adds/sec

IBM System/360, 1964
500,000 adds/sec

Intel Itanium, 2003
2,000,000,000 
adds/sec

L1: 6.111 Spring 2006

Introductory Digital Systems Laboratory

10

Building Digital Systems
Building Digital Systems

(cid:132) Goal of 6.111: Building binary digital solutions to 
computational problems

Problem Statement
algorithm selection,
flowcharts, etc.

Behavioral Description
conversion to binary,
Booelan algebra

(cid:132) Labs & Design project
(cid:132) Product specs

(cid:132) Algorithms, RTL, etc.
(cid:132) Flowcharts
(cid:132) State transition diagrams

Boolean Logic and State

(cid:132) Logic equations
(cid:132) Circuit schematics

device selection
and wiring

Hardware Implementation

(cid:132) TTL Gates (AND,OR,XOR…)
(cid:132) Modules (counter, shifter,…)
(cid:132) Programmable Logic

L1: 6.111 Spring 2006

Introductory Digital Systems Laboratory

11

Building Digital Systems with HDLsHDLs
Building Digital Systems with 

(cid:132) Logic synthesis using a Hardware Description Language (HDL) 
automates the most tedious and error-prone aspects of design

Problem Statement
algorithm selection,
flowcharts, etc.

Behavioral Description
software-like
programming

HDL Description

automated synthesis

(cid:132) Labs & Design project
(cid:132) Product specs

(cid:132) Algorithms, RTL, etc.
(cid:132) Flowcharts
(cid:132) State transition diagrams

(cid:132) Verilog code
(cid:132) VHDL code

Hardware Implementation

(cid:132) Programmable Logic
(cid:132) Custom ASICs

L1: 6.111 Spring 2006

Introductory Digital Systems Laboratory

12

Verilog and VHDL
and VHDL
Verilog

VHDL
(cid:132) Commissioned in 1981 by 
Department of Defense; 
now an IEEE standard
(cid:132) Initially created for ASIC 
synthesis

(cid:132) Strongly typed; potential 
for verbose code

(cid:132) Strong support for package 
management and large 
designs

Verilog
(cid:132) Created by Gateway Design 
Automation in 1985; 
now an IEEE standard
(cid:132) Initially an interpreted 
language for gate-level 
simulation
(cid:132) Less explicit typing (e.g., 
compiler will pad arguments 
of different widths)
(cid:132) No special extensions for 
large designs

Hardware structures can be modeled effectively in either 
VHDL and Verilog. Verilog is similar to c and a bit easier to learn.

L1: 6.111 Spring 2006

Introductory Digital Systems Laboratory

13

Levels of Modeling in Verilog
Verilog
Levels of Modeling in 

(cid:132) Behavioral or Algorithmic Level
(cid:134) Highest level in the Verilog HDL
(cid:134) Design specified in terms of algorithm (functionality) without hardware 
details. Similar to “c” type specification
(cid:134) Most common level of description
(cid:132) Dataflow Level
(cid:134) The flow of data through components is specified based on the idea of how 
data is processed 
(cid:132) Gate Level
(cid:134) Specified as wiring between logic gates
(cid:134) Not practical for large examples
(cid:132) Switch Level
(cid:134) Description in terms of switching (modeling a transistor)
(cid:134) No useful in general logic design – we won’t use it

A design mix and match all levels in one design is possible.  
In general Register Transfer Level (RTL) is used for a 
combination of Behavioral and Dataflow descriptions

L1: 6.111 Spring 2006

Introductory Digital Systems Laboratory

14

Verilog HDLHDL
Verilog

(cid:132) Misconceptions
(cid:134) The coding style or clarity does not matter as long as it works 
(cid:134) Two different Verilog encodings that simulate the same way will 
synthesize to the same set of gates
(cid:134) Synthesis just can’t be as good as a design done by humans
(cid:122) Shades of assembly language versus a higher level language
(cid:132) What can be Synthesized
(cid:134) Combinational Functions
(cid:122) Multiplexors, Encoders, Decoders, Comparators, Parity Generators, 
Adders, Subtractors, ALUs, Multipliers
(cid:122) Random logic
(cid:134) Control Logic
(cid:122) FSMs

(cid:132) What can’t be Synthesized
(cid:134) Precise timing blocks (e.g., delay a signal by 2ns)
(cid:134) Large memory blocks (can be done, but very inefficient)
Understand what constructs are used in 
simulation vs. hardware mapping 
Introductory Digital Systems Laboratory

L1: 6.111 Spring 2006

15

Embedded Digital System
Embedded Digital System

Analog Inputs
(sensors, audio, 
video, tablet)

Digital Inputs
(peripherals, 
buses, switches)

A/D

digitize

synchronize

Sync.

Memory

D/A

Control

Data 
Processing

Analog 
Outputs
(actuators, motors, 
multimedia) 

Digital
Outputs
(peripherals,
buses, lights) 

(cid:132) Digital processing systems consist of a datapath, memory, and control. 
Early machines for arithmetic had insufficient memory, and often
depended on users for control
(cid:132) Today’s digital systems are increasingly embedded into everyday places
and things
(cid:132) Richer interaction with the user and environment

L1: 6.111 Spring 2006

Introductory Digital Systems Laboratory

16

TI Digital Camera Controller
TI Digital Camera Controller

Motors and Mechanical Sensors

Audio/Video In

Memory Subsystem
Courtesy of Texas Instruments. Used with permission.

Peripheral
Interfaces

L1: 6.111 Spring 2006

Introductory Digital Systems Laboratory

17

RealReal --World Performance Metrics
World Performance Metrics

Cost

Speed

Energy

commodity products

scientific computing,
simulation

portable applications

(cid:132) Commercial digital designs seek the most appropriate 
trade-offs for the target application…
(cid:132) …keeping time-to-market in mind

L1: 6.111 Spring 2006

Introductory Digital Systems Laboratory

18

Verification and Testing
Verification and Testing

(cid:132) Design can be fun. Verification/testing is hard work.
(cid:132) Verification by simulation (and formally through test 
benches) is a critical part of the design process.
(cid:132) The physical hardware must be tested to debug the 
mapping process and manufacturing defects.  
(cid:132) Physical realizations often do not allow access to internal 
signals. We will introduce formal methods to observe and 
control internal state. 

Verification and Design for Test (DFT) are important 
components of digital design

L1: 6.111 Spring 2006

Introductory Digital Systems Laboratory

19

The Inverter: Voltage Transfer Characteristic
The Inverter: Voltage Transfer Characteristic

IN

OUT

Digital circuits per form operations on logical  (or Boolean) variables
A  logical variable is a mathematical abstraction. In a physical 
implementation, such a variable is represented by an electrical quantity 

Truth Table
IN
OUT
1
0
0
1

V(y)

V OH

V OL

f

V(y)=V(x)

(Switching Threshold)

VM

VOH = f (VOL)
VOL = f (VOH)
VM = f (VM)

V OL

V OH
Nominal Voltage Levels
Introductory Digital Systems Laboratory

V(x)

L1: 6.111 Spring 2006

20

Example Noise Sources in Digital Circuits
Example Noise Sources in Digital Circuits

v( t)

VDD

Capacitive coupling

Power and ground
noise

(cid:132) Noise sources: coupling, cross talk, supply noise, etc.
(cid:132) Digital circuits must be robust against such noise 
sources

L1: 6.111 Spring 2006

Introductory Digital Systems Laboratory

21

The Inverter: Noise Margin 
The Inverter: Noise Margin 

IN

OUT

Truth Table
OUT
IN
1
0
0
1

"1"

"0"

VOH
VIH
Undefined
Region

VIL
VOL

V(y)
VOH

VOL

Slope = -1

Slope = -1

NML= VIL -VOL
NMH= VOH -VIH

VOL

V
IL

VIH

VOH

V(x)

(cid:131) Large noise margins protect against various noise sources

L1: 6.111 Spring 2006

Introductory Digital Systems Laboratory

22

Regenerative Property
Regenerative Property

A chain of inverters

v0

v1

v2

v3

v4

v5

v6

out
v3

v1

f ( v)

Simulated response

fin v( v)

)
t
l
o
V
(
 
V

5

3

1

v0

v1

v2

v0
in
t (nsec)
| Voltage gain | should be  > 1 between logic  states
L1: 6.111 Spring 2006
Introductory Digital Systems Laboratory

6

8

2 1

0

2

4

v 2

10

23

Lab Hours, Equipment, Computers
Lab Hours, Equipment, Computers

(cid:132) The normal lab hours are (please be out by the indicated 
time):
(cid:122) Monday through Thursday – 9:00 AM to 11:45 PM
(cid:122) Friday – 9:00 AM to 5:15 PM
(cid:122) Saturday – CLOSED
(cid:122) Sunday – noon to 11:45 PM

(cid:132) Please do not move or reconfigure computers and other lab equipment 
(logic analyzers, scopes, power supplies, etc.). Please turn off the 
power switch for the labkit when you are done for the day. 
(cid:132) Please report any equipment malfunctions (Logic Analyzers, 
Computers, labkit, etc.) by tagging such equipment.

(cid:132) We will use the following tools installed on the lab PCs (courtesy of 
Intel):
(cid:134) ModelSim (powerful front-end simulator for Verilog), Xilinx ISE (software for 
Xilinx FPGAs), Office (Microsoft word, power point, etc.)
(cid:132) You can use WinSCP to transfer files between the lab PCs and the MIT server.
(cid:132) Use a USB flash drive (provided with your kit) to save your work
periodically
(cid:132) On MIT server use ‘setup 6.111’- ‘setup 6.111’ sources /mit/6.111/.attachrc 
which attaches 6.111-nfs and sources /mit/6.111-nfs/.attachrc which 
sets up your path and environment variables, etc.

L1: 6.111 Spring 2006

Introductory Digital Systems Laboratory

24

The 6.111 Lab   
The 6.111 Lab   

Courtesy of Tony Rinaldo.  Used with permission.
(cid:132) Labkit based on a state-of-the-art Xilinx FPGA (6 Million gates)
(cid:134) Built-in audio/video interfaces, flash memory, high-speed SRAM
(cid:134) Advanced projects in audio/video, wireless, graphics, etc. 
(cid:132) State-of-the-art testing equipment (logic analyzers, scopes, 
computers)

L1: 6.111 Spring 2006

Introductory Digital Systems Laboratory

25

