L2: Combinational Logic Design  
L2: Combinational Logic Design  
(Construction and Boolean Algebra)
(Construction and Boolean Algebra)

Acknowledgements: 

Materials in this lecture are courtesy of the following sources and are used with permission.
 

Prof. Randy Katz (Unified Microelectronics Corporation Distinguished Professor in Electrical
Engineering and Computer Science at the University of California, Berkeley) and Prof. Gaetano
Borriello (University of Washington Department of Computer Science & Engineering) from Chapter 2
of R. Katz, G. Borriello. Contemporary Logic Design. 2nd ed. Pentice-Hall/Pearson Education, 2005.

J. Rabaey, A. Chandrakasan, B. Nikolic. Digital Integrated Circuits: A Design Perspective.
Prentice Hall/Pearson, 2003.

L2: 6.111 Spring 2006

Introductory Digital Systems Laboratory

1

Review: Noise Margin 
Review: Noise Margin 

IN

OUT

Truth Table
OUT
IN
1
0
0
1

"1"

"0"

VOH
VIH
Undefined
Region

VIL
VOL

V(y)
VOH

VOL

Slope = -1

Slope = -1

NML= VIL -VOL
NMH= VOH -VIH

VOL

V
IL

VIH

VOH

V(x)

(cid:131) Large noise margins protect against various noise sources

L2: 6.111 Spring 2006

Introductory Digital Systems Laboratory

2

MOS Technology: The NMOS Switch
MOS Technology: The NMOS Switch
gate

source

drain

D

N+

N+

G

VT = 0.5V

P-substrate
Vs

OFF

Switch
Model

S

RNMOS
VGS < VT

ON

RNMOS
VGS > VT

L2: 6.111 Spring 2006

NMOS ON when Switch Input is High
Introductory Digital Systems Laboratory

3

NMOS Device Characteristics 
NMOS Device Characteristics 

x 10-4

6

5

4

)
A
(
3

I

D
2

1

0
0

Resistive

VGS= 2.5 V

Saturation
VGS= 2.0 V

VGS= 1.5 V

VGS= 1.0 V

0.5

1

VDS (V)

1.5

2

2.5

body 

source 

polysilicon gate

drain

 

p+ 

n 

G

gate 

n+ 

n+ 

n+ 

p 

inversion layer� 
channel 

gate oxide 

ID
VT = 0.5V

D

S

+
VGS

-

(cid:190) MOS is a very non-linear. 
(cid:190) Switch-resistor model 
sufficient for first order analysis.

L2: 6.111 Spring 2006

Introductory Digital Systems Laboratory

4

PMOS: The Complementary Switch
PMOS: The Complementary Switch

gate

N-substrate

VDD

OFF

source

P+

Switch
Model

drain

P+

G

S

D

VT = -0.5V

RPMOS
VGS > VT

ON

RPMOS
VGS < VT

PMOS ON when Switch Input is Low
L2: 6.111 Spring 2006
Introductory Digital Systems Laboratory

5

The CMOS Inverter
The CMOS Inverter

VDD
S

D

D

S

G

G

OUT

IN

Switch Model
VDD

RPMOS

OUT
RNMOS

IN

IN

Rail-to-rail Swing in CMOS

L2: 6.111 Spring 2006

Introductory Digital Systems Laboratory

6

Inverter VTC: Load Line Analysis
Inverter VTC: Load Line Analysis

ID n

Vi n =  0

Vi n =  2.5

PMOS

Vi n = 0.5

Vin  = 2

NMOS

Vi n = 1

Vi n = 1.5

Vi n =  1.5

Vi n =  1

Vin  = 1.5

Vin  = 2
Vi n = 2.5

Vi n =  1

Vi n = 0.5
Vi n = 0

Vout

VDD
S

OUT

D

D

S

G

G

IN

CMOS gates have:
(cid:131) Rail-to-rail swing (0V to VDD)
(cid:131) Large noise margins
(cid:131) “zero” static power dissipation

2 .5

2

1 .5

)
V
(
t
u
o
V

1

0 .5

0

0

0 .5

1

L2: 6.111 Spring 2006

Introductory Digital Systems Laboratory

1 .5

2

2 .5

V

 (V)
in

7

Possible Function of Two Inputs
Possible Function of Two Inputs

There are 16 possible functions of 2 input variables:

X
Y

F

X
0
0
1
1

0
0
0
0

Y
0
1
0
1
0
X AND Y

0
0
0
1

0
0
1
0

X

0
0
1
1

0
1
0
0

Y

16 possible functions (F0–F15)
1
1
1
1
0
0
0
1
1
1
0
0
0
0
0
1
1
0
0
1
1
1
0
1
0
1
0
1

1
1
0
0

1
1
0
1

1
1
1
0

1
1
1
1

1

X XOR Y
X OR Y

X = Y

X NOR Y
NOT (X OR Y)

NOT Y

NOT X

X NAND Y
NOT (X AND Y)

In general, there are 2 (2^n) functions of n inputs

L2: 6.111 Spring 2006

Introductory Digital Systems Laboratory

8

Gate

NAND

AND

NOR

OR

Common Logic Gates
Common Logic Gates

Symbol

X
Y

X
Y

X
Y

X
Y

Z

Z

Z

Z

Truth-Table Expression
X
Y
Z
0
0
1
0
1
1
1
0
1
1
1
0

Z = X • Y

X
0
0
1
1

X
0
0
1
1

X
0
0
1
1

Y
0
1
0
1

Y
0
1
0
1

Y
0
1
0
1

Z
0
0
0
1

Z
1
0
0
0

Z
0
1
1
1

Z = X • Y

Z = X + Y

Z = X + Y

L2: 6.111 Spring 2006

Introductory Digital Systems Laboratory

9

Exclusive (N)OR Gate
Exclusive (N)OR Gate

XOR
(X ⊕ Y)

XNOR

(X ⊕ Y)

X
Y

X
Y

Z

Z

X
0
0
1
1

X
0
0
1
1

Y
0
1
0
1

Y
0
1
0
1

Z
0
1
1
0

Z
1
0
0
1

Z = X Y + X Y
X or Y but not both 
("inequality", "difference")

Z = X Y + X Y
X and Y the same 
("equality")

Widely used in arithmetic structures such as adders and multipliers

L2: 6.111 Spring 2006

Introductory Digital Systems Laboratory

10

Generic CMOS Recipe
Generic CMOS Recipe

Vdd

A1
.
.
.
An

.
.
.

.
.
.

pullup: make this connection
when we want F(A1,…,An) = 1

F(A1,…,An)
pulldown: make this connection
when we want F(A1,…,An) = 0

Note: CMOS gates 
result in inverting 
functions!
(easier to build NAND 
vs. AND)

A
B

A

B

A

PDN
B

PUN

O

CL

A   B   PDN  PUN     O
1
0    0     0ff      0n
0    1     0ff      0n
1
1    0     0ff      0n
1
0ff       0
1    1     0n

How do you build a 2-input NOR Gate?

L2: 6.111 Spring 2006

Introductory Digital Systems Laboratory

11

Theorems of Boolean Algebra (I)
Theorems of Boolean Algebra (I)

(cid:132) Elementary
1.   X + 0 = X
2.   X + 1 = 1
3.   X + X = X
4. (X) = X
5.   X + X = 1
(cid:132) Commutativity:
6.   X + Y = Y + X
(cid:132) Associativity:
7.   (X + Y) + Z = X + (Y + Z)
(cid:132) Distributivity:
8.   X • (Y + Z) = (X • Y) + (X • Z)
(cid:132) Uniting:
9.   X • Y + X • Y = X
(cid:132) Absorption:
10. X + X • Y = X
11. (X + Y) • Y = X • Y

1D.   X • 1 = X
2D.   X • 0 = 0
3D.   X • X = X

5D.   X • X = 0

6D.   X • Y = Y • X

7D.   (X • Y) • Z = X • (Y • Z)

8D.   X + (Y • Z) = (X + Y) • (X + Z)

9D.   (X + Y) • (X + Y) = X

10D.   X • (X + Y) = X
11D.   (X • Y) + Y = X + Y

L2: 6.111 Spring 2006

Introductory Digital Systems Laboratory

12

Theorems of Boolean Algebra (II)
Theorems of Boolean Algebra (II)

12D.   (X + Y) • (X + Z) =                               
X + (Y • Z)

14D. (X • Y • ...) = X + Y + ...

13D.  (X + Y) • (Y + Z) • (X + Z) =
(X + Y) • (X + Z)

(cid:132) Factoring:
12. (X • Y) + (X • Z) =
X • (Y + Z)
(cid:132) Consensus:
13. (X • Y) + (Y • Z) + (X • Z) =  
X • Y + X • Z
(cid:132) De Morgan's:
14. (X + Y + ...) = X • Y • ...
(cid:132) Generalized De Morgan's:
15. f(X1,X2,...,Xn,0,1,+,•) =  f(X1,X2,...,Xn,1,0,•,+)
(cid:132) Duality
(cid:134) Dual of a Boolean expression is derived by replacing • by +, + by •, 0 
by 1, and 1 by 0, and leaving variables unchanged
(cid:134) f (X1,X2,...,Xn,0,1,+,•) ⇔ f(X1,X2,...,Xn,1,0,•,+)

L2: 6.111 Spring 2006

Introductory Digital Systems Laboratory

13

Simple Example: One Bit Adder
Simple Example: One Bit Adder

(cid:132) 1-bit binary adder
(cid:134) inputs: A, B, Carry-in
(cid:134) outputs: Sum, Carry-out
Sum-of-Products Canonical Form

A
B
Cin

S
Cout

A B
0
0
0
0
1
0
0
1
0
1
1
0
1
1
1
1

Cin S Cout
0
0
0
1
1
0
0
1
0
1
0
1
0
1
0
1
0
1
0
0
1
1
1
1

S = A B Cin + A B Cin + A B Cin + A B Cin

Cout = A B Cin + A B Cin + A B Cin + A B Cin

(cid:132) Product term (or minterm)
(cid:134) ANDed product of literals – input combination for which output 
is true
(cid:134) Each variable appears exactly once, in true or inverted form (but 
not both)

L2: 6.111 Spring 2006

Introductory Digital Systems Laboratory

14

Simplify Boolean Expressions
Simplify Boolean Expressions

Cout

=  A B Cin + A B Cin + A B Cin + A B Cin
=  A B Cin +  A B Cin +  A B Cin + A B Cin + A B Cin +  A B Cin
=  (A + A) B Cin + A (B + B) Cin + A B (Cin +  Cin)
=  B Cin + A Cin + A B
=  (B + A) Cin +  A B

S = A B Cin + A B Cin + A B Cin + A B Cin
=( A B + A B )Cin +  (A B + A B) Cin
=(A ⊕ B) Cin + (A ⊕ B) Cin
= A ⊕ B ⊕ Cin

L2: 6.111 Spring 2006

Introductory Digital Systems Laboratory

15

Products & Product --ofof --Sum 
SumSum --ofof --Products & Product
Sum 

F in canonical form:
F(A, B, C)
= Σm(1,3,5,6,7)
=  m1 + m3 + m5 + m6 + m7
+ A B C+ A B C + A B C  + ABC
A B C
F =
canonical form ≠ minimal form
= A B C + A B C + AB C + ABC + ABC  
F(A, B, C)
= (A B  + A B + AB  + AB)C + ABC 
= ((A  + A)(B  + B))C + ABC 
= C + ABC = ABC  + C = AB + C

(cid:132) Product term (or minterm): ANDed product of literals – input combination for which output is true
minterms
C
B
A
m0
A  B  C 
0
0
0
m1
A  B  C
1
0
0
m2
A  B  C 
0
1
0
m3
0
1
1
A  B  C
m4
A  B  C
0
0
1
m5
1
0
1
A  B  C
m6
A  B  C 
0
1
1
m7
1
1
1
A  B  C
short-hand notation form in terms of 3 variables
(cid:132) Sum term (or maxterm) - ORed sum of literals – input combination for which output is false
A
maxterms
C
B
A + B + C M0
0
0
0
A + B + C  M1
1
0
0
A + B + C M2
0
1
0
0
1
1
A + B + C  M3
A + B + C M4
0
0
1
1
0
1
A + B+ C  M5
A + B +C
0
1
1
M6
1
1
1
A +B + C  M7

F in canonical form:
= ΠM(0,2,4)
F(A, B, C)
=  M0 • M2 • M4
=  (A + B + C) (A + B  + C) (A  + B + C)
canonical form ≠ minimal form
F(A, B, C)
= (A + B + C) (A + B  + C) (A  + B + C)
= (A + B + C) (A + B  + C)
(A + B + C) (A  + B + C)
= (A + C) (B + C)

short-hand notation for maxterms of 3 variables

L2: 6.111 Spring 2006

Introductory Digital Systems Laboratory

16

Mapping Between Forms
Mapping Between Forms

1. Minterm to Maxterm conversion:
rewrite minterm shorthand using maxterm shorthand
replace minterm indices with the indices not already used
E.g., F(A,B,C) = Σm(3,4,5,6,7) = ΠM(0,1,2)

2. Maxterm to Minterm conversion:
rewrite maxterm shorthand using minterm shorthand
replace maxterm indices with the indices not already used
E.g., F(A,B,C) = ΠM(0,1,2) = Σm(3,4,5,6,7)

3. Minterm expansion of F to Minterm expansion of F':
in minterm shorthand form, list the indices not already used in F
E.g., F(A,B,C) = Σm(3,4,5,6,7)                      F'(A,B,C) = Σm(0,1,2)
= ΠM(0,1,2)                                            = ΠM(3,4,5,6,7)
4. Minterm expansion of F to Maxterm expansion of F':
rewrite in Maxterm form, using the same indices as F
E.g., F(A,B,C) = Σm(3,4,5,6,7)                     F'(A,B,C) = ΠM(3,4,5,6,7)
= ΠM(0,1,2)                                           = Σm(0,1,2)

L2: 6.111 Spring 2006

Introductory Digital Systems Laboratory

17

The Uniting Theorem
The Uniting Theorem

(cid:132) Key tool to simplification: A (B + B) = A
(cid:132) Essence of simplification of two-level logic
(cid:134) Find two element subsets of the ON-set where only one variable 
changes its value – this single varying variable can be 
eliminated and a single product term used to represent both 
elements

A
0
0
1
1

B
0
1
0
1

F
1
0
1
0

F = A B +AB  = (A +A)B  = B 

B has the same value in both on-set rows
– B remains

A has a different value in the two rows
– A is eliminated

L2: 6.111 Spring 2006

Introductory Digital Systems Laboratory

18

Boolean Cubes
Boolean Cubes

(cid:132) Just another way to represent truth table
(cid:132) Visual technique for identifying when the uniting theorem 
can be applied
(cid:132) n input variables = n-dimensional "cube"

1-cube

011 

010 

0

1

X

XYZ 
111 

0011 

110 

0010 

01

Y

00

XY
11

10

2-cube

1011 

1010 

X

0111 

Y 

Z 

001 

101 

000 

100 

X 
3-cube 

Y 

Z 

0001 

0000 

W 

X 

0110 
0101 

1001 

1000 

0100 

4-cube 

WXYZ 
1111 

1110 

1101 

1100 

L2: 6.111 Spring 2006

Introductory Digital Systems Laboratory

19

Mapping Truth Tables onto Boolean Cubes
Mapping Truth Tables onto Boolean Cubes

(cid:132) Uniting theorem

A
0
0
1
1

B
0
1
0
1

F
1
0
1
0

01

B

00

F

A

11

10

Circled group of the on-set is called the
adjacencyplane. Each adjacency plane  
corresponds to a product term. 
ON-set = solid nodes
OFF-set = empty nodes

A varies within face, B does not
this face represents the literal B

(cid:132) Three variable example: Binary full-adder carry-out logic
(A+A)BCin

AB(Cin+Cin)

A B
0
0
0
0
1
0
0
1
0
1
1
0
1
1
1
1

Cin
0
1
0
1
0
1
0
1

Cout
0
0
0
1
0
1
1
1

111

Cout = BCin+AB+ACin

B C
A(B+B)Cin
000
A
The on-set is completely covered by the combination (OR) of the subcubes of 
lower dimensionality - note that “111” is covered three times

101

L2: 6.111 Spring 2006

Introductory Digital Systems Laboratory

20

Higher Dimension Cubes
Higher Dimension Cubes

011

010

B C
000

111

101

110

001

A

100

F(A,B,C) = Σm(4,5,6,7)
on-set forms a square
i.e., a cube of dimension 2 (2-D adjacency plane)
represents an expression in one variable       
i.e., 3 dimensions  – 2 dimensions
A is asserted (true) and unchanged
B and C vary

This subcube represents the literal A

(cid:132) In a 3-cube (three variables):
(cid:134) 0-cube, i.e., a single node, yields a term in 3 literals
(cid:134) 1-cube, i.e., a line of two nodes, yields a term in 2 literals
(cid:134) 2-cube, i.e., a plane of four nodes, yields a term in 1 literal
(cid:134) 3-cube, i.e., a cube of eight nodes, yields a constant term "1"
(cid:132) In general,
(cid:134) m-subcube within an n-cube (m < n) yields a term with n – m 
literals

L2: 6.111 Spring 2006

Introductory Digital Systems Laboratory

21

Karnaugh MapsMaps
Karnaugh

B

(cid:132) Alternative to truth-tables to help visualize adjacencies
(cid:134) Guide to applying the uniting theorem - On-set elements with only one 
variable changing value are adjacent unlike in a linear truth-table
F
B
A
A
1
0
0
0
1
0
1
0
1
0
1
1
(cid:132) Numbering scheme based on Gray–code
(cid:134) e.g., 00, 01, 11, 10 (only a single bit changes in code for adjacent map cells)
A 

0
1

1
1

0
1

0

2

3

0

1

0

Introductory Digital Systems Laboratory

22

2-variable
K-map

B 

0 

1 

0 

1 

0 

1 

2 

3 

AB 

C 

00 

01 

3-variable
K-map

0 

1 

0 

1 

L2: 6.111 Spring 2006

2 

3 

B 

AB 
CD 
00 

01 

11 

10 

C 

A 
11 

6 

7 

10 

4 

5 

A 

00 

01 

11 

10 

0 

1 

3 

2 

12 

13 

15 

14 

4 

5 

7 

6 

B 

8 

9 

11 

D 

10 
4-variable
K-map

KK --Map Examples
Map Examples

A  B 
Cin 
0 

1 

A 

00 

01 

11 

10 

0 

0 

0 

1 

1 

1 

0 

1 

B 

Cout = 

AB 
C 

A 

00 

01 

11 

10 

0 

1 

1 

0 

0 

0 

0 

1 

1 

1 

B 
F(A,B,C) = Σm(0,4,5,7)
F = 

AB 
C 

A 

00 

01 

11 

10 

0 

1 

0 

0 

0 

0 

1 

1 

1 

1 

F(A,B,C) = 

AB 
C 

00 

01 

0 

1 

0 

1 

1 

1 

B 

11 

1 

0 

A 

10 

0 

0 

B 
F' simply replace 1's with 0's and vice versa
F'(A,B,C) = Σm(1,2,3,6)
F' = 

L2: 6.111 Spring 2006

Introductory Digital Systems Laboratory

23

Four Variable Karnaugh
Karnaugh MapMap
Four Variable 

AB 
CD 
00 

01 

11 

10 

C 

00 

01 

A 
11 

10 

1 

0 

1 

1 

0 

1 

1 

1 

0 

0 

1 

1 

B 

0011 

0010 

C 

D 

0000 

0001 

A 
B 

F(A,B,C,D) = Σm(0,2,3,5,6,7,8,10,11,14,15)
F = C  +  A  B D  +  B  D 

Find the smallest number
of the largest possible
subcubes that cover the
ON-set

1 

0 

1 

1 

D 

0111 

1010 

0110 

0101 

1011 

1001 

0100 

1000 

1111 

1110 

1101 

1100 

K-map Corner Adjacency
Illustrated in the 4-Cube

L2: 6.111 Spring 2006

Introductory Digital Systems Laboratory

24

Map Example: Don ’’ t Cares
KK --Map Example: Don
t Cares

Don't Cares can be treated as 1's or 0's if it is advantageous to do so
Don't Cares can be treated as 1's or 0's if it is advantageous to do so

AB 
CD 
00 

01 

11 

10 

C 

00 

01 

A 
11 

10 

0 

1 

1 

0 

0 

1 

1 

X 

X 

X 

0 

0 

B 

0 

1 

0 

0 

D 

In PoS form: F = D (A  + C)

Equivalent answer as above, 
but fewer literals

F(A,B,C,D) = Σm(1,3,5,7,9) + Σd(6,12,13)
F = A D  +  B  C  D   w/o don't cares
F = C  D  +  A  D   w/ don't cares
By treating this DC as a "1", a 2-cube
can be formed rather than one 0-cube

AB 
CD 
00 

01 

11 

10 

C 

00 

01 

A 
11 

10 

0 

1 

1 

0 

0 

1 

1 

X 

X 

X 

0 

0 

B 

0 

1 

0 

0 

D 

L2: 6.111 Spring 2006

Introductory Digital Systems Laboratory

25

Hazards
Hazards

AB

C

0

1

00 01 11 10
0
0
1
1

0

1

1

0

Static hazards: Consider this function:
F = A * C + B * C

A

C

B

A = B = 1

C
1
2
F

Gate delay

F

A

C
B
Glitch

Implemented with MSI gates:
1

'00

'00

'00

'00

F

2

L2: 6.111 Spring 2006

Figure by MIT OpenCourseWare.
Introductory Digital Systems Laboratory

26

Fixing Hazards
Fixing Hazards

The glitch is the result of timing differences
 
in parallel data paths. It is associated with the
function jumping between groupings or product
terms on the K-map. To fix it, cover it up with
another grouping or product term!

A

C
B

C

AB
00 01
0 0
0

11 10
1
1

1

0

1

1

0

F

F = A * C + B * C + A * B

Figure by MIT OpenCourseWare.
(cid:131) In general, it is difficult to avoid hazards – need a robust
design methodology to deal with hazards.  

L2: 6.111 Spring 2006

Introductory Digital Systems Laboratory

27

