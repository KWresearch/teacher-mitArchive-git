L15: VLSI Integration and Performance 
L15: VLSI Integration and Performance 
Transformations
Transformations

Acknowledgement:

Materials in this lecture are courtesy of the following sources and are used with permission.
Curt Schurgers 

J. Rabaey, A. Chandrakasan, B. Nikolic. Digital Integrated Circuits: A Design Perspective.
Prentice Hall/Pearson, 2003.

L15: 6.111 Spring 2006

Introductory Digital Systems Laboratory

1

Layout 101
Layout 101

3-D Cross-Section

VDD

n+

+

n+

p

SiO2
SiO2

p+

p+

p+

n+

n

metal/pdiff
contact

N-channel MOSFET

P-channel MOSFET

IN

VDD

Figure by MIT OpenCourseWare.

Circuit Representation

GND

p-type substrate

n-type well

OUT

contact
frommetal
to ndiff

Wp

Wn

Lp

Ln

IN

G

G

S

D

D

S

L15: 6.111 Spring 2006

OUT

p+ 
diff

metal

n+ 
poly
diff
Layout
Used with permission.
(cid:131) Follow simple design rules (contract
between process and circuit designers)
Introductory Digital Systems Laboratory

2

Custom Design/Layout
Custom Design/Layout

node1

x
u
M
 
1
-
9

x
u
M
 
1
-
9

x
u
M
 
1
-
5

ck1

x
u
M
 
1
-
2

a

b

1000um

CARRYGEN

g64

s0

s1

SUMGEN
+ LU

LU : Logical
Unit

From  register files / Cache / Bypass

Multiplexers

Shifter

Adder stage 1
Wiring
Adder stage 2

Wiring

Adder stage 3

Sum Select

L
o
o
p
b
a
c
k
 
B
u
s

L
o
o
p
b
a
c
k
 
B
u
s

L
o
o
p
b
a
c
k
 
B
u
s

B
i
t
 
s
l
i
c
e
 
6
3

Itanium has 6 integer execution units like this
Itanium has 6 integer execution units like this

L
E
S
M
U
S

G
E
R

sum

sumb

to Cache

Die photograph of the 
Die photograph of the 
Itanium integer datapath
datapath
Itanium integer 
Courtesy Intel, as reprinted in Rabaey, et al. "Digital Integrated Circuits".

B
i
t
 
s
l
i
c
e
 
2

B
i
t
 
s
l
i
c
e
 
1

B
i
t
 
s
l
i
c
e
 
0

BitBit --slice Design Methodology
slice Design Methodology

To register files / Cache
(cid:131) Hand crafting the layout to achieve maximum clock rates (> 1Ghz)
(cid:131) Exploits regularity in datapath structure to optimize interconnects  
L15: 6.111 Spring 2006
Introductory Digital Systems Laboratory

3

The ASIC Approach
The ASIC Approach

Design Capture

Behavioral
Behavioral

Verilog (or VHDL )
Verilog (or VHDL )

Logic Synthesis
Logic Synthesis

Structural
Structural

Floorplanning
Floorplanning

Placement
Placement

Routing
Routing

Physical
Physical

Pre-Layout 
Pre-Layout 
Simulation
Simulation

Post-Layout 
Post-Layout 
Simulation
Simulation

Circuit 
Circuit 
Extraction
Extraction

n
n
o
o
i
i
t
t
a
a
r
r
e
e
t
t
I
I
 
 
n
n
g
g
i
i
s
s
e
e
D
D

Tape-out
Most Common Design Approach for Designs up to 500Mhz 
Clock Rates
Introductory Digital Systems Laboratory

L15: 6.111 Spring 2006

4

Standard Cell Example
Standard Cell Example

Power Supply Line (VDD)

Delay in (ns)!!

3-input NAND cell
(from ST Microelectronics):
C = Load capacitance
T = input rise/fall time
Ground Supply Line (GND)

(cid:131) Each library cell (FF, NAND, NOR, INV, etc.) and the variations on size 
(strength of the gate) is fully characterized across temperature, loading, etc.
5
L15: 6.111 Spring 2006
Introductory Digital Systems Laboratory

Standard Cell Layout Methodology
Standard Cell Layout Methodology

2-level metal technology

Current Day Technology

Cell-structure hidden under interconnect layers
(cid:131) With limited interconnect layers, dedicated routing channels 
between rows of standard cells are needed
(cid:131) Width of the cell allowed to vary to accommodate complexity
(cid:131) Interconnect plays a significant role in speed of a digital circuit

L15: 6.111 Spring 2006

Introductory Digital Systems Laboratory

6

Verilog to ASIC Layout 
to ASIC Layout 
Verilog
(the push button approach)
(the push button approach)

After 
Synthesis

module adder64 (a, b, sum); 
input  [63:0] a, b;  
output [63:0] sum;  

assign sum = a + b;
endmodule

After Routing

L15: 6.111 Spring 2006

Introductory Digital Systems Laboratory

7

After 
Placement

Macro Modules
Macro Modules

256×32 (or 8192 bit) SRAM Generated by hard-macro module generator

(cid:131) Generate highly regular structures (entire memories, 
multipliers, etc.) with a few lines of code
(cid:131) Verilog models for memories automatically generated 
based on size

L15: 6.111 Spring 2006

Introductory Digital Systems Laboratory

8

Clock Distribution
Clock Distribution

D Q

D

Q

For 1Ghz clock, skew budget is 100ps.
Variations along different paths arise 
from:
• Device: VT, W/L, etc.
• Environment: VDD, °C
Interconnect: dielectric thickness 
•
variation

Clock skew

Image removed due to
copyright restrictions.

IBM Clock Routing

Image removed due to
copyright restrictions.

L15: 6.111 Spring 2006

Introductory Digital Systems Laboratory

9

The Power Supply Wires are Not Ideal!
The Power Supply Wires are Not Ideal!

To VDD Grid

To VDD Grid

Ccoup

Receiver

Cint

Driver

Pad

To VDD Grid

Rd

Cd

GROUND GRID

Pad

The IR-drop problem causes internal power supply voltage 
to be less than the external source
Used with permission. 

L15: 6.111 Spring 2006

Introductory Digital Systems Laboratory

10

Analog Circuits: Clock Frequency 
Analog Circuits: Clock Frequency 
Multiplication (Phase Locked Loop)
Multiplication (Phase Locked Loop)

up

down

(cid:132) VCO                 produces high frequency square wave
(cid:132) Divider            divides down VCO frequency
(cid:132) PFD                 compares phase of ref and div
(cid:132) Loop filter       extracts phase error information
Used widely in digital systems for clock synthesis
(a standard IP block in most ASIC flows)
Courtesy Michael Perrott. Used with permission. 
Introductory Digital Systems Laboratory

L15: 6.111 Spring 2006

11

Scan Testing
Scan Testing

...

0
1

0
1

ScanShift

ScanShift

shift out

CLK

shift in
shift in
ScanShift
 Used with permission

 

Idea: have a mode in which all registers are chained
into one giant shift register which can be loaded/
read-out bit serially.  Test remaining (combinational)
logic by
(1)   in “test” mode, shift in new values for all
register bits thus setting up the inputs to the
combinational logic
(2)  clock the circuit once in “normal” mode, latching
the outputs of the combinational logic back into
the registers
(3)  in “test” mode, shift out the values of all
register bits and compare against expected
results.  

Clk

ScanShift

Primary 
Inputs

Scan-Flops

Primary
Outputs

Response To The Test 
Vector Loaded

Load/Unload Cycles

Load/Unload Cycles

Normal System

Figure by MIT OpenCourseWare.

L15: 6.111 Spring 2006

Introductory Digital Systems Laboratory

12

Behavioral Transformations
Behavioral Transformations

(cid:131) There are a large number of implementations of the same 
functionality 
(cid:131) These implementations present a different point in the 
area-time-power design space
(cid:131) Behavioral transformations allow exploring the design 
space a high-level

power

Optimization metrics:
1. Area of the design
2. Throughput or sample time TS
3. Latency: clock cycles between 
the input and associated output 
change
4. Power consumption
5. Energy of executing a task
6. …

time

area

L15: 6.111 Spring 2006

Introductory Digital Systems Laboratory

13

Fixed --Coefficient Multiplication
Coefficient Multiplication
Fixed

Conventional Multiplication
Z = X · Y

X3
X2
X1
X0
Y3
Y2
Y1
Y0
X3 · Y0 X2 · Y0 X1 · Y0 X0 · Y0 
X3 · Y1 X2 · Y1 X1 · Y1 X0 · Y1 
X3 · Y2 X2 · Y2 X1 · Y2 X0 · Y2
X3 · Y3 X2 · Y3 X1 · Y3 X0 · Y3
Z2
Z3
Z4
Z5
Z6
Z7
Constant multiplication (become hardwired shifts and adds)
X
X
X3
1
2
0
0
1
X1
X2
X3
X0
Z3

Z = X · (1001)2

X
0
1
X0

Z0

Z1

Z0

Z2

Z1

Z7

X3
Z6

X2
Z5

X1
Z4

Y = (1001)2 = 23 + 20

X

Z

<< 3

shifts using wiring

L15: 6.111 Spring 2006

Introductory Digital Systems Laboratory

14

Transform: Canonical Signed Digits (CSD)
Transform: Canonical Signed Digits (CSD)

Canonical signed digit representation is used to increase the number of 
zeros. It uses digits {-1, 0, 1} instead of only {0, 1}.

Iterative encoding: replace 
string of consecutive 1’s 

0

1
1 … 1
1
2N-2 + … + 21 + 20

1

0

0 … 0 -1

2N-1 - 20

Worst case CSD has 50% non zero bits 

0

1

1

0

1

1

1

1

01101111

=

10010001

0

1

1

0

1

1

0

0

-1

0

0

0

0

-1

0

-1

X

<< 7

<< 4

Z

Shift translates to re-wiring

L15: 6.111 Spring 2006

Introductory Digital Systems Laboratory

15

Algebraic Transformations
Algebraic Transformations

Commutativity

A

B

B

A

A

B

⇔

Distributivity
A

C

B

C

⇔

A + B = B + A

(A + B) C = AB + BC

A

B

Associativity
B

C

⇔

A

(A + B) + C = A + (B+C)

Common sub-expressions

C

X

Y

X

X

Y

⇔

A

B

A

B

L15: 6.111 Spring 2006

Introductory Digital Systems Laboratory

16

Transforms for Efficient Resource Utilization
Transforms for Efficient Resource Utilization

Time multiplexing: mapped to 
3 multipliers and 3 adders

A

B

C

D

E

F

G

H

I

1

2

distributivity

A

C

B

D

E

F

G

H

I

Reduce number of operators 
to 2 multipliers and 2 adders

1

2

L15: 6.111 Spring 2006

Introductory Digital Systems Laboratory

17

A Very Useful Transform: Retiming
A Very Useful Transform: Retiming

Retiming is the action of moving delay around in the systems
(cid:131) Delays have to be moved from ALL inputs to ALL outputs or vice versa

D

D

D

D

D

Cutset retiming: A cutset intersects the edges, such that this would result in two disjoint 
partitions of these edges being cut. To retime, delays are moved from the ingoing to the 
outgoing edges or vice versa.

D

D

D

Benefits of retiming:
• Modify critical path delay
• Reduce total number of registers

L15: 6.111 Spring 2006

Introductory Digital Systems Laboratory

Courtesy of Prof. Charles E. Leiserson.

18

Retiming Example: FIR Filter
Retiming Example: FIR Filter

x(n)

h(0)

D

h(1)

D

h(2)

D

h(3)

Symbol for multiplication
Direct form
K
∑
ny
nh
nx
)(
)(
)(
⊗
=
=
i
0
=
y(n)

ihinx
)
(
)(
⋅−

x(n)

(10)

h(0)

y(n)

(4)

x(n)

h(0)

y(n)

D

h(1)

D

h(2)

D

h(3)

associativity of 
the addition

Tclk = 22 ns

retime

h(1)

D

h(2)

D

h(3)

D

Transposed form

Tclk = 14 ns

Note: here we use a first cut analysis that assumes the delay of a chain of operators is the sum 
of their individual delays. This is not accurate.
L15: 6.111 Spring 2006
Introductory Digital Systems Laboratory

19

Pipelining, Just Another Transformation
Pipelining, Just Another Transformation
(Pipelining = Adding Delays + Retiming)
(Pipelining = Adding Delays + Retiming)

Contrary to retiming, 
pipelining adds extra registers 
to the system

How to pipeline:
1. Add extra registers at 
all inputs
2. Retime

D

D

D

D

add input 
registers

retime

D

D

D

D

D

L15: 6.111 Spring 2006

Introductory Digital Systems Laboratory

20

The Power of Transforms: Lookahead
Lookahead
The Power of Transforms: 

y(n) = x(n) + A y(n-1)
y(n)
x(n)

loop 
unrolling

A

D

Try pipelining
this structure 

x(n)

D

y(n)

2D

A

A

y(n) = x(n) + A[x(n-1) + A y(n-2)]

distributivity

x(n)

y(n)

How about pipelining
this structure!

associativity

x(n)

y(n)

retiming

D

D

D

A

A2

D

A

2D

AA

x(n)

D

A

y(n)

2D

A2

L15: 6.111 Spring 2006

Introductory Digital Systems Laboratory

precomputed

21

Key  Concern in Modern VLSI: Variations!
Key  Concern in Modern VLSI: Variations!

 
t
n
a
p
o
D
 
f
o
s
 
m
r
e
o
b
t
m
A
u
N
 
n
a
e
M

SOURCE

DRAIN

GATE

D

Tox
BODY

Leff

Random Dopant Fluctuations
10000

1000

100

10

1000 500
65
130
250
T echnology Node (nm )

32

Path Delay
Path Delay

1 1 0

1 0 0

9 0

8 0

7 0
6 0
5 0
4 0

)
C
(
 
e
r
u
t
a
r
e
p
m
e
T

Temp Variation & Hot spots

With 100b transistors, 
1b unusable (variations)
Due to 
Due to 
variations in:
variations in:
VVdddd , V, V tt , and 
, and 
Temp
Temp

y
y
t
t
i
i
l
l
i
i
b
b
a
a
b
b
o
o
r
r
P
P

DelayDelay
Deterministic design techniques inadequate in the future
Deterministic design techniques inadequate in the future
Deterministic design techniques inadequate in the future
Courtesy of Shekhar Y. Borkar (Intel). Used with permission.
Introductory Digital Systems Laboratory

L15: 6.111 Spring 2006

22

Trends: ““Chip in a Day
Chip in a Day””
Trends: 
Matlab/Simulink to Silicon
((Matlab/Simulink
to Silicon…… ))

S reg

X reg

Mult1 Mac1

Mac2

Mult2

Add,
Sub,
Shift

Map algorithms directly to silicon - bypass writing Verilog!
(Courtesy of R. Brodersen. Used with permission.)
Introductory Digital Systems Laboratory

L15: 6.111 Spring 2006

23

Trends: Watermarking of Digital Designs 
Trends: Watermarking of Digital Designs 

Fingerprinting 
is  a 
technique 
to  deter  people  from 
illegally 
redistributing  legally  obtained  IP  by  enabling  the  author  of  the IP  to 
uniquely identify the original buyer of the resold copy. 
The  essence  of  the  watermarking approach  is  to  encode  the  author's 
signature.  The  selection,  encoding,  and  embedding  of  the  signature 
must result in minimal performance and storage overhead. 

Image removed due to 
copyright restrictions.

Image removed due to 
copyright restrictions.

L15: 6.111 Spring 2006

Introductory Digital Systems Laboratory

24

