Log ic I - Session 11


Plan for today


Damien’s comments on quiz 
My comments on teaching feedback 
A bit more on the TF-completeness of SL 
Recap of proof of soundness of SD: 

If Γ  ⊢  P in SD, then Γ ⊨  P

Beg in to prove completeness of SD:

 If Γ  ⊨  P, then Γ ⊢  P in SD


TF-completeness 
We can express any truth-function in SL. 
Find a sentence that expresses the TF for this TT schema: 

We want an iterated disjunction of CSs for the T rows: 1 and 3. 
( A&B) v (∼A&B). 

TTTTFFFTTFFFA&BA&∼B∼A&B∼A&∼BTF-completeness 
Str ictly, we haven’t yet proven that SL is TF-complete. We’d need to show 
that our algor ithm always yields a sentence that expresses the truth-
function we want. See 6.1E (1d) and 6.2E (1). 
Not only is SL truth-functionally complete, but so is any language that 
contains formulae TF-equivalent to every sentence of SL. 
E.g. {&,v,∼}. ( After all, that’s all we use in our algor ithm!) 
In fact, we can achieve TF-completeness w ith a single binary connective, ‘|’. 

PQP | QTTFTFTFTTFFTTF-completeness w ith ‘|’


To see this, just add a step to our algor ithm: translate the old 
sentence into one that only contains ‘|’. 
The new one w ill be equivalent, so it w ill have the same TT, so it 
w ill expresses the same truth-function. 
In our example, our algor ithm generated ( A&B) v (∼A&B). 
To ﬁnd an equivalent sentence, make replacements in stages. 

TF-completeness w ith ‘|’

We start w ith ( A&B) v(∼A&B), which is of the form PvQ. 
Now,  
                
PvQ iff  

(P|P) | (Q|Q).

Substitute  ( A&B) and (∼A&B) for P and Q 
( A&B) v(∼A&B)

(( A&B)|( A&B)) | ((∼A&B)|(∼A&B))

Now replace the remaining sub-sentences. 
( A&B) iff ( A|B)|( A|B). And (∼A&B) iff (( A|A)|B)|(( A|A)|B). 
So we get:                   
(( A|B)|( A|B) | ( A|B)|( A|B)) | ((( A|A)|B)|(( A|A)|B) | (( A|A)|B)|(( A|A)|B)) 

TF-completeness w ith ‘|’


We’ve just looked at one sentence. We haven’t yet proven that a language L 
w ith just ‘|’ is TF-complete. 
To do that, we need to prove that for any sentence of SL, there is an 

equivalent sentence in L.

Provide an algor ithm Z that makes step-by-step replacements like we did.
Then prove that: 
Each step of Z preser ves TV, and 
For any PSL of SL, Z turns PSL into a sentence PL  of L. 

Soundness of SD

Basic strategy to show soundness of SD: Use MI to prove that 
(*) holds for any line n of any SD der ivation: 
(*) If Pn is the sentence on line n and Pn is in the scope of 
only the assumptions in Γn, then Γn ⊨  Pn. 
So for our induction sequence, we use lines of SD der ivations.

For basis clause: (*) holds for n=1. 
For inductive clause: if (*) holds up to line n, it holds for n+1.

Pn+1 had to be justiﬁed by applying some SD rule to earlier 

lines. So, prove for each SD rule X: If Pn+1 is justiﬁed by X 

and (*) holds up to the nth line, then (*) holds for the n+1st.


Soundness of SD

(*) If Pn is the sentence on line n and Pn is in the scope of 
only the assumptions in Γn, then Γn ⊨  Pn. 
Most of the proof involves the last step, go ing through each rule 
to prove this: 
For each SD rule X: If Pn+1 is justiﬁed by X and (*) holds up 
to the nth line, then (*) holds for the n+1st. 
Last time, we went through &E and ∼I. Let’s do one more: ⊃I.

So suppose Pn+1 is justiﬁed by applying ⊃I, and that (*) holds 
through line n. Then Pn+1 is of the form Qi⊃Rk. 
So, to prove: If Qi⊃Rk on line n+1 is justiﬁed by ⊃I and is in the 
scope only of assumptions in Γn+1, then Γn+1 ⊨  Qi⊃Rk. 

Soundness of SD

Since Qi⊃Rk is justiﬁed by ⊃I, we have a subder ivation from an 

auxiliary assumption Qi on line i to Rk on line k, where i<k<n+1.

And since (*) applies for all n < n+1, it applies to i and k.

So Γk ⊨  Rk.

Now note that since Qi⊃Rk on line n+1 is justiﬁed by applying ⊃I 

to the subder ivation on i-k, no assumptions in Γk can have been 

closed before n+1 except Qi.

In other words, every assumption open at k, apart from Qi, must 
still be open at n+1. 
So Γk ⊆  Γn+1 ∪ {Qi}. 

Soundness of SD

So far we have: 
(a)    Γk ⊆  Γn+1 ∪ {Qi}, and 
(b)    Γk ⊨  Rk. 
Now remember from last time that for any sets Γ1 and Γ2:
 If Γ1 ⊆  Γ2, then if Γ1 ⊨  S, then Γ2 ⊨  S. 
So in particular, from (a), we know that since Γk ⊆  Γn+1 ∪ {Qi}: 
(c) If Γk ⊨  Rk then Γn+1 ∪ {Qi} ⊨  Rk. 
So putting together (b) and (c): Γn+1 ∪ {Qi} ⊨  Rk. 
So Γn+1 ⊨  Qi⊃Rk. I.e. Γn+1 ⊨  Pn+1. 

Completeness of SD 
To prove: If Γ  ⊨  P, then Γ ⊢  P (in SD). 
By contraposition, this is equivalent to: 
Γ ⊬  P then Γ  ⊭  P. 
So we can assume Γ ⊬  P and try to prove Γ  ⊭  P. 
We need lots of intermediate steps to do it... 
...and an important new notion: maximal consistency 
Γ is maximally consistent in SD (MC-SD) iff Γ is 
consistent in SD and Γ would become inconsistent if any 
additional sentence were added to it. 

Plan for proving 
completeness 

Γ ⊬  P 
(1) ↓ 
Γ ∪ {∼P} is C-SD 
(4) ↓ 
Γ ∪ {∼P} ⊆  Γ*  (for some Γ* that’s MC-SD)   (6.4.5) 
  
+ 
(5) →  (3) ↓ 
For any Γ* that’s MC-SD, Γ* is TF-C  
Γ ∪ {∼P} is TF-C 
(2) ↓ 
Γ  ⊭  P


(6.4.8) 
          

Γ ⊬  P then Γ  ⊭  P.  


If Γ  ⊨  P, then Γ ⊢  P.


Completeness of SD

To prove: If Γ ⊬  P, then Γ ∪ {∼P} is C-SD 
Suppose Γ ∪ {∼P} is NOT C-SD. Then it’s inconsistent in SD. 
Then, by def., some Q and ∼Q are der ivable from it. 
But that means we can der ive Q and ∼Q in a sub-der ivation 
from Γ together w ith the assumption ∼P. 
We could then perform ∼E on the subder ivation, yielding P. 
So we could get P in the scope of only the assumptions in Γ. 
So if Γ ∪ {∼P} is NOT C-SD, then Γ ⊢  P. 
So if Γ ⊬  P, then Γ ∪ {∼P} is C-SD 

Plan for proving 
completeness 

  
(6.4.5)

(6.4.8)
          

Γ ⊬  P 
↓↓☑ 
Γ ∪ {∼P} is C-SD 
↓ 
Γ ∪ {∼P} ⊆  Γ*  (for some Γ* that’s MC-SD) 
+ 
For any Γ* that’s MC-SD, Γ* is TF-C 
↓ 
Γ ∪ {∼P} is TF-C 
↓ 
Γ  ⊭  P


→ 

Γ ⊬  P then Γ  ⊭  P.  


If Γ  ⊨  P, then Γ ⊢  P.


Completeness of SD 
Next, let’s prove: 
If Γ ∪ {∼P} is TF-consistent (TF-C), then Γ  ⊭  P.

So assume Γ ∪ {∼P} is TF-consistent (TF-C).

By def., there’s a TVA that m.e.m. Γ ∪ {∼P} true.

A TVA m.e.m. true Γ ∪ {∼P} iff it m.e.m. Γ true and P 

false.

So there’s a TVA that m.e.m. Γ true and P false.

So by def., Γ  ⊨  P iff there’s NO TVA that does that.

So  Γ  ⊭  P.


Plan for proving 
completeness 

  
(6.4.5)

(6.4.8)
          

Γ ⊬  P 
↓↓☑ 
Γ ∪ {∼P} is C-SD 
↓ 
Γ ∪ {∼P} ⊆  Γ*  (for some Γ* that’s MC-SD) 
+ 
For any Γ* that’s MC-SD, Γ* is TF-C 
↓ 
Γ ∪ {∼P} is TF-C 
↓☑ 
Γ  ⊭  P


→ 

Γ ⊬  P then Γ  ⊭  P.  


If Γ  ⊨  P, then Γ ⊢  P.


Completeness of SD

Next, let’s prove: 
If Γ ∪ {∼P} ⊆  Γ* for some Γ* that’s MC-SD and 

for any Γ* that’s MC-SD, Γ* is TF-C, then Γ ∪ {∼P} is TF-C 

So assume Γ ∪ {∼P} ⊆  Γ* for some Γ* that’s MC-SD and 

for any Γ* that’s MC-SD, Γ* is TF-C.

Suppose Γ ∪ {∼P} is NOT TF-C. 
Then there’s no TVA that m.e.m. Γ ∪ {∼P} true. 
But since Γ ∪ {∼P} ⊆  Γ*, any TVA that m.e.m. Γ* true would also m.e.m. Γ ∪

{∼P} true.

So there’s no TVA that m.e.m. Γ* true.                   I.e.: Γ* is NOT TF-C.

But since Γ* is MC-SD, and for any Γ* that’s MC-SD, Γ* is TF-C, Γ* is TF-C.

Our assumption led to a contradiction. So Γ ∪ {∼P} is TF-C 

Plan for proving 
completeness 

  
(6.4.5)

(6.4.8)
          

Γ ⊬  P 
↓↓☑ 
Γ ∪ {∼P} is C-SD 
↓ 
Γ ∪ {∼P} ⊆  Γ*  (for some Γ* that’s MC-SD) 
+ 
For any Γ* that’s MC-SD, Γ* is TF-C 
↓☑ 
Γ ∪ {∼P} is TF-C 
↓☑ 
Γ  ⊭  P


→ 

Γ ⊬  P then Γ  ⊭  P.  


If Γ  ⊨  P, then Γ ⊢  P.


MIT OpenCourseWare
http://ocw.mit.edu 

24.241 Logic I

Fall 2009 


For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms. 

