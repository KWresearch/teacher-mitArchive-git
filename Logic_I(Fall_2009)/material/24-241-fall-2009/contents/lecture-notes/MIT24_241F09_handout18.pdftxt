Logic  I 
Fall  2009 
Session  18  Handout 

Formal  semantics  for  PL 

•	 An  interpretation  for  PL  is  a  speciﬁcation  of  each  of  the  following: 
–	 A  universe  of  discourse  UD,  where  ∅ ⊂ UD. 
–	 For  each  sentence  letter  S  of  SL,  a  truth-value  assigned  to  S. 
–	 For  each  n-place  predicate  letter  F  of  PL,  a  set  of  n-tuples  of  members  of  UD 
assigned  to  F.

E.g.,  if we are  interpreting  ‘Lxy’  to mean x  lives  in  y,  then  to  ‘L’ we would assign

{ # Ephraim, Somerville $, # Damien, Somerville $, # Vann McGee, Boston $,  . . . }.

–	 For  each  individual  constant  c  of  PL,  an  individual  u  assigned  to  c,  where  u  is  a 
member  of  UD. 

Denotations  of  individual  terms  on  I  and  d:

• 

–	 If  t  is  a  variable,  then  denI,d (t) =  d(t). 
–	 If  t  is  an  individual  constant,  then  denI,d (t) =  I(t). 
•	 Variants  of  variable  assignments: 
– d[u/x]  is  the  variable  assignment  that  assigns  u  to x  and  is  otherwise  just  like d. 
E.g.,  if  d1  =  {# Alice,  x  $,  # Bill,  y  $,  # Carol,  z  $,  . . . },  then  we  have:

d1 [John/y] =  {# Alice,  x  $,  # John,  y  $,  # Carol,  z  $,  . . . }

Satisfaction  for  formulas  of  PL: 

• 

1.  If  P  is  a  sentence  letter,  d  satisﬁes  P  on  I  iﬀ  I(P)=T. 
2.  If  P  is  an  atomic  formula  of  the  form At1 . . . tn , where A  is  an  n-place  predicate 
of  PL  and  t1 . . . tn  are  individual  terms  of  PL,  d  satisﬁes  P  on  I  iﬀ 
# denI,d (t1 ),  . . . ,  denI,d (tn )  $ ∈ I(A). 
3.  If  P  is  of  the  form  Q,  then  d  satisﬁes  P  on  I  iﬀ  d  does  not  satisfy  Q  on  I.
¬
4.  If  P is of the form Q&R, then d satisﬁes P on I iﬀ  d satisﬁes Q on I or d satisﬁes 
R  on  I. 
5.  If	 P  is  of  the  form  Q ∨ R,  then  d  satisﬁes  P  on  I  iﬀeither  d  satisﬁes  Q  on  I  or 
d  satisﬁes R  on  I. 

6.  If	 P  is  of  the  form  Q ⊃ R,  then  d  satisﬁes  P  on  I  iﬀeither  d  doesn’t  satisfy  Q 
on  I  or  d  satisﬁes R  on  I. 
7.  If	 P  is  of  the  form  Q ≡ R,  then  d  satisﬁes  P  on  I  iﬀeither  P  and  Q  are  both 
satisﬁed  by  d  on  I  or  neither P  nor Q  is  satisﬁed  by  d  on  I. 
8.  If	 P  is  of  the  form  (∀x)Q,  then  d  satisﬁes  P  on  I  iﬀ  for  any  u  ∈  UD,  d[u/x] 
satisﬁes Q  on  I. 
9.  If	 P  is  of  the  form  (∃x)Q,  then  d  satisﬁes  P  on  I  iﬀ  for  some  u  ∈ UD,  d[u/x] 
satisﬁes Q  on  I. 

Truth  for  PL  sentences: 

• 

–	 A  sentence  P  is  true  on  interpretation  I  iﬀ  every  variable  assignment  d  for  I1 
satisﬁes  P  on  I. 

Formal  semantics  for  PLE 

• 
The  deﬁnition  of  truth  is  the  same. 
•	 We  extend  the  deﬁnitions  of  satisfaction,  denotation,  and  interpretation. 
•	 An  interpretation  for  PLE  includes  all  elements  of  an  interpretation  for  PL  plus: 
–  An  assignment  of  a  set  of  n+1-tuples  to  each  n-place  functor  of  PLE. 

E.g.,  if we want  to  interpret  ‘g(x,y)’  to mean  the  sum  of  x  and  y,  then  to  ‘g’ we would 
assign  { # 1,1,2  $,  # 1,2,3  $,  # 1,3,4  $ . . . }. 
Denotations  in  PLE  are  the  same  with  the  addition  of  a  clause  for  functor-terms: 

• 

–	 If  t is a term f (t1 , . . . , tn ), where f  is an n-place functor, t1 , . . . , tn  are terms, and 
# denI,d (t1 ),  . . . ,  denI,d (tn ),  u  $ ∈ I(f ),  then  denI,d (t)=  u. 
E.g.,  in  the above example,  if we  let our  term  t be  ‘g(1,3)’,  then  since  ‘g’  is a  two-place 
functor  and  # 1,3,4  $ ∈ g,  denI,d (t)=  4. 
•	 Clause  (2)  of  the  deﬁnition  of  satisfaction  already  covers  functor-expressions,  since 
these  count  as  individual  terms.  But  we  need  to  add  a  clause  for  ‘=’: 

10.  If  P  is an atomic  formula of the  form t1  = t2 ,  then d satisﬁes P on  interpretation 
I  iﬀden  I,d (t1 ) =  denI,d (t2 ) 

1Variable  assignment  d  is  for  I  iﬀ  d  assigns  only  ob jects  in  I’s  UD. 

MIT OpenCourseWare
http://ocw.mit.edu 

24.241 Logic I 
Fall 2009 

For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms . 

