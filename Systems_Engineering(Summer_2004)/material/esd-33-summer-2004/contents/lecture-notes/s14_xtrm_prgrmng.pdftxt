ESD.33 -- Systems Engineering

Session #14
Extreme Programming

Analysis

Design

Time

Implementation

Test

Waterfall

XP

Dan Frey

Plan for the Session
• Comments on Robust Design
• Extreme Programming
– Beck_Extreme Programming.pdf
• Pair Programming
– Williams_Pair Programming.pdf
• Next steps

Mal Atherton
Rolls-Royce, Controls Lead Engineer

I think a lot of students got lost towards 
the end today, because some of the 
details of the array types were difficult to 
cover in the short time we had.

Ari Dimitriou
Chief Signal Processing Engineer, Raytheon
I was wondering if you could point me to 
more reading material on your DOE 
results.  …

…a common Russian Submariner saying 
is "Better is the worst enemy of good 
enough".  I feel the analysis you are 
making with OFAT may be supporting 
that argument...

Outer Array
• Induce the same noise factor levels for 
each row in a balanced manner
E1
E1
E2
F1
F2
F1
G1
G2
G2
3
2
1
5
6
7
11
10
9
13
14
15
19
18
17
21
22
23
27
26
25
29
30
31
35
34
33

E2
F2
G1
4
8
12
16
20
24
28
32
36

A1
A1
A1
A2
A2
A2
A3
A3
A3

inner x
outer =
L9xL4=
36

B1
B2
B3
B1
B2
B3
B1
B2
B3

C1
C2
C3
C2
C3
C1
C3
C1
C2

D1
D2
D3
D3
D1
D2
D2
D3
D1

Single Arrays

Example of a suggested design:
• 32 run single array
102 −
5
• 7 control factors, 3 noise factors
• Design generators 
A=1, B=2, C=3, D=4, E=234, F=134, G=123, 
a=5, b=124, c=1245

Wu, C. F. J, and  H., M. Hamada, 2000, Experiments: Planning Analysis, 
and Parameter Design Optimization, John Wiley & Sons, New York.

Adaptive One Factor at a Time 
Experiments

Do an experiment  

Change 
one factor  

If there is an improvement, 
retain the change

If the response gets worse, 
go back to the previous state 

+

-

B

+
C

-

Stop after you’ve changed 
every factor

-

A

+

 
Experiments WH 

Results

 
Method 

7 2
2 ×
3
 
7 2
2
13
−× III  
102 −  
4
102 −  
5
2
2
47
13
− × III
−
 
III
OFAT
132 −× III
 
OFAT ×
OFAT
102 −  
6

 

Basic 
low 
w 
60%  81% 
44%  80% 
8% 
8% 
3% 
9% 
12% 
8% 
39%  56% 
31%  37% 
4% 
4% 

WH 

Fitted 
low 
w 
50%  58% 
45%  58% 
18% 
9% 
9% 
16% 
16%  25% 
36%  42% 
33%  31% 
4% 
2% 

2nd 
order 
40% 
40% 
38% 
17% 
38% 
35% 
27% 
0% 

2nd 
order 
58% 
52% 
56% 
33% 
51% 
43% 
41% 
8% 

1,024 
512 
64 
32 
32 
32 
32 
16 

How are Fractional Factorial 
Designs Formed?

Matlab Function “fracfact”

function [x, conf] = fracfact(gen)
%FRACFACT generates a two-level fractional factorial design.
%
%   X = FRACFACT(GEN) produces the fractional factorial design defined
%   by the generator string GEN.  GEN must be a sequence of "words" separated
%   by spaces.  If the generators string consists of P words using K letters
%   of the alphabet, then X will have N=2^K rows and P columns.

Hadamard Matrix
IHH =
T
• They are orthogonal
• They have only +1 and -1
• Three basic ones exist H2, H12, and H20
• Others can be constructed recursively
1
1
H
H
⎡
⎤
⎡
⎤
N
⎢
⎥
⎢
⎥
1
1
H
H
−
−
⎣
⎦
⎣
⎦

2H

H 2

N

N

N

=

=

N

• They enable construction of OAs

Fractional Factorial Experiments
Cuboidal Representation

+

-

B

+
C

-

-

A

+

This is a 23-1 fractional factorial.

“generator”
is
ABC

“defining relation”
is
I=ABC

Fractional Factorial Experiments
Cuboidal Representation

+

-

B

+
C

-

-

A

+

This is the other 23-1 fractional factorial.

“generator”
is
-ABC

“defining relation”
is
I=-ABC

Families of Fractional Factorials

• “In practice, it does not matter which 
fraction is actually used.  Both fractions 
belong to the same family”
– Montgomery, D., Design and Analysis of Experiments

+

-

B

+
C

-

-

A

+

+

-

B

+
C

-

-

A

+

John Arruda
Hamilton Sundstrand Engine Systems
Manager - Engine Control Systems & Flight Test Group
• You stated during the lecture that the order of 
the Control Factors on slide 20 made a 
difference and that this would result in 
different tests being conducted. I agree with 
that. ... What is the approach for deciding 
which permutation of the balanced orthogonal 
array to test or does it matter? …would the 
Factor Effect Plots generated as per slide 24 
show the same information, i.e., identify those 
factors that generate the most improvement 
independent of which orthogonal array you 
ran for a given set of factors?

Greg Andries
Pratt & Whitney, F135 TAD Validation Manager
A perfect P&W example of what Dr. 
Frey is talking about would be cruise 
TSFC optimization.  There are a 
number of factors that could be 
changed to a given engine cycle that 
could contribute to a reduction in TSFC.  
… software scheduling changes of 
variable geometry … turbine flow area 
change … aero improvement to the 
compression system...

Expectation Shift
Under utility theory (DBD),
S is a key difference
between probabilistic and 
deterministic design

S=E(y(x))- y(E(x)) 

S

y(E(x))

E(y(x))

y(x)

fx(x)
x

fy(y(x))

E(x)

Sidwell, C. V., 2004, “On the Impact of Variability and Assembly on Turbine 
Blade Cooling Flow and Oxidation Life,” Ph.D. Thesis, MIT.

Sidwell, C. V., 2004, “On the Impact of Variability and Assembly on Turbine 
Blade Cooling Flow and Oxidation Life,” Ph.D. Thesis, MIT.

Sidwell, C. V., 2004, “On the Impact of Variability and Assembly on Turbine 
Blade Cooling Flow and Oxidation Life,” Ph.D. Thesis, MIT.

Classifying Robustness Inventions

Noise

Patent #4,487,333 –
“Fluid Dispensing System”

Signal
Patent #5,024,105 –
Viscosity-insensitive 
variable-area flowmeter

Response
Patent #5,483,840 –
“System for 
Measuring Flow”

Mal Atherton
Rolls-Royce, Controls Lead Engineer
In my experience, the main problem is the 
tendency to regard the spec (tolerance 
based) as the benchmark for all design 
decisions. We even have trouble 
convincing the company to allow us to 
perform robustness tests…Go fix the spec 
and stop asking for expensive and time 
consuming robustness tests we are told. … 
robustness is a design property that we 
should care about rather than just meeting 
the spec. Is this an appropriate way to view 
the issue?

History of Tolerances
• pre 1800 -- Craft production systems
• 1800 -- Invention of machine tools & the English 
System of manufacture
• 1850 -- Interchangeability of components & the 
American system of manufacture

Jaikumar, Ramachandran, 1988, From Filing and Fitting 
to Flexible Manufacture

Craft Production
• Drawings communicated rough proportion 
and function
• Drawings carried no specifications or 
dimensions
• Production involved the master, the model, 
and calipers

The English System
• Greater precision in machine tools
• General purpose machines
– Maudslay invents the slide rest

• Accurate measuring instruments
– Micrometers accurate to 0.001 inch
• Engineering drawings
– Monge “La Geometrie Descriptive”
– Orthographic views and dimensioning
• Parts made to fit to one another 
– Focus on perfection of fit

The American System

• Interchangeability required for field service 
of weapons
• Focus on management of clearances
• Go-no go gauges employed to ensure fit
• Allowed parts to be 
made in large lots

Go - no go gauges

Tolerance of Form

 

0.25

0.25 wide  
tolerance zone 

THIS ON A DRAWING

MEANS THIS 

Basic Tolerancing Principles
ref. ANSI Y14.5M
• Each dimension must have a tolerance
• Dimensions of size, form, and location 
must be complete
• No more dimensions than necessary 
shall be given
• Dimensions should not be subject to 
more than one interpretation
• Do not specify manufacturing method

Sampling Techniques for 
Computer Experiments

Random 
Sampling

Stratified 
Sampling

Latin Hypercube 
Sampling

Hammersley Sequence Sampling
• A sampling scheme design for low “discrepancy”
• Demonstrated to converge to 1% accuracy 3 to 40 times 
more quickly than LHS  
• Still generally requires >100 samples 
– [Kalagnanam and Diwekar, 1997]
 

 

 

Monte Carlo

Latin

Hammersley

Proposed Method
• Simply extend quadrature to many 
variables
• Will be exact to if factor effects of 4th
polynomial order linearly superpose
z2
• Lacks projective property
2.8750
• Poor divergence 

1.3556

z1

z3

-1.3556

-2.8750

Why Neglect Interactions?
If the response 
is polynomial

n
n
n
n
∑ ∑ ∑ ∑
j
i
k
l
1
1
1
1
=
=
=
=
j
i
j
k
kl
≤
≤
≤

n
n
n
∑ ∑ ∑
j
i
k
1
1
1
=
=
=
j
i
kk
≤
≤

n
n
∑ ∑
j
i
1
1
=
=
j
i
≤

zzzz
k
i
j

zzz
j
i

n
∑
i
1
=

β
ijkl

zz
i

β
ijk

β
ij

β
i

+

+

+

z

k

l

j

i

+

z
)(
βη
=
0

ησ z
((
2

n
n
∑ ∑
j
i
1
1
=
=
i
j
<

⎛
⎜
⎜
⎜
⎜⎜
⎝

2

2

+

=

))

6
ββ
iii
i

(
2
2
ββ
+
i
ii

n
∑
i
1
=
3
3
β
β
β
+
ij
iij
ijj
4
2
2
ββββββ
+
+
i
ijj
j
iij
ii
iijj
6
6
6
ββ
ββββ
+
ij
ijj
ijjj
iii
jjj
iij

15
β
iiij
+

+

+

+

2

2

2

+

15
β
iii

2

+

24
ββ
iiii
ii

+

96
β
iiii

2

)

+

2

2

+

15
β
+
ijjj
4
ββ
jj
iijj
24
ββ
iijj
iiii

8
β
+
iijj
6
ββ
iiij
ij
24
ββ
jjjj
iijj

+

+

+

+

+

⎞
⎟
⎟
⎟
⎟⎟
⎠

Then the effects 
of single factors 
have larger 
contributions to 
σthan the 
mixed terms.

+

⎞
⎟
⎟
⎟
⎟⎟
⎠

+

n
n
n
∑ ∑ ∑
i
j
k
1
1
1
=
=
=
i
j
kj
<
<

⎛
⎜
⎜
⎜
⎜⎜
⎝

2

2

+

+

3
β
ijjk

β
ijk
2
ββ
ijj
ikk
6
ββ
iiik
ijjk

3
β
iijk
4
ββ
+
iijj
jjkk
6
ββ
ijjj
ijkk

+

2

+

+

2

+

3
β
+
ijkk
4
ββ
iijj
iikk
6
ββ
jjjk
iijk

+

+

2
ββ
iij
jkk
4
ββ
iikk
jjkk
6
ββ
jkkk
iijk

+

+

2
ββ
iik
jjk
6
ββ
ijkk
iiij

+

n
n
n
n
∑ ∑ ∑ ∑
i
j
k
l
1
1
1
1
=
=
=
=
i
j
kj
lk
<
<
<

⎛
⎜
⎜
⎝

2

+

β
ijkl
2
ββ
ijjk
ikll

2
ββ
iijj
kkll
2
ββ
+
ijll
ijkk

2
ββ
jjll
iikk
2
ββ
+
iijl
jkkl

2
ββ
iill
jjkk
2
ββ
+
ijjl
ikkl

2
ββ
jkll
iijk
2
ββ
+
ijll
ijkk

+

+

+

+

⎞
⎟
⎟
⎠

Fourth Order – RWH Model Fit to Data
 
 
1

 
y
t
i
l
i
b
a
b
o
r
P
 
e
v
i
t
a
l
u
m
u
C

0.9

0.8

0.7

0.6

0.5

0.4

0.3

0.2

0.1

0

0

d=7

4d+1=29

d2+3d+3=73

Legend
Quadrature 29 samples
Cubature 73 samples
HSS 29 samples
HSS 290 samples
LHS 29 samples
LHS 290 samples

5
15
10
% Error in Estimating Standard Deviation

20

Continuous-Stirred Tank Reactor

• Objective is to generate chemical species B at a rate 
of 60 mol/min 

TTCFQ
(
= ρ
−
p
i

)

+

HrV
(
A

RA

+

Hr
B

RB

)

F  Ti CAi CBi
F  Ti CAi CBi

C

A

=

−

r
A

1

=

A /

RT

C

A

/

τRT

C

B

=

C

+
+

Bi
1

ek
0
A
ek
0
B

−

E

A

/

−

EB

/

C
RT
τ
RT
τ

A

Q
Q

+

C
Ai
Aek
E
0
−
A
ek
0 −
A

E

−

r
B

=

ek
0
B

−

E

B

/

RT

C

B

−

ek
0
A

−

E

A

/

RT

C

A

F  T  CA CB
F  T  CA CB

Adapted from Kalagnanam and Diwekar, 1997, “An Efficient Sampling 
Technique for Off-Line Quality Control”, Technometrics (39 (3) 308-319.

Comparing HSS and Quadrature
Quadrature
Hammersley Sequence
• Used 25 points
• Required ~150 points
• 0.3% accuracy in µ
• 1% accuracy σ2
• 9% accuracy in (y-60)2 far 
• σ2 from 1,638 to 232
from optimum
• Nominally on target
• 0.8% accuracy in (y-60)2 
• Mean 15% off target
near to optimum
 
• Better optimum, on target 
and slightly lower variance
• E(L(y)) = 208.458

quadrature

HSS

0.01

0

0

20

40
60
Production Rate (mol/min)

80

100

0.03

0.02

)
l
o
m
/
n
i
m
(
 
y
t
i
s
n
e
d
 
y
t
i
l
i
b
a
b
o
r
P

Plan for the Session
• Comments on Robust Design
• Extreme Programming
– Beck_Extreme Programming.pdf
• Pair Programming
– Williams_Pair Programming.pdf
• Next steps

Recap of “No Silver Bullet”

• What did Fred Brooks Say?
• What is hard about software?
• “Promising attacks on the conceptual 
essence”
– Buy versus build
– Requirements refinement and rapid prototyping
– Incremental development (grow, don’t build)
– Great designers 

Roots of XP
• Christopher Alexander
• Spiral development
• Scrum
• Evolutionary delivery
• Kent Beck 
– 1996 – 4 principles
– 1999 – evangelized
– 2004 – fairly wide use

What is XP?

Analysis

Design

Time

Implementation

Test

Waterfall

XP

XP turns the conventional software process sideways.
What if we didn’t settle for taking a cleaver to the waterfall? 
What if we could throw it in a blender?

XP Practices

• Planning game
• Small releases
• Metaphor
• Simple design
• Tests
• Refactoring
• Pair programming

• Continuous 
integration
• Collective ownership
• On-site customer
• 40 hour weeks
• Open workspace
• Just rules

Stories

• Story = A use case that can fit on an 
index card
• Each story defines something the 
software should be able to do
• Estimate the resources required to 
implement each story
• Collect a set of stories to form a release
• Each story must be testable

Unit Testing

• “If there is a technique at the heart of 
XP it is unit testing”
• Tests are what would convince the 
customer that the stories are completed
• Programmers write their OWN tests 
• Write the tests BEFORE the code
• Test run automatically
• Tests are permanent and accumulate

Pair Programming

• Programmers sign up for tasks for which 
they take responsibility for
• Responsible programmer finds a partner
• The pair shares a single machine
– One person codes
– The other critiques, helps, etc
• More later

Studies of Pair Progamming

• 15 experienced programmers, 5 
individuals, 5 pairs – ~40% faster, 
higher quality [Nosek, 1998]
• 41 senior students, self selected to pair 
or individual programming – ~40-50% 
faster, more test cases passed 
[Williams, 2000]
• A good amount of anecdotal evidence 
from industry case studies

Other Arguments for Pair Programming

• Mistake avoidance – “two sets of eyes”
• Programmers like it
• If there is turn-over, you retain 
knowledge
• Facilitates learning from peers
• Organizational unity

What is XP good for?

• Products where the requirements are 
highly uncertain
• Modest sized projects / teams 

Other “Agile” Methods

• Scrum
• XP 
• Crystal Orange
• DSDM

Next Steps
• Continue preparing for exam
– Exam posted next Tuesday AFTER session
• See you at Tuesday’s session  
– General Electric Aircraft Engine case study
– 8:30AM Tuesday, 27 July
• Reading assignment
– www.geae.com/education/engines101
– Cumpsty_Jet Propulsion ch4.pdf

