MIT OpenCourseWare
http://ocw.mit.edu 

6.854J / 18.415J Advanced Algorithms 
Fall 2008
��

For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms. 

18.415/6.854  Advanced Algorithms 	

October  31, 2001 

Lecturer:  Michel X.  Goernans 	

Scribe:  Sanmay Das 

Lecture   14  

In t h e  last  lecture th e  concept  of  th e  dynamic trees  d a t a  s t ruc tu re  was introduced  and  a number 
of  operations  t h a t   dynamic  trees  must  support  were  described.  In  this  lecture,  we  define  th e   d a t a  
s t ruc tu re  in detail and  describe t h e  efficient implementation of  operations using  expose, a n  extended 
splay operation. 

1  Dynamic Trees 

Dynamic trees  a re  a d a t a  s t ruc tu re  intended for maintaining a representation  of  a set of  rooted  trees, 
and  performing  a  number  of  operations  (discussed below)  on  these  trees.  In  today's lecture we  will 
be   using  th e   example t ree   depicted  in  figure  1 t o  describe  dynamic  trees  and   t h e   expose  operation 
which  is  central  t o  th e  efficient  implementation  of  operations  on  dynamic trees. 
We  view  rooted  trees  as  unions  of  node-disjoint  paths.  This  divides  the   edges  of  the   t ree   into 
two sets.  Solid edges  are those t h a t   are on  the  node-disjoint  pa ths  t h a t   t h e  t ree  is composed of, and  
dashed  edges  are  those  t h a t   are  not  on  these  paths.  Figure  2  shows  a  possible  partitioning  of  the  
example  t ree   into  a  set  of  node  disjoint  pa ths .   Note  t h a t   each  p a th   consisting  of  solid  edges  is  a 
directed p a th  from top  t o  bottom.  We  refer t o  th e  top  of  each such p a th  as th e  tail,  and  th e  bottom 
as th e  head  (for example h  in  the   p a th  from  h  t o  e  is  the   tail  and   e  th e  head). 

Virtual  Trees 

The  union  of  disjoint  pa ths  described  above can be  used  t o  represent  virtual  trees.  In a virtual tree, 
each  solid p a th   is  represented  by  a  binary  search  t ree  such  t h a t   the   following two conditions  hold: 

1 A  successor node  in  th e  binary  search  t ree   is  a  parent  in  t h e  rooted  tree. 

2 	 The   root  of  a  binary  search  t ree   is  linked  t o  th e   parent  of  th e   tail  of  th e   p a th   i t   corresponds 
t o  in  t h e  rooted  tree. 

For  example, figure 3  shows  the   virtual  tree  corresponding  t o  t h e  union  of  disjoint  pa ths   shown  in 
figure 2 .  
There  a re   th ree   kinds  of  edges  in  a  virtual  t ree ,   corresponding t o  the   th ree   types  of  children  a 
node  can  have.  Left  and   right  children  of  a  node  a re   connected  t o   t h e   node  by  solid  edges,  and  
middle  children  of  a  node  a re   connected  t o   i t   by  dashed  edges.  Thus  a  node  can  either  have  no 
parent,  a  parent  connected  t o  i t   by  a  solid  line,  or  a  parent  connected  t o  i t   by  a  dashed  line.  Note 
t h a t   there  can be many  virtual trees  corresponding  t o  a  rooted  t ree ,  because  the re  a re  two different 
degrees  of  freedom  involved  in  constructing  a  virtual  t ree  - th e   union  of  disjoint  pa ths   could  be 
different,  as could  the   s t ruc tu re  of  th e  binary  search trees corresponding t o  th e  pa ths .  

3  The  expose  Operation 

The   expose(u) operation  is  a n   extended  splay  operation  on  virtual  trees.  The   important  p a r t s   of 
this  operation a re  t o  make  sure t h a t   th e  p a th  from u t o  t h e  root  is  solid and  t h a t  th e  binary  search 
t ree  representing the  p a th  t o  which  u belongs is  rooted  a t  u.  We  will  describe  th e  process  in  3 steps 
although i t   can be implemented  somewhat  more efficiently in  a  single step  (although th e  asymptotic 
efficiency is  t h e  same). 

Figure  1: Example  tree 

Figure  2:  Tree as a  union  of  disjoint paths 

Figure  3:  A  virtual tree corresponding t o  the  example 

- 5   -. 

"--@ 

Figure  4:  After  step  1 of  exposedj) 

Figure 5:  Splicing operation 

3.1  Step   1 
Step 1 consists of walking from v t o  th e  root  of  th e  virtual tree.  Whenever th e  walk enters a  binary 
search tree  (solid edges) a t  some node w ,   a  splay (w) operation is  performed, bringing w to  the root 
of  t h a t   tree.  Middle children are not  affected  in  this  step.  For  example in  th e   expose(j) operation 
on  th e  example tree, we  perform  3  splay operations,  on  j ,  f and  c respectively, leading t o  t h e  tree 
shown in figure 4.  Note  th a t   a t  the   end of  step 1of  an  expose(v) operation, v  will  be  connected to  
th e  root  of  th e  virtual  tree only by  dashed  edges. 

3.2  Step  2:  Splicing 
Step 2 consists of  walking from v t o  th e  root  of  th e  virtual  tree while exchanging th e  subtree rooted 
a t   v  with  th e   left  subtree  of  the   parent  of  v  a t  each  step, as illustrated  in  figure 5  (why th e   solid 
tree remains  a  binary  search tree  is  left  as an exercise).  The new  tree  of  the   example for  expose($) 
after  step  2  is  performed can  be  seen  in  figure 6.  Note  th a t   a t  th e  end  of  this  step, there will  be  a 
solid pa th  from the   root  of  th e  tree t o  th e  node being exposed. 

3.3  Step  3 
Step 3 consists of walking from v  t o  th e  root  in th e  virtual tree, splaying v t o  th e  root.  The example 
tree after  th e  completion of  step 3  (and the   entire  expose  operation is  shown in figure 7.  Note  t h a t  
in  th e  analysis, we  can  charge th e  entire cost  of  step  2  t o  the  final splaying operation in  step 3. 

Figure 6:  After  step 2  (splicing)  of  exposedj) 

Figure 7:  After  step 3 of  expose(j) 

4  Operations on Dynamic  Trees 

4.1  Maintaining Cost  Information 
Some of  t h e  operations  we  need  t o  perform  on  dynamic  trees  involve  costs  of  edges and  paths.  At 
each  node  u ,  we  could maintain  th e  minimum  cost  in  th e   subtree  rooted  a t   u ,  ignoring  the   virtual 
t ree  and  dashed  edges, but  this  is problematic for th e   add  - cost  operation.  So instead  we  maintain 
two  things  a t  each node  x ,  namely 

A m i n ( x )  = cost ( x )  - m i n c o s t ( x )  

where  m i n c o s t ( x )  represents  t h e   smallest  cost  along  t h e   p a th   corresponding  t o   the   BST  in  the  
original  t ree ,  and: 

A c o s t ( x ) = 

cost ( x )  
if  x  is  the   root  of  a  BST, 
c o s t ( x ) - c o s t ( p ( x ) )   otherwise  ( p ( x ) denotes t h e  parent  of  x ) .  

Therefore,  if  x  is  th e   root  of  a  BST,  then   c o s t ( x )  = A c o s t ( x )  and   m i n c o s t ( x )  = A c o s t ( x )  -
A m i n  ( x )  . 
A m i n ( x )  and  A c o s t ( x )  can  bo th   be  upda ted   in  O(1) time when  one  does a  rotation  or  a  splice. 
I t  is  important  t h a t  bo th   u  and  w  a re  roots of  BSTs in  t h e  splicing step. 

4.2  Implementation of  Operations 
find  - cost ( u ) :  F i rs t ,   expose ( u ) .  Now  u  is the   roo t ,  so re tu rn   Acos t  ( u ) .  

find  - roo t (u ) :   expose ( u ) .   Then  follow  right  children  until  you  reach  a  leaf  w  of  t h e   BST. 

splay ( w ) ,  then   re tu rn  w .   


find  - m i n ( u ) :   expose (u ) .   Examining  A m i n   and   Acos t   go  down  t o   t h e   minimum,  say  w ,   

ignoring  th e   left  subtree of  u .   splay ( w )  

add  - co s t (u ,  x ) :  expose (u ) .  Add  z  to  A c o s t ( u )  and   sub t rac t  x  from A c o s t ( l e f t ( u ) ) .  
cut ( u )  : expose ( u )  Add  A cost ( u )  t o  A cost (right ( u ) ) .  Remove the   edge  ( u ,  right ( u ) )  . 

link ( u ,  w ,  x ) :   expose ( u ) ,  then  expose ( w ) .  Set w  t o  be  a middle  child of  u. 

