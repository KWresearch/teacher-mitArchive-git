MIT OpenCourseWare
http://ocw.mit.edu 

6.854J / 18.415J Advanced Algorithms 
Fall 2008
��

For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms. 

18.415/6.854  Advanced Algorithms 

October  29 ,  2001 

Lecturer:  Michel  X .   Goernans 

Scribe:  Naveen  Sunkavally 

Lecture   13 

1  Introduction 

In the  last  lecture we  introduced  splay trees  and  defined th e  th ree  different types of  splay  steps used 
t o  splay  an element  (i.e.  bring  i t   t o  th e   root).  The  th ree  types  (shown below  as operating on  node 
X )  are: 

ZIG 

A A   

A,& 
Figure  1:  The  parent  of  X  is  th e  root 

ZIG-ZIG 

Figure  2:  X  and   i ts  parent  are bo th   left  (or right)  children 

ZIG-ZAG 

Figure  3: X  is a  right  child  and   i ts  parent  is  a  left  child  (or vice  versa) 

2  Amortized  Analysis  of  Splay  Tree  Operations 

In  this lecture we  use  amortized analysis t o  obtain bounds  on the  running  times of  splay operations. 
The  analysis will  show t h a t   the  amortized  cost  of  any  splay t ree  operation  (find, insert, delete, etc.) 
is  of  the   order  O ( log (n ) ) ,  where  n  is  t h e   number  of  nodes  in  th e   tree.  Any  single  operation  on  a 
splay  tree may  take  O ( n )  time, but  i t   also tends  t o  make  the   t ree  more  balanced,  so t h a t   over  time 
t h e  average  cost  of  any  operation is  O ( log (n ) ) .  
Th e   analysis  uses  th e   potential  method  (see  CLR,  chapter  18 for  a  description)  to   obtain  the  
O ( log (n ) )  bound.  The  first  s tep  is  t o  define  a  weight, sum, and  rank  function  a t  each  node: 
Every node X  has  a  weight  w ( X )  > 0 

We  define  the   potential  on  th e   entire  splay t ree   d a t a   s t ruc tu re  a t  any  moment  in  time  i  a s  the  
sum of  all  th e   ranks  in  th e  tree: 

Th e  potential is a measure of  how balanced  th e  tree is:  trees with low potential for a given number 
of  nodes  a re  well  balanced, while  trees with  high  potential a re  poorly  balanced.  The  amortized  cost 
of  a  splay  operation  is  then   given  by  th e   actual  cost  of  th e   operation plus  th e   change  in  potential 
of  th e   tree.  Operations  whose  actual  costs  a re   high  should  come  with  the   benefit  of  lowering th e  
potential of  t h e  t ree  so t h a t   th e   amortized  cost  stays reasonable. 

2.1  Amortized  Cost  of  a Splay  S tep  
The  following lemma gives the   amortized  cost  of  a  single splay step: 

Lemma  1  L e t   r ( X )   be  t h e   rank   of  X  before  a  splay   s t e p ,   and   le t   r ' (X )   be  t h e   rank   of  X  a f t e r  
a  sp lay   s tep .   T h e n   t h e   amo r t i zed   cost   of  t h e   sp lay   s t e p   s h ow n   in  figure  I  (ZIG)  i s   < 3 ( r t ( X )-
r ( X ) )  + 1.  T h e   amo r t i zed   cost   of  t h e   splay   s t e p s   s h ow n   in figure  2  a n d   3  (ZIG-ZIG  and   ZIG-ZAG) 
i s  < 3 ( r 1 (X )- r ( X ) ) .  
Proof of  Lemma  1:  Consider  each  of  th e   cases separately: 
In  case  1  (ZIG), we  have 

Amortized  cost  =  Actual  cost  + 4 ( i  + 1 )  - $ ( i )  
=  1+ ( r l ( X )+ r l ( Y )  - r ( X )  - r ( Y ) )  
Th e  actual  cost  of  t h e  splay  step  in this  case is  1 because  we  only  perform  one  rotation  t o  bring 
X  t o  t h e  root.  Because  r' ( X )  = r ( Y ) ,  and  because  r l (Y )  5 r' ( X ) ,  we  get: 

Amortized  cost  <  1+ r l ( X )  - r ( X )  
<  1+ 3 ( r 1 (X )- r ( X ) )
-
In  case  2  (ZIG-ZIG), th e  actual  cost  is  2  because  we  a re  performing  a  double  rotation.  We  can 
take  advantage of  th e  fact  t h a t   r '  ( X )  = r ( Z ) ,  r ( Y )  2 r ( X ) ,  and  r' (Y )  < r l ( X )  t o  arrive  a t :  

Amortized  cost  =  Actual  cost  + $ ( i  + 1 )  - $ ( i )  
=  2 + ( r l ( X )+ r l ( Y )+ r l ( Z )- r ( X )- r ( Y )- r ( Z ) )  
5  2 + r 1 ( X )+ r l ( Z ) - r ( X )  - r ( X )  

To  simplify fu r the r ,  we  take  advantage of  th e   fact  t h a t   th e   log  function  is  concave,  so  t h a t   for 
any  two  points  a  and   b ,   a  and   b  >  0,  it  must  be  th e   case  t h a t   z 0 g 2 ( a ) + 1 0 g 2 ( b )
figure 2 ,  notice  t h a t   s ( X ) + s l ( Z )  5  s l ( X ) ,or  equivalently  s ( X ) : s ' ( z )   5 w. By  th e   concavity 
5  log z (+ ) .  
In 
2 
) , which  by  transitivity  implies  t h a t   r ( X ) ; r ' ( Z )   < 
of  th e   log  function,  r ( X ) : r ' ( Z )   <- log2( s ( X ) : s l   (') 
= r l ( X )- 1, and  r l ( Z )< 2 r 1 ( X )- 2 - r ( X ).  Thus, 
s'  X )
1092 ( +) 

Amortized  cost  5  2 + r l ( X )+ ( 2 r 1 ( X )- 2 - r ( X ) )- r ( X )- r ( X )  
5  3 ( r 1 ( X )- r ( X ) )  

In case 3 (Z IG -ZAG ) ,th e  actual cost  of  th e  double  rotation  is  2, and  we  again use  th e  fact  th a t  
r l ( X )= r ( Z )  and   r ( Y ) > r ( X )  t o  s ta te :  

Amortized  cost  =  Actual  cost  + $ ( i  + 1 )  - $ ( i )  
=  2 + ( T I   ( x )+ r i ( Y )+ r 1( 2 )- r ( X )- r ( Y )- ~ ( 2 ) )  
5  2 + T I   ( Y )+ r l ( Z )- r ( X )- r ( X )  
From figure 3 ,  i t  is evident  t h a t  s l ( Y )+s i ( Z ) 5 s i ( X ) ,and  using th e  concavity of  the  log  function, 
we  get  t h a t   r l ( Y )+ r l ( Z )< 2 ( r 1 ( X )- I). Thus, 

Amortized  cost  <  2 + ( 2 r 1 ( X )- 2 )  - r ( X )- r ( X )  
5  3 ( r 1 ( X )- r ( X ) )  

2.2  Amortized Analysis of  a  Splay Operation 
The  following two corollaries follow from th e  above analysis of  th e  amortized running time of  a single 
splay  step. 

Corollary  2  Let  V  be  the  vertex  of  the  splay  tree  before  a splay  operation  is  carried  out.  Then  the 
amortized  cost  of  splaying  a node X  is O ( l o g ( n ) ) .  

Proo f  of Corollary  2:  Th e  amortized cost of  splaying a t  X  equals th e  sum of  th e  amortized costs 
of  all  th e   single splay  steps.  This  sum  telescopes  t o  yield  t h a t   th e   amortized  cost  of  splaying  X  is 
5 3 ( r ( V )- r ( X ) )+ 1.  The  ex t r a  constant  te rm   1 accounts for  t h e  possibility  of  a  case 1 rotation. 
Note  t h a t   this  analysis  is  independent  of  t h e   chosen  weights  in  t h e   tree.  Suppose  we  set  all 
weights  t o  be  1.  Then  th e   maximum  possible  difference  between  r ( V )  and   r ( X )  equals  the   log  of 
number  of  nodes  in  th e  tree.  So the   amortized  cost  of  splaying X  is O ( l o g ( n ) ) .  
Corollary  3  The  actual  cost  of  a sequence  of  m  splayings  is O ( ( m+ n ) l o g ( n ) ) .  

Proof  of  Corollary  3:  The   actual  cost  equals  th e   amortized  cost  plus  th e   gain  from  th e   credit 
invariant.  Or equivalently, if  i corresponds t o  th e  time before t h e  m  splayings, and  i + m   corresponds 
t o  the   time  after  t h e  m  splayings, we  get: 
Actual  cost  of  m  splays  =  Amortized  cost  of  m  splays  + $(i)  - $(i  + m )  
From  corollary  2 ,   th e   amortized  cost  of  rn splays  is  O (m log (n ) ) .   Th e   maximum  change  in 
potential,  again  assuming  all  weights  a re   1, is  O (n log (n ) ) ,  so  t h e  actual  cost  is  O ( (m  + n ) log (n ) ) .  

We  have  shown t h a t   the   amortized  cost  of  splaying  is  O ( log (n ) ) ,  bu t   we  have  yet  t o   show  t h a t  
th e  cost  of  operations  such a s  find or insert  a re  also O ( log (n ) ) .  Most  operations, e.g.  find, which do 
not  modify t h e  t ree  are clearly within  a  constant factor of  splaying operation, because we  can argue 
t h a t   the   cost,  say,  of  finding  a n  element  is  roughly  twice  t h e   cost  of  splaying  t h a t   element.  Thus 
most  operations  have  a n   amortized  cost  of  O ( log (n ) ) .   This  analysis  however  does  not  necessarily 
follow for  operations  such a s  insert, which modify th e  tree. 
I t   can  be  shown  t h a t   th e   insert  operation  also  has  a n   amortized  running  time  of  O ( log (n ) )  by 
considering  how  much  th e   potential  of  th e   t ree   increases  right  after  a  new  node  is  added  (prior  t o  
t h e  subsequent  splay  t h a t  brings  i t   t o  the  roo t ) .   If  the   potential  increases by  a  factor  of  O ( log (n ) ) ,  
then   th e   to ta l   amortized  cost  of  th e   insert  operation  is  also  O ( log (n ) ) .  This  is  indeed  th e   case,  as 
can be  shown by  the   following analysis: 
Consider  an   insert  operation  on  th e   node  X.  After  X  has  been  inserted  (and  right  before  the  
splay),  all  nodes  Y j   on  th e   p a th   from  the   root  t o   X  witness  a n   increase  in  their  s(Yj)  by  1, or 
equivalently  th e  rank  for  each Y ,  increases  by  logz ( ' (% )+ ' ) .  Let  Yl  correspond t o  the   parent  of  X ,
s ( y j )
Y2  correspond  to  the  grandparent  of  X ,  and  so on u n t ~ lwe  get  t o  Yk, which  corresponds t o  t h e  root 
node.  The   increase  in  the   to t a l  rank  is given by: 

4Yk )  + 1 
Increase in  + ( i )   =  log2( s(Y1) + 1
) + log2( '(%) + I )  + log2( S(y3)  + l)...10g2(
s(yk > 
) (15) 
s(Y1) 
s (y2 )  
s(Y4) 
s ( y l ) + l s ( y 2 ) + l s ( y 3 ) + 1   s ( y k ) + l  
=  Eog2(
" '   s (yk )   ) 
s(Y,) 
( Y )  
s(Y1) 
Next  we  make  use of  th e  fact  t h a t   s ( Y , )+ 1 5 S ( Y , + ~ )t o  telescope  the  product  contained  in  the  
logarithm: 

Increase  in  $ ( i )   =  log2( s ( Y 1 ) + 1 s ( Y 2 ) + 1 s ( E ) + 1 ...~ ( Y k ) + l  
s(yk 1  ) 
s(Y1) 
s(Y2) 
s(Y3) 

Th e   increase  in  potential  is  5  Eog2(n), so  t h e   amortized  cost  of  the   insert  operation  is  indeed 
0 (10g (n )> .  
Other  operations  which  modify  th e   t ree ,   such  as  delete,  can  also  be  shown  t o  run  in  O ( log (n ) )  
time.  In  general, the   performance  of  a  splay  tree  is  in  fact  so good  t h a t ,  for  a  given set  of  nodes,  i t  
can be  shown t h a t  a  splay  t ree  performs  t o  within  a  constant  of  the   best  s ta t ic  binary  tree.  This  is 
called t h e   s t a t i c   o p t im a l i t y   theo rem ,  which  is  s ta ted  below: 

Theorem 4  Suppo se   the re   are  n  objects   t h a t   are  t o   be  repeatedly   accessed.  E a c h   object  i s   t o   be 
accessed  a t   least   once ,   and   a  to ta l   of  m  accesses   are  t o  be  performed .   T h e  to ta l   r u n n i n g   t i m e  of  t h e  
m  access  operations   u s ing   a  splay   tree   i s   w i t h i n   a  c o n s t a n t   fac to r   of  t h e   to ta l   r u n n i n g   t i m e   t a k e n  
u s ing   t h e   best  s t a t i c   b ina ry   search  tree .  

Th e   d y n am i c   b ina ry   search  tree   conjecture   goes  further  th an   th e  s ta t ic  optimality  theorem. 
Conjecture: 
Suppo se   the re   are  n  objects   t h a t   are  t o   be  repeatedly   accessed.  A  to ta l   of  m 
accesses  are  t o  be  performed .   T h e  to ta l   r u n n i n g   t i m e  of  t h e  m  access  ope ra t ion s  u s ing   a  splay   tree   i s  
O ( n+ t h e   r u n n i n g   t i m e   t a k e n   u s ing   t h e   best  d y n am i c   b ina ry   search  t r e e ) ,  i.e.  t h e   best  b ina ry   search 
tree   s t r u c t u r e   t h a t   allows  ro ta t ion s .  

3  Dynamic  Trees 

The   dynamic  trees  d a t a  s t ruc tu re  manages  a  collection   of  d i s jo in t   ( n o t   necessarily   b i n a r y )   rooted 
trees .   A  cost  is  associated  with  each  node  in  each  tree;  th is   cost  represents  th e   cost  on  th e  edge t o  
t h e  node  from  t h e  node's parent,  unless  th e   node  is  the   roo t ,  in  which  case t h e  cost  is  set  t o  oo  by 
default. 
Th e  dynamic trees d a t a  s t ruc tu re  is useful for implementing  admissible cycle cancellation, as will 
be  shown in  a  later  lecture.  The  d a t a  s t ruc tu re  supports  t h e  following operations: 

m a k e  - t r e e ( V ) :  Create a  tree with  a  single node whose  root  is  V .  The  cost  of  V  is  set  t o  oo. 

a  f i n d   - r o o t ( V ) :  Find  and   re tu rn  t h e  root  of  th e   t ree  containing t h e  node  V .  

f i n d   - c o s t ( V ) :  Re tu rn  th e   cost  of  the   node  V .  

f i n d   -m i n ( V ) :  Re tu rn  W , th e  node on t h e  p a th  from  f i n d   - r o o t  ( V )t o  V with th e  minimum 
cost. 

add  - c o s t ( x , V ) :  Add  x  t o  th e   cost  of  all nodes  on  th e  p a t h  -&.omf i n d   - r o o t ( V )  t o  V .  

c u t ( V ) :  Split  t h e   t ree   containing  V  into  two  trees  by  removing  th e   edge  between  V  and   i ts  
parent.  V  becomes th e  root  of  a  new  tree,  and  i ts  cost  is  set  t o   oo. 

l i n k ( V ,W ,x ) :  W  is  assumed  t o   be  the   root  of  a  t ree   which  does  not  contain  V .  Merge  the  
trees containing W  and  V by  adding a n  edge between W  and  V .  Set th e  cost  of W  equal t o  x. 

Using  splay  trees,  we  shall  see  t h a t   the   above  operations  can  be  made  t o   run   in  O ( l o g ( n ) )  
amortized  time.  The  following theorem  establishes  this  fact. 
Theorem 5  A  sequence   of  m  d y n am i c   tree   ope ra t ion s   t a k e s  O ( ( m+ n ) l o g ( n ) ) t im e .  
Proof  of  Theorem  5:  The   first  step  of  this  proof  is  t o  decompose each  t ree   into  a  set  of  node-
disjoint  paths.  These  node-disjoint  pa ths   a re   then  viewed  as  splay  trees,  and   the   node  on  any 
node-disjoint  p a th   furthest  away  from  t h e   root  of  the   original  tree  corresponds  t o   th e   root  of  the  
splay  tree. 
This theorem  will  be  proved  in  th e  next  lecture. 

