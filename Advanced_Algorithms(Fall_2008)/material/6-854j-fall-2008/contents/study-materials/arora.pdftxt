MIT OpenCourseWare
http://ocw.mit.edu 

6.854J / 18.415J Advanced Algorithms 
Fall 2008
��

For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms. 

18.415/6.854  Advanced Algorithms 
Lecture  15 

November  12 ,  1996 

Lecturer:  Michel  X .   Goemans 

Scribe:  Salil  Vadhan 

Arora's  (1 + E)-ApproximationScheme for  the 
Euclidean  TSP 

In  t h e  last  lecture, we  saw t h a t ,  given any n  points  in   [O ,   112,Karp's  par t i t ion ing  algo- 
r i thm   finds  a  tou r  whose  length  is  longer  t h a n  t h e  op t ima l  t o u r  by  a n  additive factor 
of  a t   most  o ( f i ) .  
In  t h i s   lecture,  we  will  see  ano ther   partioning-based  algorithm, 
due  t o  Arora  [ I ] ,which  finds  a  t o u r  of  length  a t  most  (1+ E )   OPT   in  t ime  no ( ' / ' )  for 
any  E  > 0.  A  similar  result  was  also obtained  by  Mitchell. 
F i r s t ,  we  observe t h a t  we  can make  some simplifying assumptions abou t   the   loca- 
tions  of  our  cities.  Given  any  finite  set  S of  po in ts   in  the   plane,  t h e   bounding  box  of 
S  is t h e  smallest  rectangle  (w i th  sides parallel  t o  t h e  coordinate  axes) which  contains 
all of  S .  The   size  of  a  rectangle  is  t h e  length  of  i t s  longest  side. 

Claim  1  Suppose  there  is  an  approximation  scheme1 for  instances  of  the  Euclidean 
TSP2  i n  which  the  n  cities  lie  i n  a  bounding  box  of  size  at  most  n 2  and  the  distance 
between any  two  cities  is  at  least  1 ,   or  0.  Then  there is   an  approximation  scheme for 
all  instances  of  the Euclidean  T SP .  

Proof: 
Clearly, we  can  scale  t o  make  t h e   bounding  box  size  n 2  without  changing 
t h e   relative  lengths  of  any  tou r .   Moreover,  if  the   bounding  box  was  t h e   smallest 
possible,  t h e   length  O P T  of  t h e   op t imum   tou r   is  a t   least  2n2  (since  there   must  be 
cities  on  t h e  2 shor tes t   sides).  Now,  consider  the   instance  obtained  by  rounding  t h e  
coordinates of  every city t o  the  nearest  integer.  In  t h e  rounded  instance, t h e  distance 
between  any  two  distinct  cities  is  a t  least  1. Moreover,  in   t h e   transforma t ion ,  every 
city  has   moved  by  a t   most  a/2.For  any  tou r   T ,   let  1(T) and   l ' (T )   denote  i t s  
length  in  the   original  and   transformed  instances  respectively.  Since we  can  perform 
an  excursion  from  the  new  location t o  t h e  old  location of  any  city  (or vice versa), we 
derive  t h a t  

lZ(T) - Z1(T)l5 f i n .  
(1) 
Thus ,   if  we  have  a  (1+ 8)-approx ima t ion  algorithm  for  t h e  rounded  instance, we  get 
t h a t   the   tou r   produced  T has  a  length  satisfying 

'By  approximation  scheme, we  mean  a  1+ €-approximation  algorithm  for  any fixed  E  > 0. 

2We always mean  the   Euclidean  TSP  in  tw o  dimensions. 


O P T  
=  (1+ € ' ) O P T +   ( 2 + e 1 ) J Z n  5 (1+ e t ) O P T +   ( 2+ e 1 ) JZ - 2n 

1+ e l +  

O P T  5 (1+ ~ ) n ,

2n 

whenever,  for  example,  6'  = 0.86,  6  < 1, and   n  2 1016  (bu t   remember  6  is  fixed  so 
th i s  last  condition  is not  a  problem). 
The  partitioning  in Arora's algorithm works  differently  t h a n   in Karp's  algorithm. 
Arora's algorithm  looks  a t  what  is  called  a  '113: 2 1 3 - t i l i n g " .   Informally,  a  113: 213-
tiling  is  a  recursive  partitioning  of  t h e   bounding box  in to   smaller  rectangles  by  hor-
izontal  and   vertical  lines  so  t h a t   each  line  par t i t ion   divides  t h e   longest  side  s of  t h e  
corresponding  rectangle  in to  two  pieces  whose  length  is  a t   least  113 t h e   length  of  s .  
We  also  require  t h a t   each  vertical  (resp.  horizontal)  line  par t i t ion   goes  "slightly"  t o  
t h e  left  or  t o  t h e  right  (resp. slightly above  or  below) of  a  city.  Slightly, for example, 
can be understood  as  off  by  612 where  6 represents  t h e  smallest gap  between  two  dis-
t inc t   x- or  y-coordinates  of  cities.  The  goal of  th i s  is  t o  allow only  a  small number 
of  possible x- and  y-coordinates  for  line par t i t ions   (namely 4 4 ,  while avoiding t h e  
problem  of  having t o  assign cities  t h a t  fall right  on a  line par t i t ion  t o  either side of  i t .  
However, i t  may  not  be  possible  t o  have such  a  line par t i t ion   and  satisfy t h e   113: 213 
requirement.  Th is  is t h e  reason  for t h e  somewhat  complicated definition  t h a t  follows. 

D e f i n i t i o n   1  L e t   R  be  a  r e c tang l e   in R2 w i t h   s i d e s   para l le l   t o   t h e   c o o r d i n a t e   a x e s .  
L e t   s  be  t h e   l o n g e s t   s i d e   of  R  a n d   l e t   is1  be  i t s   l e n g t h .   A  l i n e - p a r t i t i o n   of  R  is 
a  p a r t i t i o n i n g   of  R  i n t o   t w o   s m a l l e r   r e c t a n g l e s   b y   a  l i n e - s e gm e n t   p e r p e n d i c u l a r   t o   s 
a n d   a t   a  d i s t a n c e   of  6  of  a  c i t y .   A  l i n e - p a r t i t i o n   P  i s  v a l i d   iff  o n e   of  t h e  f o l l ow i n g  
c o n d i t i o n s  h o l d s :  

1.  P  d i v i d e s   s  i n t o   t w o   s e g m e n t s ,   e a c h   of  l e n g t h   a t   l ea s t   1~113. 

2.  T h e r e   a r e   n o   l i n e - p a r t i t i o n s   s a t i s f y i n g   ( 1 )  a n d  P  c a n   be  m o v e d   t o   t h e   c e n t e r   of 
t h e   r e c tang l e   w i t h o u t   c r o s s i n g   o v e r   a n y   c i t i e s .  

A  113: 213- t i l ing   of  a  r e c t a n g l e   i s   a  r e c u r s i v e   p a r t i t i o n i n g   of  a  r e c tang l e   b y   va l id  
l i n e - p a r t i t i o n s   u n t i l   t h e r e   i s   a t   m o s t   o n e   c i t y   in  t h e   i n t e r i o r   of  a n y   r e c tang l e .   ( S e e  
F i g u r e   1.) 

Figure  1 gives  a n   example  of  a  113: 213-tiling.  Notice  t h a t   line  par t i t ion   3  does 
not  divide t h e  longest  side of  t h e  corresponding rectangle into pieces of  relative length 
a t   least  113. 
How  deep  can  t h e   recursion  in  a  113: 213-tiling  be?  Note  t h a t   the   sizes  of  t h e  
rectangles  need  not  decrease  a t   each  stage,  because  t h e   first  par t i t ion   of  a  square 
produces  two  rectangles  of  t h e  same size  as  t h e  original square.  Also, if  t h e  cities are 
all  near  t h e   sides  of  t h e   rectangle,  no  valid  line-partition  will  cu t   t h e   longest  side  s 
into  pieces  of  length  a t   least  ls1/3.  However,  after  a t   most  four  levels  of  recursion, 

Figure  1: A  113: 213-tiling 

all t h e   remaining  rectangles  will  either  have  size a t  most  21~113or will have  no  cities 
in  the ir   interior.  Observe  t h a t   a  rectangle  of  size  1 / f i  has  a t  most  one  point  in   i t s  
( f i n 2 )+ 1 = O(1og n ) .  
interior.  Thu s  t h e  recursion  has  dep th   a t  most  4 
The   key  theorem  underlying  Arora's  algorithm  will  tell  us  t h a t   there   is  a  near- 
op t ima l  tou r   t h a t   doesn't cross  any  of  the   par t i t ions  we  made   too  often  and   t h a t  we 
can  find  such  t h e   best  such  tou r   quickly.  In   order  t o  make  th i s   precise,  we  need  t o  
specify  t h e   points  a t   which  we  will  allow  crossings.  Let  m  =  r c l o g n l ~ ]  for  some 
constant  c t o  be  specified la te r .   Divide  each  line segment  drawn  in  our  par t i t ion   into 
m  equally-sized  segments.  We  call  t h e  midpoints  of  these  segments  portals.  We  will 
look  a t  tours  which  cross  our  par t i t ion   only  a t  portals. 

D e f i n i t i o n   2  A  tour is  ca l led  m - l igh t   (with respect  to  a  given  tiling) iff  the following 
conditions hold: 

1.  Each  line partition  is  crossed  at  most rn times  and  only  at  portals. 

2.  The  tour  is  not  self-crossing, but  it  may  meet  itself  at  portals. 

To clarify P a r t   2  of  t h e  above definition, see Figure 2 .   We  allow a  tou r  which goes 
from city a t o  city b and   from city c  t o  city d via po r ta l  p; th i s  is an  example of  a  tou r  
which meets  itself  a t  a  por ta l .   However, we  do not  allow  a  tou r  which  goes from city 
a  t o  city d and   from city  b  t o  city  c  bo th   via  po r ta l  p; t h i s  is a  self-crossing.  Figure 3 
gives  an  example  of  a  3-light  tour .  
The  main  theorem  behind  Arora's algorithm  is  t h e   following: 

Theorem  2  1.  There  exists  a  113: 213-tiling  and  an m-light  tour  whose  length  is  a t  
most  1 + t times  the  length  of  the  optimal  tour. 
2.  The  best  m-light  tour  over  a l l   113: 213-tilings can  be  found  in   time no('/')  b y   d y -
namic programming. 

F igure   2:  Crossings 

F igure   3:  A  3-light  t o u r  

Proof:  We  first  prove  p a r t   1.  We  s t a r t   w i th   t h e   emp ty- t i l ing   a n d   t h e   op t imum  
t o u r   a n d  ca lcu la te  how  much  t h e  leng th  of  t h e  t o u r  mus t   increase  a s  we  modify  i t   t o  
be  m-light  a t  each  successive  refinement  of  t h e  pa r t i t ion .   Consider  a  single rectangle 
R  a t  some s tage   of  our   pa r t i t ion .   Let  T be  t h e  t o t a l  leng th   of  t h e   t o u r  w i th in  R  a n d  
let  W  be  t h e  size  of  R .   We  t r e a t   t h e  problem  in  two  cases: 

Case  1:  T 5 mW /3 .   Let  p  = 3 T I W   5 m .   Consider  a  random   line  segment  which 
c u t s   t h e   longest  side  of  R  in to   a  frac t ion   selected  uniformly  between  113  a n d   213. 
T h e n  

where  t h e   sum   is  over  all  segments  e  of  t h e   t o u r   which  lie  in  R  a n d   I ,   deno tes   t h e  
leng th   of  e.  So  the re   exists  a  line  segment  w i th   a t  mos t   p  5 m  crossings.  We  may 
slide  th i s   segment  t o  t h e  nearest  c i ty   on  e i ther   side w i thou t   changing  t h e  number   of 
crossings, so  the re  exists a  valid  l ine-par t i t ion  w i th   a t  most  p crossings.  Now, moving 

each  crossing  t o   t h e   closest  po r ta l ,   t h e   leng th   of  t h e   t o u r   is   increased  by  a t   most 
pW / m   = 3 T /m .   T h u s  t h e  new  t o u r   is longer  t h a n  t h e  old  t o u r  by  a  fac tor  of  a t  most 
1+ 3 /m .  
Case  2:  T  >  mW /3 .   Take  any  valid  line  pa r t i t ion   of  R .   T h e   t o u r   might  cross 
t h i s   pa r t i t ion   many   t imes ,   say  k  times.  However,  we  can   use  t h e   same   tr ick   a s   in 
Ka rp ' s  pa r t i t ion ing   a lgor i thm   t o   reduce  t h e   number   of  crossings  t o   2  while  no t   in- 
creasing t h e  leng th  much:  Split  t h e  i t h  crossing po in t   in to  two po in ts ,   i  a n d  i t ,one on 
each side of  t h e  boundary.  Now  connect  all these   (sp l i t)  crossing po in ts  in  a loop  t h a t  
only  crosses  t h e   line pa r t i t ion   between  1 a n d   1' a n d   between  k  a n d   k t .  Add   ano the r  
k  edges  which  pa ir   u p   consecutive  po in ts   in  t h i s   loop  using  t h e   sho r te r   of  t h e   two 
possible perfect  matchings.  (See F igure  4.)  Now  t h e  t o u r ,  along w i th   these  add i t iona l  

F igure   4:  Shor t-c ircu i t ing  t h e  crossings 

edges  forms  a  connected  g raph   in  which  every  node   has   even  degree.  So  the re   is  a n  
Eu ler ian  p a t h ,   i.e.  a  t o u r  which  uses  every edge exac t ly  once.  Th i s  is  longer  t h a n  t h e  
original  t o u r   by  a t  mos t   3 W   (since  t h e   line  pa r t i t ion   has   leng th   a t   most  W )  a n d   i t  
crosses  t h e   line  pa r t i t ion   a t  most  four  times.  These   crossings  can   occur   in   only  two 
places  (between  1 a n d   1' a n d  between  k  a n d   k t ) ,  so,  if  the re   a r e  more  t h a n  two  edges 
crossing,  one  of  these   po in ts   mus t   be   crossed  a t   least  twice.  Removing  two  of  t h e  
crossings  a t   one  of  these   po in ts   s t i l l  leaves  a  connected  Eu ler ian   g raph   ( t h e  degrees 
of  two  nodes have  each  been  reduced  by  two) ,  so we  can  find  a  new Eu ler ian  p a t h   ( a t  
no  add i t iona l  co s t ) ,  which  crosses  t h e   line  pa r t i t ion   a t  mos t   twice.  Now  we  need  t o  
move  these  crossings  t o  po r ta l s ,   which  increases  t h e   t o u r   leng th   by  a t  most  2W /m .  
Ou r   t o u r   leng th   ha s   increased  by  a t  mos t   3 W  + 2W /m   5  (9  + G /m )T /m   5  1 0 T /m  
(a s  long  a s  m  > 6 ,  b u t   t h i s   is  okay  since  m  + co   a s   n  +=co.)  So  t h e   leng th   of  t h e  
t o u r  w i th in   R  has   increased  by  a  fac tor   of  a t  mos t   (1+ 1 0 /m ) .  
The re   is  one sma l l  problem - t h e  t o u r  might  now  cross  itself.  F i r s t  we  dea l  w i th  
crossings  t h a t   occur  a t  po in ts   o the r   t h a n   por ta ls .   We  can   in troduce   a  fictitious  pa i r  
of  nodes  a t  each  self-crossing  a n d   shor t-c ircu i t   a s   above  t o  remove  t h e   crossing.  For 

example,  if  t h e   tou r   goes  from  city  a  t o   city  b  and   from  city  c  t o   city  d  and   these 
two  pa th s  cross a t  point  x ,  then  we  introduce two  fictitious nodes  x l   and  x2  a t  point 
x .   We  then   either  (1) connect  x l   t o   a  and   c  and   x2  t o   b  and   d,  or  (2)  connect  x2 
t o  a  and   d  and   x2  t o  b  and   c.  One  of  these  two  possibilities  must  yield  a  connected 
Eulerian  graph ,   so  there   is  a  new  tou r   which  does  not  cross  a t   x .   In  t h e   first  case, 
th i s   tou r   goes  from  a  t o   x  t o   c  and   from  b  t o  x  t o   d.  We  no  longer  need  x  as   an  
intermediate  point,  because  we  can  go  directly  from  a  t o  c and   from  b  t o  d, resulting 
in  a  strictly  shorter  tour .   However, th is  may  introduce o ther  crossings,  in which  case 
we  repea t .   Since  there  are  only  finitely  many  possible  tours   on  n  nodes  and   since 
t h e  length strictly decreases  during t h e  short-circuiting,  th is  process must  term ina te ,  
resulting  in  a  tou r   t h a t   does  not  meet  itself, except  a t  portals. 
To  deal with  crossings  a t   portals,  we  do  t h e   same  th ing ,   introducing  a  fictitious 
node  and   short-circuiting.  However, we  cannot  remove  t h e  por ta l   as  a n  intermediate 
point  since we  may  only cross line-partitions a t  portals.  Doing th is  for all crossings a t  
portals,  we  ob ta in   a  tou r  which  does  not  cross  itself  anywhere  and   meets  itself  only 
a t  portals. 
If  we  perform  th is   procedure  on  each  rectangle  a t   some  s tage   of  t h e   refinement 
process,  we  increase  t h e   to ta l   length  by  a  factor  of  a t  most  (1+ c l /m )   for  cl  = 10. 
Thus   t h e   t o t a l   increase  over  all  levels  is  a  factor  of  (1+ c l /m)o( lOgn)<- e'/2  <- 1+ t ,  
for  c < 1, if we  choose t h e  constant  c in t h e  definition  of  m  appropriately.  This proves 
pa r t   1 of  t h e  theorem. 
Now  we  need  t o  show how  t o  find  the  best  m-light  tour .   Th is  is done  by  dynamic 
programming.  The   idea  is  t o   show  t h a t   we  can  break  the   problem  of  finding  t h e  
best  m-light  tou r   in to   nO(l/') subproblems  and   t h a t   we  can  solve  each  subproblem 
efficiently given  solutions  t o  all  of  i t s  subproblems.  F irs t   we  describe  and   enumerate 
all t h e   subproblems. 
Every  line-partition  in  a  113: 213-tiling  occurs  a t   an   x  & 6  or  y  & 6  coordinate 
of  a  city.  Consider  all  t h e   rectangles  defined  by  these  coordinates.  There  are  a t  
most  (2;1)2 
= O ( n 4 )  such  rectangles.  Each  side  of  each  rectangle  comes  from  some 
line  par t i t ion ,   so  there   are  a t  most  (2)ways  t o  place  portals  on  any  side  of  a  given 
4
rectangle.  Th is  makes  for  a t  most  (2,")  = O ( n 8 )  possible  por ta l   placements  on  each 
rectangle.  Any  m-light  tou r   must  cross  t h e   boundary  of  t h e   rectangle  in  2k  5 4m 
places  ( a t  most  m  times  for  each  side).  The   number  of  ways  of  choosing  2k  objects 
ou t   of  a  set  of  4m  objects with  replacement  is 

So t h e   t o t a l  number  of  ways  of  choosing t h e  places  a  tour   crosses  the   boundary  of  a 
given  rectangle with  given  por ta l   placements  is  a t  most 

Given  a  choice of  2k  por ta ls  in  which  t h e  tou r  crosses  some rectangle,  there  are  a 
number of  ways  these crossings can be paired  up  t o  specify which por ta l  t h e  tou r  exits 
from  after  each  entry.  The  number  of  pairings which  can  be made with  non-crossing 
curves  is  equal  t o  the   number  of  properly  parenthesized  expressions  consisting  of  k 
left-parentheses  and   k  right-parentheses.  This  is  well-known  t o  be  ( 2 , k )  / ( k  + I ) ,  t h e  
24m .  
k t h  Ca ta lan   number, which  is bounded  above  by  22" 
A  single  subproblem  consists  of  a  rectangle  with  por ta l   placements,  and   a  speci-
fication  of  which  portals  are  being  used  and   how  they  pair  up.  We  have  shown  t h a t  
there   are  O(n12212")  = no('/')  subproblems.  We  now  describe  how  t o   solve  each 
subproblem  optimally,  i.e.  find  t h e   shortest  set  of  pa th s   connecting  the   given  pairs 
of  portals  and   collectively visiting  all t h e   cities within  the   rectangle. 
Solving  the   subproblems  corresponding  t o   t h e   rectangles  with  a t  most  one  city 
inside  can  be  done trivially  (since there   are a t  most  2m  different ways  of  visiting  t h e  
city  inside,  if  any) .  
To  find  t h e   optimal  solution  t o   a  larger  subproblem  P, consider  all  possible  line 
par t i t ions  L of  t h e  rectangle in to  two smaller  rectangles R1 and  R 2 .  Then  consider all 
possible  ways  for  t h e   tou r   t o  cross  L  and   all  possible  ways  t o  match  these  crossings 
with  t h e   pairing  of  por ta ls   specified  by  P.  Each  possibility  defines  subproblems  Pl 
and   P2for  R1  and   R 2 ,  respectively.  Solutions t o  t h e   subproblems  PI  and   P2yield  a 
solution t o  P whose cost  is t h e  sum of  t h e  costs for PI and  P2 .  The  optimum solution 
for  P  is  simply  t h e   minimum  of  th i s   over  all  t h e   aforementioned  possibilities.  By 
analysis, similar t o  t h e  one done  above,  there  are only no ( l ld   possibilities  t o  consider 
(since there  are a t  most  no('/')  possibilities  for Pl  and  P 2 ) .  Thus  we  can ,  by  dynamic 
programming,  compute  the   optimum  for  all  the   subproblems  in  t ime  nO( l /') .  

References 

[I]  S.  Arora,  L'Polynomial-timeApproximation  Schemes  for  Euclidean  T S P   and  
other  Geometric  Problems",  Proc.  of  the  37th Annual  Symposium  on  the  Foun-
dations  of  Computer Science, 2-1  1 ,  1996 .  

