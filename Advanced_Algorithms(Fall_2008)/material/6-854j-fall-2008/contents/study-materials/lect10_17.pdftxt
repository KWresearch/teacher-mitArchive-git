MIT OpenCourseWare
http://ocw.mit.edu 

6.854J / 18.415J Advanced Algorithms 
Fall 2008
��

For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms. 

18.415/6.854 Advanced  Algorithms 

October  17, 2001 

Lecturer:   M iche l   X .   G o em a n s  

Scribe:   A s h i s h   K o u l  

Lecture   10  

1  Minimum  Cost  Circulation Problem 
Theorem 1  L e t   f  be  a  c i rcu la t ion .   T h e  following  are  equivalent:  

( i )   f  i s   of m i n i m u m   cost .  

( i i )   G f h a s   n o   negative   cost  directed  cycles .  
( i i i )   3 p  : cp(u,w)  2 0  V(u, w)  E Ef, where   cp(v,w) = c(u, w) + p (u )  - p (w ) .  
Proof:  i j  ii and   iii +- i were proven  last  lecture.  All  t h a t   remains  is  t h e  proof  of  ii +- iii: 
Let  G' be  obtained  from  th e   residual graph G f by  adding  a  vertex  s  linked t o  all  other  vertices  by 
edges of  cost  0  ( th e  costs  of  these  edges do not  ma t te r ) .   Let p (u )  be th e   length  of  the   shortest p a th  
from  s t o  v  in G' with  respect  t o  th e  costs. 
These  quantities  are well-defined  since G f   does  not  contain  any  negative  cost  directed  cycles, and  
every vertex is reachable  from s. By definition of  t h e  shortest pa ths ,  p(w) 5 p (u )  +c(u, w)  V(u,w)  E 
Ef. This  implies t h a t   cp(u, w)  > 0  V(u,w)  E  Ef. 

2  Klein's Algorithm for MCCP 

Klein's Cycle  canceling algorithm: 

1. Let  f  be  any  circulation. 
2 .   While  G f   contains a  negative cycle r do 
push  6 = min(,,,)Er  v f  (u, w)  along  I?. 

Argument  for  Correctness: 

If  th e   algorithm  terminates,  then   the   circulation  found  must  be  optimum.  Furthermore,  if  all  ca-
pacities  and   costs  a re  integers, then  th e   algorithm will  terminate. 

Why? 
f (v, w)  is  always an   integer, thus  6 = min(,,,)Er  u f ( u , w) 2 1 
If  Ic(u,w) I  5 C and   I f   (u, w) 1  5 U ,  then  th e  absolute value of  th e  cost of  th e  optimal circulation 
is  a t  most  m CU  

Therefore, t h e  algorithm  terminates  after  0(mCU )  iterations. 

Remark  1  If  t h e   edge  capacities   i n  t h e  graph  are  i r ra t iona l ,   t h e n  t h e   a lgo r i thm   i s   n o t   correct. 

The   cycle  canceling  algorithm  can  be  applied  t o   th e   Max-Flow  Problem  by  making  appropriate 
modifications  t o  th e   graph  G.  Let  G'  be  obtained  by  setting  th e   cost  of  all  edges within  G  t o  0. 
Furthermore,  select  two  vertices  s and   t  from  within  th e   graph,  and   add   the   directed  edges  ( s , t )  
and   ( t ,s ) ,  where  c ( s , t )  = 1,c ( t ,  s )  = -1  and   bo th   edges  have  infinite  capacity.  Now,  solving  for 

t h e  maximum  flow  between  s  t o  t  is  equivalent  t o   solving for  th e  minimum  cost  circulation, which 
contains s  and  t .   In  this  circumstance, Klein's Algorithm  reduces  t o  t h e  Ford-Fulkerson Algorithm. 

Ford-Fulkerson Augmenting Path Algorithm: 

1. Begin  with  zero flow:  f  = 0. 

2 .   	 While  Gf  contains a  directed p a t h  P from  s  t o  t  do  

push  6 = min(,,,),p 
u  ( v ,w )  along P. 


The  running  time  given  above  for  Klein's  Cycle-Canceling Algorithm  is  not  polynomial.  The  nega- 
tive  cost  cycle in Klein's Algorithm  (or the  directed p a th  in th e  Ford-Fulkerson Algorithm) must  be 
chosen appropriately t o  insure a  polynomial  running  time. 

Candidates  for  Cycles  in Klein's Algorithm: 

1. The  most  negative cost  cycle  in Gf ? 

Finding  this  cycle  is  an  NP-Hard  problem,  so  i t  would  not  be  a  viable  choice. 


2 .   	 The  negative cycle  in  Gf  which  would  yield  th e  maximum  cost  improvement? 
Finding  this  cycle  is  again  a n  NP-Hard  problem. 
However for the  Max-Flow  Problem, this choice reduces  t o  finding the   s t -pa th  with maximum 
residual  capacity.  Such  a  p a th   can  be  found  in  O (m )  time,  m  = IEl.  The   resulting  Max- 
Flow  algorithm  is  known  as  the   '<fattestv p a t h   algorithm  (Edmonds-Karp  '72).  The   number 
of  iterations necessary  is  O (m  log U ) ,  thus   the   running  of  th e  algorithm  is  O (m 2  log U ) .  

3 .   	 Minimum Mean-Cost  Cycle? 

Define t h e  mean  cost  of  a  cycle r t o  be: 


where  Irl  denotes  th e   number  of  edges  in  r .   The   minimum  mean  cost  of  all  cycles  of  the  
residual  graph Gf  would  thus  be: 

min  -c ( r )  
'(')  = cy c l e s  T. in  G~  lr 1 

The   minimum  mean-cost  cycle  can  be  determined  in  strongly  polynomial  time  by  using  a 
modified  version  of  th e   Bellman-Ford  Algorithm.  More  precisely,  th e   minimum  mean  cost 
cycle  can  be  found  in  O (m n )   time.  Using  this  method  t o   solve  th e   Min-Cost  Circulation 
Problem  yields  the   Goldberg-Tarjan  Algorithm,  which  runs  in  polynomial  time.  Using  th is  
method  t o   solve  t h e  Max-Flow  Problem  yields what  is  known  as  th e   "shortest"  augmenting 
p a th   algorithm  (Edmonds-Karp) .  This  Max-Flow  Algorithm  is  able  t o   find  the   augmenting 
p a th   in  O (m )  time,  and   requires  O (m n )  iterations  t o  arrive  a t  th e   solution.  Thus,  th e   to ta l  
running  time  is 0(m2  n )  . 

3  The  Goldberg-Tarjan Algorithm 
Goldberg-Tarjan Algorithm: 

1. Begin  with  zero flow:  f  = 0. 
2 .   While  p ( f )  < 0 do 
push  6 = min(,,,),I-

u f  (u, w)  along  a  minimum  mean  cost  cycle r of  G f  . 
Analysis of Goldberg-Tarjan Algorithm: 

In  order  t o  analyze this  algorithm,  it  is  necessary  t o  define  t h e  concept  of  proximity measure for  a 
circulation  f .  

Definition 1  A  circulation f  is E-optimali f   there  exists p  such  that  cp(u,w)  2 -E  V(u,W )E Ef . 

Definition 2  ~ ( f )= minimum E  such  that f  is E-optimal. 

The  following theorem  s ta tes  t h a t  the  minimum mean  cost p ( f )  of  all cycles in Gf  is equal t o  -E( f ) ,  
as defined  above. 

Theorem 2  For  any  circulation f, p (f )  = -E( f ) .  

Proof: 

~ ( f )2 - 4 f )  
By  definition,  there  exists p such t h a t   cp(u, w )   > -E (  f )  V(v, w)  E  Ef . Thus ,  i t   is  implied  t h a t  
c P ( r )  2 - ~ ( f ) l I ' l  for  any  directed  cycle  r  E  G f .   But  for  any  I'  E  G f ,  c ( r )  = c p ( r ) .   Thus ,  
dividing  bo th   sides  by  Irl  yields  t h a t   t h e  mean  cost  of  any  directed  cycle  I' E  G f   is  a t   least 
- ~ ( f ) .Therefore, p ( f )   2 - ~ ( f ) .  
4 61 I- 4 f  1 
>  p ( f ) .   Let  c l (v ,w )  = 
Consider  p ( f ) .   For  every  cycle  r  E  G f ,   i t   is  the   case  t h a t  
C ( U ,   W )- p (f )   V(u, W )   E  Ef .  W i th   respect  t o   this  new  cost  function  c'  every  cycle  I' E  G f  
will  have  nonnegative  cost.  Now,  let  G'  be  obtained  by  adding  a  new  node  s  t o   Gf  and  
adding  directed  edges  from  s  t o   u  Vu  E  V ,   all  with  zero  cost.  Let  p (u )   be  t h e   cost  with 
respect  t o   c'  of  the   shortest  p a th   from  s  t o   u  in  th e   new  graph  G ' .   For  all  edges  (u, w ) ,  
p (w )  I p ( u ) + c ' ( u , w )  = p ( u ) + c ( u , w ) - p ( f ) .   This implies t h a t   cp (v ,w )  > p ( f )   V(u,w) E E f .  
Therefore, ~ ( f )5 - p ( f ) .  

Remark  2  Along  the  minimum mean  cost  cycle  I',  cp(v, w) = -E ( f )  V(v, w)  E  I'. 

Having completed  th e  necessary definitions and  proofs, we  may now proceed with  the  analysis of  the  
Goldberg-Tarjan Algorithm.  The  following theorem  considers  only one  iteration  of  the   algorithm. 

Theorem 3  Let  f  be  a  circulation and  let f '  be  the  circulation obtained  b y  canceling  the  minimum 
mean  cost  c y c l e   I' of  G f  .  Then, E (f ' )  < E (f ) .  
Proof:  By  definition, there  e x i s t s p s u c h  t h a t   cp (u ,w )  > - ~ ( f )V(u,w)  E  E f .  In   th e   caseo f   the  
minimum  mean  cost  cycle I' of  G f  , cp(u,w)  = -E (  f )  V(u, w)  E  I?.  After  performing  t h e  one  cycle-
canceling step, we  obtain th e  new  residual graph Gft . We claim t h a t  cp(u,w)  > - ~ ( f )V(v, w)  E  E f , .  
In   th e   case  of  all  edges  (u,w)  E  Eft nE f ,  th e   claim  is  certainly  true.  In  th e   case  of  all  edges 

(u, w)  E  E f / \ E f ,it  must  be  t rue   t h a t   (w , u )  E I?.  For  all  (w ,v )   E  I?,  cp (w ,u )  = - ~ ( f ) ,and   thus  
cP (v ,w )  = ~ ( f )2 - ~ ( f ) .  Therefore, c,(u,w)  2 - ~ ( f )holds  t ru e  for  all  ( v ,w )  E E f , .  

The   above  theorem  shows t h a t   by  completing  a  single iteration  of  th e   Goldberg-Tarjan  algorithm, 
it  is  impossible  t o  generate  a new  flow which  is  farther  from optimality  th an   t h e  original. 

