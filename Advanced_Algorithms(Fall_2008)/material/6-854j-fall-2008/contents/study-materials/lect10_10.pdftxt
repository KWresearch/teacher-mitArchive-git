MIT OpenCourseWare
http://ocw.mit.edu 

6.854J / 18.415J Advanced Algorithms 
Fall 2008
��

For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms. 

18.415/6.854  Advanced Algorithms 

October  10, 2001 

Lecturer:  Michel  X .   Goernans 

Scribe:  Jelena  Spasojevic 

Lecture  8 

Interior  Point  Algorithm Wrap  Up  

In   last  lecture  we  were  discussing  t h e   Interior  Point  Algorithm.  Our  goal  was  t o   optimize  barrier 
problem  BP ( p ) : 

min  cTx - p C ln x j   subject  t o   Ax = b ,  x  > 0 

To  find  p-center  one had  t o  solve some quadratic  constraints, thus   th e   algorithm  discussed  in  class 
was  using  full  Newton  steps.  In   this  way  we  get  approximate  p-center.  In  order  t o  asses  t h e   run 
time  of  algorithm  let  us  take  a  look  a t   how  does  our  proximity  measure,  a ( x , s ,  p )   change  with: 
x e x + Ax ,  s t s + As .   We  proved  th e  following theorem. 

Theorem 1  If  a ( x ,  s , p )  < a < 1, th en  

Thus, a s  a  corollary we  get: 
a ( x ,  s , p )  < - +-a ( x  + A x ,  s + A s ,  p )  < ~ ( x ,S, p )  < -,
2 
2 
3 
3 
i.e., proximity  measure  decreases  after  th e  Newton  step.  Therefore, if  we  continue  this  process,  we 
will  converge to  th e  p-center. 

However, in  order  t o  find th e  solution  of  the   linear program,  we  need  t o  find t h e  p-center  for p  = 0. 
Therefore, after each  step, we  also change  the  value  of  p:  p  e p ( 1 - 0).  We  showed the   following: 

Theorem 2  If  a ( x , s ,p )  = a  and  x T s  = n p ,   th en  

Therefore, t h e  algorithm  is  as follows: 

do ) ,p(O)) 5 i. Refer t o  th e  handout 
Initialization:  S t a r t  with  (x(O),do ) ,p(O))such t h a t  
t o  see  in more  detail  how  we  can  do this.  The  point  is  t h a t   we  can  choose this  s ta r t ing  point 
in  such  a way  t h a t   p(O) 5 26L,where L  is  the   length  of  th e  program. 

While  p  >_  6  do: 

- Find  Ax ,  A s  by  solving th e  Newton  s tep  equations. 

- Let  x t x + A x ,  s t s + A s ,  p  t p ( 1 -   8 )  where 8 = &. 

We  can prove  t h e  following. 

Theorem 3  I n   t h e   above  a lgo r i thm ,   if  before  t h e   N ew t o n   s tep   t h e   cen t ra l i ty   mea su re   a  i s   a t   m o s t   

i , t h e n   a f t e r   t h e   N ew t o n   s t e p   and   changing   p ,   we  still   have   o  < i .   

Proof:  If  a ( x ,  s ,  p )  5 i then  by  Theorem  1: 

(1 /2 )2   -- : 
o ( x  + A x ,  s + A s ,  p )   5 
2 1  - 1 2   4 '  
Now  let us change p t p (1 -Q ) ,  where 8 = A.Using Theorem 2 we  get a ( x + A x ,  s + A s ,  p(1-8))  5 

Therefore, in order t o  have p  5 c, we  need  k  = O ( f i ( L   + l n  a ) ) .  
Wh a t   is  t h e  number  of  iterations  t h a t   we  have  t o  make?  Suppose  we  s t a r t   a t   p(O) = 2 6 L .  After  k 
iterations we  have p 5 (1-
How  do  we  choose  c?  We  know  t h a t   a t   any  point  because  of  duality  gap:  x T s  = n p .   Given  t h a t  
we  s top  when  p  < r  then   we  have  x T s  < n r ,  i.e.,  the   duality  gap  is  smaller  th an   n r   a t   th e   end  of 
t h e  algorithm.  Th e  following theorem  allows  us  t o  s top  as  soon  a s  duality  gap  is  smaller  th an   & 
and  take  any vertex below  as t h e  solution.  Suppose  t h a t  when we  s top  there  are two vertices  of  the  
original  linear  program  for  which  th e   above  duality  gap  condition  holds.  These  two  vertices,  x('), 
x ( ~ ) ,bo th   satisfy Ax  = b ,  x  2 0. 

Theorem 4  If  cTx(') # c ~ x ( ~ )
t h e n  

where  L 	 i s   t h e   s i ze   of  t h e   i n i t i a l   l inea r  program. 

Proof:  We  have  t h a t   A  is  a  ma t r ix   with  integer  entries  and   b  is  a  vector  with  integer  entries. 
Then we  can express: 

rn
x ( l )= (- 	Pl  P2- & ) T   and  x ( ~ )= (-,  -,  ..., -), 
r1  r 2  
q  ' q  ' ""  4 
S
S 
S 
and  q , s , p i , q j  1 zL  

v i , j  : q , s , p i , q j  E 
by  th e  theorem  we  had  in  a  previous  lecture. 

Assume c  is  a  vector  with  integer  entries  as well.  Then: 
lCTX(') - CTx(2)I
1-=  in t eg e r  
4 


in tege r  
-I = [ - 

S 

-

1 
in t eg e r  
I > - > - . 

qs 
qs 

1 
22L


Now  choose c  so t h a t   n r  < 2
This implies k.  O ( J i i L ) .  As  th e  number  of  steps in th e  ellipsoid 
=
~
~
~
algorithm  was  O ( n 2L )  we  can  see  t h a t   interior  algorithm  has  much  smaller  number  of  iterations. 
Also, in ellipsoid algorithm we  were reducing t h e  volume of  t h e  ellipsoid by a small factor.  Here there 
are  tons  of  small  tricks  t o  reduce  p  well  and   t o  s t a r t  with  p  t h a t   is  not  so  big.  One  could  also  do 

x t z + 2Ax, s t s + 2As  t o  make  it more  appealing in  practice.  Often  in  actual  implementations 
t h e  number  of  iterations is  independent  of  t h e  size of  th e  program. 
By choosing E  so t h a t  ne  < 2-2L, we  know t h a t  every vertex below th e  current  solution is an  optimum 
solution  of  th e   linear  program.  But  How  do we  find  such  a  vertex?  In  previous  lectures  we  had  a 
Lemma  saying t h a t   for  every  z  in  a  polyhedron  P, there  is  always a  vertex  of  P below  it  of  value 
less  th an   i t .   In   fact, t h e  proof  of  this  lemma provides  an  algorithm  for  finding  such  a  vertex. 

At  this  moment  we  s top  with  linear  programming  t o   go  on  t o   network  flows.  To  recapitulate  we 
have  seen  two main  classes of  linear programming algorithms: 

Ellipsoid:  has the  advantage t h a t  i t  only requires us t o  provide a separation subroutine, ra the r  
t h a n  listing  all  th e   constraints  of  the   linear  program. 

Interior  Point Method:  has  th e   advantage t h a t   it  is much  faster  th an   th e   ellipsoid algorithm. 
Variants of  this  algorithm  a re  actually  used  in  practice. 

A  major  open  question  in  linear  programming  is  if  the re   exists  a  strongly  polynomial  time  linear 
programming  algorithm, i.e.,  one  whose running time  does  not  depend  on  the   size of  numbers  but 
only  on  dimensions n , r n .  

Network  Flows 

A  network  flow problem  t h a t  we  will  consider in more detail is:  Given network  (graph) and  quantity 
of  flow  allowed  on  each  edge  (capacity)  and   cost,  our  goal  is  t o  find  a  flow  of  minimum  cost  t h a t  
satisfies  some  circulation  properties  ( t o  be  defined  later).  This  problem  can  be  seen  as  a  linear 
programming problem.  However, we will use th e  s t ruc tu re  of  th is  problem  t o  build  faster algorithms 
and   will  be  able  t o   give  a  strongly  polynomial  time  algorithm  t h a t   solves  this  problem  (i.e.,  i ts  
running  time  will  depend  only  on  th e   number  of  edges  and   vertices  in  t h e   graph,  and   not  on  the  
numerical  values  in  the   inpu t ) .  

Problems Being  Considered  in  Network  Flows 

There  are many  problems  t h a t   can be  considered  as Network  Flow  problems.  Here's a  list  of  some 
of  them: 

Shortest  p a th  problem 

Bipartite  matching problem 

Maximum  flow problem 

Minimum-cost  flow  problem:  This  problem  is  more  general  t h a n   the   above  problems,  there 
exist  a  strongly polynomial  algorithm for i t   and  we  can also reduce other problems  t o  th is  one. 
This is  th e  very  reason  we  will  focus on  this  one. 

a  Multicommodity  flow problem 

Notations 

We  will  use  directed  graph  G  = (V,E) t o   represent  a  network.  We  will  use  the   Goldberg-Tarjan 
notation.  Description  of  our  network  model  follows: 

We  a re  given a  bi-directed  graph G = (V,E),i.e.,  for  every v,w E  V ,  

(v,w)E E J (w,v)E E. 

On  every edge  (v,w)   E E there  is  a  capacity u(v,w).(u: E + Z) 
On  every edge  (v,w)E  E there  is  a  cost  c(v,w)t h a t   is  anti-symmetric: 
c  : E + Z, V(v,w)E  E :  c(v,w)= -c(w,v). 

Definition  1  A  flow  i s   a f u n c t i o n   f  : E  + R  t h a t   satisfies  

1.  a n t i - s ymm e t r y :   V(v,w)E E : f (v,w)= -f (w,v), and  
2. capacity   con s t ra in t :   V(v,w)E  E : f (v,w)5 u(v,w). 

Definition 2  A  circulation  i s   a flow  f ,  for   wh ich   n o t h i n g   i s   lo s t   i n  t h e   n e tw o r k ,   i .e . ,   n e t  flow  i n t o  
eve ry   v e r t e x   i s   0. More   fo rma l ly ,  

Now  t h e  Minimum  Cost  Circulation problem  is  t o  find  a  circulation which  minimizes: 

Note  t h a t   here because of  anti-symmetric  costs  and  flows we  are counting  cost  of  every edge  (if  we 
see them  in  a n  undirected  way)  exactly  twice. 

First  as  exercise  convince  yourself  t h a t   this  is  a  linear  program.  Therefore  we  can  apply  linear 
programming  algorithms we  have  seen so far.  Now  let's discuss  reductions  from  other  network  flow 
problems  t o  this  problem. 

Maximum Flow  Problem 
Given a  directed graph G = (V,E),two vertices  s,t E  V ,capacity u : E + N,find a  flow f  : E 
t h a t   satisfies 

V(v,w)E E : 0 5 f (v,w)5 u(v,w) 

25 

(1) 

and  maximizes Cv:( s , u ) E E   f  ( s ,v).  One can prove t h a t  maximum  flow is equal t o  th e  capacity of  the  
smallest  cut  (This is known  as th e  Max-Flow-Min-Cut  theorem). 

The  maximum  flow problem  is a special case of  the  minimum  cost circulation problem.  Indeed, given 
a n   instance  of  t h e  maximum  flow  problem,  add   an   edge  between  s  and   t  and   define  u ( t ,  s )  = oo, 
0 for  all  (v, w) # ( s ,  t ) .  
U (S ,  t )  = 0, ~ ( t ,  = -1  = -c(s,  t )  and   c(v, w)   =
S)   	
The  capacities  on  the  bidirected  edge  ( s ,  t )  is such t h a t   f ( t ,  s )  2 0, implying  t h a t  th e  flow  goes from 
t  t o   s .   The re  is  a  one-to-one  correspondence  between  circulations in this  extended  graph  and   flows 
in  th e  original  graph  satisfying  all flow  conservation  constraints  in  V \ {s,t}.  Moreover, the   cost  of 
any  circulation  in  this  extended  graph  is  exactly  equal t o  minus  the   net  flow  out  of  s  (or into  t )  in 
t h e  original  graph.  As  a  result, th e  maximum  flow problem  in  G  is  equivalent  t o  th e  minimum  cost 
circulation problem  in  t h e  extended  graph. 

The  following theorem  is  known  as t h e  integrality  theorem. 

Theorem 5  If  all  capacities  are  integers  (u  : E  t+  Z),  then  there  is  an   optimum  flow  f  whose 
values  are  all  integers  (f: E e Z). 

To  prove  this  theorem  we  can  use  algorithmic or  linear  programming  approaches.  We  will  see  the  
first  proof  later  on  and  just  t o  note  t h a t   main  idea for  the   second one is  t h a t   one  could  argue  t h a t  
vertices  of  linear program  induced  by  th is  problem  have  only  integer  components. 

Bipartite Matching  problem 

Given a n  undirected bipartite graph G = (V, E) with bipartition V  = AU B ,  ( A n  B  = 0, E & A x B ) ,  
find  a maximum  cardinality matching,  i.e.,  a  set  of  non-adjacent  edges of  largest  cardinality. 

A matching  is called perfect  iff  it  covers every vertex exactly once.  This problem  is  a  special case of 
t h e  maximum  flow  problem  and  therefore t h e  minimum  cost  circulation problem.  To transform  the  
maximum  cardinality  b ipa r t i te  matching  problem  into  a maximum  flow problem, we 

1. direct  all  t h e  edges from A t o  B ,  

2 .   	 add   a  source vertex  s ,  a  sink  vertex  t ,  

3 .   	 add  th e  edges  ( s ,  a )  for all vertices  a  E  A  and  t h e  edges  ( b , t )   for all vertices  b  E  B and  

4. 	 define  the   capacity of  all existing edges t o  be  1 and  the   capacity of  their  reverse edges t o  be 0 
(in other words,  the  flow  on  th e  existing edges have  a  lower  bound  of  0 ) .  

By  the   integrality  theorem, we  know  t h a t   th e  flow on any existing edge can be  assumed  t o  be either 
0  or  1.  Therefore,  t o   any  flow  f ,  the re   corresponds  a  matching  A4  = {(v, w )  E  E  : f ( v ,  w)  = 1) 
whose  cardinality  is precisely equal t o  th e  net  amount of  flow out  of  vertex  s .  
It  is  also easy  t o  construct  from  a matching M a  flow of  value  I  M I .
  As  a  result, any integral  flow  of 
maximum  value will  correspond  t o  a matching  of  maximum  cardinality. 

In   fact,  the   minimum  weighted  bipartite  matching  problem  is  also  a  special  case  of  t h e  minimum 
cost  circulation  problem.  We  can  modify  th e   above  transformation  in  the   following  way.  Define 
t h e   cost  of  any  edge  of  the   original  graph  t o  be  its  original  cost  and   th e   cost  of  any  new  edge  t o  
be   0.  Now,  we  can  model  th ree  versions  of  th e  minimum  weighted  bipartite  matching  problem  by 
appropriately  defining th e  capacities on  t h e  edges  ( t ,  s) and   ( s ,  t )  : 

1.  If  ~ ( t ,   n  and  u ( s ,  t )  = -n   where  n = IAl  = IBI, we  get  the  minimum  weighted perfect  ( a  
S) = 

perfect matching  is  a matching  t h a t   covers  all th e  vertices)  matching.  


2 .   If  u ( t 9s) = n and  u ( s 9t ) = 0 ,  we  obtain  th e  minimum  weighted matching. 

3.  If u ( t ,  s )  = k and  u ( s ,  t )  = - k ,   we  obtain  the  minimum  weighted matching  of  size k. 

