MIT OpenCourseWare
http://ocw.mit.edu 

6.854J / 18.415J Advanced Algorithms 
Fall 2008
��

For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms. 

18.415/6.854 Advanced  Algorithms 

November  21, 2000 

Lecturer:   M iche l   X .   G o em a n s  

Lecture   18 

Scribe:   A hm e d   I sm a i l   and   J o h n n y   C h e n  

In  th e   previous  lecture,  we  discussed  the   Bar-Yehuda  and   Even  2-approximation  algorithm  for 
t h e  vertex  cover  problem,  and   introduced  the   Generalized  Steiner  t ree   problem,  and   outlined  a  2-
approximation  algorithm  of  Goemans  and  Williamson  which  formulates  the   problem  using  duality 
which  constructs bo th   a n  integer  solution  and   a  dual  solution  of  a  relaxed  version  of  th e   problem, 
and  began  the   construction  of  t h e  proof  of  correctness of  th e   algorithm. 

1  The  Generalized Steiner tree  problem 
Problem  1  (Generalized  Steiner tree  problem)  G i v e n   a  graph  G  = (V ,E )  w i t h   costs   c (e) 2 
0 ,Qe  E  E,  and  a  s e t   o f   v e r t e x   pairs   T  &  V  x  V ,  find  a  subgraph  F  of  m i n i m u m   cost   s u c h   t h a t  
Q ( s ,  t )  E  T, s  and  t  are  connected   i n  F .  

As  a  linear  program, th is  problem  can be formulated as trying t o  determine th e  optimal solution 
O P T  for 
min C c (e) x (e) , 
e EE 

such t h a t  

where 

Ra the r   th an   deal  with  th is   complicated  integer  linear program,  Goemans and  Williamson  relax 
t h e  problem  by  replacing  the   integer  constraint  (3 )  with  a  nonnegativity  constraint,  and   therefore 
look for  th e  solution LB  which  satisfies  (1) subject  t o  t h e  constraints  (2)  as well  as 

Goemans and  Williamson  also  consider  t h e  corresponding dual problem, 

x ( e ) 2 0 ,Qe .  

such t h a t  

Considering  (1) and   ( 5 )  together,  we  can  obtain  bo th   a  feasible  set  of  edges  F a s  well  a s  a  set  of 
ys's satisfying  (6 ) ,  such t h a t  
C c ( e )  5 2 C ys5 2 0 ~ ~ .

 

The  details of th e   algorithm  t o  compute F and  th e   ys's  were provided  in  t h e  previous  lecture. 

2  Eliminating  the  ys's 

Our  aim is t o  establish t h a t   (8) is valid for t h e  Goemans-Williamson  algorithm.  However, before we 
resume  our  proof of  its  correctness, we  note t h a t   although we  keep  track of  t h e  ys's  for t h e  purpose 
of  establishing  correctness,  we  do  not  actually  use  th e   ys's  as  variables  when  implementing  this 
algorithm.  Instead, we  choose t o  keep track  of  d ( i ) ,  which  is  defined  as 
d (4  =  C Ys, 

for  every  vertex  i.  Then,  for  a n   edge  ( i ,  j)  E  6 ( S )  , where  i  and   j  belong  t o   different  connected 
components of  F, 

The  goal of  t h e  dual program  is  t o  maximize  each  y s  while  still obeying t h e  constraints implied  by 
( 6 ) ;if  we  choose t o  ignore  th e   individual ys9s, we  can t r y  t o  minimize  c ,   - d ( i )  - d ( j )  instead. 
Thus ,  our  algorithm  proceeds  as follows. 

Initialize  [ F = 0; C  = {{i)  :  i  E  V ) ;   d ( i )  t 0 V i   E  V;  k  t 1; (ys  t 0 V S  E  F)]; 

While F nC # 0  do:  

(see observation  in  notes below) 

c = min  ( 
cij - d ( i )  - d ( j )
min 
min 
cij - d ( i )  - d ( j )
' iECp7jECq7~#q,Cp €F7Cq#F 
iECP7jECq7~#q,Cp,Cq €F  2 

Let  ek  t ( i , j) a t t a in  this minimum. 
F o r C € C n F :  
For  i  E  C:  d ( i )  t d ( i )  + c ;  
F  t F  u { ek ) ;  
k t k + l ;  
Update  t h e  connected  components C; 
F'  t F ;  
For  l t k  - 1 down  t o  1: 
if  F' - {el)  is  feasible then  F'  t F'  - {e l ) ;   (delete step) 
Ou tpu t   F ' .  

Note  t h a t   th e   delete  step  in  th e   algorithm, as  written  above,  is  easier  for  t h e   purposes  of  the  
proof.  However, we  do not need t o  perform  th e  delete in th is  manner:  although we  can cycle through 
t h e  edges in  the   order  in which  we  added them,  we  can  also  a t temp t   t o  remove them   in   any  order. 
Either  route will  yield  th e  unique  solution which  has pa ths  between  our pairs  of  vertices  s 's  and  t's, 
which  will  be  th e  same result  as using  the   condition 
F'  = {e  E  F  : F  \ {e)  is not  feasible)  . 

3  Correctness of  the  algorithm 

Our  goal  is  t o  establish  t h e  following result. 

Theorem 1  T h e  a lgo r i thm   of G o em a n s   and   W i l l i am s o n   r e t u r n s   a feasible  s e t   of  edges F  and   a  s e t  
o f  ys ' s  s u c h   t h a t  

C c ( e )  5 2 C  ys  5 2 0 P T .  

(9) 

In our previous  lecture, we  established  the  following lemma. 
Lemma  2  If  C n F = 0,  t h e n  F  i s  feasible. 
Thus ,   since  by  construction  t h e   algorithm  only  terminates  if  C n F = 0,  we  know  t h a t   any 
resulting F obtained is feasible.  We  thus  focus on  establishing the   inequality  (9 ) .  Let  us  first  define 
two sets 0 and  E  as follows. 

Definition 1  ~ e t O = C n . F a n d E = C n F ,  s o   t h a t C = E U O .  

We  now  construct  a  graph  H  =  ( C ,  E  ( H ) )  by  shrinking  all  th e   connected  components  into 
vertices.  In  this  construction,  the   set  E  ( H )  is 

Since H has no  cycles, i t   is  a  forest,  and  therefore 

where d v  is  the  degree of  vertex v in t h e  forest  H .   If  H  is  a  single tree, then  equality holds.  We  can 
ignore all vertices  v  such t h a t   d v  = 0.  We  now want  t o  prove t h e  following result. 

Lemma  3  T h e r e   does  n o t   e x i s t   v E  E  s u c h   t h a t  dv = 1. 

Proof:  Suppose t h a t   3v E  E  : du = 1,where v corresponds  t o  th e  connected  component C ,  and  let 
el, be th e  unique edge corresponding  t o  this  vertex.  Since we  could not  remove  ek  during th e  delete 
s tep ,  there  exists a n  edge  (s ,t ) E  T  such  t h a t   s E  C ,  t 4 C .   However, this  implies t h a t  

which  is  clearly  a  contradiction.  Thus ,  the re  does not  exist  v E E  such t h a t   d,  = 1. 
This lemma lets us  say  t h a t  

Cancelling  like terms  from  the   outside of  (10) g'lves us 

Now,  as we  know  t h a t  

we  can  exchange t h e  order  of  summations  t o  say t h a t  

Now  i t   remains t o  prove t h e  following lemma. 

Lemma  4  During  the  execution  of  the  algorithm, 

Proof:  The   proof  of  this  is  carried  ou t   by  induction  on  k .   Th e   base  s tep   is  trivial,  since  we 
initialize  y s  = 0  a t  the   s t a r t   of  t h e  algorithm. 
Then ,   during  a n   iteration,  ys  increases  by  an   amount  e  for  each  S E  F n C,  so  t h e  right-hand 
side of  the   inequality increases by  2c  IF nCI.  By the  same reasoning,  th e  left-hand  side increases by 
CstTncc 16 (S)n F'I . Thus ,  we  want  t o  show t h a t  

However, we  know  by  construction  t h a t  F nC = 0 ,  and  when  v  E 0, 16  (S)n F' I  is just  t h e  degree 
du of  node  v  in H. As  a  result, we  have 

which  is  a  weaker  form  of  t h e  inequality  (11).  This  completes  t h e  proof  of  (12), and  with  i t ,  of  the  
I7 
correctness  of  th e   algorithm. 

4  Implementation  and  generalizations 

This approach  also works  and  gives a  bound  for  problems  such  as 

for other collections of  sets F,F = {S : IS1 odd )   (for perfect matchings) or F = {S : IS  n A1  #  IS  n B I). 
W i th   th e  following implementation  considerations, t h e  algorithm  runs  in  0( n 2  1og  n )  time. 

The  Union-Find  d a t a  s t ruc tu re  can be  used t o  upda te  connected  components (in roughly  linear 
time) . 
Instead  of  using  a  double  loop  t o  find  e  (which would  take  m2 t ime ) ,  we  can  create  a  "time-
axis,"  keep  track  of  th e   time  when  each  edge  becomes  t igh t ,   presuming  nothing  else  in  the  
graph changes. 

Each  iteration  (there are n  of  them)  can be  done with  fewer th an  n  priority  queue operations, 
since  modifying  a  connected  component  necessitates  changing  th e   time  of  up  t o   n  edges. 
Thus  the re   a re  a t  most  0 ( n 2 )  priority  queue  operations, and   th e   to ta l   running  time  will  be 
O (n2log n )  . 

