MIT OpenCourseWare
http://ocw.mit.edu 

6.854J / 18.415J Advanced Algorithms 
Fall 2008
��

For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms. 

18.415/6.854  Advanced  Algorithms 

September  24,  2001 

Lecturer:  Michel  X .   Goemans 

Scribe:  Reina  R iemann  

Lecture 4 

1  L P  Duality 

Last  time, we  proved  the  strong duality theorem.  Let  P and  D be the  following pair of  dual 
linear  programs: 

( P )   z*  = min{c T x  : Ax  = b ,x   2 O ) ,  
(D )   w * = m a ~ { b ~ ~ : ~ ~ ~ < c ) .  
Theorem  1  (Strong duality)  If  P  or  D  i s  feasible  then z*  = w* . 

1.1  Rules for  Taking Dual  Problems 

We  can also express  the  strong duality  theorem  for  linear programs  in other  forms.  This is 
described  in  the  main  lecture notes.  For  example,  if  the   primal  linear  program  is: 
z  = min  cl X I +   cTx2 + cFx3 s . t .  
T
-41x1  + 4 2 x 2  + 4 3 x 3   =  b l  
A2151 + A2252  + A2323  2  b2 
A 3 1 ~ 1+ A 3 2~ 2+ A 3 3 ~ 3  <  b3 
X I >   0 ,  x2  < 0 ,  X 3   UIS, 
where Aij  is  a  mtrix  of  size mi  x  nj  (and  thus  x j  E  Enj)  and  UIS  denotes  no  restrictions 
("unrestricted in  sign7') on  these  variables,  then   the  dua l  is: 
w = max  blTyl + bFy2   + bT3 Y 3  

where  thus  yi  E  Rmi, and  strong  duality  holds between  them. 

2  Size of  L P  

I n  order  t o  be  able t o  discuss t h e  complexity for  solving a  linear  program, we  need  first  t o  
discuss the  size of  the  inpu t .   We  assume t h a t  every  integer d a t a  is given in binary encoding, 
thus  for  n  E Z,we  need 

bits,  for  u E ZP,  we  need 

bits, and   for  A  E Znxm ,we  need 

bits.  As  a  result, t o  represent  all the  d a t a  of  a  linear  program, we  need  a  size equal t o  

The  above size is not  very  convenient  when proving the  complexity of  a  linear program-
ming  algorithm.  Instead, we  will be  considering another  size, defined by 

where  de tmax= max 1  det (A') I  over  all  submatrices A'  of  A,  bmax  = maxi lbi 1  and  cmax= 
max j  Icj 1. 
In   the   next  proposition,  we  show  t h a t   L  is  smaller  than   s i z e ( L P ) ,  which  implies t h a t  
if  we  can prove  tha t   a n  algorithm  has  a  running  time  polynomially bounded  in  terms  of  L 
then   it  will certainly be  polynomial  in  s i z e ( L P )  as well. 

Proposition 2  L  < size(LP). 

The   proof  of  the   proposition  is  in  the   lecture  notes.  In   the   proof,  the   following  key 
lemma  is  needed. 
Lemma  3  If  A E Z n x n  th en   idet(A)I  5 2size(A)-n2- 1. 
Proof:  Recall tha t   for  A = [ a l , aa ,  ...,a k ] ,I  det (A)I  can be  visualized as the  volume of  the  
parallelipiped  spanned  by  the  column vectors.  Hence, 

From  the  definition of  L, the  following remark  follows; th is  is what  we  will need mostly 
when  analyzing  running  times or  sizes. 
Remark  1  didmax * bmax   * cmax * 2m fn  < 2L. 

3  Complexity  of  L P  

Here  is  the  decision problem  corresponding t o  linear programming. 
L P :  Given A, b,  c, A ,   is  there  a n  x  : Ax  = b, x  2 0, cTx 5 A? 

To  show  t h a t   LP   is  in  NP ,   we  need  t o  b e   able  t o  provide  a  concise  (i.e.  polynomially 
bounded  in  the   size  of  the   inpu t )  certificate  for  yes  instances.  A  feasible point  of  cost  less 
or  equal  t o  X  will clearly  be  a  certificate,  bu t   will  it  be  concise? 

Claim  4  LP   E N P  

We  now  show t h a t   if  we  take  not just  any  feasible solution, bu t   a  basic  feasible solution, 
then   i ts  size will be  polynomially  bounded  in  the  size of  the   inpu t .  
Theorem  5  L e t   x  be  a  v e r t e x   ( o r   basic  feasible  s o l u t i o n )   o f  Ax = b, x  2 0.  T h e n  xi  = F. 
f o r   i= l , ...,n  where p i , q  E N and   pi  < 2 L   and   q  < 2 L .  

Proof:  Since  x  is  a  vertex,  then   x  is  a  basic  feasible  solution  with  basis  B  such  t h a t  
XB   = ~ i
l band  X N   = 0  (notice t h a t   As  is  square).  By  Cramer's rule: 

where  cof  (A) is  a  ma tr ix   whose  entries  are   all  determinants  of  submatrices of  A.  Letting 
q = det ( A g ) ,  we  get  t h a t   q  5 detmax  < 2 L   and  pi  5 m detmax  bmax  < 2 L .  
Now,  t o  prove  Claim  4,  for  yes  instances,  the   certificate  will  be   a  vertex  of  {x  : Ax  = 
b ,x   2  0)  such  t h a t   cTx  5  A.  However,  to   be  precise,  we  also  have  to   deal  with  the   case 
in  which  the   L P   is  unbounded,  since  in  t h a t   case,  there   might  not  be  any  such  vertex. 
Bu t   in  t h a t   case,  we  can  give  a  certificate  of  unboundedness  by  ( i)  exhibiting  a  vertex  of 
{x  : Ax = b, x  2 0)  (showing i t   is  not  empty,  and   i t   is  concise  by  the   above  theorem)  and  
5 c)  is  empty  by  using  Farkas'  lemma 
(ii)  showing t h a t   the   dua l   feasible region  {y  : 
and   exhibiting  a  vertex  of  Ax  = b, x  2  0, cTx  = -1  which  is  also  concise  by  the   above 
theorem. 
Thanks  t o  duality, we  can  also show  t h a t :  

Claim  6  LP   E c o - N P .  

Indeed, for  no  instances, we  can  use  strong duality and  exhibit  a  basic  feasible solution 
of  ATy  5 c  s.t.  bTy  > X  (or  show  t h a t   {x  2 0  : Ax  = 6)  is  empty  using  Farkas'  lemma). 
I n  the  case when  {x  : Ax = b, x  2 0)  is feasible, the  correctness  follows from  strong duality 
saying t h a t  
min{cTx:  Ax = b ,x  > 0)  = rnax{bTy  :
5 c). 
y
~
~
Thus ,  L P  E N P  n co - N P  which makes it  likely t o  be in P. And  indeed, LP  was  shown 
t o  be  polynomially  solvable through  the  ellipsoid algorithm. 
T h e  Ellipsoid  algorithm was  proposed  by  the   Russian  mathematician  Shor  in  1977  for 
general  convex optimization  problems, and  applied  to  linear  programming  by  Khachyan i n  
1979. 

Figure  1: One iteration  of  the  ellipsoid algorithm. 

4  The Ellipsoid  Algorithm 

The problem  being considered by  the  ellipsoid algorithm  is: 

Given  a  bounded  convex set P E Rn  find x  E  P. 

We  will  see  tha t   we  can  reduce  linear programming t o   finding an  x  in P = {x E Rn : 
Cx 5 d ) .  
The ellipsoid algorithm works  as follows.  We  s tar t  with  a  big  ellipsoid E tha t   is  guar-
anteed  to  contain  P.  We  then  check  if  the  center  of  the   ellipsoid  is  in  P.  If  it  is,  we  are 
done, we  found a  point  in  P.  Otherwise, we  find an   inequality cTx 5 di which  is  satisfied 
by  all points  in  P (for  example, it  is explicitly given  in  the   description of  P) which  is  not 
satisfied  by  our  center.  One  iteration  of  the   ellipsoid algorithm  is  illustrated  in  Figure  1. 
The ellipsoid algorithm  is  the  following. 

Let  Eo be  an  ellipsoid containing P 

while  center ak of  Ek is  not  in  P do: 

- Let  cT x  5 cTak be  such tha t   { x  : c T x  5 cTak) 2 P 
- Let  Ek+lbe  the  minimum volume ellipsoid containing Ekn { x  : cTx 5 cTak} 
- k + k + l  

The ellipsoid algorithm has the  important property tha t  the  ellipsoids contructed  shrink 
in volume as the  algorithm proceeds; this is stated precisely in the  next  lemma.  This means 
tha t   if  the set P has positive volume, we  will eventually find a point  in P. We  will need  to  
deal with  the  case when P has  no volume  (i.e.  P has just  a  single point), and also discuss 
when  we  can  stop and  be  guaranteed  tha t   either  we  have  a  point  in P or  we  know  tha t   P 
is empty. 

VoW%i-1)
Lemma 7 

< e - k .  

Before we  can  s ta te  the algorithm more precisely, we  need  to  define ellipsoids. 

Definition  1  G i v e n   a  c e n t e r  a ,   a n d   a   p o s i t i v e   d e f i n i t e   m a t r i x   A,  t h e   e l l i p s o i d   E ( a ,  A)  i s  
d e f i n e d   a s   {x E Rn  : (x  - a ) T ~ - l ( x- a )  5 1). 

One  important  fact  about  a  positive definite matrix A  is  tha t   there  exists B such tha t  
A = B - lB ,   and hence A-'  = B - ~ ( B - ' ) ~ .  Ellipsoids are  in  fact just  affine  tansformations 
of  unit  spheres.  To  see  this,  consider  the  (bijective) affine  transformation  T  : x  + y  = 
( B - ' ) ~ ( x- a ) .  I t   maps E ( a , A )  -t {y  : yTy 5 1) = E ( 0 , I). 
We  first consider the  simple case in which the ellipsoid El, is the  unit sphere and tha t   the  
inequality we  generate  is  x l   2 0.  We  claim  tha t   the  ellipsoid containing Ekn {x  : x l   2 0) 

Indeed,  if  we  consider an  x  E Ekn {x  : x l   2 0),  we  see tha t  

In  this  specific case, we  can prove  easily lemma  7  (we prove  a  slight  weakening of  it  by 
just  showing an  upper  bound  of  e-'I2("+l)) : 
Proof:  The volume of  an  ellipsoid is proportional  to  the  product  of  i ts  side lengths.  Hence 
the  ratio between  the  unit  ellipsoid El, and Ek+1is 

n 2   )+
(")( 
V ~ l ( E k + l )  - n f l   n2-1
-
VolEk 
1 

where we  have  used  the  fact  tha t   1+ x  5 ex for  all x. 

