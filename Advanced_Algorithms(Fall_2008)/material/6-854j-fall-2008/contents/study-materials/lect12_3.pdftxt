MIT OpenCourseWare
http://ocw.mit.edu 

6.854J / 18.415J Advanced Algorithms 
Fall 2008
��

For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms. 

18.415/6.854  Advanced  Algorithms 

December  3 ,  200 1 

Lecturer:  Michel  X .   Goemans  

Lecture  2 1  

1  Polynomial Approximation  Schemes 

Definition  1  Po lynom ia l   Approx ima t ion   S ch em e   ( P A S )  i s  a family  of  approximation  algo- 
r i thm s   such  tha t  A,  E { A ,  : t > 0 )  run s   i n  polynomial  t im e   i n  th e   size  of  the   i n p u t   (assume  
E  fixed)  and  re turns   a  1+ E  approximate  solution. 
Definition  2  A  Fully  Po lynom ia l   Approx ima t ion   A lgor i thm   (F'PAS)  i s   a  family  of  algo- 
r i thm s   such   tha t  A,  i s   a  (1+ E ) -app ro x ima t ion  algorithm  w i th   runn ing   t im e  polynomial  i n  
inpu t   size  and  1 / ~ .  

2  Scheduling Problem:  PI1 C,,, 

Definition  3  The  Scheduling Problem  (PIICmax):G i v en  n jobs  and  m  mach ines   where 
each  job  j  takes  p j  processing  t im e   and  completes  at  t im e   c j ,   assign jobs  to   each  ma ch in e  
m in im i z ing   th e   t im e  Cmaxfor  th e   last  mach ine   t o   t e rm ina t e   i t s   last job. 

Cmax= T* = min max c j  
3 

2.1  The Approach 

Definition 4  A  (1+ t )  relaxed  decision procedure  for  PI1 Cmax i s  an  algorithm  tha t ,  given  T ,  
e i ther  says  tha t   there  i s  n o  schedule  w i th  Cmax5 T or gives  a schedule  w i th  Cmax5 T ( l + t )  

Initially  T* is  between  L  and   2 L ,  where  L  = m a x ( ~ z ,m a x p j ) ,   so  let  Tl  and  T2 be 
L  and   2 L  respectively.  We're  now  going  to   do  a  logarithmic  binary  search on  the  possible 
values  for  T*  until  we  are within  E  of  T * .  
Logarithmic  Binary  Search:  If  we  know  tha t   T *  is  between  Tl  and   T2, the   next 
value we  will  check  is  d m , which  is  the  midpoint  of  Tl  and T2 on  the   logarithmic  scale. 
If  our  (1+ E )   relaxed  decision procedure  returns  NO  on d m ,we  replace T2 with  d m  
else we  replace Tl  with d m  and  continue  until we  are within  E  of  T*. 
Initially, 2= 2.  After  k  iterations,  log T2 - log TI = 2-k  log 2.  So if  we want  2 5 1+ E ' ,  
log 2 /  l o g ( l +  E ' )   , k 
log(1og 2 /  log(1+ e l ) ) .  So, with k  iterations, where k  = O(1og $), 
2k 
we  can get  TI  and  Tz with properties:  T2 /TI  5 1+ E'  , there  is no  schedule with Cmax5 T I ,  
and  we  have a schedule with Cmax5 T2( l + e t )  or T2(l+ ~ / 2 )5 Tl ( I+ € ' )   (1+ ~ / 2 )5 TI( I + € ) .  

2.2  A Relaxed Decision 

Definition  5  A  (1+t )  relaxed  decision procedure  for  Pll Cmax i s  a n  algorithm  tha t ,  given T ,  
e i ther  says  tha t   there  i s  n o  schedule  w i th  Cmax5 T  or gives  a schedule  w i th  Cmax5 T ( l +  E )  

Remark  1  I n   the  preceding  definition,  i t   is  possible  that  the  procedure  returns  NO,  when 
a  schedule  does  exist fo r  Cmax< T (1+ E ) .  

We  will use  a  relaxed  decision procedure  t o  solve the  scheduling problem.  Suppose t h a t  we 
have  a  (1+ €)-relaxed  decision procedure  for jobs  with p j  1 t T .   Then  we  do the  following: 
1.  Remove  all jobs  with p j  < ET. 
2.  Apply  the   (1+ €)-relaxed  decision procedure  for  the   remaining jobs. 
3.  If  the  procedure  re turns  NO,  we  re turn   NO.  If  we  get  a  YES,  use  any method  t o  t ry  
t o  add   i n  all of  the   small jobs  without  going beyond  T ( 1+  t ) .  If  we  can, re turn   t h a t  
schedule else re turn   NO. 
I t   is clear  t h a t   if  there  is no  schedule satisfying  Cmaz5 T on some subset  of  the  jobs, 
then  we  cannot  hope for one on all of  the  jobs.  Also if we  cannot include a job pi  < ET 
then   t h a t   implies  t h a t   each  machine  is busy  a t   time T (1+ E )   - pi  > T, so  there  can 
obviously be  no  schedule t h a t   finishes in time T. 
Consider  a  (1+ E) relaxed  decision  procedure  for  the   case  where  'dpj 2 ET. We  want  t o  
round p j  t o  a  q j  t h a t   is of  the  form  ET+ ~ E ~ T
for  some integer  k,  t h a t   is 

Then  p j  satisfies the  following inequality:  0 5 p j  - qj < E ~ T .We  ou tpu t  in polynomial time 
a  schedule for  {qj} with  Cmax5 T or  else  say  NO. 

NO: re tu rn  NO. 
YES:  re turn   schedule.  We  can  do  th is   because  ET5 p j  +- qj  2 ET+- There  are   a t  
most  $  jobs  per  machine.  Therefore Cmaxincreases by  a t  most  ~ ( E ~ T )= ET .  
Now  consider  instances  in  which  there  are  a t   most  P jobs  per  machine  and   a t  most  Q 
different processing  times.  In   t h e   above  case, we  take P = $  and  Q = $. T h e  problem  is 
t o  find a schedule with Cmax5 T or claim t h a t  no such schedule exists, in  polynomial  time. 
Let  ( r l ,. . . ,rQ )be  a n  assignment  of  jobs  on a  single machine.  Each  ri  is the  number  of 
jobs  of  value pi  in  the  assignment.  Let  the  space of  all valid  assignments be 

We  define a  function  f  :  + N,such  t h a t   f (a l ,. . . ,n Q )  is  the  minimum  number  of 
machines  needed  t o  process  ni jobs  of  value p i ,   i  E  (1, . . . ,Q)  within  time T. 
f ( n l ,  . . . ,n Q )  = 1+ min f ( n l  - r l ,  . . . ,n~  - r ~ )
rER  
where  0  < n i   < iti = number  of  jobs  of  processing  time pi. 
We  know  t h a t   IRI  5 PQand   i{(n l , .  . . ,nQ}I  < nQ .  By hypothesis, bo th  of  these bounds 
1
1 
are constant.  Therefore the   to ta l  running time  is  0 ( n Q ~ )= 0 ( n Q p Q )= 0 ( n ~$ 2 ) .Th is  
is polynomial  for  fixed  6 .  

