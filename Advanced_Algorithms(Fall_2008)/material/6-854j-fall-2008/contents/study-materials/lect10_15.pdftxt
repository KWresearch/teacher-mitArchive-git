MIT OpenCourseWare
http://ocw.mit.edu 

6.854J / 18.415J Advanced Algorithms 
Fall 2008
��

For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms. 

18.415/6.854 Advanced  Algorithms 

October  15, 2001 

Lecturer:   M iche l   X .   G o em a n s  

Scribe:   Jasrper  L i n  

Lecture  9 

1  Min  Cost  Circulation Problem 

Given  a  directed  graph  G  = (V, E ) ,  an   anti-symmetric1  cost  function  c  : E + Z ,  and   a  capacity 
function  u  : E + Z .  

Definition 1  A  p ow   i s   a  m a p p i n g   f 
V (V ,W )E E. 

: E  + R  t h a t   i s   a n t i - s ymm e t r i c 1   and   f  (v, w) 5  u (v ,  w), 

Definition 2  T h e   cost  of  a p ow   f 

i s   defined  t o   be 

Definition 3  A  c i rcu la t ion   i s   a p o w   f  s u c h   t h a t  

The  min  cost  circulation problem  is  t o  find  a  circulation of  minimum  cost. 

1.1  Special  Cases  of Min  Cost  Circulation Problem 

The   min  cost  circulation  problem  is  actually  fairly  general.  In   includes  the   following  important 
problems  as special  cases: 

Max-Flow 

Min  Cost  Flow 

Min Weighted  Bipartite Matching 

a  Shortest P a t h  
Given  a  directed  graph  G  = (V, E ) ,  a  function  I  : E  + R  t h a t   specifies  the   lengths  of  the  
edges,  and   a  fixed  vertex  s E  V,  find  t h e   shortest  simple2 p a t h   from  s  t o  t ,  for  every  vertex 
t  E  V.  I f   th e   length  of  edges  are  nonnegative  numbers,  then   Dijkstra's  Algorithm  may  be 
used.  Dijkstra's Algorithm  has  different  running  times  depending  on  how  t h e  priority  queue 
is  implemented.  Using a  Fibonacci Heap,  th e  running time  is  O (m  + n log n ) ,  where m  = IEl 
and   n  = IVI.  In  general,  if  1  can  be  negative,  th e   problem  is  NP-complete.  However,  it  is 
common t o  consider th e  case when  the re  is  no  negative  length  cycles.  Then  t h e  Bellman-Ford 
Algorithm  can  be  used.  This  algorithm  either  detects  t h a t   the re  is  a  negative  length  cycle  or 
computes,  in  O (m n ) ,  the   length  of  the   shortest p a th   between  s and   t  for  every vertex  t  E V. 
I A   function  f (x,y)  is  anti-symmetric  iff  f (x,y)  = -f ( y ,  x). 
2 A  pa th   is  simple if  it  visit  each vertex  a t  most  once. 

Remark  1  T h e  a lgo r i thm s   m e n t i o n e d   here   do   n o t   i n  general  apply  directly  t o  undirected   graphs  a s  
o n e   would  t h i n k .   T h e   n a i v e   approach  would  be  t o   t u r n  eve ry   edge  i n  t h e   undirected   graph  i n t o   tw o  
edges  going  both way s   i n  t h e   digraph.  T h i s  approach  wo rk s   if  t h e   leng th s   of  t h e   edges  are  nonnega t ive  
n um b e r s .   Howeve r ,   if  a n  undirected   graph  h a s  a n  edge w i t h  a negative   leng th ,   doubling  i t  would  create 
a  negative   leng th   cycle   where   o n e   m i g h t   n o t   have   existed   i n  t h e  first   place.  A s   i t   t u r n s  o u t ,   i n  t h i s  
case,  t h e  problem   i n  undirected   graphs  i s  m u c h  m o r e   d i f i c u l t   t h a n  t h e   digraph  sho r te s t   path  problem  
and  s om e   unde r ly ing   a s s um p t i o n s   t h a t   we  m a k e   about  digraphs  do  n o t   hold  for  undirected   graphs. 
T h e r e   i s   a n  a lgo r i thm  for   t h i s  problem   u s ing   non -b ipa r t i te   m a t c h i n g   a lgo r i thm .  

1.2  Strongly Polynomial Running Time 

Definition 4  T h e  r u n n i n g   t i m e  of  a n  a lgo r i thm   i s   strongly   polynomial   iff  

t h e   n um b e r   of  ope ra t ion s   required  i s   bounded  by  a  polynomial   of  t h e   n um b e r   of  data   i t e m s   i n  
t h e   i n p u t ,   and   n o t   t h e   s i ze   of  t h e   n um e r i c a l   va lue s   i n  t h e   i n p u t .  

all  a r i t hm e t i c   operations   are  performed   o n  n um b e r s   whose   size   i s  po lynom ia l   i n  i n p u t   s i ze .  

If  t h e   r u n n i n g   t i m e  of  a n   a lgo r i thm   i s  polynomial   bu t   n o t   strongly   polynomial ,   t h e n  we  say   t h a t   i t  i s  
weakly  polynomial .  

Our  goal is  t o  search  for  a  strongly polynomial  algorithm  t o  solve th e  min  cost  circulation problem. 
Not  all polynomial time algorithms a re  strongly polynomial.  The  algorithms for Linear Programming 
and  some versions of  Dijkstra's Algorithm  a re  not  strongly polynomial in running time.  For example, 
using  different priority  queues, bo th   O ( n  log log L )  and  O (m  + n d w )  are possible, where L  is  the  
maximum  length  in  t h e  graph. 

1 .3   Searching for  an Algorithm 

Our first  goal  is  t o  devise a check t h a t   given a  flow  f  determines whether  or not  f  is optimal. 

Definition 5  G i v e n  a  graph  G = (V ,E )  and   a  c i rcu la t ion   f ,   we  define   t h e   residual   graph  o f f   t o  be 
G f   = (V ,Ef ),  where   Ef  = {(u,W ) E E l f ( v ,  w)  < u (u ,  w)),  and   t h e   capacity   function   i s   replaced  by 
t h e   residual   capacity  f u n c t i o n   u f  ( u , u) = u ( u ,  u) - f  (u , u). 

The   important  property  of  th e  residual  graph  is  t h a t   if  g  is  a  circulation  in  the   residual  graph G f ,  
then   f  + g  is  a  valid  circulation  in G ,  since  f  + g 5 f  + u - f = u. 
A  vertex  potential  p  is  a  real-valued  function  defined  on  th e   set  of  vertices  ( p  : V  + Kt).  Corre-
sponding t o  a  potential p ,  we  can  define a  reduced  cost  function  cp(u,w)  = c(u, w) + p (u )  - p (w ) .  
Lemma  I  For   eve ry   directed  cycle   C ,   cp (C )  = c (C ) ,  where   t h e   n o t a t i o n  cp (C )  = Cc cp(u,w). 

Proof of Lemma 1:  cp (C )  = Cc c ,(v ,   w) = C , ( c (v ,   w) +p (v )  -p (w ) )   = CCc(v, w )+C , (p (u )   -
p (w ) )  = c ( C ) ,  since every  u  E C  appears  again  as  a  w  E  C  th e   same  amount  of  times  since C  is  a 
cycle. 

Lemma  2  For   eve ry   c i rcu la t ion   f and   po ten t ia l   p, 

Proof  of  Lemma  2:  One  way  is  t o   show  t h a t   a  circulation  can  be  decomposed  into  a  sum  of 
many  cycles, and  then   use  Lemma  1. Here we  give a  direct  proof: 

Theorem 3  (O p t im a l i t y  C o n d i t i o n s )   L e t   f  be  a  c i rcu la t ion .   T h e  following  are  equivalent:  

( i )   f  i s   a  m i n - c o s t   c i rcu la t ion  

( i i )   G f h a s   n o   directed  cycles   of  negative   cost 
( i i i )   T h e r e   i s   a po ten t ia l   p  s u c h   t h a t  for   eve ry   (u, w)  E Ef, cp (u, w) > 0. 

Proof  of  Theorem 3: 
( l i  + l i i i )   Assume the re  is  a  circulation  f *  with  c . f  *  < c . f  and   a  potential p with  cp(u, w)  > 0 
for  every  (u ,w )  E Ef.By  Lemma  2, c, - f *   < cp . f .   Then 

>  f (u, w). 
However,  (u, w)  E  Ef implies  t h a t   f * (v, w )  
(f* (u, w) - f  (u, w ) )  2 0,  which  is  a  contradiction. 
(i + i i )   Suppose f  is of min-cost and  there exists a cycle C  in G fsuch t h a t  c (C )  < 0.  Form f I, where 
f l ( u ,  u) = f ( u ,  u) + E  when  (u ,  v)  E C ,  f l ( u ,  v) = f (u ,  u) - c when  (v, w)  E C ,  f t ( u ,  u)  = f (u ,  u) 
otherwise, and  E  = minetC cf ( e ) > 0.  Therefore, c( f I) = c (f ) + 2 ~ . c ( C )< c(f ) ,  a contradiction. 
( i i  -+i i i )   Will  be  proved  next  lecture. 

Therefore,  2 C(v,w)
cP ( v ,  w)  . 

Remark  2  W e  n ow   have   a n  a lgo r i thm  for  finding   a  m i n - c o s t   circulation:  

1.  C o n s t r u c t  t h e   residual   graph. 

2.  Check   if  the re   i s   a n y   negative   cost   cycles .   If  n o n e ,   e n d .  

3.  If  o n e   i s  found ,   pu sh   flow  and  repeat. 

S t e p   3  can   be  done   i n  m a n y   d i f le ren t   way s .   T h e y  k e y   i s   t o  choose  in te l l igen t ly   t o  reduce  t h e   n um b e r  
of  i t e r a t i o n s   nece s sa ry .  

