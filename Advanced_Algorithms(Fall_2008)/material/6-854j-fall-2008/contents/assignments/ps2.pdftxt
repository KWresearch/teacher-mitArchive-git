MIT OpenCourseWare
http://ocw.mit.edu 

6.854J / 18.415J Advanced Algorithms 
Fall 2008
��

For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms. 

18.415/6.854  Advanced  Algorithms 
Problem  Set  2 

If  you  have  any  doubt  about  the  collaboration  policy,  please  check  the 
course  webpage. 

Problems: 

1.  Given  a  directed  graph  G  = (V , E ),  a  source s  ∈  V ,  a  sink  t  ∈  V  and  a  length 
function  l  :  E  →  R,  the  fattest  path  problem  is  to  ﬁnd  a  simple  path  P  from  s 
to  t  which  maximizes  min(v,w)∈P  l(v , w). 

(a)  Give  a  modiﬁcation  of  Dijkstra’s  algorithm  for  the  shortest  path  problem 
which  solves the fattest path problem.  Argue correctness of your algorithm. 
(b)  Suppose  that  all  arcs  lengths  are  integer-valued  between  1  and  m  where 
m  =  |E |. Can you provide  an implementation  of your  algorithm that  runs 
in  O(m) time?  (Hint:  Do  not  use  any  fancy  priority  queue.) 

2.  In  this  problem,  you  will  show  that  the  fattest  augmenting  path  algorithm  for 
the maximum  ﬂow problem can be implemented  to run in  O(m) time per itera­
tion  after  some  basic  preprocessing.  Remember  that  in  the  fattest  augmenting 
path  algorithm,  the  augmenting  path  with  largest  minimum  residual  capacity 
is  chosen  at  every  iteration. 

(a)  Show  that  if  we  have  a  total  ordering  of  the  residual  capacities  then  the 
fattest  augmenting  path  can  be  found  in  O(m) time. 
(b)  Show  that,  this  total  ordering  of  the  residual  capacities  can  be  maintained 
in  O(m) time after pushing  ﬂow along  one augmenting path (how do the 
residual  capacities  change)? 
(c)  What  is  the  running  time  ofthe  resulting  inplementation  of  the  fattest 
augmenting  path  algorithm? 

3.  Consider  a  directed  graph  G  = (V , E )  with  a  length  function  l  :  E  →  Z  and 
a  speciﬁed  source  vertex  s  ∈  V .  The  Bellman-Ford  shortest  path  algorithm 
computes  the  shortest  path  lengths  d(v ) between  s  and  every  vertex  v  ∈  V , 
assuming  that  G  has no directed  cycle of  negative length (otherwise the problem 
is  NP-hard).  Here  is  a  description  of  this  algorithm: 

The  Bellman-Ford  algorithm  computes  d(v ) by computing  dk (v ) =  the  shortest 
walk1  between  s  and  v  using  exactly  k  edges.  dk (v )  can  be  computed  by  the 

1A  walk  is  like  a  path  except  that  vertices might  be  repeated. 

PS2-1 

recurrence 

dk (v ) =  min 
(w ,v)∈E 

[dk−1(w) + l(w , v )] . 

Let  hl (v ) =  min  dk (v ).  It  can be shown that if  the graph has no negative cycle 
k=1,...,l 
then  hn−1 (v ) =  d(v ) for  all  v  ∈  V .  Moreover,  the  graph  has  no  negative  cycle

iﬀ,  for  all  v ,  dn (v ) ≥  hn−1 (v ).

(You  are  not  required  to  prove  any of  the  above  facts.)


(a)  Let  µ ∗  be  the  minimum  average  length  of  a  directed  cycle  C  of  G, i.e., 

µ ∗(G) = 

min 
directed  cycles  C

µ(C ) =  min 
C 

l(u, v ) 

�
(u,v)∈C 
|C | 

. 

Using  the  Bellman-Ford  algorithm,  show  how  to  compute  µ ∗  in  O(nm) 
time.

(Hint:  Use  the  fact  that  if  we  decrease  the  length  of  each  edge  by  µ  the

average  length  of  any  cycle  decreases  by  µ.)

(b)  Can you  ﬁnd the cycle C  with  µ(C ) =  µ  using  only  O(n2) additional time? 
∗
(In  other  words,  suppose  you  are  given  all  the  values  that  the  Bellman-
Ford  algorithm computes.  Can you  ﬁnd  a minimum mean cost cycle using 
this information in  O(n2)?) 

4.  In  this  problem,  we  will  propose  another  way  to  solve  the  minimum  mean  cost 
cycle  problem.  The  resulting  algorithm  will  be  quite  slow,  but  the  technique 
is  widely  applicable (and for  other problems, this  will give the fastest known 
approach).  The  problem  of  ﬁnding  µ ∗  is  equivalent  to  the  problem  of  ﬁnding 
the largest  value of  µ  such  that the graph  with lengths  lµ(u, v ) =  l(u, v ) − µ  has 
no  negative  cycles. 

(a)  Argue  that  for  a  given  value  of  µ,  we  can  decide  whether  µ ∗  ≥  µ  or 
µ ∗  < µ  by  performing  at  most  O(A(m, n))  additions  of  2  numbers  and 
O(C (m, n))  comparisons  involving  2  numbers  (and  no  other  operations 
except  control  statements).  Please  state  the  values  you  can  obtain  for 
A(m, n) and  C (m, n).  Observe  that,  as  we  are  performing  only  additions 
and  comparisons, all  the numbers involved  are linear functions of  the input 
lengths  and  µ. 
(b)  Now  suppose  we  run  the  above  algorithm  with  µ  equal  to  the  unknown 
value  µ ∗  .  We  can  easily  perform  the  additions  provided  that  we  store  all 
the  numbers  (including  the  inputs)  as  linear  functions  of  µ ∗  (i.e.  of  the 
form  a  +  bµ∗).  Explain how  we  can  resolve the  comparisons (even though 
we  do  not  know  µ ∗).  (It  is  normal  if the  solution  requires  a  fair  amount  of 
time  to  resolve  each  comparison.)  As  a  function  of  A(m, n) and  C (m, n), 
what  is  the  total  running  time  of  your  algorithm  to  compute  µ ∗? 

PS2-2 

5.  We argued in lecture that for the maximum  ﬂow problem, there always exists a 
maximum  ﬂow  which  is  integer-valued  if  the  capacities  are  integral.  Prove  that 
a  corresponding  statement  for  minimum  cost  circulations  also  holds,  namely 
that  if  the  capacities  and  the  costs  are  integer-valued  then  (i)  the  minimum 
cost  circulation can be chosen to be integer-valued  and (ii)  the vertex potentials 
proving  optimality  can  also  be  chosen  to  be  integer-valued. 

6.  In  this  problem,  we  will  add  a  time  dimension  to  network  ﬂows.  Suppose  we 
have  a  network  G  = (V , E ) in  which  each  arc has  unit  capacity (u(v , w) = 1 for 
all  arcs (v , w)),  and we  have  two  special  vertices,  a  source  s  and  a  sink  t.  Our 
network for example could be a computer network  and  our unit  of  ﬂow could be 
a  packet.  Each  arc  also  has  an  integer-valued  transit  time  τ (v , w) ∈  Z+  which 
represents the time it takes (a unit of  ﬂow or packet)  to travel  through  the arc. 
At  every  unit  of  time,  say  at  time  d,  only  one packet  can  enter  the  arc (there 
might  be  several  packets  already  travelling  through  the  arc  since  there  could 
have been packets injected in it  at times  d − 1,  d − 2, etc.).  We can assume that 
vertices  can instantaneously  accept packets  on its incoming  arcs and  also inject 
one packet (if  available)  on each  of its outgoing  arcs (and if  there are remaining 
packets,  they  can  be  queued  at  the  vertex). 

The  ﬁrst  problem  we  consider  is,  given  a  deadline  D ,  to  ﬁnd  the  maximum 
number  k(D) of  packets  that  can  enter  the  network  at  s  at  time  1  or  later  and 
leave  the  network  at  vertex  t  at time  D  or  earlier.  As  an  example,  suppose  that 
our graph has  only 3  arcs (s, a), (a, t) and (s, t) each  with  a  transit  time  of  2. 
Then, if  D  =  5,  the  answer  should  be  k(5) =  4  packets.  Indeed,  we  can  send  3 
packets  along  the  arc (s, t),  entering at  times  1,  2  and  3  and  leaving  at  time  3, 
4  and  5  ≤  D . We can also send  a 4th packet,  along  the path (s, a) and (a, t); 
it  will  enter  the  arc (s, a)  at  time  1,  arrive  at  a  at  time  3  and  arrive  at  t  at 
time  5.  (Observe  by  the  way  that  in  this  example,  no  packet  had  to  wait  at 
intermediate  vertices.) 

(a)  Construct a maximum  ﬂow instance on a bigger network  G ′  = (V  ′  , E  ′ ) such 
that  the  solution  of  this  maximum  ﬂow  instance  allows  you  to  ﬁnd  k(D) 
and the  scheduling (when they  travel  through  each  arc)  of the packets in 
the  original  network  G.  |V  ′ | can  be  of  the  order  of  D |V |. 

(b)  The  solution  above  is  not  polynomial  when  D  is part  of  the input (since 
the  size  of  the  network  grows  linearly  in  D).  To  ﬁnd  a  polynomial  time 
algorithm,  consider  the  following  circulation  problem.  Take  the  original 
graph  G  = (V , E ) with  all  arcs of  capacity 1  and give arc (v , w) ∈  E  a cost 
c(v , w) =  τ (v , w).  Add  one  arc (t, s) of  inﬁnite  capacity  and  cost  equal  to 
−D .  Let  −C ∗  be  the  cost  of  the  minimum  cost  circulation  f ∗  .  Prove  the 
following  claim:  C ∗  is precisely  k(D).  Also  explain  how  one  can  ﬁnd  the 
scheduling  of  the  packets  from  the  minimum  cost  circulation  f ∗  . 

PS2-3 

(It  might  be  helpful to  ﬁrst  see  what  happens  on  the  simple  example  with 
3  arcs  given  above.) 

(c)  Now,  suppose  that  we  want  to  solve  the  converse  problem.  We  would 
like  to  send  k  packets from  s  to  t  so  that  the  last  packet  arrives  at  t  as 
early  as possible.  Propose a polynomial-time algorithm which given  k  ﬁnds 
D(k),  the  minimum  time  at  which  all  packets  have  arrived  at  t.  What  is 
the  running  time  of  your  algorithm  as  a  function  of  n  =  |V |,  m  =  |E |, 
T  = max τ (v , w) and  k? 

(d)  Your  algorithm for (c)  is probably  not  strongly polynomial, in the  sense 
that  its  running  time  depends  on  log(T )  and/or  log(k).  Can  you  pro­
pose  a  strongly polynomial-time  algorithm? Just  sketch it (a few lines  are 
enough);  do  not  give  all  the  details.  (Kind  of  hint:  this  solution  will  be 
much  slower than (c)  when  T  and  k  are  small.) 

(By  the  way,  all  the  results  above  are  still  true  if  the  capacities  are  integers 
possibly greater than 1;  in  such  a case,  at  every  time  d,  at  most  u(v , w) packets 
can be injected in  arc (v , w).  Arguing  about the  validity  of (b)  is  slightly  more 
diﬃcult.) 

7.  Which question did you like the most (excluded this one...)?  Which question 
did you like the least? 

PS2-4


