MIT OpenCourseWare
http://ocw.mit.edu 

6.854J / 18.415J Advanced Algorithms 
Fall 2008
��

For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms. 

18.415/6.854  Advanced  Algorithms 

L e c tu r e r :   M i c h e l   X .   G o e m a n s  

Problem  Set  6 

1.  The   b e tw e enn e s s  p rob l em   is defined as follows: We  are given n and a set T of  m  triples 
of  the elements of  (1, . . . ,n ) .   We  say tha t   an  ordering ?r  of  (1, . . . ,n )   satisfies a  triple 
( i ,j, k) , if  j is between  i  and  k  in  ?r.  (For example,  the  ordering  ( 5 , 3 , 1 , 2 , 4 )  satisfies 
the  triples  ( 5 , 1 , 2 )  and   ( 1 , 3 , 5 ) ,  bu t   not  ( 3 , 2 , 1 ) ) .  The  question  is  t o  find  a n  ordering 
of  { I ,  . . . ,n )   tha t   satisfies the  maximum  number  of  triples  in T. 
This  problem  is  known  t o   be  NP-hard,  even  if  we  restrict  to   instances  for  which  a n  
ordering  t h a t   satisfies all the  triples  exist. 

(a)   Use  randomization to  find a  simple  ;-approximation  algorithm for  th is  problem. 
Prove  the   correctness  of  your  algorithm. 
(b )   Use  the  method  of  conditional  expect a t  ions  to  derandomize  your  algorithm. 
(c)  Assume there  is  a n  ordering tha t   satisfies all  the   triples  in  T.  Prove  tha t   there 
are vectors  v l ,  . . . ,vn  E Rn  such tha t  

for  all i , j, 
for  all  (i ,j, k)  E T 

Show how  we  can find such v l ,  . . . ,vn  using semidefinite programming. 
(d )   Give  an   example  where  t h e  program 	 (1) is  satisfiable,  but  there  is  no  ordering 
tha t   satisfies all the  triples  in T. 
(e)  Assume tha t  v l ,  . . . ,vn  E Rn  is a solution of  the  program  (1) .  Choose r uniformly 
a t   random  from  {p E  Rn  :  llpll  = 11, and  consider  the   ordering  obtained  by 
sorting the  elements of  {1,. . . ,n )  with  respect  t o  their  rTv i  value.  Show tha t   in  
expectation  th is  ordering  satisfies a t   least  half  the  constraints  in  T. 

Consider the  following scheduling problem.  We  are given n  jobs  tha t   are all available 
a t  time 0 and  tha t   can be  processed on any of  m machines.  Each job  has  a processing 
time pj  which  represents  the   amount  of  time  a  machine  (any one  of  them)  needs  to  
process i t   (without interruption).  A  machine can only process one job  a t  a  time.  This 
scheduling  problem  is  t o   assign  each  job  to   a  machine  and   schedule  the   jobs  so  as 
t o  minimize C jp i c j  where  Cjrepresents  the   time  a t  which  the   processing of  job  j 
completes.  (For  example,  if  we  have  5 jobs  of  unit  processing time  and   3 machines, 
there are many ways  of  obtaining an  objective  function value of  1+ 1+ 1+ 2 + 2 = 7.) 

(a)   Show  tha t   the   problem  is  equivalent  t o  minimizing  C r = l  M:  where  Mi  is  the  
to ta l   amount  of  processing time assigned t o  machine  i. 

(b )   Let  L = 
p j  be  the  average  load  of  any  machine.  Show  tha t   any  optimum 
solution for Cy=lM:  will be  such tha t   each machine i either  satisfy M i5 2L  or 
processes  a  single job  j with p j  > 2L. 
(c)  Assume tha t   pj  2 a L  for  some constant  a > 0  for  every job  j, and  assume  tha t  
all pj's  can  only  take  k  different  values,  where  k  is  a  fixed  constant.  Design  a 
polynomial-time  algorithm for  th is  case. 
(d)  Assume  tha t   p j   2 a L   for  some  constant  a  >  0  for  every  job  j .   Design  a 
polynomial-time  approximation scheme for  th is  case. 
(e)  Not  par t   of  the   problem  set  and  not  graded, just  for  "fun".  Can  you  also get  a 
polynomial-time  approximation scheme without  the  pj  2 aL  assumption? 

