MIT OpenCourseWare
http://ocw.mit.edu 

6.854J / 18.415J Advanced Algorithms 
Fall 2008
�� 

For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms. 

18.415/6.854  Advanced  Algorithms 

Problem   Set  Solution  5 
Lecturer:  Michel  X .   Goemans 

1. Consider  t h e   linear  programming  relaxation  of  t h e  vertex  cover  problem  seen  in  
class. 

Min  C w i x i  
sub jec t   to: 

( a )   Argue  t h a t   any  basic  feasible  solution  x  of  t h e   above  linear  program   must 
satisfy  xi  E 10, $, 1) for  all  vertices  i E  V.  
 
Hint:  given  a  bfs  x ,  consider  t h e  vector  y  defined  by  yi  = xi  if  xi  E  (0 ,  I ) ,   and   
  
yi  = 0.5 otherwise.  
 

Let  x  be  a  basic  feasible  solution.  We  follow t h e  hint  and   let  y  be  defined by  yi  = xi  if 
X i   E  (0, I ) ,  and  yi  = 0.5 otherwise.  Let  A  be  the  ma t r ix  of  coefficients of  the   constraints 
xi  + x j   > 1.  F'rom problem  1 on  th e   linear  programming  problem  set  we  know  t h a t   we 
can find  a  matrix  A:  such  t h a t ,  
i. 	 A:  is  a  square, invertible  submatrix of  A .  
ii.  If 	 J  is  th e   set  of  indices  of  non-zero  components of  x  then   A:XJ  = b'  where  b' 
vector  of  all  1's. 
By construction J is the  set of  indices of  non-zero components of  y .   An equation contained 
is  either  of  th e   form  xi  + x j   = 1 or  else  i t   is  of  the   form  x i   = 1.  In  the  
in  A :XJ   = b' 
first  case  since i ,QE  J we  have  X i   > 0 and   x j   > 0.  This implies  t h a t   bo th   xi  and  x j   a re  
strictly  less  th an   1 and   so yi  = yj  = 0.5.  Hence yi  + yj  = 1 .   In  the   second  case we  have 
yi  = 1 since X i   = 1. We  have  therefore  shown  t h a t   A:yJ  = b r .   But  A:  is  an   invertible 
ma t r ix  and   so X J   = y~  + x  = y.  i.e.,  xi  E  {O,  i ,  1 )  for  all  vertices  i  E  V. 

is  a 

(b)  	 To  solve  t h e   linear  program  t o   optimality, we  can  therefore  res tr ic t   our   a t -  
ten t ion   t o   solutions  satisfying  xi  E  {0,0.5,1).  For  th i s   purpose,  consider  t h e  
b ipa r t i te   graph   obtained  by  introducing  two  vertices  say  ai  and   bi  for  every 
vertex  i ,  b o t h  of  weight  w i ,  and  having  edges  ( a i ,  b j )  and   ( a j ,  b i )  for every  edge 
( i ,j) of  t h e  original graph.  Show t h a t   t h e  minimum weight  of any ver tex  cover 
in  th i s  b ipa r t i te  graph   is  exactly  equal t o  twice  t h e  value  of  t h e  above  linear 
program.  Also,  how  can  you  ex trac t   t h e   solution of  t h e  L P  from  t h e  vertex 
cover  in  t h e  b ipa r t i te  g raph  and   vice  versa? 
Let  x*  be  a n  optimal solution  t o  the   linear program  satisfying  xf  E  {O ,   i,1 ) .   We  form  a 
subset  S of  th e  nodes  in  th e  bipartite  graph a s  follows.  If  x:  = 1then  bo th   ai  and  bi  a re  
pu t   into S. If  x f  = $  then   ai  bu t   not  bi  is  pu t   into S. If  xf  = 0 then  neither  ai  nor  bi  is 
pu t   into S. The   set  S is  a  vertex  cover  of  t h e  bipartite  graph  since, 
i. 	 ( i ,j )   E  E  + x f  + x j   2 1. 
ii. 	 xf  = l + a i , b i   E  S .  

iii.  x i  = X:3  =  + a i , a j  E S .  
Conversely, given a vertex cover T of  th e  bipartite  graph we  can obtain a feasible solution 
y t o  t h e  linear program by setting yi  = 0 if neither  a i  nor  bi  is in T ,  yi  =  if  exactly one of 
them is in T and  yi  = 1if bo th   a re  in T .   By construction th e  weight of  S is CiEvwi(2x;) 
and   the   weight  of  T  is  CiEVwi(2yi).  This  implies  t h a t   S is  a  minimum  weight  vertex 
cover  since x iEv  
wixf  5 xiEV  
w i g i   Hence  the   minimum  weight  of  any  vertex  cover  in 
t h e  bipartite  graph  is  exactly equal  t o  twice  t h e  value  of  the   linear  program.  Th e  above 
constructions  show  how  t o   obtain  th e   solution  of  t h e   L P   from  th e   vertex  cover  in  the  
bipartite  graph  and  vice  versa. 

(c)  	 Show that the problem of finding a minimum weight vertex cover in a bipartite 
graph  can  be  solved  by  a  minimum  cut  computation  or  a  maximum  flow 
computation in a related graph. 

Let  V  = A U B be  th e   partition  of  vertices  associated with  t h e  bipartite  graph.  We  first 
of  all direct  all edges from A t o  B.  We also add  a source node  s which we  connect  t o  each 
node in A and  a  sink node  t  which we  add  t o  each node  in B.  If  i  E A  then  th e  edge  ( s ,  i )  
is given  capacity wi.  If  j E B then  t h e  edge  ( j ,  t )  is given  capacity w j .   All  of  t h e  original 
edges are given  infinite  capacity.  Suppose  t h a t   S is a  vertex cover in  the  b ipa r t i te  graph. 
Consider th e  set C  = (A - S)U ( B  nS)U {s )   and  its associated cut  (C ,  C ) .  An edge  ( i ,  j) 
andS 
of  infinite  capacity  cannot  be   a  member  of  S (C )  since  t h a t   would  mean  t h a t   i 
$! 
j 6S contradicting  t h e  fact  t h a t   S is a vertex  cover.  An  edge  ( s ,  i )  is  in S (C )  if  and  only 
if  i E S and  an  edge  ( j ,  t ) is  in 6 (C )  if  and  only  if  j E S and  so t h e  value of  t h e  cut  is  the  
same as t h a t  of  the  vertex cover.  Conversely, suppose t h a t   (C,C )  is a  cut of  finite weight. 
Let  S = (A   - S) U ( B  n S ) .   Suppose  t h a t   ( i ,  j) is  a n   edge  in  the   b ipa r t i te   graph  such 
t h a t   i ,  j  $?  S .   Then  i  E  C  and  j  E  C  which means  t h a t   ( i ,  j) E  S (C ) .   This  contradicts 
th e   fact  t h a t   (C ,  C )  is  a  cut  of  finite  weight.  Hence  S is  a  vertex  cover  of  the   bipartite 
graph.  I t   can easily be  seen t h a t   the  weight  of  th e  vertex cover is the  same as t h a t  of  the  
cut.  Hence  we  can  find  a  minimum  weight  vertex  cover  in  a  bipartite  graph  by  finding 
a  minimum  cut  (C, 6) and   setting  S = (A - S) U ( B  n S ) .   (By  t h e  max-flow  min-cut 
theorem  we  could find  the   vertex  cover by  first  solving a  maximum  flow  problem.) 

2. 	 Consider the  2-approximation algorithm seen in  class  for  the  generalized Steiner 
tree  problem  (we  are  given  a  set  T  of  pairs  of  vertices  and  cost  on  the  edges  of 
a  graph,  and  the  goal  is  to   find  a  subgraph  (a forest)  of minimum cost  in  which 
every pair  of vertices in T  is connected). 

( a )   	 Argue  that  this  problem  is  a  generalization  of  the  minimum spanning  tree 
problem. 

Let  T be  th e   set  of  all pairs  of  th e   vertices  of  th e  graph.  I t   is  obvious t h a t   any minimal 
subgraph t h a t  connects every pair  of  vertices  in T is  a minimum  spanning  tree. 

i.  Does the algorithm seen in class produce a minimum spanning tree in that 
case?  If  so, prove  it; if  not, give a counterexample. 

Th e   algorithm  from  class  does  produce  a  minimum  spanning  t ree   in  th is   case.  We 
first  prove  the   following claim  abou t  th e   order  in which  the   algorithm  adds edges t o  
the   subgraph. 
Claim 1  I n   each   s t e p ,   t h e   a lgo r i thm   add s   t h e   edge  of  least   cost   t h a t   connec t s   a n y  
tw o   connected   c om p o n e n t s .  

Proof:  By  the   definition  of  T ,  throughout  the   algorithm, every  connected  compo­
nent  C  E  C  is  in  F. Therefore,  in  each  step  we  increase  th e   value  of  d ( i )  for  every 
vertex  in  th e   graph  by  the   same  amount.  Thus ,  all  vertices  have  t h e   same  value  of 
d ( i )  a t  any time during th e  execution of  th e  algorithm.  Now, notice t h a t  in each s tep ,  
we  pick  an   edge  i j  with  i  E  C,,  j  E C,,  p # q ,   t h a t   minimizes  (cij - d ( i )  - d ( j ) ) / 2 ,  
or  equivalently, minimizes c i j .  
By  the   above  claim,  our  algorithm  adds  the   edges  t o  th e   subgraph  in  t h e   same  or­
der  as Kruskal's minimum  spanning  t ree   algorithm.  Therefore, by  th e   optimality  of 
Kruskal's algorithm  (see, for  example,  Introduction  to  Algorithms by  Cormen, Leis­
erson,  and   Rivest), and   considering  th e   fact  t h a t   by  th e   definition  of  T  the   second 
phase  of  th e   algorithm  doesn't  change  the   subgraph, t h e  algorithm  ou tpu ts   a  rnini­
mum  spanning  tree  of  the   graph. 

ii.  Is  the  value 	 ( C s  ys)  of  the  dual  solution y  constructed equal  to   the  min­
imum  spanning  tree  value?  If  so, prove  it; if  not, give  a  counterexample. 

Consider  the  graph  G  in  the   following figure. 

I t   is  easy  t o   see  t h a t   t h e   dual  solution  y  constructed  by  th e   algorithm  has  y{,)  = 
Y j a }   = y{,}  = 112, and   y s   = 0  for  every  S #  { a ) , {b},  { c } .  Therefore,  th e   value  of 
the   dual  solution  is  312, whereas  the  minimum  spanning t ree  has  cost  2. 

(b )   	 Argue  that  this  problem  is  a  generalization of  the  shortest  s - t   path problem 
(in an undirected graph with nonnegative edge weights). 

I t  is easy t o  see t h a t  t h e  shortest s - t  p a th  problem  is equivalent  t o  th e  generalized Steiner 
t ree  problem  with  T  = { ( s , t )} .  

i.  Does  the  algorithm seen  in  class  produce  a  shortest 	 s - t   in  that  case?  If 
so, prove  it; if  not,  give  a  counterexample. 
ii.  Is the value  ( C s  ys)  of the dual solution y constructed equal to  the shortest 
path  value?  If  so, prove  it; if  not, give a  counterexample. 

We  prove  t h a t   th e   cost  of  the   p a th   F'  t h a t   t h e  algorithm  produces  is  equal t o  the   value 
( C s  ys)  of  t h e  dual solution y  t h a t   i t   constructs.  Since t h e  value of  y, and  t h e  cost  of  F' 
are  lower  and  upper  bounds  for  t h e  value  of  th e   shortest  s - t  p a th ,  we  conclude  t h a t   the  
answer  t o  bo th   of  th e   above questions is  positive. 
I t  just  remains  t o  prove CSEFy s  = CetF,Ce.  We  proved  in th e   class t h a t  

I t   is  clear  from  th e   description  of  the   algorithm  t h a t   throughout  t h e   algorithm  (before 
t h e   end  of  t h e   while  loop), C  contains  only  two  connected  components,  one  containing 
s and   the   other  one  containing  t .   Bo th   of  these  connected  components  C  must  satisfy 
IF'  n S (C )I  = 1 ,  for  otherwise  the re  must  be  a  cycle in  F .  This implies t h a t   for every  set 

