MIT OpenCourseWare
http://ocw.mit.edu 

6.854J / 18.415J Advanced Algorithms 
Fall 2008
��

For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms. 

18.415/6.854  Advanced  Algorithms 
Problem  Set  4 

Problem  1. 
In a 0-sum  2-player  game, Alice has a choice of n so-called pure strate­
gies and Bob has a choice of m pure strategies.  If Alice picks strategy i and Bob picks 
strategy  j ,  then  the  payoﬀ  is  aij ,  meaning  aij  dollars  are  transfered  from  Alice  to 
Bob.  So Bob makes money  if aij  is positive, but Alice makes money  if aij  is negative. 
Thus,  Alice  wants  to  pick  a  strategy  that  minimizes  the  payoﬀ  while  Bob  wants  a 
strategy  that maximizes  the payoﬀ.  The matrix A = (aij )  is  called  the payoﬀ matrix. 
It  is well known that to play these games well, you need to use a mixed strategy— 
a  random  choice  from  among  pure  strategies.  A  mixed  strategy  is  just  a  particular 
probability distribution over pure strategies:  you ﬂip coins and then play the selected 
pure  strategy.  If  Alice  has  mixed  strategy  x,  meaning  he  plays  strategy  i  with  prob­
ability  xi ,  and  Bob  has  mixed  strategy  y ,  then  it  is  easy  to  prove  that  the  expected 
payoﬀ  in  the  resulting  game  is  xT Ay .  Alice  wants  to  minimize  this  expected  payoﬀ 
while  Bob  wants  to  maximize  it.  Our  goal  is  to  understand  what  strategies  each 
player  should  play. 
We’ll  start  by  making  the  pessimal  assumption  for  Alice  that  whichever  strategy 
she  picks,  Bob  will  play  best  possible  strategy  against  her.  In  other  words,  given 
Alice’s  strategy  x,  Bob  will  pick  a  strategy  y  that  achieves  maxy  xT Ay .  Thus,  Alice 
wants  to  ﬁnd  a  distribution  x  that  minimizes  maxy  xT Ay .  Similarly,  Bob  wants  a  y 
to maximize minx xT Ay .  So  we  are  interested  in  solving  the  following  2  problems: 
P min 
Pmax 
x:  xi=1,x≥0 y :  yj =1,y≥0 
Pmax 
P min 
y :  yj =1,y≥0 x:  xi=1,x≥0 

x T Ay 

x T Ay 

Unfortunately,  these  look  like  nonlinear  programs! 

1.  Show  that  if  Alice’s  mixed  strategy  is  known,  then  Bob  has  a  pure  strategy 
serving  as  his  best  response. 

2.  Show  how  to  convert  each  program  above  into  a  linear  program,  and  thus  ﬁnd 
an  optimal  strategy  for  both  players  in  polynomial  time. 

3.  Use  strong  duality  (applied  to  the  LP  you  built  in  the  previous  part)  to  argue 
that  the  above  two  quantities  are  equal. 

PS4-1 

sub ject  to	

sub ject  to	

and  its  dual 

The  second  statement  shows  that  the  strategies  x  and  y ,  besides  being  optimal,  are 
in Nash  Equilibrium:  even  if  each player  knows  the  other’s  strategy,  there  is no point 
in  changing  strategies.  This  was  proven  by  Von  Neumann  and  was  actually  one  of 
the  ideas  that  led  to  the  discovery  of  strong  duality. 
� 
Problem  2.  Consider  the  linear  program 
min 
xj 
� 
j 
aij xj  ≥ 1  ∀i 
j 
xj  ≥ 0  ∀j 
� 
max 
yi 
� 
i 
aij yi  ≤ 1 
i 
xi  ≥ 0. 
Assume  that  A = [aij ]  is m × n  and  has  only  nonnegative  entries. 
In  this  problem,  you’ll  have  to  show  that  a  continuous  algorithm  solves  (almost 
miraculously)  the  above  pair  of  dual  linear  programs.  We  shall  deﬁne  a  series  of 
functions whose  argument  is  the  “time”  and you’ll  show  that  some  of  these  functions 
tend  to  the  optimal  solution  as  time  goes  to  inﬁnity.  (For  simplicity  of  notation,  we 
drop  the  dependence  on  the  time.) 
•	 Initially,  we  let  sj  =  0  for  j  = 1, . . . , n  and  LB  =  0.  The  vector  s  will  (sort 
of )  play  the  role  of  primal  solution,  and  LB  the  role  of  a  lower  bound  on  the 
ob jective  function. 
P 
•	 At  any  time,  let 
� 
ti  = e− 
j  aij sj 
for  i  = 1, . . . , m.  Also,  let  dj  = 
i aij ti  for  j  = 1, . . . , n,  D  =  maxj  dj  and  k 
be  an  index  j  attaining  the  maximum  in  the  deﬁnition  of  D.  The  algorithm 
continuously  increases  sk . 

Observe  that  when  sk  is  increased,  the  vectors  t  and  d  as  well  as  D  change  also, 
implying  that  the  index  k  changes  over  time. 

PS4-2 

� 
P 
j  aij sj ).  Let  xj  =  sj /α  for  j  = 1, . . . , n,  yi  =  ti/D  for  i  = 
1.  Let  α  =  mini ( 
ti ).  Show  that  x  is  primal  feasible,  y  is  dual 
1, . . . , m  and  LB  =  max(LB ,  D
feasible and LB  is a  lower bound on  the optimal value of both primal and dual. 
m� 
P n 
ti  ≤ me− 
j=1  sj /LB . 
i=1 

2.  Prove  that 

3.  Deduce  from  (b)  that 

Hint:  Show  that  initially  the  inequality  holds  and  that  it  is  also  maintained 
� 
whenever  we  have  equality. 
i  ti  tends  to  0  as  time  goes  to  inﬁnity. 
4.  Using  (b),	 give  an  upper  bound  on  the  value  of  the  primal  solution  x,  and 
using  (c),  show  that  this  upper  bound  tends  to  LB  as  time  goes  to  inﬁnity. 
This  shows  that  as  time  goes  to  inﬁnity,  both  x  and  y  tend  to  primal  and  dual 
optimal  solutions! 

Problem  3.  We  would  like  to  ﬁnd  a  function  f (n)  such  that,  given  any  set  of 
· · · 
n  (possibly  negative)  numbers,  c1 , 
, cn ,  one  cannot  ﬁnd  more  than  f (n)  subsums 
of  these  numbers  which  decrease  in  absolute  value  by  a  factor  of  at  least  2.  More 
formally: 
Lemma  1  Let  c  ∈  Rn  and  yk  ∈ {0, 1}n  for  k  = 1, . . . , q  such  that  2|yT 
k+1c
for  k = 1, . . . , q − 1.  Assume  that  yT c = 1.  Then  q ≤ f (n).
q 

| ≤ |yk
T c|

Using  linear  programming,  you  are  asked  to  prove  that  f (n) = O(n log n). 

1.  Given a vector c and a set of q  subsums satisfying the hypothesis of the Lemma, 
write  a  set  of  inequalities  in  the  variables  xi  ≥ 0, i = 1 . . . n,  such  that  xi  =  |ci |
is a feasible vector, and for any feasible vector x�  there is a corresponding vector 
c�  satisfying  the  hypothesis  of  the  Lemma  for  the  same  set  of  subsums. 
2.  Prove  that  there must  exist  a  vector  c�  satisfying  the hypothesis  of  the Lemma, 
| | |
|
|
| 
with  c�  of  the  form  (d1/d, d2/d, . . . , dn/d)  for  some  integers  d ,  d1 ,  . . . ,  dn = 
2O(n log n)  . 

3.  Deduce  that  f (n) = O(n log n). 

4.  (Not  part	 of  the  problem  set;  only  for  those  who  ﬁnd  the  problem  sets  too 
easy...)  Show  that  f (n)  =  Ω(n log n)  (as  a  tiny  step,  can  you  ﬁnd  a  set  of 
numbers  such  that  f (n) > n?). 

PS4-3 

Problem  4.  Let  K  be  a  bounded  convex  set  in  Rn .  In  this  problem,  you’ll  prove 
that  there  exists  an  ellipsoid  E  contained  within  K  such  that  if  you  blow  it  up  by 
a  factor  of  n  (the  dimension)  then  the  corresponding  ellipoid  contains  K ;  in  short, 
E  ⊆ K  and K  ⊆ nE . 
1.  Suppose that we have an ellipsoid E (a, A) = {x ∈ Rn  : (x − a)T A−1 (x − a) ≤ 1}
and we have a point b /∈ nE (a, A).  Argue that the convex hull of b and E (a, A), 
conv({b}, E (a, A)),  contains  an  ellipsoid  E �  of  larger  volume  than  E (a, A). 
(You  do  not  need  to  explicitly  give  a�  and  A�  corresponding  to  E �  = E (a� , A� ), 
if  that  helps.  It  might  be  easier  to  deal  with  a  particular  case  for  a,  A  and  b, 
and  argue  why  you  can.) 

2.  Argue	 that  the  maximum  volume  ellipsoid  E  contained  in  K  (it  is  actually 
unique,  although  you  do  not  need  this)  is  such  that  nE  ⊇ K . 
3.  (Optional.  Assume  that K  = {x ∈ Rn  : C x ≤ d}  is  bounded, where C  is m × n 
and  d  ∈  Rm .  Formulate  the  problem  of  ﬁnding  the  largest  volume  ellipsoid 
contained  within  K  as  a  convex  program  (minimizing  a  convex  function  over 
a  convex  set,  or  maximizing  a  concave  function  over  a  convex  set.  One  could 
therefore  use  the  ellipsoid  algorithm  to  ﬁnd  (a  close  approximation  to)  this 
maximum  volume  ellipsoid.) 
Problem  6.  Given  an  undirected  graph  G  = (V , E ),  a  set  T  ⊆  V  with  |T |  even 
� 
→	
and  a  weight  function  w  : E  Q+ ,  the  minimum  (weight)  T -cut  problem  is  to  ﬁnd 
S  ⊆  with  |S  ∩ T |  odd1  such  that  d(S )  :=  w(S  :  S¯)  := 
e∈(S :S¯) we  is  minimized. 
¯
Here  (S  : S )  denotes  the  set  of  edges  of  E  with  exactly  one  endpoint  in  S  (since  our 
graph  is  undirected,  observe  that  d(S ) =  d(S¯)).  For  T  =  {s, t},  the  minimum  T -cut 
problem  reduces  to  the minimum  s − t  cut  problem  (in  an  undirected  graph).  In  this 
problem,  you  will  show  that  the minimum  T -cut  problem  can  be  solved  eﬃciently. 
1.  Argue  that  the  minimum	 s − t  cut  problem  in  an  undirected  graph  G  can  be 
solved  eﬃciently  by  using  an  algorithm  for  a  minimum  s − t  cut  problem  in  a 
directed  graph H . 
2.  A  T  − T  cut  is  a  cut  (S  :  S )  with  S ∩ T  �=  ∅  and  S ∩ T  �=  ∅.  Show  that  the 
¯	
¯
minimum weight T − T  cut  can be obtained by  solving a polynomial number of 
minimum  s − t  cut  problems.  Can  you  do  it  with  O(|T |)  such  minimum  s − t 
cut  computations? 
3.  Prove  that  for  any  A, B ⊆ V ,  we  have 
d(A) + d(B ) ≥ d(A ∩ B ) + d(A ∪ B ). 
1 thus,  S ¯ ∩ T | = |T  \ S |  is  also  odd. 

PS4-4 

4.  To	 solve  the  minimum  T -cut  problem,  suppose  we  ﬁrst  solve  the  minimum 
T  − T  cut  problem  and  obtain  the  cut  (S  :  S ).  If  |S ∩ T |  is  odd,  we  are  done 
¯
(right?).  If |S ∩ T |  is even, use the previous  inequality to argue that there exists 
a  minimum  T -cut  (C  :  C )  such  that  C  ⊆  S  or  C  ⊆  S .  Deduce  from  this  an 
¯
¯
eﬃcient  algorithm  for  solving  the minimum  T -cut  problem.  How many  calls  to 
your minimum  T  − T  cut  algorithm  are  you  using? 

PS4-5 


