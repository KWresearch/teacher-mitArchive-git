MIT OpenCourseWare
http://ocw.mit.edu 

6.854J / 18.415J Advanced Algorithms 
Fall 2008
��

For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms. 

18.415/6.854  Advanced  Algorithms 

Lecturer:  Michel X.  Goemans 

Problem  Set  4 

1.  In  class, we  have  seen Klein's cycle cancelling algorithm for  the  Min Cost  Circulation 
Problem  (MCCP) .  This algorithm requires O (mCU )  iterations  in the  worst  case, i.e., 
i t s  running  time is not  polynomial in  m ,  log C  and log U.  In  this problem, we  will  see 
how  t o  apply  the  idea of  cost  scaling on  th is  algorithm t o  obtain  a n  algorithm whose 
running  time  is  polynomial  in m ,  log C ,  and  U. 
(In  fact,  i t   is  possible  to   apply  the   same  idea  on bo th   costs  and   capacities  t o  obtain 
an  algorithm whose  running  time is polynomial in  m ,  log U and  log C ,  bu t   th is  is not 
required  in th is  problem.) 
Recall tha t   in MCCP, a bidirected  graph G = (V,E ) , an  anti-symmetric cost function 
c : E H Z,and  a capacity function u  : E I+  Zare given.  Let n and  m denote the  num- 
ber of  vertices and edges in G, U = max(v ,w)EE   W )  I ,   and  C = 
I u ( v ,   	
I c ( v ,
max (v ,w )EE   w)I. 
(a)   For  every  integer  i ,  define the  cost  function di) : E H Zas follows: 
cci)( v ,  w)  := sgn(c(v, w ) )  1I c ( y ) I ]  , 
where  sgn(x)  is  the   sign of  x.  Notice  t h a t   by  the   above  definition,  c(O) (v, w)  = 
c(v, w)  and  C ( ~ ' O ~ ( ~ + ~ ) ~ ) ( V ,W )   = 0.  Our objective  is t o  find a way  t o  solve MCCP 
for  the  cost  function d i) ,given  i ts  solution for  c ( ~+ ' ) .  
Let  f be  an   optimum  circulation  for  G  with  t h e   cost  function  c (~+ ' )and   the  
capacity  function u .   Prove tha t   if  we  apply Klein's cycle cancelling algorithm on 
G with the  cost function c ( ~ )and  capacity function u ,  s tar t ing  from the  circulation 
f , then   the   number  of  iterations  of  th is  algorithm is  O (mU )  . 
(b )   Use  part  (a )  to  obtain  a n  algorithm  for  MCCP  tha t   requires  O (mU  log C )  iter- 
a t  ions. 
2. 	 Consider a directed  graph G = (V,E) with a length function 1 : E + Zand  a specified 
source vertex s E V.  The  Bellman-Ford shortest pa th  algorithm computes the  shortest 
pa th  lengths d(v)  between s  and every vertex v  E V,  assuming tha t   G has  no  directed 
cycle of  negative  length  (otherwise t h e  problem  is NP-hard).  Here  is  a  description of 
th is  algorithm: 
The  Bellman-Ford algorithm computes  d(v) by  computing dk (v) = the  shortest  walk1 
between  s and v  using exactly  k  edges.  d k ( v )  can be  computed by  the  recurrence 

d k ( v )=  min  [dk-1(w) + l ( w , v ) ] .  
(w ,v ) EE  
'A  walk  is  like a  pa th   except  t h a t   vertices might  be  repeated. 

Let  hl (v) =  min  dk (v ) .  I t  can be shown tha t   if  the  graph has no negative cycle  then  
k=l,...,1 
hnP l  (v) = d(v)  'for all v E V.  Moreover, the  graph has  no  negative  cycle iff,  for  all v, 
dn(u) 2 hn- l(u)-
(You are not  required  t o  prove  any  of  the  above facts.) 

(a)   Let  p* be  t h e  minimum  average  length  of  a  directed cycle  C of  G,  i.e., 

p ( C )  = min C ( U , V ) E c   ~
min 
p * (G )  = 
directed  cycles c 
c 
ICI 

u Y  21) 

(

Using  the  Bellman-Ford  algorithm, show how  t o  compute p* in  O ( nm )  time. 
(Hint:  Use  the   fact  tha t   if  we  decrease the  length  of  each edge by  p  the  average 
length of  any  cycle decreases by  p .)  
(b )   Can you  find the  cycle  C with  p ( C )  = p*  using only 0( n 2 )additional time?  ( In  
other words, suppose you are given all the  values tha t  t h e  Bellman-Ford algorithm 
computes.  Can  you  find  a  minimum  mean  cost  cycle  using  th is   information  in  
0 ( n 2 ) ? )  

3.  	 Suppose we  have  n  objects  t h a t   we  want  t o  store  in  a  da ta   structure.  After  storing 
these  objects  in  the   d a t a   s truc ture ,  we  would  like  t o  perform  m  f ind  operations  on 
the  d a t a  structure.  Assume tha t   the  i ' t h  object  is  accessed  ki 2 1 times.  Therefore, 
C r = l   = m .   We  want  to  evaluate  the  performance of  the  d a t a  s truc ture  by  comput- 
ing the   to ta l  running  time of  these  m  find  queries  (no other  operation,  such as delete 
or  insert, is  performed  on  the  d a t a  s truc ture) .  

(a)   Show tha t   if  we  store the  objects  in  a splay tree, then  no ma t ter  what  t h e  initial 
configuration  of  the   splay  tree  is,  and  no  ma t ter   in   which  order  we  access  the  
objects,  the  to ta l   running  time  of  the  m  access operations  is  a t  most 

(b )   Show  tha t   if  we  store  the   objects  in  a  s ta t ic   binary  search  tree  (i.e.,  a  binary 
search  tree  tha t   does not  change by  a  find operation), then   no  ma t ter   in  which 
order  the   objects  are  stored  in  t h e  BST, and   no  ma t ter   in which  order  they  are 
accessed, the  to ta l  running  time  of  the  m  access operations  is  a t   least 

This  shows  tha t   the   splay  trees  are within  a  constant  factor  as optimal as  any  s ta t ic  
binary  search tree. 

