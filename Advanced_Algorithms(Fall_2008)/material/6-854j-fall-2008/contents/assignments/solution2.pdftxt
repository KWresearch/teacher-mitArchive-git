MIT OpenCourseWare
http://ocw.mit.edu 

6.854J / 18.415J Advanced Algorithms 
Fall 2008
��

For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms. 

18.415/6.854 Advanced  Algorithms 
Problem  Set  Solution  2 

1. Th e  Min  s-t-Cut  problem  is  t h e  following: 
G i v e n  a n  u n d i r e c t e d   g r a ph   G = (V, E ) ,  a   w e i g h t   f u n c t i o n   w  : E + R+ , 
a n d   t w o   v e r t i c e s   s ,  t E V ,   find 
M i n  s - t - C u t (G )  = min{w(S(S))  : S c V, s E  S,t  $ S ) .  
w h e r e   6 ( S )   d e n o t e s   t h e   c u t  
6 ( S )  = { ( i , j) E  E : I{i, j) n SI  = 1) 

a n d  

( a )   	 Argue  (in  just   a  few  lines)  t h a t   th e r e   is  a  polynomial-time  al- 
gorithm   t o   find  a  Min  s - t-cut  based  on  linear  programming 
(remember  Problem   Set  1).  (Be  careful;  problem  set  1 defined 
t h e  Min s-t-cut  problem for a directed  graph ,  while th i s  problem 
considers undirected  graphs.)  [We will see a much more  efficient 
algorithm   for  i t   (not   based  on  linear  programming)  later   th is  
semester .] 
The  description  of  t h e   (directed) Min s - t-cut  problem  a s  a linear program 
from Problem 1shows immediately t h a t  we  can  solve i t  in polynomial t ime ,  
for example by  the  ellipsoid algorithm.  Given a n  undirected graph ,  we  can 
transform  i t   into a  directed graph  simply by  producing two  directed  edges 
(one each way)  for every undirected  edge.  Then  cu t s  in  t h e  directed graph  
correspond  exactly t o  cu t s  in  the  undirected  graph ,  with  t h e  same weight. 

We  a r e   going  t o   develop  an   algorithm   for  a  generalization  of  t h e  
problem: 
G i v e n   a n   u n d i r e c t e d   g r a ph   G  =  (V ,E) ,   w  : E  -t R+ , a n d   a n   e v e n  
c a r d i n a l i t y   s u b s e t   of  v e r t i c e s  T  V ,   find 
M i n  T - Odd - C u t (G )  = min{w  ( b ( S ) )  : S c V ,IS  f l  TI  = o d d }  

Th a t   is,  we  want  t o   optimize over  all  cu ts   t h a t   sepa ra te  T  in to   two 
p a r t s  of  odd   size  (since  IT1  is  even,  IS nTI  odd   implies  t h a t   IT\ SI  odd  
as  well). 

( b )   	 Suppose t h a t   IT1  = 2,  say T = { s , t ) .   Wha t   is t h e  Min T-Odd-Cut 
then?   

Since  any  T-odd  cu t   must  split  T  in to   two  odd   pa r t s ,   there   is  only  one  

way  t o  d o  t h a t   - have  s and   t  on  opposite sides of  t h e  cu t .   Thu s  t h e  Min 

T-odd  cu t   is  exactly  t h e  Min  s - t  cu t .   

(c)  	 For  a  given  T C V ,   call a  cut   6 ( S )  T-splitting if  0 # S n T # T. 
Using  a  s-t-Min-Cut  algorithm,  show  how  we  can  find  t h e  min- 
imum  T-splitting  cut   in  polynomial  time.  Can   you  do  i t   in  a t  
most  IT1  calls t o  a Min  s-t-Cut  algorithm? 
Choose  a  fixed  s  E  T .   For  every  cu t   b ( S ) ,   we  can  assume  s  E  S  ( the  
graph   is  undirected  and   V  \ S defines  t h e   same  c u t ) .   Moreover,  for  every 
T-sp l i t t ing  c u t ,  there  exists a vertex  t  E  T \ S and  such a cu t   is an  s - t-cu t  
a s  well.  I t   is  sufficient  t o  find  t h e   minimum  s-t-cut  for  every  t  E  T \ {s} 
and   take  t h e  minimum  of  all these  cu ts .  
( d )   	 For  any  two  sets   C  and  D  (0  # C, D  c V ) ,   prove  t h e   inequality 
t h a t   


w ( b (C  \ D ) )  + w ( b (D  \ C ) ) 5 w ( b (C ) )  + w ( b (D ) ) .   


We  apply  t h e   definition  of  a  cu t   - 6 ( X )  is  t h e   set  of  all  edges  between  X 
and   V \ X :  

(e)  	 Prove  t h a t   if  6 (C )   is  a  minimum  T-splitting  cut   then   the re   is  a 
minimum T-odd-cut  6 (D )  such  t h a t   either  D  C  or  C & D .  
Hint:  Use  t h e   inequality  proved  above. 
Suppose  b (C )   is  t h e   minimum  T-sp l i t t ing   c u t .   If  IC  n TI  is  odd  then   C 
is  also  t h e   minimum  T-odd  cu t   and   we  can  choose  D  = C.  Otherwise 
suppose  IC  n TI  is  even,  while  b(D') is  the  minimum T-odd  cu t .  

Since  I  D'  nTI  is odd ,  either  I  (D l  n C) nTI  or  I  (D '  \ C) n TI  is odd .   Denote 
by  C' either  C or  V \ C  so  t h a t   I  (D l  n C') n TI  is  odd .   Note  t h a t   in   any 
case  6(C1) = S (C )  a n d   IC' n TI  is  even. 
Since  S(C1) is  a  T-sp l i t t ing   cu t ,   ( V  \ C') n T  is  nonempty  which  implies 
t h a t   either  (D'  \ C') n T is  nonempty  or  ( ( V  \ D') \ C') n T  is nonempty. 
W i thou t   loss  of  generality, we  can  assume  t h a t   (D l  \ C') n T is nonempty, 
otherwise we  rename D'  t o  V \ D'  which  doesn't change  t h e   cu t   (and  t h e  
new  D'  still satisfies  I  (D l  n C')  n TI  is  odd   since  IC' n TI  is even). 
Because  6(C1) is t h e  smallest T-sp l i t t ing  cu t   and  S(D1 \ C') is a T-sp l i t t ing  
c u t ,   we  have  w(S(C1))  5  w (6 (D1\ C ' ) ) .   Since  I(C' n D l)   n TI  is  odd ,  
I  (C ' \  D l)  nT I  is odd  a s  well.  The  smallest T-odd cu t  is 6 (D 1 ) ,  so w (6 (D1 ) )5 
w(S(C1\ D l ) ) .   Comparing these  two  inequalities with  t h e  one given  in  t h e  
h in t ,   w(6(C1))  + w(S(D1)) 2 w(S(C1\ D l ) )  + w(S(D1\ C ' ) ) ,  we  find  t h a t  
they   must  all  hold  with  equality  and   6(C1  \ D')  is  a  minimum  T-odd   cu t  
a s  well. 
In  case C' = C, we  can  choose D  = C1\D' and  we  have  a minimum T-odd  
cu t   D  c C .   In  case C' = V \ C, we  can  choose D  = V \ (C' \ D')  and  we 
have  a  minimum T-odd   cu t   such  t h a t   C  c D .  
( f )   	 Use  the  previous  observation  to   design  a  recursive  algorithm 
which  solves  Min  T-Odd-Cut  in  polynomial  time.  (Hint:  pos- 
sibly think  about modifying the graph.)  How  many calls  (in O ( * )  
notation)  to   a Min  s-t-Cut  algorithm  does  your  algorithm  per- 
form? 

MinOddCut  ( G ,   T )  
{ 

C  =  MinCut  ( G ,   T )  ; 

i f   ( IC  n TI  =  odd)  r e t u r n   C ;   

G1  =  C o n t r a c t   ( G ,   C )  ; 

G2   =  C o n t r a c t   ( G ,   V \ C )  ; 

\ C )  ; 

C1  =  MinOddCut  ( G I ,  
C2   =  MinOddCut  ( G 2 ,   T fl  C )  ; 

i f   (w e i g h t  ( 6 ( 4 ) )   <  we igh t  ( 6 (C 2 ) )   r e t u r n   C1; 

e l s e   r e t u r n   C 2 ;   

} 

Here, MinCut (G,  T) is supposed  t o  re tu rn  the  minimum T-sp l i t t ing  cu t   in 
G  and   C o n t r a c t  (G,  C)  should  merge  C  in to   a  single  vertex  and   upda te  
t h e  edges  accordingly  (i.e.  any  edge between  a  vertex u  of  C  and   a  vertex 

v  no t   in  C becomes  a  new  edge  between  t h e   new  sh runk   ver tex   a n d   v;  if 
the re   a r e  multiple  edges between  two vertices, we  can  replace t h em  by  one 
edge w i th  weight  equal  t o  t h e  sum  of  t h e  weights). 
T h e   correctness  of  t h e   a lgor i thm   follows  from  t h e   previous  observations. 
E i the r   t h e  m in imum   c u t   S (C )  is  T -odd ,   or  we  can   assume  t h a t   t h e   mini- 
mum  T-odd-cu t   is S (D )  where  C  C_ D  or D  C .   C u t s  6 ( D )  where  C C_ D 
a re   equivalent  t o   cu t s   in   t h e   g raph   G1  where  C  is  con trac ted   t o   a  single 
vertex.  C u t s   6 ( D )  where  D  C  a re   equivalent  t o   cu t s   in   t h e   g raph   G 2  
where  V \ C is  con trac ted   t o  a  single vertex.  T h e  smaller  of  t h e   two  cu t s  
mus t   be   t h e  m in imum  T -odd   cu t .  
Finally,  le t's  analyze  t h e   runn ing  t ime   of  t h i s   a lgor i thm .   T h e  body   of  t h e  
func t ion   (excluding t h e  recursive  calls)  run s  in  t ime  polynomial  in  t h e  size 
of  t h e  i n p u t  g raph   (M inCu t  a lgor i thm  + e lemen tary  g raph  opera t ions) .   I t  
rema ins   t o  e s t ima te   t h e   number   of  recursive  calls  t o  MinOddCut. Deno te  
t h e   size  of  t h e   i n p u t   se t   T  by  t .   Note  t h a t   if  t h e   func t ion   is  called  w i th  
pa rame te r   T  a n d   i t   produces  recursive  calls  w i th   parame ters   TI  a n d   T2, 
t h e n   IT1  = ITl I  + IT21.  Since  lz 1  2 2  in  t h e  leaves of  t h e  recursion  t ree ,  t h e  
number   of  leaves  is  a t  most  i. T h e  t ree   is  binary,  so t h e  number   of  nodes 
is  a t  most  t .   Therefore  t h e  t o t a l  number   of  recursive  calls t o  MinOddCut is 
l inear   in   IT  I. 
Each  call  t o  MinOddCut will  require  a  number   of  calls  t o  a  Min  s - t-cu t  
a lgor i thm   less  t h a n   t  =  IT I.  Hence,  t h e   t o t  a1  number   of  calls  t o   a  Min 
s- t-cu t   a lgor i thm  is O ( I T  1 2 )
.
 
(By s tudy ing  t h e  prob lem ,  one can  ac tua l ly  
solve  t h e   Min  T-odd-cu t   problem  w i th   O(IT1)  calls  t o   a  Min  s - t-cu t  
a lgor i thm .)  

2 .   	 Use the ellipsoid method to  solve the minimum weight perfect match- 
ing  problem  (there is  a more  efficient  combinatorial algorithm for  it ,  
but  here we  will  use  the  power  of  the  ellipsoid algorithm): 
G i v e n   a n   u n d i r e c t e d   g r a ph   G  =  (V ,E)  a n d   a  w e i g h t   f u n c t i o n   w  : 
E 	 t N ,   find  a  s e t   of  e d g e s   M  c o v e r i n g   e v e r y   v e r t e x   e x a c t l y   o n c e   ( a  
p e r f e c t   m a t c h i n g )   w i t h   t h e   m i n i m u m   t o t a l   w e i g h t .  
In order to  formulate this problem as a linear program, we  define the 
perfect  matching polytope: 
P = conv{xM  E  {O,  1IE: M  is  a perfect  matching) 
where  XM   is  the  characteristic vector  of  M  ( xM ( e )  = 1 if  e  E M  and  0 
otherwise).  The convex hull conv(A)   is defined as {xiXixi  : xi  E  A, Xi  > 
0 ,  xiX i   = 1)  (where the  summation  is  finite). 

( a )   	 Argue  t h a t   t h e   vertices  of  P  a r e   t h e   characteristic  vectors  of 
perfect  matchings.  Deduce  t h a t   if  we  can  optimize Cewexe over 
P, we  would  find  a  minimum  weight  perfect  matching. 
Any  po in t   in  P can   be  w r i t ten   a s  

where  AM   2 0  a n d   E MAM   = 1 .   Clearly,  x  can   b e   a  vertex  only  if  we 
have  exac t ly   one  AM   = 1. We  will  show  t h a t   a l l   such  vectors  a re   indeed 
vertices.  For  a  given  M ,  consider  t h e  hyperp lane  

where  n  = IVI  ( a n  even  numbe r ) .   Note  t h a t   every  perfect  ma tch ing   has  
exac t ly   5 edges.  T h e n   for  any  x  E  P, 

because  0  5 xe  5 1. Equa l i ty   can   hold  only  if  Ve  E  M ; x e  = 1 b u t   t h e n   x 
is t h e  charac ter is t ic  vector  of  M.  Therefore P n  H M  = { x M )  which  proves 
i t   is  a  vertex. 
T h e  op t imum  of  zew e s e  can  b e  assumed  t o  be   a  vertex  X M   which  means  
t h a t   for  any  o the r   perfect  ma tch ing   M I ,  w (M1 )  2 w ( M ) .  
( b )   	 Suppose now t h a t  we  can decide  (via linear programming or  some 
o the r  way) whether  P n { x   : wTx  5 A )  is emp ty  or  no t ,  for any given 
X  (remember  all weights  we  a r e   integers).  Show  t h a t   by  calling 
an   algorithm   for  th is   decision  problem  a  polynomial  number  of 
times   (in  t h e  size of  t h e  inpu t ,   i.e.  IVI,  I  E I  and   log(w,,,)),  we  can 
find  t h e  weight  of  t h e  minimum-weight  perfect  matching. 
We  can   find  t h e   m in imum   weight  by  b inary   search.  If  t h e   g raph   h a s   n 
vertices  a n d   max imum   edge  weight  w,,,, 
t h e   max imum   possible  weight 
For  any   X  E  [O ;   inw,,,],  we  a r e  ab le  t o  
of  a  perfect  ma tch ing   is   inw,,,. 
te s t   whe ther   the re   exists  a  perfect  ma tch ing   of  weight  a t  most  X  ( t h a t ' s  
exac t ly  when  P n {x  : wTx  5 A )  # a ) ) .   T h e  weights  a re  integers,  so we  can  
p inpo in t   t h e   smallest  such  X  in  O(log(nw,,,)) 
s teps .  
(c)  	 W i t h  t h e  same assumptions as  in  t h e  previous p a r t ,  can you  also 
find a minimum-weight  perfect  matching  (not  just  i t s  weight, bu t  
also which  edges  a r e  in  i t )  in  polynomial time?   (The re  might  be 
several perfect  matching  having  t h e   same minimum weight,  bu t  

here you  need  t o  produce  only  one of  them .   Also,  t h e  algorithm  
does  not  need  t o  be   extremely  efficient, just  polynomial.) 
For any edge, we  can determine if  we  need i t  for t h e  op t ima l  perfect  match- 
ing.  F i r s t ,   find  the   minimum  weight  W* .   Then   pick  an   edge  e l ,  remove 
i t   from  t h e   graph   and   tes t   if  there   is  still  a  perfect  matching  of  weight 
W * .  If  yes, we  don' t  need  edge e l   and  we  continue on  t h e  graph  G \ {el). 
Otherwise  we  know  t h a t   e l   appears   in  any  optimal  perfect  matching,  so 
we  remember  i t ,  remove  i t s  two  vertices  from  t h e   graph ,  and   continue  on 
t h e  remaining graph  with modified optimum weight  W' = W*  - w ( e l ) .   In 
I E 1  steps, we  determine the   optimal  perfect  matching. 
Due   t o   Jack  Edmonds,  t h e   perfect  matching  polytope  can  be   de- 
scribed  by  t h e  following inequalities: 

( d )   Show t h a t   every vector  in P satisfies  t h e  above  inequalities. 
Suppose x is t h e  characteristic vector  of  a perfect  matching.  Then  t h e  first 
two inequalities are satisfied by  definition.  For the  last  inequality, consider 
and  odd-size subset W  c V .   All vertices  of  W  cannot  be  covered by  edges 
inside W  because  these  edges cover  disjoint  pairs  of  vertices.  At  least  one 
vertex  must  be  covered  by  an   edge e  E 6 (W )  and   therefore 

Since these  inequalities  are  valid  for  t h e  vertices  of  P, they   are  also  valid 
for  any  point  inside  P. 

Take  t h e  o the r   implication  for  granted   (every vector  satisfying these  
inequalities  is  in P). 

(e)  	 How  many  inequalities  do  we  have  in  th is   complete  description 
of  P?  Can  we  just  use  any  polynomial-time  algorithm  for  linear 
programming  t o  optimize over  P? 
Unfortunately,  t h e  th ird  condition generates  2 " ~ ~
inequalities  (one for each 
odd  subset,  t h e  same equality for W  and  V \ W ) .  Therefore a  straightfor- 
ward  linear  programming  approach  would  be  very  inefficient  (no t  polyno- 
mial  in  n ,  the   number  of  vertices,  and   log w,,,). 

( f )   	 Show how we  can use the ellipsoid method t o  decide if there exists 
a perfect  matching of weight  at most  X  in polynomial time.  How 
would  you  select  the  initial  ellipsoid?  How  would  you  take  care 
of  the  equality  constraints  in  the  description  of  P ?   When  can 
you  stop? 
By adding t h e  inequality wTx 5 A,  we  get a polytope PAwhich is nonempty 
exactly  if  there   exists  a  perfect  matching  of  weight  a t  most  A. 
The   ellipsoid  algorithm  can  be  used  t o  tes t   whether  PA = 0  whenever  we 
can :  
a  find  a  suitable  bounding  ellipsoid  t o  s t a r t  w i th ,   

a  have  a  polynomial-time  separa t ion  oracle, and   

a  es t ima te  t h e  minimum volume  of  PA,if  i t's  nonempty.  

The  bounding ellipsoid here  is simple.  We  can  take  for example t h e  sphere 
with  center  in   t h e   origin  and   radius  fl.Th i s   contains  all  characteristic 
vectors  of  perfect  m a t c h i n g .  
If  a point x  doesn't lie in  PA,i t ' s  because  i t  violates some of  t h e  conditions. 
The   condition wTx 5 X  is  easy,  a s  well  a s  the   first  two  inequalities  in  t h e  
description  of  P .   T h e   th i rd   inequality  seems  t o   require  an   exponential 
number  of  inequality  checks  bu t   here's where  Problem  1 comes  in to   play. 
For  a  given  x ,  we  can  calculate in  polynomial  t ime  

because  th i s   is  just  a  min-V-odd-cut  problem.  Then   we  check  whether 
y( x )  2 1 .   In case y ( x )  < 1,we  can  repor t  t h a t  x  violates t h e  inequality for 
W where  S (W ) is  t h e  minimum V-odd  cu t .   Otherwise, we  are  guaranteed 
t h a t   no  such  cu t   exists. 
Finally, we  have  t o  make  sure  t h a t   PAhas   some volume  so we  know  when 
t o  s top .   We  d o  th i s  by  employing  t h e  theorem  given  in  class  (theorem 2  of 
t h e  scribe notes  of  lecture  5)  which  s ta te s  t h a t   {x : A x  5 b )   is  nonempty 
if  a n d  only if  {x : Ax  5 b + ~ e )is nonempty  as well, where  E  can be  chosen 
as  2 - L .   T h e   value  L  as  defined  in  class  involves  the   number  of  rows  a s  
well,  which  is  enormous, bu t   th i s   is  not  needed  here.  We  can  simply  redo 
t h e  proof  more  carefully.  We  have  t o  consider  a  vertex  of  y  2 0, AT  = 0, 
and  b T y  = -1 ,  where  t h e  ma t r ix   ( t:  ) has  entries all 0 and   I except  for 
one  column  containing wj's  and   X  (which  can  be   assumed  t o   be   a t   most 
mw,,,).  Most of  the  entries of  such a basic feasible solution y will be  0 ,  t h e  
ones t h a t  are  non-zero  (basic, and  thu s  a t  most  m  of  them )  will be  a t  most 
Hence,  following t h e  proof  of  Theorem  5 ,  we  can choose E  t o  be 
m!mw,,. 

say  2m!m2~,,,  = 2-Q  with  Q  = O ( m  log rn + log w,,,),  which  happens   t o  
1 
be  polynomial  in  rn and  log w,,,. 
Therefore we  replace each  equality  by  a 
pair  of  inequalities  and   increase t h e   right-hand  size by  E  = 2 -Q .   We  have 
t o  slightly  modify  our  separa t ion   algorithm  (since now  we  are   separa t ing  
over  th i s   slightly  modified  polytope)  bu t   th i s   is  tr iv ia l   since  we  simply 
compare  t h e   value  of  the   minimum  V-odd-cut  t o   1 - & instead  of  1.  In  
summary,  th i s   guarantees  t h a t   we  can  s top   after  a  polynomial  number  of 
s teps  (0(m 2Q )= 0(m3  log rn +m 2  log w,,,) 
)  and  either  find a point  in  P' 
or  declare  i t   empty. 

