MIT OpenCourseWare
http://ocw.mit.edu 

6.854J / 18.415J Advanced Algorithms 
Fall 2008
�� 

For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms. 

18.415/8,854  Advanced  Algorithms 
Problem  Se t   2 

1.  The Min  s-&Cut  problem  is  the following: 
Given an und im ted  gmph  G = (V,E ) ,  a weight firaction  w : E +W ,  and  two  
vertices 8 ,  t E V , find 
M i n  8 - t - Cut(G)= min{w(d(S))  : S C I/,s f S,t$3). 

where &($)  d e n o t e  t h e  cut 

(a) 	 Argue  (i  jwt a few lines) that there is a polynomial-time algorithm to find 
a Min  s - t-cut  based  on  linear programming  (remember Problem Set  1). 
(Be careful; problem set 1 d e h e d  the Min s - t-cut problem for a directed 
graph,  while  this  problem  considera  undirected  graphs.)  [We  will  see a 
much more  efficient  algorithm for  it  (not based  on  Iinem  programming) 
h t e r  this semester,] 

We  are going to  develop an algorithm for  a generdization of  the problem: 
Given  an uad im ted  graph   G = (lr, E ), w  : E  + R? , and  an  e v e n  cardinality 
subset  of vertices T G V , find 
M zn  T - Odd - Cu t(G)= min{w(5(S))  : S C V , ISnTI = o d 4  

That  is, we want  t o  optimize over all cuts that separate T  into two parts of odd 
size  (since IT1  is even, ISn TI  odd implies that T \ SI odd as well). 

(b) 	 Suppose that  IT1 = 2, say T = { s , t ) .   Wbat  is the  M i n  T-Odd-Cut  then? 
( c )  For  a given T  V ,call a cut  d ( S )   T-splitting if 0 # S n T # T .  
algorithm,  show  how  we  can  6nd  the  minimum  T-
Using  a s-t-&-Cut 
splitting cut  in polynomial  time.  Can you do  it  in  at  most IT1 c a b  to a 
Min  s-t-Cut  algorithm? 

(d) 	 For any lam sets C and D  (0# C ,D  c V ) ,prove  the inequally that 

(o) 	 Prove  that  if  6 (C )is s minimum T-splitting cut  then  there  is a minimum 
T-odd-cut 6 ( D ) such  tha t   either D E C or C  D .  
Hint:  UE the inquality proved above. 
( f )  Use the  previous ohem t ion  to  design a recursive algorithm which wlvm 
Min  T-Odd-Cut  in  polynomial  time.  (Hint:  pw ib ly   think  about  mod-
g the  graph.)  HOW many & (in O ( . )  notation)  t o   s Mig  &-Cut 
m
algorithm does your  algorithm perfom? 

2. 	 Use the ellipacid method to solve the minimummight perfect matching problem 
(there: is  a more  &cient  mmbinatorial dgoritlm for  it, but  here  we  will  use 
the power of the ellipsoid dgorithm]: 
Given an und im ta i  gmph G = (V,E )  and  a weight finctiopa  w  : E  -+  N,f i n d   a 
set of dga M  wvm-ng a n w y  vertex  ea;actiy  once  ( a  perfect  matching)  with  the 
minim~srntotal weight. 
In order  t o  formdab this  problem w  a linear program, we  d&e 
polytope: 

the  V-join 

P = catu {XM E { 0 ,  lIE :M  is a perfect matching} 
where  X M  is the c.har%ter&tic  vector  of  M ( x M ( e )= 1 if e  E M and 0 other-
is d h d  = (x,  E A, & >_ O,Ci& =
Aiai  : 

huU WTIUCA) 
wise).  ?"he C Q ~ W  
1)  (where  t b  m a t i o n  i a  finite:). 


(a) 	 Argue that the vertices of  P are the chractedsticvector~of perf&  match-
i n p .   Deduce  that  if we  can optimize 
w , ~ ,  over P ,  we  would  f u d  a 
minimum weight  perfect matching. 
(b) 	 Suppose now  that  we  can  dwide  (via linw  pro^^ or same  other 
way) whether Pi-74~: wTx  5 A) isempty or not, for any dvenX  (remember 
aJI wei&ts  w e are integers).  Show  that  by calling an algorithm for this 
decision problem a polynomial  number  of  fhna (in the  &e  of  the  input, 
i.e.  IVI,  IEl  and log(w-)  1,  we can find tbe weight of the mhimm-weight 
perfect matchingp 
(c) 	 With  the  same  amumptiona  as in the  previous  part,  can you also  f b d  
a minimtrm-weight  perfect  matching  (not just  its weight,  but  a h  which 
edges a re  in it) in polynomid time?  (There might be m e r d  perfect match-
ing  having the  m e  minFmnm .weightTbut  here you need  to produce only 
the  algorithm does not  need t o  be extremely efficient, 
one of  them.  &o, 
just  palgnomial.) 

Due  to Jack Edmonds, the  perfect  matching polytope can be  described by  t h e  
following inequalities: 

(d) 	 Show  that  every vector  in P  satisfies the above  inequalities. 

Take the other implication for granted (every vector satisfying these inequalities 
is in P ) .  

(e) 	 How many inequalities do we  have in this  complete description of P?  Can 
we  just  use  any polynomial-time algorithm for  linear programming to o p  
t G e  over  P? 
(f)   	 Show how we  c a n  use the ellipsoid method to decide if there exists a perfect 
matching of  weight  at most  X  in polynomial time.  How would  you  select 
the  initial ellipsoid?  How would you tike care of  the equality constraints 
in the description of  P?  When  can you stop? 

