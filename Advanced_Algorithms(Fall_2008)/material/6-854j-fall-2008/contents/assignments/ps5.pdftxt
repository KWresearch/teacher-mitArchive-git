MIT OpenCourseWare
http://ocw.mit.edu 

6.854J / 18.415J Advanced Algorithms 
Fall 2008
��

For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms. 

18.415/6.854  Advanced  Algorithms 
Problem  Set  5 

1.  In  the  bin  packing  problem,	 we  are  given  n  items,  item  i  being  of  length  ai 
(0  < ai  ≤  1),  and  we  need  to  ﬁnd  the  minimum  number  of  bins  of  length  1 
so  that  no  bin  contains  items  whose  total  length  exceeds  1.  This  problem  is 
NP-hard.  Consider  the  following  heuristic,  called  “First  Fit”  (FF):  Consider 
the  items  in  any  order  and place  each  item  into  the ﬁrst bin  that  still has  room 
for  it.  Let  L∗  denote  the  minimum  number  of  bins  needed  and  let  LF F  be  the 
number  of  bins  obtained  by  using  First  Fit. 
(a)  Show  that  LF F  ≤ 2L∗  − 1  for  any  instance. 
(b)  Show  that  LF F  ≤  αL∗  + β  for  some  α <  2.  The  best  possible  answer  is 
α  = 1.7  and  β  =  2,  but  this  is  somewhat  tricky  to  show  (or  supposed ly 
tricky:  you might  have  an  easy  argument). 
Hint  to  get  α  = 1.75  in  case  you  don’t  have  any  other  idea.  Consider 
three  types  of  bins  in  the  packing  obtained  by  FF. B1  consists  of  the  bins 
containing  items  of  total  length  greater  than  2/3,  B2  consists  of  the  bins 
not in B1  containing one item of length greater than 0.5 (and possibly other 
items)  and  B3  consists  of  the  remaining  bins.  Show  ﬁrst  that  |B3 | ≤ 2. 
2.  Consider  the  following  problem.	 Given  a  collection  F  of  subsets  of  {1, . . . , n}
and  an  integer  k ,  ﬁnd  k  sets  S1 , . . . , Sk  in  F  such  that  |S1  ∪ S2  ∪ . . . ∪ Sk |  is 
maximum.  This  problem  is  NP-hard.  The  greedy  algorithm  ﬁrst  chooses  S1  to 
��

��

be  the  largest  set,  and  then  having  constructed  S1 , . . . , Si−1  chooses  Si  to  be 
the  set  that maximizes

.
 �k1 
�

Si  \ ∪ Sj
i−1
j=1
Show  that  the  greedy  algorithm  is  a  1 −  1 − 
-approximation  algorithm. 
k 
(Hint:  You may want  to  show  that,  for  any  j ,  the union  of  the ﬁrst  j  sets  given 
�

�j1 
by  the  greedy  algorithm  have  a  cardinality  at  least 
1 −  1 − 
k 

OP T ,


where  OP T  denotes  the maximum  cardinality  of  the  union  of  k  sets.)


3.  In MAX  2SAT,  we  are  given  a  collection  C1 , . . . , Ck  of  boolean  clauses  with  at 
most two literals per clause.  Each clause is thus either a literal or the disjunction 
of  two  literals  drawn  from  a  set  of  variables  {x1 , x2 , . . . , xn}. A  literal  is  either 

PS5-1 

a  variable x  or  its negation  ¯x.  The  goal  is  to ﬁnd  an  assignment  of  truth  values 
to  the  variables  x1 , . . . , xn  that maximizes  the  number  of  satisﬁed  clauses. 

(LP ) 

j  = 1, . . . , k 

(a)  Show  that  the  algorithm  which  independently  sets  every	 xi  to  true  with 
probability  0.5  is  a  randomized  0.5-approximation  algorithm.  (As  usual, 
compute  the  expected  number  of  satisﬁed  clauses.) 
� 
(b)  Consider  the  following  linear  program: 
k
Max 
zj 
sub ject  to: �  � 
j=1 
(1 − yi ) ≥ zj 
yi  + 
− 
i∈I + 
i∈Ij
j 
1 ≤ i ≤ n 
0 ≤ yi  ≤ 1 
0 ≤ zj  ≤ 1 
j  = 1, . . . , k , 
− ) denotes the set of variables appearing unnegated (resp. 
+  (resp. Ij
where Ij 
negated)  in  Cj .  For  example,  the  clause  x3  ∨ x¯5  would  give  rise  to  the 
constraint  y3  + 1 − y5  ≥ zj . 
i.  Show that the optimum value of this linear program is an upper bound 
on  the  optimum  value  of MAX  2SAT. 
ii.  Let  y ∗ , z ∗  denote  the  optimum  solution  of  this  linear  program.  Show 
that  the  algorithm  which  independently  sets  every  xi  to  true  with 
∗  is  a  randomized  0.75-approximation  algorithm. 
probability  yi 
(c)  Consider  now  an  approach  similar  to  the  one  described  in  class  for  MAX 
CUT.  Deﬁne  a  unit  vector  v0  corresponding  to  “true”  and  also  a  unit 
vector  vi  for  each  variable  xi .  Deﬁne  the  “value”  of  the  clause  or  literal  xi 
and  the value of  ¯xi  as v( ¯xi ) =  1−v
0 ·
0 ·
as v(xi ) =  1+v
vi
vi	
.  Observe  that v(xi ) 
is  1  if  v0  = vi ,  0  if  v0  = −vi ,  and  between  0  and  1  otherwise.  For  a  clause 
2 
2 
with two literals, say C  = x1 ∨x2 , deﬁne v(C ) as (3+v0 ·v1+v0 ·v2−v1 ·v2 )/4. 
The value of other clauses with two  literals are similarly deﬁned.  Consider 
now  the  nonlinear  program: 
� 
k
v(Cj ) 
j=1 

Maximize 

(N LP ) 

sub ject  to: 

vi  ∈ Sn 
i.  Show  that  the  optimum  value  of  this  nonlinear  program  is  an  upper 
bound  on  the  optimum  value  of MAX  2SAT. 

i = 0, 1 . . . , n. 

PS5-2 

ii.  Consider  the algorithm which ﬁrst  solves  this nonlinear program opti­
mally,  then  generates  a  uniformly  selected  point  r  on  the  unit  sphere 
Sn ,  and  sets  xi  to  be  true  if  (v0  · r)(vi  · r) ≥  0.  Using  the  analysis  of 
the MAX  CUT  algorithm  seen  in  class,  show  that  this  algorithm  is  a 
randomized  0.878-approximation  algorithm  for MAX  2SAT. 

(d)  Can  you  do  better  than  0.878? 

PS5-3 


