MIT OpenCourseWare
http://ocw.mit.edu 

6.854J / 18.415J Advanced Algorithms 
Fall 2008
�� 

For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms. 

18.415/6.854  Advanced  Algorithms 

Problem   Set  Solution 4 
Lecturer:  Michel  X .   Goemans  

1. I n  class, we  have  seen Klein's  cycle  cancelling  algorithm  for  t h e  M in   Cost  Circu- 
lation Prob lem   (MCCP ) .  Th is  algorithm  requires O (mCU )  i tera t ions   in  t h e  worst 
case,  i.e.,  i t s  runn ing  t ime  is not  polynomial in  m,  log C  and  log U.  I n  th i s  problem, 
we  will  see  how  t o   apply  t h e   idea  of  cost   scaling on  th i s   a lgor i thm  t o  ob ta in   a n  
a lgor i thm  whose  runn ing  t ime   is polynomial  in m ,   log C ,  and   U .  
( In  fact, i t  is possible t o  apply t h e  same idea on b o t h  costs and  capacities t o  ob ta in  
a n  algorithm  whose  runn ing   t ime   is  polynomial  in   m ,   logU   and   log C,  bu t   th i s   is 
not  required  in   th i s  problem.) 
Recall  t h a t   in   MCCP ,   a  bidirected  graph   G  =  (V, E ) ,   a n   anti-symmetric  cost 
function  c  : E  I+  Z,and   a  capacity  function  u  : E  I-+  Z  a re   given.  Let  n  and  
m  deno te   t h e   number  of  vertices  and   edges  in   G,  U  = m a x ( , , w ) E ~Iu(u7w)I, and  
GI  = ~ ~ ( v , w ) E EIc(u, w)I- 

(a )   For  every  integer  i ,  define  t h e  cost  function c("  : E E Z  as  follows: 
,-
c(') (u, W )  := sgn(c(u,w))LIc';~w)I]

where  sgn (x )   is  t h e  sign  of  x.  Notice  t h a t   by  t h e  above  definition, 
(u, w)  = 
w)  = 0.  Ou r  objective is t o  find  a way  t o  solve MCCP  
c(u, w)  and   ~ ( ~ ~ ~ g ( ~ + ' ) l ) ( u ,
for  t h e  cost  function d i ) ,given  i t s  solution for  di+'). 
Let  f  b e   a n   op t imum   circulation  for  G  w i th   t h e   cost  function  c (~+ ' )and   t h e  
capacity  function u.  Prove  t h a t   if we  apply Klein's cycle cancelling  algorithm 
on  G  w i th   t h e   cost  function  di) and   capacity  function  u ,   s ta r t ing   from  t h e  
circulation f ,  t h e n   t h e  number   of  i tera t ions  of  th i s  a lgor i thm  is O (mU ) .  

c g  (u, w)  = c("(u, w) - 2c("') 

Since  f  is  an   optimum  circulation  for  G with  th e   cost  function  c ( ~ + ' ) ,by  th e   theorem 
t h a t   was  proved  in  the   class,  the re  must  be  a  potential  function  p ,   such  t h a t   for  every 
edge  (u, w)  in  the   residual  graph  Gt , cFf  ')  (u, w)  = c(*')  (u, w) + p (u )  - p (w )   2 0.  By 
t h e  definition  of  d i ) ,for  every edge  (u, w ) , c ( ~ )(u, w )  is  equal t o   2c(*')  (u, w )  plus  one of 
t h e  numbers  -1,  0, or  1. Therefore, for  every edge  (u, w)  in Ef , 
(72,  w) + 2 (c("f)(v,  W )   + p (u )  - P (W ) )   2 -1. 
We  know  t h a t   for  every cycle  (flow, resp.), t h e  cost  of  th e  cycle  (flow, resp.)  is  th e   same 
with  respect  t o  di) and   cyi.  Therefore, if  we  replace  the   cost  function di)with  t h e  cost 
function  cy:,  Klein's  cycle  cancelling  algorithm  works  in  exactly  th e   same  way  t h a t   i t  
works  with  c ( 9 ,  and   ou tpu ts   th e   same  result.  Therefore, we  consider  th e   cost  function 
instead  of  c ( 9 .  Let  f *  be  t h e  optimal circulation for  c;; 
and   consider th e   circulation 
c!: 
f'  := f * - f .  By the  definition of  the  residual  g raph ,  f '  is a  circulation in  Ef . Therefore, 
t h e  cost  of  f '  is  a t  least 

where the  last  inequality is a consequence of  (1) and  the  fact t h a t   I f '   (u, w) 1  5 2U for every 
edge  (u, w).  Now,  notice  t h a t   the   cost  of  f '  is  equal  t o   th e   cost  of  f *  minus  t h e  cost  of 
f . Therefore,  the   cost  of  f *  is a t  most  2mU  units  less th an   the   cost  of  f . This, together 
with  th e   fact  t h a t   in  every  iteration  of  Klein's  algorithm  th e   cost  of  th e   circulation  is 
decreased  by  a t   least  1, implies  t h a t   th e   number  of  iterations  of  Klein's algorithm  is  a t  
most  2mU. 

(b )   	 Use  par t   (a)   t o   obtain  an  algorithm  for  MCCP   tha t   requires  O (mU1ogC )  
iterations. 

( v ,  w) . For this function, t h e  any feasible circula- 
S t a r t  with th e  cost function ~ ( ~ ' * g ( ~ + ~ ) 1 )
tion is a n  optimal circulation.  Run th e  algorithm in pa r t   (a )  for i = rlog(C+ 1 ) l - 1,. . . , 0 ,  
t o  compute  t h e  optimal circulation with  respect  t o  the  cost  function di) for  every  i ,  and  
in particular t h e  optimal circulation with respect t o  do)= c.  By pa r t   ( a ) ,  every step takes 
a t  most  O (mU )  iterations, and   therefore th e  to ta l   number  of  iterations is  O (mU  log C). 
2 .   	 Consider a directed graph G = (V, E )  with a length function 1 : E + Zand a specified 
source  vertex  s  E  V.  The  Bellman-Ford  shortest  pa th   algorithm  computes  the  
shortest pa th   lengths d(v) between  s and  every vertex  u  E V,  assuming t h a t   G  has 
no  directed  cycle  of  negative  length  (otherwise t h e  problem  is NP-hard).  Here  is 
a  description of  this  algorithm: 
The  Bellman-Ford  algorithm  computes  d (u )   by  computing  dk (v )  =  the   shortest 
walk1  between  s  and  u  using  exactly  k  edges.  d x ( u )  can  be  computed  by  the  
recurrence 
dk  (u) =  min  [dk-1(w )  + 1(w ,  u)] . 
( w 7 u ) E E  
Let  hl (u) =  min  dk  (u).  I t   can  be  shown  t h a t   if  t h e   graph  has  no  negative  cycle 
k=17...71 
then  hn-1 (v) = d(v)  for  all u  E  V.  Moreover, t h e  graph  has no  negative  cycle  iff, for 
all u,  dn (u )  > hn-1(u). 
(You are  not  required  t o  prove  any  of  the  above facts.) 

( a )   Let  p *  be  the  minimum  average length of  a  directed  cycle  C  of  G,  i.e., 

p ( C )  = min  x ( u 7 V )EC  
min 
c 
directed  cycles  c 
ICI 

(

~

7 

Using  the  Bellman-Ford algorithm, show how  t o  compute p*   in O ( nm )  time. 
(Hint:  Use  t h e   fact  tha t   if  we  decrease  the   length  of  each  edge  by  p  the  
average length of  any  cycle decreases by  p.) 

Notice  t h a t   if  we  decrease th e   length  of  each  edge in  the   graph by  p ,  the  mean  length  of 
each  cycle  in  th e   graph  is  decreased  by  p .   Therefore,  p*   is  t h e   largest  value  of  p  such 
t h a t   if  we  decrease  th e   length  of  each  edge  by  p ,  the re   will  be  no  negative  length  cycle 
in  th e  graph.  Also, by  the   definition  of  dl (v ) ,  if  one  decreases t h e  length  of  each edge by 
p ,  the   effect  on  d l (v )  is  simply  t h a t   i t   will  be  decreased  by  lp .   Therefore, by  th e   above 
facts  about  th e   Bellman-Ford  algorithm,  p *   is  t h e   largest  value  of  p  for  which  all  the  
inequalities 

'A  walk  is like  a  pa th   except  tha t   vertices  might  be  repeated. 

d,  (v) - n p  2  min 
(dk (u) - kp )
k=17...7n-l 

hold  for  every  u  E  V.  Let's  compute  th e   largest  value  of  p  t h a t   satisfies  t h e   above 
inequality  for  a  fixed  u.  This  value  is  equal  t o  t h e  maximum  over  k  of  t h e   largest  value 
of  p  t h a t   satisfies t h e   inequality  d,(u)  - n p  2 d k ( u )- kp .   Therefore, for  a  fixed  u,  the  
( L, 
.  Thus ,   the   largest  p 
d, 	  v  - d k ( v )
largest  p  t h a t   satisfies  inequality  (2)  is  maxx,l,...,,-l 
t h a t   satisfies inequality  (2) for  every  vertex  u  E  V  is  equal t o  

p *  = min  max 
V E V  k=l,...,n-1 

dn (u) - dk  (v) 
n - k 

I t   is  obvious  t h a t   given  all  the   values  dl (u)  t h a t   a re   computed  by  the   Bellman-Ford 
algorithm,  t h e  above value can be   computed  in  O ( n 2 ) .  

(b )   	 Can  you  find  the  cycle  C  with  p (G )   = p *   using  only  O ( n 2 )  additional  time? 
(In other words,  suppose you  are  given all  the  values  that  the Bellman-Ford 
algorithm  computes.  Can  you  find  a  minimum  mean  cost  cycle  using  this 
informat ion  in 0( n 2 ) ? )  

We  use  the   following algorithm: 
1.  Compute the   value of  p*  using  th e   algorithm  in pa r t   (a) .  
2.  Sub t rac t   p*   from  th e   length  of  each  edge. 	  From  now  on,  when  we  ta lk   abou t   the  
length  of  an  edge, we  mean  the   upda ted   length. 
3.  For  every  Z  = 0 ,  . . . ,n  and   every vertex  u E  V ,  compute  t h e  following values: 

di ( u )   :=  dl (u) - Zp* 
hk  (u)  := 
min 
d i ( v )
k=l,...,n-1 

4. 	 Find  a  vertex  u  such t h a t   h;  (u) = d;(u). 
5. 	 Let  V O ,  u l ,u2 ,  . . . un  be  a  sequence of  vertices  defined as follows: 

- uo  = u. 

- For  k = 0 , .  . . ,n - 1, vk+l  is  a  vertex  for which  we  have 


6. 	 Find  i and  j  (i < j )  such  t h a t   u;  = uj. 
7. 	  Ou tpu t   th e   cycle C  :=U j ,  ~ j - 1 ,. . . ,U i + l ,   U i   = vj. 

We  prove t h a t   the   above  algorithm  finds  th e  minimum  mean  length  cycle.  After  s tep  2, 
we  know  t h a t  a  cycle of  to t a l  length  zero must  exist  in t h e  resulting graph  (and this cycle 
corresponds  t o  a  cycle with  th e  minimum  mean  length in t h e  original  g raph ) .   Therefore, 
we  only  need  t o  find  such  a  cycle.  Also,  we  know  t h a t   there  is  no  negative  length  cycle 
in  th e  graph. 
After  step 3 ,  by  the  argument  in pa r t   ( a ) ,  we  know t h a t  df (u) is t h e  length of  t h e  shortest 
walk  with  exactly  Z  edges from  s t o  u,  and   hd (u )  is  t h e   length  of  th e   shortest walk  with 
a t  most  n  edges from  s t o  v. 
In   step  4,  such  a  vertex  u  must  exist,  since otherwise we  would  have  hL(v)  < d;(u)  for 
every vertex u, and  therefore we  can find a small positive  E:  such t h a t  if  we  sub t rac t  r:  from 
t h e   length  of  each  edge,  all  th e   inequalities  h',(v)  _<  db(u)  are  still  satisfied.  Therefore, 
subtracting 6 from the  length of  each edge does not  create any negative length  cycle.  This 
is  in  contradiction  with  the   fact  t h a t   the re  is  a  zero  length  cycle  in  th e  graph. 
The   sequence uo, v l ,  u2,. . .u,  defined  in  s tep   5  is  well-defined,  because  by  the   definition 
of  d i ( u )  we  know  t h a t   for  every  u  and   k,  the re   must  be  a  vertex  w  such  t h a t   dk (u )  = 

d a - ~ ( w ) + t ( w , v ) ,   A b ,  noticethat bymmmhg Equstim  c3)  fo rk  = O,...ln- l3we 
+ f ( P ) $  
whete I C P )   is the fen@h ofthe walk P := v,%-i.. 
obtain & ( u )   = 
~ [ Q I * )  
. t l y ~ l g .
b O i f w  =aaaLd in f fa i ty i f   w  #s, and$[v)  b MinfmiQ 
~ r
e
I ~ c
e ~ ( w )
(Mais iP of the  a&ampticmthat  the  graph  is sbmngly  ama&d),  khe equality 
& ( v )   = $(vn)  + i ( P ) implies that w,,  = a  and P  is a walk fm& a  to pr  d length & ( v ) .  
c j ) a p& t h a t r y = y .  
h ~ & m ~ d y n u e r t i c e ; g i n & e ~ p b , t h m m ~ b e ~ a n d j ( f 

&t  h  = i , A.  . * j  - 1,
$ - a ( ~ h )   = dn-[k+l)(~k+~) 
C d d m  dl t h e '  -ties 
-I-l ( ~ ~ + ~ ~ * ~ )  
we get &-d(va)  =d , j ( v 3 )   + I (C ) , where qC) is 
By dcbg  all these w d i t i w  b+, 
* I & d e b e q d e C ~ t i s o u t p u t b y t b & m ~ h .   W e & h t h a t I ( C )  =0. 
Suppose Wc la im ic lnottru~ .ThawemusthaveZ(C) rO ( R em em b e r : t b e r t ~ i s n o  
...v f + l v j * i - ~ t ~ a . . . v o   b a *  
negative hgkhqdeinthegraph).  T h e m h ,  %v-I 
t b a t w l m ~ n ~ a a d i t s I @ i s & ( v ) - I ( C )  <& ( u > .   ThbiaacoW&etion 
with tb assumption & ( v )   = & ( v ] .  
the  above  algorithm hds  t h e  m i n k n m  messn  length  cycle  m r e d p ,   It  L 
Th+ret 
dm obpigm from  the decription of  the algorithm that  the  rnnntng time  of the  &me 
d g d t h m  b Q(n=). 

3,  S u p p a e e  we have n objer:bthat we waaf to atore m a dab s h c t n x e ,   After storiag 
the objects  in tbe data  dru&ure,  we  w b d d  like t o   perform m find  o p d i o m  
on $be data e&u&uxe.  A sam e   that  the  f' th   object is  ameaad   ki 4  1 Eim~ra. 
T h d o ~ ,EL,& =m.  We want to eva2-e 
thep&mmamce  oftha data s t ~ p c e  
by mmputbg the tow m d n g t  k of these  rn &ld queries (no other operation, 
~uchas delete or insert, L performed on the data atrnetms). 
(a) Show  that  if  we  H o p e   th e  object&in a splay tree,  then no matter whaf  the 
%id  configuration of  the isph tree is,  a d  no matter h which  order  we 
the   objckbrs,  the t o t a l  m m d q g  t
i
i
 of &he m amee  opera ti^ is at 

m08t 

hmction w i  = h. With 
We me the  thwrem that  is  proved in the  d m  with the 
this might fuxwction,  the theorem wys that the m o r t k d  cost ofof-
the i'thobject 
is at most 1+T(PI)- r l i ) ,where r ( v ) is the d
t ofthe mX,a d  r(i) is the d 
t of the 
no&  of the tree thaf contains the i'th object. We  lmaw that  the tatat weight  of the 
is ELl hi  = .a.  T h d o m ,  ~ ( v )= lopx .   Also,  r(i)  = l o g [ s ( i ) )2 log(ki).  Thmehm, 
tb a r n dm d  mst of m m h g the Ptb, object f at YD&  1+ log(m/&).  Thus, the W d  
~~a t  d m awmes  is at most 'm+ EELki llog(na/b).By the dehitim ofthe 
amortiztdcost,tbisIs e g r a lm& e t oW r P n n i n g t im e s r fm ~ e a , p l n sthetotal d
t 
in the tree after the awessea,  minm  the to ta l  d
t in the tree that we  &art with.  Since 
in  any  tree th e  credit  of  the  node  that  contains  the  i'th object  ik a t  .thgh ad at
z,log& and at mmt 
1-at
most 
total
Iogrn,
time
inWt
any
x&
the
the
is
tree
BZ Iogm.  Therefore, t h e  tota l running time d m 
is at most 

(h) 	

that  if w e  store the objects t t ~a static binary  sea rch  tree  (i.e., a binary 
search tree that does not change by a 3mi operation), then no matter in which 
order the  objects axe dored in the BST, aad no matter  in which  order  they 
are accesrd ,   the  total d
g time of the rn access operations i at least 

W e  use induction on n bo prow that the to ta l  c& 
of  na operations on my BST is at lea& 
# (m+ zsMhi  Iog(g)).The  induction baais is trivial,  We prove the induction  step  as 
f o k  Cansideran arbitrary BST and let r be the object that is in the root of  the h e ,  
a d  L  asd A be the sets  of objects h t  ~b l .ein th e   I&  md fight  subbees, resp.ectfvely. 
denote C,,,& and  CERki, 
and  r n ~  
EIy  the  d e b i t i o n  of
Also,  let  a
m i * .  
i
~
~ 
BST, the  left  a d  right  sabtrm we MTs.  T h em b e ,  by the ladwCt;on h y p o W i  (md 
treeis me  plus
d d & g t b e f &  
elawntin L i n ~ w  
that  t h e ~ ~ u f ~ h l g ~  
the  m&  of  mmsabg  it in .the I&  m b ) ,  the tad  cost  o f t h e  n m ~operations an the 
elements O f L is at least 

and shnh ly  for the right subtree.  A b ,the cost ofkr accessesto th e  object et  9. p d s d y  
t .T-,the 
t d c m t o f r n ~ i s a t l e a s t  

Th@fm c t h f (x)  :=xlog(x) is cewWc ,   t b r e k ~ ,#(P(*) + f  (%l)  4- f (4)2 f ( 9 1  
above
0,3y,as,
Thus,
every 
1-axi s
the
cost

This compiel;es the proof d the Muation step. 

