MIT OpenCourseWare
http://ocw.mit.edu 

6.854J / 18.415J Advanced Algorithms 
Fall 2008
��

For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms. 

18.415/6.854  Advanced Algorithms 
Problem  Set  Solution 3 

1 .   Consider  the  following  optimization problem: 
G i v en  c  E  Rn , c 2 0,  n  even ,  f i n d  
min{cTx  :  xi,,x i   2 1  VS  c ( 1 , .  . . , n ) ,   IS1  = 2, 
n

In  class, it was  shown that  this can be  solved by  the ellipsoid method 
because  there  is  an  efficient  separation  algorithm.  However,  this 
problem  has  a more  straightforward  solution. 
Develop  an  algorithm  which  finds  the  optimum  in  O ( nlog n )  time. 
Prove  its  correctness. 
Let 

We would  like t o  describe t h e  s t r u c t u r e  of P, which  is a n  unbounded  polyhedron. 
We  prove  t h a t   x  E  P exac t ly  when  x  can  be  w r i t ten   as 

where  XA   deno tes   t h e   charac ter is t ic  vector  of  A ,   X A   2 0 ,  a n d  add i t iona l ly  

F i r s t ,   suppose  x  satisfies  th i s   a n d   consider  S of  size  n / 2 .   Any  se t   A  of  size 
IAl  > n / 2  in tersec ts  S in   a t   least  IAl  - n / 2   elements,  therefore 

Conversely,  le t   x  E  P .  Let  7-r  be   a  pe rmu ta t ion   such  t h a t  

G ( 1 )  I G ( 2 )   I  . I X,(n). 

PSS3-1 

Set 

a n d  

for  k  = 1 . .. n .   T h e n   obviously  X I ,   > 0  a n d  

Finally, we  verify  cond i t ion   ( * ) :  

Now  we  can   op t im ize   over  P much  more  easily.  F i r s t ,   observe  t h a t   for  any 
op t ima l  solution 

we  can   assume  X A   = 0  for  IAI  5 n / 2   a n d  

otherwise  we  decrease  t h e   coefficients  un t i l   t h e   equality  holds.  Th i s   won't  in-
crease  t h e  objective  func t ion  C c i x i ,  since c > 0.  Therefore a n  op t ima l  so lu t ion  
always  exists  in   t h e  convex  hull  of  { p A  : IAl  > n /2}   where 

We  could  eva lua te   t h e   objective  func t ion   a t  a l l   these   po in ts   b u t   the re   a re   s t i l l  
t o o   many   of  t h em .   However,  we  can   notice  t h a t   for  a  given  k  =  IAl,  t h e  
only  cand ida te   for  a n   op t imum  p a   is  t h e   se t   A  which  con ta ins   t h e   k  smallest 
componen ts  of  c.  Therefore  t h e   a lgor i thm   is  t h e   following: 

Sor t   t h e   componen ts   of  c  a n d   le t   Ak  deno te   t h e   indices  of  t h e   k  smallest 
componen ts  of  c ,  for  each  k  > n / 2 .   T h i s  takes   O ( n  l o g n )   t ime .  

For each k  > n / 2 ,  calculate sk  = C iEA kck.  Th i s  can be  done in O ( n )t ime ,  
because  t h e   sets  A k   form  a  chain  and   we  can  use  sk  t o   calculate  sk+l  in 
cons tan t   t ime .  
Find  t h e   smallest  value  of 

for  k  > n / 2 .  Re turn   th i s  a s  t h e  op t imum .  

T h e  algorithm runs in  0 ( nlog n ) t ime  and  i t s  correctness follows from  the  anal-
ysis  above. 

2 .   Fill a gap  in the  analysis of  the  interior  point  algorithm: 
Suppose  that  ( x ,y ,  s )  is  a feasible vector, i.e.  x  > 0 ,  s  > 0 ,  

A x  = b ,  

A T y + s = c  
and we  perform  one  Newton step  by  solving for  A x ,  A y ,  A s :  

V 
X j S j + A x j ~ j+ x j A s j  =/l 
where  p  > 0.  The  proximity  function is  defined as 

Prove  that  if 

then  ( x  + A x ,  y + A y ,  s + A s )   is  a  feasible  vector  for  A x   = b ,  x  > 0  and 
A T y + s = c , s > O .  
T h e  equalities  are   satisfied  directly by  t h e   assumptions: 

We  have  t o  verify  t h e  positivity  conditions.  F irs t   we  prove  t h a t   a t   least  one of 
x j   + A x j ,  sj  + A s j  is  positive.  We  have  x j   > 0 , sj  > 0 and  

therefore  e i ther   xj + Axj or  sj+ Asjmus t   be   positive. 
Second, we  use  t h e  proximity  condition: 

In   pa r t icu la r ,  for  each  j 

which  means   t h a t   xj + Axj a n d   sj + Asj have  t h e   same   sign.  We  know  they  
can ' t  be   negative  so  they   mus t   be   positive. 

Given  a  directed  g raph  G = (V, E) and   two  vertices  s and   t ,  we  would 
like t o  find t h e  maximum number of  edge-disjoint  pa ths  between s and  
t  (two pa ths   a r e   edge-disjoint  if  they   don't  share   an   edge).  Denote 
t h e  number  of  vertices  by  n and   t h e  number  of  edges  by  m. 

( a )   	 Argue t h a t  th is  problem can be  solved as a maximum  flow  prob- 
lem with   unit   capacities.  Explain. 
Let  F b e   a  union  of  k  edge-disjoint  p a t h s   from  s t o  t .  We  define  a  flow  of 
value  k  in   a  n a t u r a l  way  - a n   edge  ge ts  a  flow  of  value  1 if  i t   is contained 
in   F a n d   a n d   0  otherwise.  Since  each  p a t h   en ters   a n d   ex i ts   any   vertex 
(except  s a n d   t )   t h e   same  number   of  t imes ,   flow  conservation  holds.  T h e  
value of  t h e  flow  is t h e  number  of  edges in F leaving s (or en ter ing  t )  which 
is  k .  
Conversely,  let  f b e   t h e  max imum   flow  w i th   un i t   capacities.  As  we  shall 
prove,  the re  is always a  0 - 1max imum  flow, therefore we  can  assume t h a t  
f,  is e i ther   0 or   1 for  each  edge.  Let 

a n d   k  be  t h e   value  of  t h e   flow.  T h e n   we  can   decompose  F in to   k  edge-
disjoint  p a t h s   in   t h e   following  way:  We  s t a r t   from  s a n d   follow  a  p a t h  
of  edges  in   F un t i l   we  h i t   t .   (Th i s   is  possible  due   t o   flow  conservation.) 
When   we  have  found  such  a  p a t h ,  we  remove  i t   from  F a n d   consider  t h e  
rema in ing  flow  of  value k - 1. By  induc t ion ,  we  find  exactly  k  such  pa th s .  
( b )   	 Consider now  t h e  maximum flow problem on directed  graphs  G = 
(V, E) with   unit   capacity  edges  (although  some  of  t h e   questions 
below  would  also apply  t o  t h e  more  general  case). 
Given  a  feasible  flow  f ,  we  can  construct   t h e   r e s i d u a l   n e t w o r k  
G f   = (V ,E f )  where 
Ef = { ( i , j) : ( ( i ,j) E E &  fq < u i j)   or  ( ( j ,i )  E  E &  fji> 0 ) ) .  

The   residual  capacity of  a n  edge  ( i ,j) E Ef  is  equal t o  u i j  - f i j  or 
t o   f j i   depending  on  t h e   case  above.  Since  we  a re   dealing  with  
t h e   unit   capacity  case,  all  t h e   uij's a r e   1 and   therefore  for  0 - 1 
flows  f  (i.e.  flows  for  which  t h e   value  on  any  edge  is  0  or   I), all 
residual  capacities will  be   1. 
We define t h e  distance of  a vertex  l f ( v )  as t h e  length  of  t h e  short-  
est  p a t h  from s t o  v  in  Ef  (cafor vertices which a r e  not  reachable 
from  s  in  E f ) .   Fu r the r ,   define  t h e   levelled  residual  network  as 
Elf = { ( i , j) E Ef  : l f ( j )  = lf ( i )  + 1) 
and   a  saturating  flow  g  in  Ei  as  a  flow  in  E;  (with   capacities 
being  t h e  residual capacities)  such t h a t   every  directed   s - t  p a t h  
in  Elf  has  a t   least  one  s a tu r a t ed   edge  (i.e.  an   edge  whose  flow 
equals  t h e   residual  capacity). 
For  a  unit   capacity g raph  and   a  given  0 - 1 flow  f , show how we 
can  find  t h e   levelled  residual  network  and   a  sa tu ra t ing   flow  in  
O (m )  time .  
F i r s t ,  we  can find Ef  in O (m )  t ime  simply by  tes t ing  each edge and  adding 
t h e  edge or  i t s  reverse t o  E f , depending  on  t h e  current  flow.  Then  we  can 
label t h e  vertices by  If   ( v )  by  a breadth-first  search from  s .   This takes t ime  
O ( m ) ,  also.  At  t h e   same  t ime   we  find  d ( f )   as   the   length  of  t h e   shortest 
p a t h   from  s t o  t .  
Then ,   we  create  E$ by  keeping  only  t h e   edges  between  successive  levels. 
Thus   all  pa ths   between  s  and   t  in  Ei  have  length  d (  f ) .   Now  we  produce 
flow g by  finding as many edge-disjoint  s- t  pa ths  as  possible.  We s t a r t  with 
E' = Ei  and   we  perform  a  depth-first  search  from  s .   If  we  get  stuck, we 
backtrack  and   remove  edges on  t h e  dead-end  branches  since these  are  not 
in  any  s-t  pa th   anyway.  When  we  find  an   s- t   p a t h ,   we  set  gij  = 1 along 
t h a t   p a t h ,   and   remove  i t   from  E' .   We  continue  searching  for  pa th s   until 
E' is  empty.  We  spend  a  constant  t ime   on  each  edge before  i t ' s  removed, 
which  is  O (m )  t ime   to ta l .   When  we  are  done,  there  is  no  s-t p a t h   in  E$ 
without  a  sa tu ra ted  edge,  otherwise  i t  would  still be  in  E ' .  
(c)  Prove  t h a t  if  t h e  levelled residual network  has  no  p a th   from  s t o  
t  (If ( t )= co), th en   t h e  flow  f  is maximum. 
Suppose  there   is  a  flow  f *  of  greater  value.  Then   f * - f  (where  t h e   dif- 
ference is produced  by  either decreasing  flow  along an  edge and   increasing 
flow  in  t h e   opposite  direction)  is  a  feasible  flow  in  t h e   residual  network 
which  has  a  positive  value.  Th is   is  easy  t o   see  because  if  f;  > f i j  then  
(i,j) appears  in  Ef  and   f;  - f,  5 u i j  - fo  which  is  t h e   capacity  of  th i s  
edge  in  Ef . If  f;  < fq then   fu > 0  and   therefore  t h e  opposite  edge  (j,i)  
appears  in  E f .  Also,  fi, - f;  5 f i j  which  is  the   capacity  of  (j,i )  in  E f .  

When  a  non-zero  flow  exists  in  Ef , there   exists  a  p a t h   from  s t o   t  using 
only  edges  in  E f .  T h e  shortest  of  these  pa th s  would  appear   in  Ef,as well, 
which  is  a  contradiction. 
( d )   For  a  flow  f ,  define 

d ( f   = If  (t)  
(the  distance  from  s t o  t  in  the  residual  network).  Prove  that  if 
g  is  a  saturating flow  for  f  then 

where  f + g   denotes the flow  obtained from f  by  either increasing 
the  flow  f,  by  gij  or  decreasing the  flow  f j i  by  gij  for  every edge 
(i ,j) E G f .  
Consider  Ef  and   the   labeling of  vertices  if ( v ) .   For  every  edge  ( i ,  j) of  Ef 
we  have  t h a t   if (j)5 If   (i)+ 1. Since g  is  a  sa tu ra t ing  flow  in  ~ f ,
,t h e  only 
edges  ( u ,  v)  which  are   in   Ef+, and   no t   in   Ef  are   such  t h a t   ( v ,  u )   E  E;, 
which  implies t h a t   lf (v)  = lf ( u )  - I.  In   summary, every edge  ( i ,  j )  of  Ef+, 
satisfies  if (j) 5  If   (i) + 1 a n d ,   furthermore,  t h e   edges  which  a re   not  in 
Ef  actually  satisfy  the   inequality  s tr ic t ly   1  ( j )< l f ( i )  + 1.  Consider  now 
any  p a t h   P in  Ef+,  Adding up   l f ( j )  5 l f ( i )  + 1 over  the   edges  of  P, we 
get  t h a t   d ( f )  5  IPI.  Moreover,  we  can  have  d ( f )  = IPI  only  if  all  edges 
of  P also  belong  t o   E f ,  which  is  impossible  since  g  is  a  sa tu ra t ing   flow. 
Hence,  d ( f )   < lPl  and   th i s   is  t r u e   for  any  p a t h  P of  Ef+, implying  t h a t  
d ( f )  < d ( f  + g ) .  
(e)  Prove  that  if  f  is  a  feasible  0 - 1  flow with  distance  d = d ( f )  and 
f *  is  an  optimum flow, then 

and  also 

Suppose  f  has   distance  d  and   f *   is  an   op t ima l   flow.  As  noted  before, 
g = f *  - f  is  a  feasible  flow  in   the   residual  network  E f .  
Consider  s - t  cu t s  Cl, C 2 , .. . Cd defined  by 
ck = { ( i , j )  E  Ef  : l f ( i )  5 k , l f ( j )  > k) .  

There   are  a t  most  m  edges  in  t o t a l   and   these  cu ts   a re  disjoint, therefore 

Since t h e  value  of  g  cannot  be  greater  t h a n   any  s-t  cu t   in  Ef, 
m
va lue(f*)  - va lue ( f )  = value(g) 5 -.
d 
Similarly, define  d + 1 se ts  of  vertices  Vo,V17V2, . . . , Vd: 
= {i E  V :  l f ( i )= k ) .  

By  double  counting, 

Suppose  t h a t   IVk-l  1  = a ,   IV,I  5 9 - a .   Note  t h a t   the   edges  of  Ck belong 
t o  Vk-l  x  Vk.  Therefore 

( f )   Design  a  maximum  flow  algorithm  (for  unit  capacities)  which 
proceeds  by  finding  a  saturating  flow  repeatedly.  Try  t o   opti-
mize its running time.  Using the observations above, you  should 
achieve  a running time  bounded  by  0 (m i n (m n 2 l 3 ,m3 I2 ) ) .  
The   algorithm  s t a r t s  with  a  zero  flow  f .   Then  we  repea t   t h e   following: 
F ind   t h e   levelled  residual  network  ~
l
f
. 
F ind   a  sa tu ra t ing  flow  g. 
a  Add  g  t o  f ,  reset  t h e   residual  network  and   continue. 
Each  i tera t ion   takes  O (m )   time.  Since  d ( f )   increases  every  t ime   a n d   i t  
cannot  reach  more  t h a n   n  ( the   maximum  possible  distance  in  G ) ,   t h e  
runn ing  t ime  is clearly bounded  by  O (m n ) .  However, we  can  improve  this. 
Suppose  we  i te ra te   only  d  times  and   our  flow  af ter   d  i tera t ions   is  f .   We 
know  d ( f )  2 d ,  and  i f f *  is  an   op t ima l  flow, 

Because  the   flow  increases  by  a t   least  1 in  each  i tera t ion ,   t h e   remaining 
number  of  i tera t ions   is  bounded  by  m in{y ,   $). We  choose  d  in   order  t o  
optimize our  bound .   I t   t u r n s  ou t   t h a t   t h e  best  choice is  dl  = m1I2 for  t h e  
bound  based  on m  and  d2 = n2I3 for the  bound  based  on n .   Thu s  t h e  t o t a l  
runn ing  t ime  is 0(min{m3I2,mn2 I3 ) ) .  
(g)  Can  we  now  justify  that ,   for  0 - 1  capacities,  there  is  always  an 
optimum flow  that  takes values  0 or  1 on every edge? 
Ou r  algorithm finds a 0 - 1flow and  we  have a proof of  optimality, therefore 
there   is  always  a  0 - 1 op t ima l   flow.  Th i s  justifies  our  reasoning  in  pa r t  
( a ) .  

