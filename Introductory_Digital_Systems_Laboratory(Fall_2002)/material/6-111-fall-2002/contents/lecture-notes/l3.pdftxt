6.111 Lecture # 3  


X1 
X2 

Z 

Simplified Schematic 
of 74LS00 (there are 
4 of these in an '00) 

Note multiple emitter 
inputs 

Totem pole output 

NAND gate is the basic building block 

Current Convention


74LS00 Current (mA) 

Output capability LOW 
Output Capability HIGH 
Input Required LOW 
Input Required HIGH  IIH

IOL 
IOH 
IIL 

8 mA 
-400  µ A 
-0.4  mA 
 20  µ A 

These are typical numbers but read data sheet if in doubt: 
There are many exceptions 

TTL Voltage Ranges 

These are important! Valid input and output values 
are in the ranges shown. 

Note that the 
TRUE switching 
threshold will be 
different for 
different parts or 
instruments -- in 
doubt, best us a 
'scope 

Note that either 'state'

(X=0, Y=1 or 

X=1, Y=0)

is valid 


Try this in the lab... 


'State' implies memory -- here is how we save information 


You can build one of these from NAND gates, but there is a packaged, MSI  

version. 

Question: what happens if you build one from NOR gates?


'Latch' is an important notion: its input is controlled by a 'gate' 
When the 'gate' goes from high to low, the state of the device holds 
Question: what happens if the input and gate change state at nearly 
the same time? 

Latch type logic has an issue with propagation of signals 
How many stages of logic will be affected by a signal 
change during one clock (G high) cycle? 

Multi-phase clocks have been used for this (Half the G's high 
one instance, the other half the next), but there is a better 
solution... 

Edge triggered logic 
differs from latches in 
that it is the transition 
of the 'clock' input that 
causes the flip flop to 
hold state 

Actual implementation 
is not quite like what is 
shown here. 

It takes a little effort to 
reason through what 
this part does. See that 
the 'preset' and 'clear' 
are asynchronous, 
which means they take 
effect right away, 
without waiting for the 
clock edge. 

Setup Time: Input must be stable before the clock edge 

Hold  Time: Input must stay stable after the clock edge 

Clock to Q: maximum time for output to be stable after clock edge

CL or PR to Q: maximum time for output to be stable after 

asynchronous input 
Max Frequency = 1/(Clock HIGH + Clock LOW) 

Flip flops are simple finite state machines. Here is how we describe such 
machines 

Transitions (arcs) 

State 

The SR FF is an edge triggered version of the SR latch. It has an 
undefined state problem that is solved in the JK FF 

Note this JK has a negative edge triggered clock! 

Multiplexer's (MUX'es) are an important building block 
This one selects one of four inputs based on an 'address' 

The 74LS151 part has 8 inputs and so 3 bits of address 

It also has a 'strobe' input which is functionally a chip select 

The output is presented both direct and inverted 

Counting is a very important function in the digital world, and it is done 
in a variety of ways 

Here  is a  'ripple' counter using negative edge triggered  T flip flops 

Count Sequence: 

The LSB is on the left in this diagram. It always 
toggles. 

The transition of 1 -> 0 of each 'bit' triggers a 
toggle of the next most significant bit 

0 0 0 0 
0 0 0 1 
0 0 1 0 
0 0 1 1 
0 1 0 0 
0 1 0 1 
0 1 1 0 
0 1 1 1 
1 0 0 0 
1 0 0 1 
1 0 1 0 
1 0 1 1 
1 1 0 0 

Here is why it is called a 'ripple' counter: 

The effect of each input transition must affect all bits, and it does this 
by rippling through from LSB to MSB 

An odd effect is that the transient count is always less than the true 
count. 

Can COUNT fast, but maybe can't be READ fast! 

'Synchronous' counters use more logic to reduce the time to stable outputs. 

Here  is a  simplified version of the 4 bit 74LS163 counter 

Note that, while all bits of the synchrous counter are set very close to the 
same time, they may not be set at exactly the same time. 

This means that there is a rapidly changing transient state of the counter. 

If it passes through all one's it will cause a 'glitch' on the ripple carry out. 

You are asked to look for this in Lab 1, but you may not see it! 

The '163 will 'count' ONLY if P and T are both high 

Note that RCO is the AND of all four bits and T. 

So if this is input to the T input of the next higher nibble, it 
indicates that all bits below are set, so the next higher nibble 
should count. 

P is 'count enable', and P and T should be tied together ONLY 
for the least significant 4  bits of a  counter. 

With a little ingenuity, you can achieve all kinds of count sequences. These 
are both divide by twelve circuits. 

