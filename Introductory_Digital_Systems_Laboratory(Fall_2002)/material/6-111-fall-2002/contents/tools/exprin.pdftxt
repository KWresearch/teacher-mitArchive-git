EXPRIN(1) 

NNAAMME
E


EXPRIN(1)


exprin,  exprout, expression, expressdat - create and con­ 

vert data for use in PROM lookup tables


SSYYNNOOPPSSIIS
S

xxxxxxx..exp
       expri
exprin >x 
exp

n >

xxxxxxx..e
       expro
xxxxxx.dat
exp >

exprout < 
ut <x 
xp >x  x.dat

       expreessi
xxxxxx
expr ssion x  x

on

       expreessd
xxxxxx
expr ssdat x  x

at


DDEESSCCRRIIPPTTIIOON
N

e
e
xprout
xpri
n

The two  programs  exprin  and  exprout 
together  form  a

e_ r_e_
"friendly"  system for generating PROM data for an _x_  -

p_ s_

_i_n of a single input variable. 

s_o_


Applications might include:


1) A table lookup for trigonometric values.  This would be

useful  in  games  which  need  to  transfer from polar to

Cartesian coordinates.


2) A table lookup for logarithmic values.  This  would  be

useful for logarithmic multiplication.


To  create  xxxx.ntl which is ready to be sent to the PROM

xpreessi
on

programmer use the shell script e 
expr ssion :


expression xxxx


xpreessd
at

expr ssdat :

To create xxxx.dat use the shell script e 

expressdat xxxx


This is helpful  when  you  want  to  concatenate  several

e_ r_e_s_ o_
Use

p_  s_  s into a single PROM. 
_x_ 
i_n_


cat a.dat b.dat > final.dat


and  then  edit  final.dat  to  insert  the  appropriate #

SET_ADDRESS command.


e_ r_e_s_
e_ r_e_s_
p_  s_a_.

p_  s_o_ 
On line help is available for _x_ 
i_n and _x_ 
d_t_


e_ r_e_s_
i_n consists of the three programs

p_  s_o_

The shell script _x_ 
xpro
       expri
t2
da  ntl piped together.  The script

ut 
n , e 
exprin  exprout , and dat2ntl

e
E
t2
e_ r_e_s_
xprout
xpri
da  ntl program.  Exprin

p_  s_a_ 
_x_ 
d_t omits the dat2ntl 
n and  exprout

t2
are  described  below; dat2ntl

da  ntl is described in another man

page.


xpri
n , is simply an interactive guide

The first program, e 
exprin

xpro
for creating a file to be used by e 
exprout shown below.  It

ut

may be created and edited using an editor instead of using


MIT EECS Dept. 


1


EXPRIN(1) 

       expri
exprin.
n.


NUMBER_OF_STEPS = 314;

START_ADDRESS = 0;

INPUT_INITIAL_VALUE = 0;

STEP_SIZE = .01;

128 + 127 * SIN(INPUT);


EXPRIN(1)


xprout
xpri
n and used by e

exprout

exprin 
Example file created by e 

e_ r_e_s_
i_n must obey the following rules.

p_  s_o_

The _x_ 

An expression can be of arbitrary size.

It must be in infix form.


It may contain the following binary operators:

+ - * /

and the following unitary functions:

sin, cos, tan, asin, acos, atan, sinh,

cosh, tanh, log, exp, abs, and sqrt. 


Parentheses can be used in the usual manner. 

It may contain any real number and the single variable:

INPUT.


The variable INPUT takes NUMBER_OF_STEPS steps starting at

the initial value INPUT_INITIAL_VALUE.  Each  step  incre­

ments  INPUT  by  the value of STEP_SIZE.  NUMBER_OF_STEPS

outputs will be created to be sent to the PROM  programmer

starting at the address START_ADDRESS.


The output will be rounded to the nearest integer.


The parser is not case sensitive.  All numbers are interpreted as

decimal.  Spaces are ignored.


ut

exprout is in the standard form used by the

The  output of e 
xpro
program dat2n

t2 tl
da  ntl


FFIILLEES
S


SSE
ALLSSO
EE
E A  O

dat2ntl(.)


BBUUGGS
S


MIT EECS Dept. 


2


