Massachusetts Institute of Technology
Department of Electrical Engineering and Computer Science

6.111 - Introductory Digital Systems Laboratory

Problem Set 4 Solutions

Problem 1:
1)

Issued: Lecture 12 Day

x

0

0

0

0

1

1

1

1

y

0

0

1

1

0

0

1

1

z

0

1

0

1

0

1

0

1

s

0

1

1

0

1

0

0

1

c

0

0

0

1

0

1

1

1

inputs: xy         output: S

00/0

10/1

11/0

00/1

01/0

10/0

11/1

2)

01/1

3)
Mealy.  S depends on the state and the inputs.

4)
After a clock edge, it takes 2 us for the output of the ﬂip ﬂop to change. Then 4 us later, the output
of the adder changes. This value needs to be held for 2 us to satisfy the setup time of the ﬂip ﬂop.
Since the contamination delay of each part is at least 2 us, we could have another edge now and
the setup time would be satisﬁed.  So the minimum clock period is 6 us.

Problem 2:

1)
Below is a truth table that corresponds to the FSM.  The state labels can be mapped to a three bit
state variable.  All entries not entered below are illegal.

state

idle

idle

idle

member enters

member enters

member enters

member enters

member enters

wait for guest

wait for guest

wait for guest

wait for guest

wait for guest

guest follows

guest follows

guest enters

guest enters

wait token 2

wait token 2

XXX

member

guest

exp

token

next state

open

0

0

1

0

0

0

0

1

0

0

0

0

1

X

X

X

X

X

X

1

0

1

0

0

0

1

1

0

0

0

1

1

0

X

X

X

X

X

X

1

X

X

X

0

1

0

1

X

0

1

0

1

X

X

X

X

X

X

X

X

X

X

X

X

X

X

X

X

X

X

X

X

X

0

1

0

1

0

1

X

idle

guest enters

member enters

wait for guest

idle

guest follows

guest enters

member enters

wait for guest

idle

guest follows

guest enters

member enters

guest follows

idle

guest enters

wait token 2

wait token 2

idle

illegal

0

0

1

0

0

0

0

1

0

0

0

0

1

0

1

0

0

0

1

0

2)
Not graded.

3)
Showing all dependencies is messy.  See truth table for clariﬁcations.

reset

idle

guest

token | open

/token

token

guest enters

wait token 2

member | open

exp

guest exp

exp

member | open

member
enters

/exp /guest

wait for
guest

/token

token | open

guest follows

/exp member | open

/exp guest

/token

4)
Mealy.  Open depends on inputs and state.

Problem 3:

This code will implement the 3-bit shifter:

library ieee;
use ieee.std_logic_1164.all;

entity shifter is
port (
clk : in std_logic; -- clock signal
i : in std_logic_vector(3 downto 0);
-- input bits
s : in std_logic_vector(1 downto 0);
-- select bits
o : out std_logic_vector(3 downto 0); -- output bits
end shifter;

architecture structure of shifter is
signal internal : std_logic_vector(3 downto 0);

-- stores output values
-- internally for use by circuit

begin -- structure
stuff: process (clk)
begin
if rising_edge(clk) then
if s=”00” then
internal <= internal;
elsif s=”01” then
internal(0) <= i(3);
internal(1) <= i(0);
internal(2) <= i(1);
internal(3) <= i(2);
elsif s=”10” then
internal(0) <= i(1);
internal(1) <= i(2);
internal(2) <= i(3);
internal(3) <= i(0);
elsif s=”11” then
internal <= i;
else

internal <= i;
end if;
end if;
end process stuff;

-- if select is 00, hold

-- if select is 01, shift left

-- if select is 10, shift right

-- if select is 11, load input bits

-- this should not happen, but if it does,
-- we will do a paralell load

o<= internal;

-- now we send the internal count to the output

end structure;

