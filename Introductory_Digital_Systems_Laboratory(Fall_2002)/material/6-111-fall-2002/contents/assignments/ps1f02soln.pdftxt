Massachusetts Institute of Technology 
Department of Electrical Engineering and Computer Science 

6.111 - Introductory Digital Systems Laboratory 

Problem Set 1 Solutions 

Issued: Lecture 4 Day 

Problem 1: 
Not Graded. 

Problem 2: 

1. 

i) truth table 

f  =  ( a + ( b + c ) ) ⋅ ( c + ( a + +  d ) ⋅ (  + +  ) ) 
b
d
b
a

ii) Karnaugh map 

ab 
00 
cd 
1 

00 

01 

11 

10 

1 

1 

0 

01 
1 

1 

0 

0 

11
1 

1 

0 

1 

10
1 

1 

1 

1 

a

0

0

0

0

0

0

0

0

1

1

1

1

1

1

1

1

b

0

0

0

0

1

1

1

1

0

0

0

0

1

1

1

1

 c

0

0

1

1

0

0

1

1

0

0

1

1

0

0

1

1

d

0

1

0

1

0

1

0

1

0

1

0

1

0

1

0

1

 f 

1

1

0

1

1

1

0

0

1

1

1

1

1

1

1

0

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

iii) MPS 

iv) MSP 

ab 
00 
cd 
1 

00 

01 

11 

10 

1 

1 

0 

01 
1 

1 

0 

0 

11
1 

1 

0 

1 

10
1 

1 

1 

1 

ab 
00 
cd 
1 

00 

01 

11 

10 

1 

1 

0 

01 
1 

1 

0 

0 

11
1 

1 

0 

1 

10
1 

1 

1 

1 

f  =  c + b ⋅ d  + a d 
⋅ 

f  =  ( b + +  d ) ⋅ (  + +  ) 
d
c
a
c

2. 

f  =  ( c + a ⋅ b ) ⋅ ( c + ( a + d ) ⋅ ( b

+

d ) ) ⋅ ( c + ( a + b ) ⋅ ( b

+

d ) ) 

i) truth table 

ii) Karnaugh map 

ab 
00 
cd 
1 

00 

01 

11 

10 

0 

0 

0 

01 
0 

0 

0 

0 

11
1 

1 

1 

1 

10
1 

0 

0 

0 

a

0

0

0

0

0

0

0

0

1

1

1

1

1

1

1

1

b

0

0

0

0

1

1

1

1

0

0

0

0

1

1

1

1

 c

0

0

1

1

0

0

1

1

0

0

1

1

0

0

1

1

d

0

1

0

1

0

1

0

1

0

1

0

1

0

1

0

1

 f 

1

0

0

0

0

0

0

0

1

0

0

0

1

1

1

1

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

iii) MSP 

iv) MPS 

ab 
00 
cd 
1 

00 

01 

11 

10 

0 

0 

0 

01 
0 

0 

0 

0 

11
1 

1 

1 

1 

10
1 

0 

0 

0 

ab 
00 
cd 
1 

00 

01 

11 

10 

0 

0 

0 

01 
0 

0 

0 

0 

11
1 

1 

1 

1 

10
1 

0 

0 

0 

f  =  a ⋅ b  + b c d 
 

f  =  ( a + b ) ⋅ ( b

+

d ) ⋅ ( b

c )

+ 

⋅
⋅
3. 

i) truth table 

w  x

0

0

0

0

0

0

0

0

1

1

1

1

1

1

1

1

0

0

0

0

1

1

1

1

0

0

0

0

1

1

1

1

f  =  w ⋅  y + w x 

 y + w x 

 z

ii) Karnaugh map 

wx 
00 
yz 
0 

00 

01 

11 

10 

0 

1 

1 

01 
1 

0 

1 

1 

11
0 

0 

0 

0 

10
0 

0 

1 

1 

y

0

0

1

1

0

0

1

1

0

0

1

1

0

0

1

1

z

0

1

0

1

0

1

0

1

0

1

0

1

0

1

0

1

 f 

0

0

1

1

1

0

1

1

0

0

1

1

0

0

0

0

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

iii) MSP 

iv) MPS 

wx 
00 
yz 
0 

00 

01 

11 

10 

0 

1 

1 

01 
1 

0 

1 

1 

11
0 

0 

0 

0 

10
0 

0 

1 

1 

wx 
00 
yz 
0 

00 

01 

11 

10 

0 

1 

1 

01 
1 

0 

1 

1 

11
0 

0 

0 

0 

10
0 

0 

1 

1 

f  =  w ⋅

x 

 z + x y + w y 
⋅ 

f  =  ( w + x ) ⋅ ( y

+

z ) ⋅ ( x

y )

+ 

⋅
⋅
⋅
⋅
⋅
⋅
Problem 3: 

1. MSP 

a) 

ab 
00 
cd 
0 

00 

01 

11 

10 

0 

0 

0 

01 
0 

0 

0 

0 

11
0 

0 

0 

0 

10
1 

X 

1 

1 

f  =  a ⋅ b

ab 
00 
cd 
0 

00 

01 

11 

10 

0 

0 

0 

01 
0 

0 

0 

0 

11
0 

0 

0 

0 

10
1 

X 

1 

1 

f  =  a ⋅ b

2. MPS 

a) 

b) 

b) 

ab 
00 
cd 
0 

00 

01 

11 

10 

0 

0 

0 

01 
0 

0 

0 

0 

11
X 

0 

0 

X 

10
1 

0 

1 

1 

f  =  a ⋅ d  + 
 
a b c

ab 
00 
cd 
0 

00 

01 

11 

10 

0 

0 

0 

01 
0 

0 

0 

0 

11
X 

0 

0 

X 

10
1 

0 

1 

1 

f  =  a ⋅

b

( c + d ) 

3. The solutions are unique given that we want the minimal equations. 

4. The MSP and MPS in part a are equal.  The MSP and MPS in part b are not equal as the don’t 
cares in part 1 are assumed to be 1 and the don’t cares in part 2 are assumed to be 0. 

⋅
⋅
⋅
Problem 4: 

1. 

2. 

3. 

( a

+

c ) ⋅ ( b

c )  =  ( a

+ 

+

c ) + ( b

c )  = + +
a
b

+ 

c

  =  + +  
a b c
c
b
a

( b

+

c ) ⋅ ( a

c ) ⋅ ( ab
+ 

+

)  =  ( b c ) ⋅ ( a c ) ⋅ ( a b )  =  0 

Problem 5: 

library ieee; 
use ieee.std_logic_1164.all; 

entity pset_1_problem_5 is 
port ( 
a, b, c, d : in  std_logic; 
p1, p2 
: out std_logic); 
end pset_1_problem_5; 

architecture structure of pset_1_problem_5 is 
begin 

p1 <= (a and c) or (not a and (b or not c)); 

p2 <= (not b and not c and d) 
or (not a and b and d) 
or (a and not c and d) 
or (not a and not c and not d); 

end structure; 

⋅
⋅
⋅
⋅
⋅
