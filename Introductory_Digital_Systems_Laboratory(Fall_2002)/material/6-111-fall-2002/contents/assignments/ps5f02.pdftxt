6.111 — PS 5

1

Massachusetts Institute of Technology
Department of Electrical Engineering and Computer Science
6.111 – Introductory Digital Systems Laboratory

ProblemSet5Issued:Lecture 11 Day

Due:Lecture 12 Day

In this completely ﬁctitious story, you are taking a class called 6.111 - Digital Death Laboratory. There are
LAs who spend a lot of time in lab. Here is your chance to implement a system to reward these fellow LAs.

Functionality
Your 6.111 class has three TAs and four LAs. We would like to reward the LAs who work hard. Every week,
the TAs and LAs ﬁll out the hours they work. We propose the following system:

1. Take the minimum of all the hours put in by the TA’s. Call this the weekly minimum. Call the
maximum hours put in by the TA’s that week the weekly maximum.

2. If any LA works fewer hours than the minimum, they get a warning point.

3. If a LA works more hours than the maximum, they are receive a reward point.

4. Each LA starts with 0 points. For each reward point they get, their score goes up by one. For each
warning point, their score goes down by one, but never below 0.

5. If a LA’s score reaches 3, they get a little bit of timeoﬀ (denoted by the timeoﬀ output to do whatever
undergrads do in their spare time). Their score then resets to 0.

Implementation
You will be implementing this system using ma jor and minor FSMs. Specs for the SRAM and for the entities
are provided below. You must use the la rewarder entity. The maxmin entity is suggested, but not required.

SRAM Block

The SRAM Block contains the standard 6264 I/O, and an additional status output. This output is called
SRAMbusy.

This block is your interface to the EECS’s payroll computer. They update the TA/LA hours weekly auto-
matically to the RAM. During this update, SRAMbusy is asserted. Each staﬀ member’s hours for the week
are accessible from 7 diﬀerent SRAM locations. Here is the addressing scheme for the SRAM:

A[2:0] Function Name
Neira Ha jro
TA
000
Jennifer Maurer
TA
001
James Oey
TA
010
011
LA
Levete Jakab
Craig Mielcarz
LA
100
Colin Weltin-Wu
LA
101
110
LA
Brian Wong

6.111 — PS 5

Ma jor FSM Entity

entity la_rewarder is
port (
std_logic;
: in
clk
: in
std_logic;
go
: out std_logic;
rdy
timeoff
: out std_logic_vector (3 downto 0);
end la_rewarder;

2

Description of entity la rewarder:
• go states when the system should calculate the reward output. Since the SRAM communicates with a
diﬀerent system to update the hours data, the computation may not start right away.
• rdy is an output telling when the reward data is valid.
• timeoﬀ is a 4-bit output denoting who should be rewarded with time oﬀ. Each bit represents an LA.
bit 0: Levente
bit 1: Craig
bit 2: Colin
bit 3: Brian

Minor FSM Entity

entity maxmin is
port (
clk
go
max
rdy
data
end maxmin;

std_logic;
: in
std_logic;
: in
: in
std_logic;
: out std_logic;
: out std_logic_vector (7 downto 0));

Description of entity maxmin:
• go tells the system to start the computation.
• max is the maximum and minimum function selector.
• rdy is the state machine done ﬂag.
• data provides the maximim or minimum result.

Approach

1. Add to the la rewarder entity to include the interface to the SRAM block described above. Submit
a description of additional inputs/outputs. Design your entity for your minor FSM, and describe the
inputs/outputs. The entities will be submitted with your VHDL code in step 3.

2. Draw the state machines for your ma jor and minor FSMs. Be sure to follow the standard conventions
for drawing state machines. Submit state diagrams for both FSMs.

3. Write the VHDL ﬁles that implements both FSMs. Be sure to instantiate the minor FSM inside your
ma jor FSM. Submit your VHDL code.

