“mcs-ftl” — 2010/9/8 — 0:40 — page 213 — #219

7

Relations and Partial Orders
A relation is a mathematical tool for describing associations between elements of
sets. Relations are widely used in computer science, especially in databases and
scheduling applications. A relation can be deﬁned across many items in many sets,
but in this text, we will focus on binary relations, which represent an association
between two items in one or two sets.

7.1 Binary Relations

7.1.1 Deﬁnitions and Examples
Deﬁnition 7.1.1. Given sets A and B , a binary relation R W A ! B from1 A
to B is a subset of A (cid:2) B . The sets A and B are called the domain and codomain
of R, respectively. We commonly use the notation aRb or a (cid:24)R b to denote that
.a; b / 2 R.
A relation is similar to a function. In fact, every function f W A ! B is a rela-
tion. In general, the difference between a function and a relation is that a relation
might associate multiple elements ofB with a single element ofA, whereas a func-
tion can only associate at most one element of B (namely, f .a/) with each element
a 2 A.
We have already encountered examples of relations in earlier chapters. For ex-
ample, in Section 5.2, we talked about a relation between the set of men and the
set of women where mRw if man m likes woman w . In Section 5.3, we talked
about a relation on the set of MIT courses where c1Rc2 if the exams for c1 and c2
cannot be given at the same time. In Section 6.3, we talked about a relation on the
set of switches in a network where s1Rs2 if s1 and s2 are directly connected by a
wire that can send a packet from s1 to s2 . We did not use the formal deﬁnition of a
relation in any of these cases, but they are all examples of relations.
As another example, we can deﬁne an “in-charge-of ” relation T from the set of
MIT faculty F to the set of subjects in the 2010 MIT course catalog. This relation
contains pairs of the form
.hinstructor-namei; hsubject-numi/
1We also say that the relationship is between A and B , or on A if B D A.

1“mcs-ftl” — 2010/9/8 — 0:40 — page 214 — #220

Chapter 7 Relations and Partial Orders

(Meyer,
(Meyer,
(Meyer,
(Leighton,
(Leighton,
(Freeman,
(Freeman,
(Freeman,
(Freeman,
(Eng,
(Guttag,

6.042),
18.062),
6.844),
6.042),
18.062),
6.011),
6.881)
6.882)
6.UAT)
6.UAT)
6.00)

Figure 7.1 Some items in the “in-charge-of ” relation T between faculty and sub-
ject numbers.

where the faculty member named hinstructor-namei is in charge of the subject with
number hsubject-numi. So T contains pairs like those shown in Figure 7.1.
This is a surprisingly complicated relation: Meyer is in charge of subjects with
three numbers. Leighton is also in charge of subjects with two of these three
numbers—because the same subject, Mathematics for Computer Science, has two
numbers (6.042 and 18.062) and Meyer and Leighton are jointly in-charge-of the
subject. Freeman is in-charge-of even more subjects numbers (around 20), since
as Department Education Ofﬁcer, he is in charge of whole blocks of special sub-
ject numbers. Some subjects, like 6.844 and 6.00 have only one person in-charge.
Some faculty, like Guttag, are in-charge-of only one subject number, and no one
else is jointly in-charge-of his subject, 6.00.
Some subjects in the codomain, N , do not appear in the list—that is, they are
not an element of any of the pairs in the graph of T ; these are the Fall term only
subjects. Similarly, there are faculty in the domain, F , who do not appear in the
list because all their in-charge-of subjects are Fall term only.

7.1.2 Representation as a Bipartite Graph
Every relation R W A ! B can be easily represented as a bipartite graph G D
.V ; E / by creating a “left” node for each element of A and a “right” node for each
element of B . We then create an edge between a left node u and a right node v
whenever aRb . Similarly, every bipartite graph (and every partition of the nodes
into a “left” and “right” set for which no edge connects a pair of left nodes or a pair
of right nodes) determines a relation between the nodes on the left and the nodes
on the right.

2“mcs-ftl” — 2010/9/8 — 0:40 — page 215 — #221

7.1. Binary Relations

Figure 7.2 Part of the bipartite graph for the “in charge of ” relation T from Fig-
ure 7.1.

For example, we have shown part of the bipartite graph for the in-charge-of
relation from Figure 7.1 in Figure 7.2.
In this case, there is an edge between
hinstructor-namei and hsubject-numberi if hinstructor-namei is in charge of hsubject-numberi.
A relation R W A ! B between ﬁnite sets can also be represented as a matrix
(
A D faij g where
aij D
if the i th element of A is related to the j th element of B
1
otherwise
0
for 1  i  jAj and 1  j  jB j. For example, the matrix for the relation in
Figure 7.2 (but restricted to the ﬁve faculty and eight subject numbers shown in
Figure 7.2, ordering them as they appear top-to-bottom in Figure 7.2) is shown in
Figure 7.3.

7.1.3 Relational Images
The idea of the image of a set under a function extends directly to relations.

MeyerLeightonFreemanEngGuttag6:04218:0626:8446:0116:8816:8826:UAT6:003“mcs-ftl” — 2010/9/8 — 0:40 — page 216 — #222
Chapter 7 Relations and Partial Orders
1CCCCA
0BBBB@
1 1 1 0 0 0 0 0
1 1 0 0 0 0 0 0
0 0 0 1 1 1 1 0
0 0 0 0 0 0 1 0
0 0 0 0 0 0 0 1
Figure 7.3 The matrix for the “in charge of ” relation T restricted to the ﬁve
faculty and eight subject numbers shown in Figure 7.2. The .3; 4/ entry of this
matrix is 1 since the third professor (Freeman) is in charge of the fourth subject
number (6.011).
Deﬁnition 7.1.2. The image of a set Y under a relation R W A ! B , written R.Y /,
is the set of elements that are related to some element in Y , namely,
R.Y / WWD f b 2 B j yRb for some y 2 Y g:
The image of the domain, R.A/, is called the range of R.

For example, to ﬁnd the subject numbers that Meyer is in charge of, we can look
for all the pairs of the form

.Meyer; hsubject-numberi/
in the graph of the teaching relation T , and then just list the right-hand sides of these
pairs. These right-hand sides are exactly the image T .Meyer/, which happens to
be f6:042 ; 18:062 ; 6:844g. Similarly, since the domain F is the set of all in-charge
faculty, T .F /, the range of T , is exactly the set of all subjects being taught.

Inverse Relations and Images
7.1.4
(cid:0)1 of a relation R W A ! B is the relation from B
Deﬁnition 7.1.3. The inverse R
to A deﬁned by the rule

bR

(cid:0)1a if and only if aRb:
(cid:0)1 is called the inverse image of the set.
The image of a set under the relation R
(cid:0)1 .X /.
That is, the inverse image of a set X under the relation R is R
Continuing with the in-charge-of example above, we can ﬁnd the faculty in
charge of 6.UAT by taking the pairs of the form
.hinstructor-namei; 6.UAT/

4“mcs-ftl” — 2010/9/8 — 0:40 — page 217 — #223

7.2. Relations and Cardinality

for the teaching relation T , and then just listing the left-hand sides of these pairs;
these turn out to be just Eng and Freeman. These left-hand sides are exactly the
inverse image of f6.UATg under T .
7.1.5 Combining Relations
There are at least two natural ways to combine relations to form new relations. For
example, given relations R W B ! C and S W A ! B , the composition of R with S
is the relation .R B S / W A ! C deﬁned by the rule
a.R B S /c I FF 9b 2 B: .bRc / AND .aS b /
where a 2 A and c 2 C .
As a special case, the composition of two functions f W B ! C and g W A ! B
is the function f B g W A ! C deﬁned by
.f B g/.a/ D f .g.a//
for all a 2 A. For example, if A D B D C D R, g.x / D x C 1 and f .x / D x 2 ,
then

.f B g/.x / D .x C 1/2
D x 2 C 2x C 1:
One can also deﬁne the product of two relations R1 W A1 ! B1 and R2 W A2 !
B2 to be the relation S D R1 (cid:2) R2 where
S W A1 (cid:2) A2 ! B1 (cid:2) B2

and

.a1 ; a2 /S .b1 ; b2 /

iff a1R1b1 and a2R2b2 :

7.2 Relations and Cardinality

7.2.1 Surjective and Injective Relations
There are some properties of relations that will be useful when we take up the topic
of counting in Part III because they imply certain relations between the sizes of
domains and codomains. In particular, we say that a binary relation R W A ! B is
(cid:15) surjective if every element of B is assigned to at least one element of A.
More concisely, R is surjective iff R.A/ D B (that is, if the range of R is the
codomain of R),

5“mcs-ftl” — 2010/9/8 — 0:40 — page 218 — #224

Chapter 7 Relations and Partial Orders
(cid:15) total when every element of A is assigned to some element of B . More
(cid:0)1 .B /,
concisely, R is total iff A D R
(cid:15) injective if every element of B is mapped at most once, and
(cid:15) bijective if R is total, surjective, injective, and a function2 .
We can illustrate these properties of a relation R W A ! B in terms of the cor-
responding bipartite graph G for the relation, where nodes on the left side of G
correspond to elements of A and nodes on the right side of G correspond to ele-
ments of B . For example:
(cid:15) “R is a function” means that every node on the left is incident to at most one
edge.
(cid:15) “R is total” means that every node on the left is incident to at least one edge.
So if R is a function, being total means that every node on the left is incident
to exactly one edge.
(cid:15) “R is surjective” means that every node on the right is incident to at least one
edge.
(cid:15) “R is injective” means that every node on the right is incident to at most one
edge.
(cid:15) “R is bijective” means that every node on both sides is incident to precisely
one edge (that is, there is a perfect matching between A and B ).

For example, consider the relations R1 and R2 shown in Figure 7.4. R1 is a total
surjective function (every node in the left column is incident to exactly one edge,
and every node in the right column is incident to at least one edge), but not injective
(node 3 is incident to 2 edges). R2 is a total injective function (every node in the
left column is incident to exactly one edge, and every node in the right column
is incident to at most one edge), but not surjective (node 4 is not incident to any
edges).
Notice that we need to know what the domain is to determine whether a relation
is total, and we need to know the codomain to determine whether it’s surjective.
For example, the function deﬁned by the formula 1=x 2 is total if its domain is RC
but partial if its domain is some set of real numbers that includes 0. It is bijective
if its domain and codomain are both RC , but neither injective nor surjective it is
domain and codomain are both R.
2These words surjective, injective, and bijective are not very memorable. Some authors use the
possibly more memorable phrases onto for surjective, one-to-one for injective, and exact correspon-
dence for bijective.

6“mcs-ftl” — 2010/9/8 — 0:40 — page 219 — #225

7.2. Relations and Cardinality

(a)
(b)
Figure 7.4 Relation R1 W A1 ! B1 is shown in (a) and relation R2 W A2 ! B2
is shown in (b).

7.2.2 Cardinality
The relational properties in Section 7.2.1 are useful in ﬁguring out the relative sizes
of domains and codomains.
If A is a ﬁnite set, we use jAj to denote the number of elements in A. This is
called the cardinality of A. In general, a ﬁnite set may have no elements (the empty
set), or one element, or two elements, . . . , or any nonnegative integer number of
elements, so for any ﬁnite set, jAj 2 N.
Now suppose R W A ! B is a function. Then every edge in the bipartite
graph G D .V ; E / for R is incident to exactly one element of A, so the num-
ber of edges is at most the number of elements of A. That is, if R is a function,
then
jE j  jAj:
Similarly, if R is surjective, then every element of B is incident to an edge, so there
must be at least as many edges in the graph as the size of B . That is
jE j (cid:21) jB j:
Combining these inequalities implies that R W A ! B is a surjective function, then
jAj (cid:21) jB j. This fact and two similar rules relating domain and codomain size to
relational properties are captured in the following theorem.

abcde1234A1B1R112345abcdA2B2R27“mcs-ftl” — 2010/9/8 — 0:40 — page 220 — #226

Chapter 7 Relations and Partial Orders

Theorem 7.2.1 (Mapping Rules). Let A and B be ﬁnite sets.
1. If there is a surjection from A to B , then jAj (cid:21) jB j.
2. If there is an injection from A to B , then jAj  jB j:
3. If there is a bijection between A and B , then jAj D jB j.
Mapping rule 2 can be explained by the same kind of reasoning we used for
rule 1. Rule 3 is an immediate consequence of the ﬁrst two mapping rules.
We will see many examples where Theorem 7.2.1 is used to determine the car-
dinality of a ﬁnite set. Later, in Chapter 13, we will consider the case when the
sets are inﬁnite and we’ll use surjective and injective relations to prove that some
inﬁnite sets are “bigger” than other inﬁnite sets.

7.3 Relations on One Set

For the rest of this chapter, we are going to focus on relationships between elements
of a single set; that is, relations from a set A to a set B where A D B . Thus, a
relation on a set A is a subset R  A (cid:2) A. Here are some examples:
(cid:15) Let A be a set of people and the relation R describe who likes whom: that is,
.x ; y / 2 R if and only if x likes y .
(cid:15) Let A be a set of cities. Then we can deﬁne a relation R such that xRy if and
only if there is a nonstop ﬂight from city x to city y .
(cid:15) Let A D Z and let xRy hold if and only if x  y .mod 5/.
(cid:15) Let A D N and let xRy if and only if x j y .
(cid:15) Let A D N and let xRy if and only if x  y .
The last examples clarify the reason for using xRy or x (cid:24)R y to indicate that the
relation R holds between x and y : many common relations (<, , D, j, ) are
expressed with the relational symbol in the middle.

7.3.1 Representation as a Digraph
Every relation on a single set A can be modeled as a directed graph (albeit one
that may contain loops). For example, the graph in Figure 7.5 describes the “likes”
relation for a particular set of 3 people.
In this case, we see that:

8“mcs-ftl” — 2010/9/8 — 0:40 — page 221 — #227

7.3. Relations on One Set

Figure 7.5 The directed graph for the “likes” relation on the set fBill; Bob; Julieg.

Figure 7.6 The digraph for divisibility on f1; 2 ; : : : ; 12g.

(cid:15) Julie likes Bill and Bob, but not herself.
(cid:15) Bill likes only himself.
(cid:15) Bob likes Julie, but not Bill nor himself.
Everything about the relationship is conveyed by the directed graph and nothing
more. This is no coincidence; a set A together with a relation R is precisely the
same thing as directed graph G D .V ; E / with vertex set V D A and edge set
E D R (where E may have loops).
As another example, we have illustrated the directed graph for the divisibility
relationship on the set f1; 2 ; : : : ; 12g in Figure 7.6. In this graph, every node has
a loop (since every positive number divides itself) and the composite numbers are
the nodes with indegree more than 1 (not counting the loop).
Relations on a single set can also be represented as a 0; 1-matrix. In this case,
the matrix is identical to the adjacency matrix for the corresponding digraph. For

JulieBillBob4281261391011759“mcs-ftl” — 2010/9/8 — 0:40 — page 222 — #228

Chapter 7 Relations and Partial Orders

1A
0@0 1 1
example, the matrix for the relation shown in Figure 7.5 is simply
0 1 0
1 0 0
where v1 D Julie, v2 D Bill, and v3 D Bob.
7.3.2 Symmetry, Transitivity, and Other Special Properties
Many relations on a single set that arise in practice possess one or more noteworthy
properties. These properties are summarized in the box on the following page. In
each case, we provide the formal of the deﬁnition of the property, explain what the
property looks like in a digraph G for the relation, and give an example of what the
property means for the “likes” relation.
For example, the congruence relation modulo 5 on Z is reﬂexive symmetric, and
transitive, but not irreﬂexive, antisymmetric, or asymmetric. The same is true for
the “connected” relation R W V ! V on an undirected graph G D .V ; E / where
uRv if u and v are in the same connected component of graph G . In fact, relations
that have these three properties are so common that we give them a special name:
equivalence relations. We will discuss them in greater detail in just a moment.
As another example, the “divides” relation on ZC is reﬂexive, antisymmetric,
and transitive, but not irreﬂexive, symmetric, or asymmetric. The same is true for
the “” relation on R. Relations that have these three properties are also very
common and they fall into a special case of relations called a partial order. We will
discuss partial orders at length in Sections 7.5–7.9.
As a ﬁnal example, consider the “likes” relation on the set fJulie; Bill; Bobg il-
lustrated in Figure 7.5. This relation has none of the six properties described in the
box.

7.4 Equivalence Relations

A relation is an equivalence relation if it is reﬂexive, symmetric, and transitive.
Congruence modulo n is an excellent example of an equivalence relation:
(cid:15) It is reﬂexive because x  x .mod n/.
(cid:15) It is symmetric because x  y .mod n/ implies y  x .mod n/.
(cid:15) It is transitive because x  y .mod n/ and y  z .mod n/ imply that x  z
.mod n/.

10“mcs-ftl” — 2010/9/8 — 0:40 — page 223 — #229

7.4. Equivalence Relations
Properties of a Relation R W A ! A
Reﬂexivity R is reﬂexive if
8x 2 A: xRX:
“Everyone likes themselves.”
Every node in G has a loop.

Irreﬂexivity R is irreﬂexive if
:9x 2 A: xRx :
“No one likes themselves.”
There are no loops in G .

Symmetry R is symmetric if
8x ; y 2 A: xRy IM P L I E S yRx :
“If x likes y , then y likes x .”
If there is an edge from x to y in G , then there is an edge from y to x in G
as well.

Antisymmetry R is antisymmetric if
8x ; y 2 A .xRy AND yRx / IM P L I E S x D y :
“No pair of distinct people like each other.”
There is at most one directed edge between any pair of distinct nodes.

Asymmetry R is asymmetric if
:9x ; y 2 A: xRy AND yRx :
“No one likes themselves and no pair of people like each other.”
There are no loops and there is at most one directed edge between any pair
of nodes.

Transitivity R is transitive if
8x ; y ; z 2 A: .xRy AND yRz / IM P L I E S xRz :
“If x likes y and y likes z , then x likes z too.”
For any walk v0 ; v1 ; : : : ; vk in G where k (cid:21) 2, v0 ! vk is in G (and, hence,
vi ! vj is also in G for all i < j .

11“mcs-ftl” — 2010/9/8 — 0:40 — page 224 — #230

Chapter 7 Relations and Partial Orders

There is an even more well-known example of an equivalence relation: equality
itself. Thus, an equivalence relation is a relation that shares some key properties
with “D”.
7.4.1 Partitions
There is another way to think about equivalence relations, but we’ll need a couple
of deﬁnitions to understand this alternative perspective.
Deﬁnition 7.4.1. Given an equivalence relation R W A ! A, the equivalence class
of an element x 2 A is the set of all elements of A related to x by R. The equiva-
lence class of x is denoted Œx . Thus, in symbols:
Œx  D f y j xRy g:
For example, suppose that A D Z and xRy means that x  y .mod 5/. Then
Œ7 D f: : : ; (cid:0)3; 2 ; 7; 12 ; 22 ; : : : g:
Notice that 7, 12, 17, etc., all have the same equivalence class; that is, Œ7 D Œ12 D
Œ17 D (cid:1) (cid:1) (cid:1) .
Deﬁnition 7.4.2. A partition of a ﬁnite set A is a collection of disjoint, nonempty
subsets A1 , A2 , . . . , An whose union is all of A. The subsets are usually called the
blocks of the partition.3 For example, one possible partition of A D fa; b; c ; d ; eg
is
A3 D fd g:
A2 D fb; eg
A1 D fa; c g
Here’s the connection between all this stuff: there is an exact correspondence
between equivalence relations on A and partitions of A. We can state this as a
theorem:

Theorem 7.4.3. The equivalence classes of an equivalence relation on a set A form
a partition of A.

We won’t prove this theorem (too dull even for us!), but let’s look at an example.

3We think they should be called the parts of the partition. Don’t you think that makes a lot more
sense?

12“mcs-ftl” — 2010/9/8 — 0:40 — page 225 — #231

7.5. Partial Orders

The congruent-mod-5 relation partitions the integers into ﬁve equivalence classes:
f: : : ; (cid:0)5; 0; 5; 10; 15; 20; : : : g
f: : : ; (cid:0)4 ; 1; 6; 11; 16; 21; : : : g
f: : : ; (cid:0)3; 2 ; 7; 12 ; 17; 22 ; : : : g
f: : : ; (cid:0)2 ; 3; 8; 13; 18; 23; : : : g
f: : : ; (cid:0)1; 4 ; 9; 14 ; 19; 24 ; : : : g

In these terms, x  y .mod 5/ is equivalent to the assertion that x and y are both
in the same block of this partition. For example, 6  16 .mod 5/, because they’re
both in the second block, but 2 ¥ 9 .mod 5/ because 2 is in the third block while
9 is in the last block.
In social terms, if “likes” were an equivalence relation, then everyone would be
partitioned into cliques of friends who all like each other and no one else.

7.5 Partial Orders

7.5.1 Strong and Weak Partial Orders
Deﬁnition 7.5.1. A relation R on a set A is a weak partial order if it is transitive,
antisymmetric, and reﬂexive. The relation is said to be a strong partial order if it
is transitive, antisymmetric, and irreﬂexive.4

Some authors deﬁned partial orders to be what we call weak partial orders, but
we’ll use the phrase partial order to mean either a weak or a strong partial order.
The difference between a weak partial order and a strong one has to do with the
reﬂexivity property: in a weak partial order, every element is related to itself, but in
a strong partial order, no element is related to itself. Otherwise, they are the same
in that they are both transitive and antisymmetric.
Examples of weak partial orders include “” on R, “” on the set of subsets
of (say) Z, and the “divides” relation on NC . Examples of strict partial orders
include “<” on R, and “(cid:26)” on the set of subsets of Z.5
4Equivalently, the relation is transitive and asymmetric, but stating it this way might have obscured
the irreﬂexivity property.
5 If you are not feeling comfortable with all the deﬁnitions that we’ve been throwing at you, it’s
probably a good idea to verify that each of these relations are indeed partial orders by checking that
they have the transitivity and antisymmetry properties.

13“mcs-ftl” — 2010/9/8 — 0:40 — page 226 — #232

Chapter 7 Relations and Partial Orders
We often denote a weak partial order with a symbol such as (cid:22) or v instead of a
letter such as R. This makes sense from one perspective since the symbols call to
mind  and , which deﬁne common partial orders. On the other hand, a partial
order is really a set of related pairs of items, and so a letter like R would be more
normal.
Likewise, we will often use a symbol like (cid:30) or @ to denote a strong partial order.
7.5.2 Total Orders
A partial order is “partial” because there can be two elements with no relation
between them. For example, in the “divides” partial order on f1; 2 ; : : : ; 12g, there
is no relation between 3 and 5 (since neither divides the other).
In general, we say that two elements a and b are incomparable if neither a (cid:22) b
nor b (cid:22) a. Otherwise, if a (cid:22) b or b (cid:22) a, then we say that a and b are comparable.
Deﬁnition 7.5.2. A total order is a partial order in which every pair of distinct
elements is comparable.
For example, the “” partial order on R is a total order because for any pair of
real numbers x and y , either x  y or y  x . The “divides” partial order on
f1; 2 ; : : : ; 12g is not a total order because 3 − 5 and 5 − 3.

7.6 Posets and DAGs

7.6.1 Partially Ordered Sets
Deﬁnition 7.6.1. Given a partial order (cid:22) on a set A, the pair .A; (cid:22)/ is called a
partially ordered set or poset.
In terms of graph theory, a poset is simply the directed graph G D .A; (cid:22)/ with
vertex set A and edge set (cid:22). For example, Figure 7.6 shows the graph form of the
poset for the “divides” relation on f1; 2 ; : : : ; 12g. We have shown the graph form
of the poset for the “<”-relation on f1; 2 ; 3; 4g in Figure 7.7.
7.6.2 Posets Are Acyclic
Did you notice anything that is common to Figures 7.6 and 7.7? Of course, they
both exhibit the transitivity and antisymmetry properties. And, except for the loops
in Figure 7.6, they both do not contain any cycles. This is not a coincidence. In fact,
the combination of the transitivity and asymmetry properties imply that the digraph

14“mcs-ftl” — 2010/9/8 — 0:40 — page 227 — #233

7.6. Posets and DAGs

Figure 7.7 Representing the poset for the “<”-relation on f1; 2 ; 3; 4g as a digraph.

for any poset is an acyclic graph (that is, a DAG), at least if you don’t count loops
as cycles. We prove this fact in the following theorem.

Theorem 7.6.2. A poset has no directed cycles other than self-loops.
Proof. We use proof by contradiction. Let .A; (cid:22)/ be a poset. Suppose that there
exist n (cid:21) 2 distinct elements a1 , a2 , . . . , an such that
a1 (cid:22) a2 (cid:22) a3 (cid:22) (cid:1) (cid:1) (cid:1) (cid:22) an(cid:0)1 (cid:22) an (cid:22) a1 :
Since a1 (cid:22) a2 and a2 (cid:22) a3 , transitivity implies a1 (cid:22) a3 . Another application
of transitivity shows that a1 (cid:22) a4 and a routine induction argument establishes
that a1 (cid:22) an . Since we know that an (cid:22) a1 , antisymmetry implies a1 D an ,
contradicting the supposition that a1 , . . . , an are distinct and n (cid:21) 2. Thus, there is
(cid:4)
no such directed cycle.

Thus, deleting the self-loops from a poset leaves a directed graph without cycles,
which makes it a directed acyclic graph or DAG.

7.6.3 Transitive Closure
Theorem 7.6.2 tells us that every poset corresponds to a DAG. Is the reverse true?
That is, does every DAG correspond to a poset? The answer is “Yes,” but we
need to modify the DAG to make sure that it satisﬁes the transitivity property. For
example, consider the DAG shown in Figure 7.8. As any DAG must, this graph
satisﬁes the antisymmetry property6 but it does not satisfy the transitivity property
because v1 ! v2 and v2 ! v3 are in the graph but v1 ! v3 is not in the graph.
6 If u ! v and v ! u are in a digraph G , then G would have a cycle of length 2 and it could not
be a DAG.

123415“mcs-ftl” — 2010/9/8 — 0:40 — page 228 — #234

Chapter 7 Relations and Partial Orders

Figure 7.8 A 6-node digraph that does not satisfy the transitivity property.

E

Figure 7.9 The transitive closure for the digraph in Figure 7.8. The edges that
were added to form the transitive closure are shown in bold.
Deﬁnition 7.6.3. Given a digraph G D .V ; E /, the transitive closure of G is the
C D .V ; E
C
digraph G
/ where
C D f u ! v j there is a directed path of positive length from u to v in G g:
Similarly, if R is the relation corresponding to G , the transitive closure of R (de-
C .
C ) is the relation corresponding to G
noted R
For example, the transitive closure for the graph in Figure 7.8 is shown in Fig-
ure 7.9.
If G is a DAG, then the transitive closure of G is a strong partial order. The proof
of this fact is left as an exercise in the problem section.

7.6.4 The Hasse Diagram
One problem with viewing a poset as a digraph is that there tend to be lots of edges
due to the transitivity property. Fortunately, we do not necessarily have to draw

v2v1v3v4v5v6v2v1v3v4v5v616“mcs-ftl” — 2010/9/8 — 0:40 — page 229 — #235

7.7. Topological Sort

Figure 7.10 The Hasse diagrams for the posets in Figure 7.6 and 7.7.

(a)

(b)

all the edges if we know that the digraph corresponds to a poset. For example,
we could choose not to draw any edge which would be implied by the transitivity
property, knowing that it is really there by implication. In general, a Hasse diagram
for a poset .A; (cid:22)/ is a digraph with vertex set A and edge set (cid:22) minus all self-loops
and edges implied by transitivity. For example, the Hasse diagrams of the posets
shown in Figures 7.6 and 7.7 are shown in Figure 7.10.

7.7 Topological Sort

A total order that is consistent with a partial order is called a topological sort. More
precisely,
Deﬁnition 7.7.1. A topological sort of a poset .A; (cid:22)/ is a total order .A; (cid:22)T / such
that
x (cid:22) y IM P L I E S x (cid:22)T y :
For example, consider the poset that describes how a guy might get dressed for
a formal occasion. The Hasse diagram for such a poset is shown in Figure 7.11.

123111061257498123417“mcs-ftl” — 2010/9/8 — 0:40 — page 230 — #236

Chapter 7 Relations and Partial Orders

Figure 7.11 The Hasse diagram for a poset that describes which items much pre-
cede others when getting dressed.

In this poset, the set is all the garments and the partial order speciﬁes which items
much precede others when getting dressed.
There are several total orders that are consistent with the partial order shown in
Figure 7.11. We have shown two of them in list form in Figure 7.12. Each such
list is a topological sort for the partial order in Figure 7.11. In what follows, we
will prove that every ﬁnite poset has a topological sort. You can think of this as a
mathematical proof that you can get dressed in the morning (and then show up for
math lecture).

Theorem 7.7.2. Every ﬁnite poset has a topological sort.

We’ll prove the theorem constructively. The basic idea is to pull the “smallest”
element a out of the poset, ﬁnd a topological sort of the remainder recursively, and
then add a back into the topological sort as an element smaller than all the others.
The ﬁrst hurdle is that “smallest” is not such a simple concept in a set that is only
partially ordered. In a poset .A; (cid:22)/, an element x 2 A is minimal if there is no other
element y 2 A such that y (cid:22) x . For example, there are four minimal elements in
the getting-dressed poset: left sock, right sock, underwear, and shirt. (It may seem

underwearshirtjacketbeltright shoeleft shoeright sockleft socktiepants18“mcs-ftl” — 2010/9/8 — 0:40 — page 231 — #237

7.7. Topological Sort

underwear
pants
belt
shirt
tie
jacket
left sock
right sock
left shoe
right shoe
(a)

left sock
shirt
tie
underwear
right sock
pants
right shoe
belt
jacket
left shoe
(b)

Figure 7.12 Two possible topological sorts of the poset shown in Figure 7.11. In
each case, the elements are listed so that x (cid:22) y iff x is above y in the list.

odd that the minimal elements are at the top of the Hasse diagram rather than the
bottom. Some people adopt the opposite convention. If you’re not sure whether
minimal elements are on the top or bottom in a particular context, ask.) Similarly,
an element x 2 A is maximal if there is no other element y 2 A such that x (cid:22) y .
Proving that every poset has a minimal element is extremely difﬁcult, because it
is not true. For example, the poset .Z; / has no minimal element. However, there
is at least one minimal element in every ﬁnite poset.
Lemma 7.7.3. Every ﬁnite poset has a minimal element.
Proof. Let .A; (cid:22)/ be an arbitrary poset. Let a1 , a2 , . . . , an be a maximum-length
sequence of distinct elements in A such that
a1 (cid:22) a2 (cid:22) (cid:1) (cid:1) (cid:1) (cid:22) an :
The existence of such a maximum-length sequence follows from the Well Ordering
Principle and the fact that A is ﬁnite. Now a0 (cid:22) a1 cannot hold for any element
a0 2 A not in the chain, since the chain already has maximum length. And ai (cid:22) a1
cannot hold for any i (cid:21) 2, since that would imply a cycle
ai (cid:22) a1 (cid:22) a2 (cid:22) (cid:1) (cid:1) (cid:1) (cid:22) ai
and no cycles exist in a poset by Theorem 7.6.2. Therefore a1 is a minimal element.
(cid:4)

Now we’re ready to prove Theorem 7.7.2, which says that every ﬁnite poset has a
topological sort. The proof is rather intricate; understanding the argument requires
a clear grasp of all the mathematical machinery related to posets and relations!

19“mcs-ftl” — 2010/9/8 — 0:40 — page 232 — #238

Chapter 7 Relations and Partial Orders

Proof of Theorem 7.7.2. We use induction. Let P .n/ be the proposition that every
n-element poset has a topological sort.
Base case: Every 1-element poset is already a total order and thus is its own topo-
logical sort. So P .1/ is true.
Inductive step: Now we assume P .n/ in order to prove P .n C 1/ where n (cid:21) 1.
Let .A; (cid:22)/ be an .n C 1/-element poset. By Lemma 7.7.3, there exists a minimal
element in a 2 A. Remove a and all pairs in (cid:22) involving a to obtain an n-element
; (cid:22)0
; (cid:22)0
0
0
T / by the assumption P .n/. Now
poset .A
/. This has a topological sort .A
we construct a total order .A; (cid:22)T / by adding a back as an element smaller than all
the others. Formally, let

[f .a; z / j z 2 A g:

(cid:22)T D(cid:22)0
T
All that remains is to check that this total order is consistent with the original partial
order .A; (cid:22)/; that is, we must show that
x (cid:22) y IM P L I E S x (cid:22)T y :
We assume that the left side is true and show that the right side follows. There are
two cases.
Case 1 If x D a, then a (cid:22)T y holds, because a (cid:22)T z for all z 2 A.
Case 2 if x ¤ a, then y can not equal a either, since a is a minimal element in the
0 and so x (cid:22)0
partial order (cid:22). Thus, both x and y are in A
y . This means
x (cid:22)0
T y , since (cid:22)0
T is a topological sort of the partial order (cid:22)0 . And this
implies x (cid:22)T y since (cid:22)T contains (cid:22)0
T .
Thus, .A; (cid:22)T / is a topological sort of .A; (cid:22)/. This shows that P .n/ implies
P .n C 1/ for all n (cid:21) 1. Therefore P .n/ is true for all n (cid:21) 1 by the principle of
(cid:4)
induction, which proves the theorem.

7.8 Parallel Task Scheduling

When items of a poset are tasks that need to be done and the partial order is a
precedence constraint, topological sorting provides us with a way to execute the
tasks sequentially without violating the precedence constraints.
But what if we have the ability to execute more than one task at the same time?
For example, suppose that the tasks are programs, the partial order indicates data

20“mcs-ftl” — 2010/9/8 — 0:40 — page 233 — #239

7.8. Parallel Task Scheduling

Figure 7.13 A parallel schedule for the tasks-in-getting-dressed poset in Fig-
ure 7.11. The tasks in Ai can be performed in step i for 1  i  4. A chain
of length 4 (the critical path in this example) is shown with bold edges.

dependence, and we have a parallel machine with lots of processors instead of a
sequential machine with only one processor. How should we schedule the tasks so
as to minimize the total time used?
For simplicity, assume all tasks take 1 unit of time and we have an unlimited
number of identical processors. For example, in the clothes example in Figure 7.11,
how long would it take to handle all the garments?
In the ﬁrst unit of time, we should do all minimal items, so we would put on our
left sock, our right sock, our underwear, and our shirt.7 In the second unit of time,
we should put on our pants and our tie. Note that we cannot put on our left or right
shoe yet, since we have not yet put on our pants. In the third unit of time, we should
put on our left shoe, our right shoe, and our belt. Finally, in the last unit of time,
we can put on our jacket. This schedule is illustrated in Figure 7.13.
The total time to do these tasks is 4 units. We cannot do better than 4 units of
7Yes, we know that you can’t actually put on both socks at once, but imagine you are being dressed
by a bunch of robot processors and you are in a big hurry. Still not working for you? Ok, forget about
the clothes and imagine they are programs with the precedence constraints shown in Figure 7.11.

underwearshirtjacketbeltright shoeleft shoeright sockleft socktiepantsA1A2A3A421“mcs-ftl” — 2010/9/8 — 0:40 — page 234 — #240

Chapter 7 Relations and Partial Orders

time because there is a sequence of 4 tasks, each needing to be done before the
next, of length 4. For example, we must put on our shirt before our pants, our pants
before our belt, and our belt before our jacket. Such a sequence of items is known
as a chain
Deﬁnition 7.8.1. A chain is a sequence a1 (cid:22) a2 (cid:22) (cid:1) (cid:1) (cid:1) (cid:22) at , where ai ¤ aj for all
i ¤ j , such that each item is comparable to the next in the chain, and it is smaller
with respect to (cid:22). The length of the chain is t , the number of elements in the chain.
Thus, the time it takes to schedule tasks, even with an unlimited number of pro-
cessors, is at least the length of the longest chain. Indeed, if we used less time, then
two items from a longest chain would have to be done at the same time, which con-
tradicts the precedence constraints. For this reason, a longest chain is also known
as a critical path. For example, Figure 7.13 shows the critical path for the getting-
dressed poset.
In this example, we were in fact able to schedule all the tasks in t steps, where
t is the length of the longest chain. The really nice thing about posets is that this
is always possible! In other words, for any poset, there is a legal parallel schedule
that runs in t steps, where t is the length of the longest chain.
There are lots of ways to prove this fact. Our proof will also give us the corre-
sponding schedule in t time steps, and allow us to obtain some nice corollaries.
Theorem 7.8.2. Given any ﬁnite poset .A; (cid:22)/ for which the longest chain has
length t , it is possible to partition A into t subsets A1 , A2 , . . . , At such that for
all i 2 f1; 2 ; : : : ; t g and for all a 2 Ai , we have that all b (cid:22) a appear in the set
A1 [ : : : [ Ai (cid:0)1 .
Before proving this theorem, ﬁrst note that for each i , all items in Ai can be
scheduled in time step i . This is because all preceding tasks are scheduled in pre-
ceding time steps, and thus are already completed. So the theorem implies that
Corollary 7.8.3. The total amount of parallel time needed to complete the tasks is
the same as the length of the longest chain.
Proof of Theorem 7.8.2. For all a 2 Ai , put a in Ai , where i is the length of the
longest chain ending at a. For example, the Ai for the getting-dressed poset are
shown in Figure 7.13. In what follows, we show that for all i , for all a 2 Ai and
for all b (cid:22) a with b ¤ a, we have b 2 A1 [ A2 [ : : : [ Ai (cid:0)1 .
We prove this by contradiction. Assume there is some i , a 2 Ai , and b (cid:22) a
with b ¤ a and b … A1 [ A2 [ : : : [ Ai (cid:0)1 . By the way we deﬁned Ai , this implies
there is a chain of length at least i ending at b . Since b (cid:22) a and b ¤ a, we can
extend this chain to a chain of length at least i C 1, ending at a. But then a could
(cid:4)
not be in Ai . This is a contradiction.

22“mcs-ftl” — 2010/9/8 — 0:40 — page 235 — #241

7.9. Dilworth’s Lemma

If we have an unlimited number of processors, then the time to complete all tasks
is equal to the length of the longest chain of dependent tasks. The case where there
are only a limited number of processors is very useful in practice and it is covered
in the Problems section.

7.9 Dilworth’s Lemma

Deﬁnition 7.9.1. An antichain in a poset is a set of elements such that any two
elements in the set are incomparable.

For example, each Ai in the proof of Theorem 7.8.2 and in Figure 7.13 is an
antichain since its elements have no dependencies between them (which is why
they could be executed at the same time).
Our conclusions about scheduling also tell us something about antichains.

Corollary 7.9.2. If the largest chain in a partial order on a set A is of size t , then
A can be partitioned into t antichains.
Proof. Let the antichains be the sets A1 , A2 , . . . , At deﬁned in Theorem 7.8.2. (cid:4)
Corollary 7.9.2 implies a famous result8 about partially ordered sets:

Lemma 7.9.3 (Dilworth). For all t > 0, every partially ordered set with n elements
must have either a chain of size greater than t or an antichain of size at least n= t .

Proof. By contradiction. Assume that the longest chain has length at most t and the
longest antichain has size less than n= t . Then by Corollary 7.9.2, the n elements
can be partitioned into at most t antichains. Hence, there are fewer than t (cid:1) n= t D n
elements in the poset, which is a contradiction. Hence there must be a chain longer
(cid:4)
than t or an antichain with at least n= t elements.
p
p
Corollary 7.9.4. Every partially ordered set with n elements has a chain of size
greater than
n or an antichain of size at least
n.
Proof. Set t D p
As an application, consider a permutation of the numbers from 1 to n arranged
p
as a sequence from left to right on a line. Corollary 7.9.4 can be used to show
that there must be a
n-length subsequence of these numbers that is completely

n in Lemma 7.9.3.

(cid:4)

8Lemma 7.9.3 also follows from a more general result known as Dilworth’s Theorem that we will
not discuss.

23“mcs-ftl” — 2010/9/8 — 0:40 — page 236 — #242

Chapter 7 Relations and Partial Orders

increasing or completely decreasing as you move from left to right. For example,
the sequence

7; 8; 9; 4 ; 5; 6; 1; 2 ; 3

has an increasing subsequence of length 3 (for example, 7, 8, 9) and a decreasing
subsequence of length 3 (for example, 9, 6, 3). The proof of this result is left as an
exercise that will test your ability to ﬁnd the right partial order on the numbers in
the sequence.

24MIT OpenCourseWare
http://ocw.mit.edu 

6.042J / 18.062J Mathematics for Computer Science 
Fall 2010 

For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms . 

