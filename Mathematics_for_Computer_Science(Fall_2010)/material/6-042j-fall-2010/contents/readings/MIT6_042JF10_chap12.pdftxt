“mcs-ftl” — 2010/9/8 — 0:40 — page 355 — #361

12

Generating Functions
Generating Functions are one of the most surprising and useful inventions in Dis-
crete Math. Roughly speaking, generating functions transform problems about se-
quences into problems about functions. This is great because we’ve got piles of
mathematical machinery for manipulating functions. Thanks to generating func-
tions, we can then apply all that machinery to problems about sequences. In this
way, we can use generating functions to solve all sorts of counting problems. They
can also be used to ﬁnd closed-form expressions for sums and to solve recurrences.
In fact, many of the problems we addressed in Chapters 9–11 can be formulated
and solved using generating functions.

12.1 Deﬁnitions and Examples
The ordinary generating function for the sequence1 hg0 ; g1 ; g2 ; g3 : : : i is the power
series:
G.x / D g0 C g1x C g2x 2 C g3x 3 C (cid:1) (cid:1) (cid:1) :
There are a few other kinds of generating functions in common use, but ordinary
generating functions are enough to illustrate the power of the idea, so we’ll stick to
them and from now on, generating function will mean the ordinary kind.
A generating function is a “formal” power series in the sense that we usually
regard x as a placeholder rather than a number. Only in rare cases will we actually
evaluate a generating function by letting x take a real number value, so we generally
ignore the issue of convergence.
Throughout this chapter, we’ll indicate the correspondence between a sequence
and its generating function with a double-sided arrow as follows:
hg0 ; g1 ; g2 ; g3 ; : : : i  ! g0 C g1x C g2x 2 C g3x 3 C (cid:1) (cid:1) (cid:1) :
For example, here are some sequences and their generating functions:
h0; 0; 0; 0; : : : i  ! 0 C 0x C 0x 2 C 0x 3 C (cid:1) (cid:1) (cid:1) D 0
h1; 0; 0; 0; : : : i  ! 1 C 0x C 0x 2 C 0x 3 C (cid:1) (cid:1) (cid:1) D 1
h3; 2 ; 1; 0; : : : i  ! 3 C 2x C 1x 2 C 0x 3 C (cid:1) (cid:1) (cid:1) D 3 C 2x C x 2
1 In this chapter, we’ll put sequences in angle brackets to more clearly distinguish them from the
many other mathematical expressions ﬂoating around.

1“mcs-ftl” — 2010/9/8 — 0:40 — page 356 — #362

Chapter 12 Generating Functions

The pattern here is simple: the i th term in the sequence (indexing from 0) is the
coefﬁcient of x i in the generating function.
Recall that the sum of an inﬁnite geometric series is:
1 C z C z 2 C z 3 C (cid:1) (cid:1) (cid:1) D 1
1 (cid:0) z
:
This equation does not hold when jz j (cid:21) 1, but as remarked, we won’t worry about
convergence issues for now. This formula gives closed form generating functions
for a whole range of sequences. For example:
h1; 1; 1; 1; : : : i  ! 1 C x C x 2 C x 3 C x 4 C (cid:1) (cid:1) (cid:1) D 1
1 (cid:0) x

h1; (cid:0)1; 1; (cid:0)1; : : : i  ! 1 (cid:0) x C x 2 (cid:0) x 3 C x 4 (cid:0) (cid:1) (cid:1) (cid:1) D 1
1 C x
˝1; a; a2 ; a3 ; : : : ˛  ! 1 C ax C a2x 2 C a3x 3 C (cid:1) (cid:1) (cid:1) D 1
1 (cid:0) ax
h1; 0; 1; 0; 1; 0; : : : i  ! 1 C x 2 C x 4 C x 6 C x 8 C (cid:1) (cid:1) (cid:1) D 1
1 (cid:0) x 2

12.2 Operations on Generating Functions

The magic of generating functions is that we can carry out all sorts of manipulations
on sequences by performing mathematical operations on their associated generating
functions. Let’s experiment with various operations and characterize their effects
in terms of sequences.

12.2.1 Scaling
Multiplying a generating function by a constant scales every term in the associated
sequence by the same constant. For example, we noted above that:
h1; 0; 1; 0; 1; 0; : : : i  ! 1 C x 2 C x 4 C x 6 C (cid:1) (cid:1) (cid:1) D 1
1 (cid:0) x 2 :

Multiplying the generating function by 2 gives
D 2 C 2x 2 C 2x 4 C 2x 6 C (cid:1) (cid:1) (cid:1)

2
1 (cid:0) x 2

2“mcs-ftl” — 2010/9/8 — 0:40 — page 357 — #363

12.2. Operations on Generating Functions

which generates the sequence:

h2 ; 0; 2 ; 0; 2 ; 0; : : : i :

Rule 12.2.1 (Scaling Rule). If
hf0 ; f1 ; f2 ; : : : i  ! F .x /;

then

hcf0 ; cf1 ; cf2 ; : : : i  ! c (cid:1) F .x /:
The idea behind this rule is that:
hcf0 ; cf1 ; cf2 ; : : : i  ! cf0 C cf1x C cf2x 2 C (cid:1) (cid:1) (cid:1)
D c (cid:1) .f0 C f1x C f2x 2 C (cid:1) (cid:1) (cid:1) /
D cF .x /:

12.2.2 Addition
Adding generating functions corresponds to adding the two sequences term by
term. For example, adding two of our earlier examples gives:
h1; 1; 1; 1; 1; 1; : : : i  ! 1
1 (cid:0) x
C h1; (cid:0)1; 1; (cid:0)1; 1; (cid:0)1; : : : i  ! 1
1 C x
C 1
h2 ; 0; 2 ; 0; 2 ; 0; : : : i  ! 1
1 C x
1 (cid:0) x
We’ve now derived two different expressions that both generate the sequence h2 ; 0; 2 ; 0; : : : i.
They are, of course, equal:
D .1 C x / C .1 (cid:0) x /
C 1
1
.1 (cid:0) x /.1 C x /
1 C x
1 (cid:0) x
Rule 12.2.2 (Addition Rule). If
hf0 ; f1 ; f2 ; : : : i  ! F .x /
hg0 ; g1 ; g2 ; : : : i  ! G.x /;

D 2
1 (cid:0) x 2 :

and

then

hf0 C g0 ; f1 C g1 ; f2 C g2 ; : : : i  ! F .x / C G.x /:

3“mcs-ftl” — 2010/9/8 — 0:40 — page 358 — #364

Chapter 12 Generating Functions

1X
The idea behind this rule is that:
.fn C gn /x n
hf0 C g0 ; f1 C g1 ; f2 C g2 ; : : : i  !
  1X
!
  1X
nD0
D
C
fnx n
nD0
nD0
D F .x / C G.x /:

!

gnx n

:

12.2.3 Right Shifting
Let’s start over again with a simple sequence and its generating function:
h1; 1; 1; 1; : : : i  ! 1
1 (cid:0) x
Now let’s right-shift the sequence by adding k leading zeros:
‚ …„ ƒ
h k zeroes
0; 0; : : : ; 0; 1; 1; 1; : : : i  ! x k C x kC1 C x kC2 C x kC3 C (cid:1) (cid:1) (cid:1)
D x k (cid:1) .1 C x C x 2 C x 3 C (cid:1) (cid:1) (cid:1) /
D x k
1 (cid:0) x
Evidently, adding k leading zeros to the sequence corresponds to multiplying the
generating function by x k . This holds true in general.
Rule 12.2.3 (Right-Shift Rule). If hf0 ; f1 ; f2 ; : : : i  ! F .x /, then:
‚ …„ ƒ
h k zeroes
0; 0; : : : ; 0; f0 ; f1 ; f2 ; : : : i  ! x k (cid:1) F .x /:
‚ …„ ƒ
The idea behind this rule is that:
h k zeroes
0; 0; : : : ; 0; f0 ; f1 ; f2 ; : : : i  ! f0x k C f1x kC1 C f2x kC2 C (cid:1) (cid:1) (cid:1)
D x k (cid:1) .f0 C f1x C f2x 2 C f3x 3 C (cid:1) (cid:1) (cid:1) /
D x k (cid:1) F .x /:

:

4“mcs-ftl” — 2010/9/8 — 0:40 — page 359 — #365

12.2. Operations on Generating Functions

d

dx

IM P L I E S

IM P L I E S

12.2.4 Differentiation
What happens if we take the derivative of a generating function? As an exam-
ple, let’s differentiate the now-familiar generating function for an inﬁnite sequence
of 1’s:

 1
1 C x C x 2 C x 3 C x 4 C (cid:1) (cid:1) (cid:1) D 1
1 (cid:0) x
.1 C x C x 2 C x 3 C x 4 C (cid:1) (cid:1) (cid:1) / D d
1 (cid:0) x
dx
1 C 2x C 3x 2 C 4x 3 C (cid:1) (cid:1) (cid:1) D
1
.1 (cid:0) x /2
h1; 2 ; 3; 4 ; : : : i  !
1
.1 (cid:0) x /2 :
(12.1)
IM P L I E S
We found a generating function for the sequence h1; 2 ; 3; 4 ; : : : i of positive inte-
gers!
In general, differentiating a generating function has two effects on the corre-
sponding sequence: each term is multiplied by its index and the entire sequence is
shifted left one place.
Rule 12.2.4 (Derivative Rule). If
hf0 ; f1 ; f2 ; f3 ; : : : i  ! F .x /;

then

0

.x /:

hf1 ; 2f2 ; 3f3 ; : : : i  ! F
The idea behind this rule is that:
hf1 ; 2f2 ; 3f3 ; : : : i  ! f1 C 2f2x C 3f3x 2 C (cid:1) (cid:1) (cid:1)
D d
.f0 C f1x C f2x 2 C f3x 3 C (cid:1) (cid:1) (cid:1) /
dx
D d
dx
The Derivative Rule is very useful. In fact, there is frequent, independent need
for each of differentiation’s two effects, multiplying terms by their index and left-
shifting one place. Typically, we want just one effect and must somehow cancel out
the other. For example, let’s try to ﬁnd the generating function for the sequence of
squares, h0; 1; 4 ; 9; 16; : : : i. If we could start with the sequence h1; 1; 1; 1; : : : i and
multiply each term by its index two times, then we’d have the desired result:
h0 (cid:1) 0; 1 (cid:1) 1; 2 (cid:1) 2 ; 3 (cid:1) 3; : : : i D h0; 1; 4 ; 9; : : : i :

F .x /:

5“mcs-ftl” — 2010/9/8 — 0:40 — page 360 — #366

Chapter 12 Generating Functions

A challenge is that differentiation not only multiplies each term by its index, but
also shifts the whole sequence left one place. However, the Right-Shift Rule 12.2.3
tells how to cancel out this unwanted left-shift: multiply the generating function
by x .
Our procedure, therefore, is to begin with the generating function for h1; 1; 1; 1; : : : i,
differentiate, multiply by x , and then differentiate and multiply by x once more.
Then

h1; 1; 1; 1; : : : i  ! 1
1 (cid:0) x
h1; 2 ; 3; 4 ; : : : i  ! d
1
1 (cid:0) x
dx
h0; 1; 2 ; 3; : : : i  ! x (cid:1)
1
.1 (cid:0) x /2
h1; 4 ; 9; 16; : : : i  ! d
x
.1 (cid:0) x /2
dx
h0; 1; 4 ; 9; : : : i  ! x (cid:1) 1 C x
.1 (cid:0) x /3

D

1
.1 (cid:0) x /2
D
x
.1 (cid:0) x /2
D 1 C x
.1 (cid:0) x /3
D x .1 C x /
.1 (cid:0) x /3

Derivative Rule:

Right-shift Rule:

Derivative Rule:

Right-shift Rule:

Thus, the generating function for squares is:
x .1 C x /
.1 (cid:0) x /3 :

(12.2)

12.2.5 Products
Rule 12.2.5 ( Product Rule). If
ha0 ; a1 ; a2 ; : : : i  ! A.x /;

and

hb0 ; b1 ; b2 ; : : : i  ! B.x /;

then

hc0 ; c1 ; c2 ; : : : i  ! A.x / (cid:1) B.x /;

where

cn WWD a0bn C a1bn(cid:0)1 C a2bn(cid:0)2 C (cid:1) (cid:1) (cid:1) C anb0 :
1X
To understand this rule, let
C .x / WWD A.x / (cid:1) B.x / D
nD0

cnx n :

6“mcs-ftl” — 2010/9/8 — 0:40 — page 361 — #367

12.3. Evaluating Sums
We can evaluate the product A.x / (cid:1) B.x / by using a table to identify all the
cross-terms from the product of the sums:

b0x 0

b1x 1

b2x 2

b3x 3

a0x 0

a0b0x 0

a0b1x 1

a0b2x 2

a0b3x 3

a1x 1

a1b0x 1

a1b1x 2

a1b2x 3

: : :

: : :

: : :

a2x 2

a2b0x 2

a2b1x 3

: : :

a3x 3

a3b0x 3

: : :

: : :

:::
Notice that all terms involving the same power of x lie on a diagonal. Collecting
these terms together, we ﬁnd that the coefﬁcient of x n in the product is the sum of
all the terms on the .n C 1/st diagonal, namely,
a0bn C a1bn(cid:0)1 C a2bn(cid:0)2 C (cid:1) (cid:1) (cid:1) C anb0 :
This expression (12.3) may be familiar from a signal processing course; the se-
quence hc0 ; c1 ; c2 ; : : : i is called the convolution of sequences ha0 ; a1 ; a2 ; : : : i and
hb0 ; b1 ; b2 ; : : : i.

(12.3)

12.3 Evaluating Sums

The product rule looks complicated. But it is surprisingly useful. For example,
suppose that we set
B.x / D 1
1 (cid:0) x
:
Then bi D 1 for i (cid:21) 0 and the nth coefﬁcient of A.x /B.x / is
a0 (cid:1) 1 C a1 (cid:1) 1 C a2 (cid:1) 1 C (cid:1) (cid:1) (cid:1) C an (cid:1) 1 D nX
ai :
i D0
In other words, given any sequence ha0 ; a1 ; a2 ; : : : i, we can compute
sn D nX
i D0

ai

7“mcs-ftl” — 2010/9/8 — 0:40 — page 362 — #368

Chapter 12 Generating Functions
for all n by simply multiplying the sequence’s generating function by 1=.1 (cid:0) x /.
This is the Summation Rule.

Rule 12.3.1 (Summation Rule). If
ha0 ; a1 ; a2 ; : : : i  ! A.x /;

then

where

ai

i 2

for n (cid:21) 0:

hs0 ; s1 ; s2 ; : : : i  ! A.x /
1 (cid:0) x
sn D nX
i D0
The Summation Rule sounds powerful, and it is! We know from Chapter 9 that
computing sums is often not easy. But multiplying by 1=.1 (cid:0) x / is about as easy as
it gets.
sn D nX
For example, suppose that we want to compute the sum of the ﬁrst n squares
i D0
and we forgot the method in Chapter 9. All we need to do is compute the generating
function for h0; 1; 4 ; 9; : : : i and multiply by 1=.1 (cid:0) x /. We already computed the
generating function for h0; 1; 4 ; 9; : : : i in Equation 12.2—it is
x .1 C x /
.1 (cid:0) x /3 :
Hence, the generating function for hs0 ; s1 ; s2 ; : : : i is
x .1 C x /
This means that Pn
.1 (cid:0) x /4 :
i D0 i 2 is the coefﬁcient of x n in x .1 C x /=.1 (cid:0) x /4 .
That was pretty easy, but there is one problem—we have no idea how to deter-
mine the coefﬁcient of x n in x .1 C x /=.1 (cid:0) x /4 ! And without that, this whole
endeavor (while magical) would be useless. Fortunately, there is a straightforward
way to produce the sequence of coefﬁcients from a generating function.

8“mcs-ftl” — 2010/9/8 — 0:40 — page 363 — #369

12.4. Extracting Coefﬁcients

12.4 Extracting Coefﬁcients

12.4.1 Taylor Series
Given a sequence of coefﬁcients hf0 ; f1 ; f2 ; : : : i, computing the generating func-
tion F .x / is easy since

F .x / D f0 C f1x C f2x 2 C (cid:1) (cid:1) (cid:1) :
To compute the sequence of coefﬁcients from the generating function, we need to
compute the Taylor Series for the generating function.

Rule 12.4.1 (Taylor Series). Let F .x / be the generating function for the sequence
hf0 ; f1 ; f2 ; : : : i:

Then

f0 D F .0/

and

fn D F .n/ .0/
nŠ
for n (cid:21) 1, where F .n/ .0/ is the nth derivative of F .x / evaluated at x D 0.
This is because if

then

Also,

and so

F .x / D f0 C f1x C f2x 2 C (cid:1) (cid:1) (cid:1) ;

F .0/ D f0 C f1 (cid:1) 0 C f2 (cid:1) 02 C (cid:1) (cid:1) (cid:1)
D f0 :

0

F

.x / D d
.F .x //
dx
D f1 C 2f2x C 3f3x 2 C 4f4x 3 C (cid:1) (cid:1) (cid:1)

0

.0/ D f1 ;

F

9“mcs-ftl” — 2010/9/8 — 0:40 — page 364 — #370

Chapter 12 Generating Functions

as desired. Taking second derivatives, we ﬁnd that
0
00
.x / D d
.x //
.F
dx
D 2f2 C 3 (cid:1) 2f3x C 4 (cid:1) 3f4x 2 C (cid:1) (cid:1) (cid:1)

F

and so

which means that

00

F

.0/ D 2f2 ;
00

f2 D F

.0/

:

2
In general,
F .n/ D nŠfn C .n C 1/ŠfnC1x C .n C 2/Š
C .n C k /Š
2
fnCk x k C (cid:1) (cid:1) (cid:1)
k Š

fnC2x 2 C (cid:1) (cid:1) (cid:1)

and so

and

F .n/ .0/ D nŠfn

fn D F .n/ .0/
nŠ

;

*
as claimed.
This means that

0

F .0/; F

.0/;

00

F

.0/

2Š

F

;

000

.0/

3Š

; : : : ;

F .n/ .0/
nŠ

; : : :

+

 ! F .x /:

(12.4)

The sequence on the left-hand side of Equation 12.4 gives the well-known Taylor
Series expansion for a function
.0/x C F
F .x / D F .0/ C F

x n C (cid:1) (cid:1) (cid:1) :

x 2 C F

.0/

.0/

0

x 3 C (cid:1) (cid:1) (cid:1) C F .n/ .0/
nŠ

000

3Š

00

2Š

12.4.2 Examples
Let’s try this out on a familiar example:
F .x / D 1
1 (cid:0) x

:

10“mcs-ftl” — 2010/9/8 — 0:40 — page 365 — #371

12.4. Extracting Coefﬁcients

F

F
00

F
000

Computing derivatives, we ﬁnd that
0
.x / D
1
.1 (cid:0) x /2 ;
.x / D
2
.1 (cid:0) x /3 ;
.x / D 2 (cid:1) 3
.1 (cid:0) x /4 ;
:::
F .n/ D
nŠ
.1 (cid:0) x /nC1 :
This means that the coefﬁcient of x n in 1=.1 (cid:0) x / is
D
F .n/ .0/
nŠ
nŠ .1 (cid:0) 0/nC1
nŠ
In other words, we have reconﬁrmed what we already knew; namely, that
D 1 C x C x 2 C (cid:1) (cid:1) (cid:1) :

D 1:

1
1 (cid:0) x
Using a similar approach, we can establish some other well-known series:
ex D 1 C x C x 2
C x 3
C (cid:1) (cid:1) (cid:1) C x n
C (cid:1) (cid:1) (cid:1) ;
nŠ
3Š
2Š
x n C (cid:1) (cid:1) (cid:1) ;
x 3 C (cid:1) (cid:1) (cid:1) C an
x 2 C a3
eax D 1 C ax C a2
2Š
3Š
nŠ
x n (cid:0) (cid:1) (cid:1) (cid:1) :
x 3 (cid:0) (cid:1) (cid:1) (cid:1) (cid:0) an
x 2 (cid:0) a3
ln.1 (cid:0) x / D (cid:0)ax (cid:0) a2
2
3
n
But what about the series for
F .x / D x .1 C x /
.1 (cid:0) x /4 ‹
sn D nX
In particular, we need to know the coefﬁcient of x n in F .x / to determine
i D0
While it is theoretically possible to compute the nth derivative of F .x /, the result
is a bloody mess. Maybe these generating functions weren’t such a great idea after
all. . . .

(12.5)

i 2 :

11“mcs-ftl” — 2010/9/8 — 0:40 — page 366 — #372

Chapter 12 Generating Functions

(12.6)

12.4.3 Massage Helps
In times of stress, a little massage can often help relieve the tension. The same is
true for polynomials with painful derivatives. For example, let’s take a closer look
at Equation 12.5. If we massage it a little bit, we ﬁnd that
F .x / D x C x 2
C x 2
D
x
.1 (cid:0) x /4 :
.1 (cid:0) x /4
.1 (cid:0) x /4
The goal is to ﬁnd the coefﬁcient of x n in F .x /. If you stare at Equation 12.6 long
enough (or if you combine the Right-Shift Rule with the Addition Rule), you will
notice that the coefﬁcient of x n in F .x / is just the sum of
the coefﬁcient of x n(cid:0)1 in
1
.1 (cid:0) x /4 and
the coefﬁcient of x n(cid:0)2 in
1
.1 (cid:0) x /4 :
Maybe there is some hope after all. Let’s see if we can produce the coefﬁcients
for 1=.1 (cid:0) x /4 . We’ll start by looking at the derivatives:
0
.x / D
4
.1 (cid:0) x /5 ;
.x / D 4 (cid:1) 5
.1 (cid:0) x /6 ;
.x / D 4 (cid:1) 5 (cid:1) 6
.1 (cid:0) x /7 ;
:::
F .n/ .x / D .n C 3/Š
6.1 (cid:0) x /nC4 :
This means that the nth coefﬁcient of 1=.1 (cid:0) x /4 is
D .n C 3/Š
D .n C 3/.n C 2/.n C 1/
F .n/ .0/
(12.7)
:
nŠ
6 nŠ
6
We are now almost done. Equation 12.7 means that the coefﬁcient of x n(cid:0)1
in 1=.1 (cid:0) x /4 is
.n C 2/.n C 1/n
6

F
000

(12.8)

F
00

F

12“mcs-ftl” — 2010/9/8 — 0:40 — page 367 — #373

12.4. Extracting Coefﬁcients
and the coefﬁcient2 of x n(cid:0)2 is

:

:

(12.9)

.n C 1/n.n (cid:0) 1/
6
nX
Adding these values produces the desired sum
C .n C 1/n.n (cid:0) 1/
i 2 D .n C 2/.n C 1/n
i D0
6
6
D .2n C 1/.n C 1/n
6
This matches Equation 9.14 from Chapter 9. Using generating functions to get the
result may have seemed to be more complicated, but at least there was no need for
guessing or solving a linear system of equations over 4 variables.
You might argue that the massage step was a little tricky. After all, how were you
supposed to know that by converting F .x / into the form shown in Equation 12.6,
it would be sufﬁcient to compute derivatives of 1=.1 (cid:0) x /4 , which is easy, instead
of derivatives of x .1 C x /=.1 (cid:0) x /4 , which could be harder than solving a 64-disk
Tower of Hanoi problem step-by-step?
The good news is that this sort of massage works for any generating function
that is a ratio of polynomials. Even better, you probably already know how to do it
from calculus—it’s the method of partial fractions!

12.4.4 Partial Fractions
The idea behind partial fractions is to express a ratio of polynomials as a sum of a
polynomial and terms of the form

cx a
.1 (cid:0) ˛x /b
(12.10)
where a and b are integers and b > a (cid:21) 0. That’s because it is easy to com-
pute derivatives of 1=.1 (cid:0) ˛x /b and thus it is easy to compute the coefﬁcients of
Equation 12.10. Let’s see why.
Lemma 12.4.2. If b 2 NC , then the nth derivative of 1=.1 (cid:0) ˛x /b is
.n C b (cid:0) 1/Š ˛n
.b (cid:0) 1/Š .1 (cid:0) ˛x /bCn
2To be precise, Equation 12.8 holds for n (cid:21) 1 and Equation 12.9 holds for n (cid:21) 2. But since
Equation 12.8 is 0 for n D 1 and Equation 12.9 is 0 for n D 1; 2, both equations hold for all n (cid:21) 0.

:

13“mcs-ftl” — 2010/9/8 — 0:40 — page 368 — #374

Chapter 12 Generating Functions

Proof. The proof is by induction on n. The induction hypothesis P .n/ is the state-
ment of the lemma.
Base case (n D 1): The ﬁrst derivative is

This matches

:

b˛
.1 (cid:0) ˛x /bC1
.1 C b (cid:0) 1/Š ˛1
.b (cid:0) 1/Š .1 (cid:0) ˛x /bC1

D

b˛
.1 (cid:0) ˛x /bC1

;

and so P .1/ is true.
Induction step: We next assume P .n/ to prove P .n C 1/ for n (cid:21) 1. P .n/ implies
that the nth derivative of 1=.1 (cid:0) ˛x /b is
.n C b (cid:0) 1/Š ˛n
.b (cid:0) 1/Š .1 (cid:0) ˛x /bCn
:
Taking one more derivative reveals that the .n C 1/st derivative is
.n C b /Š ˛nC1
.n C b (cid:0) 1/Š .b C n/˛nC1
D
.b (cid:0) 1/Š .1 (cid:0) ˛x /bCnC1
.b (cid:0) 1/Š .1 (cid:0) ˛x /bCnC1
;
which means that P .n C 1/ is true. Hence, the induction is complete.
(cid:4)
Corollary 12.4.3. If a; b 2 N and b > a (cid:21) 0, then for any n (cid:21) a, the coefﬁcient
of x n in

is

cx a
.1 (cid:0) ˛x /b
c .n (cid:0) a C b (cid:0) 1/Š ˛n(cid:0)a
.n (cid:0) a/Š .b (cid:0) 1/Š
Proof. By the Taylor Series Rule, the nth coefﬁcient of

:

1
.1 (cid:0) ˛x /b
is the nth derivative of this expression evaluated at x D 0 and then divided by nŠ.
By Lemma 12.4.2, this is
D .n C b (cid:0) 1/Š ˛n
.n C b (cid:0) 1/Š ˛n
nŠ .b (cid:0) 1/Š
nŠ .b (cid:0) 1/Š .1 (cid:0) 0/bCn

:

14“mcs-ftl” — 2010/9/8 — 0:40 — page 369 — #375

12.4. Extracting Coefﬁcients

By the Scaling Rule and the Right-Shift Rule, the coefﬁcient of x n in
cx ˛
.1 (cid:0) ˛x /b
c .n (cid:0) a C b (cid:0) 1/Š ˛n(cid:0)a
.n (cid:0) a/Š .b (cid:0) 1/Š

is thus

:

as claimed.

(cid:4)

:

(12.11)

:

Massaging a ratio of polynomials into a sum of a polynomial and terms of the
form in Equation 12.10 takes a bit of work but is generally straightforward. We
will show you the process by means of an example.
Suppose our generating function is the ratio
F .x / D 4x 3 C 2x 2 C 3x C 6
2x 3 (cid:0) 3x 2 C 1
The ﬁrst step in massaging F .x / is to get the degree of the numerator to be less than
the degree of the denominator. This can be accomplished by dividing the numerator
by the denominator and taking the remainder, just as in the Fundamental Theorem
of Arithmetic—only now we have polynomials instead of numbers. In this case we
have
4x 3 C 2x 2 C 3x C 6
D 2 C 8x 2 C 3x C 4
2x 3 (cid:0) 3x 2 C 1
2x 3 (cid:0) 3x 2 C 1
The next step is to factor the denominator. This will produce the values of ˛ for
Equation 12.10. In this case,
2x 3 (cid:0) 3x 2 C 1 D .2x C 1/.x 2 (cid:0) 2x C 1/
D .2x C 1/.x (cid:0) 1/2
D .1 (cid:0) x /2 .1 C 2x /:
We next ﬁnd values c1 , c2 , c3 so that
8x 2 C 3x C 4
C c2
D c1
.1 (cid:0) x /2
2x 3 (cid:0) 3x 2 C 1
1 C 2x
This is done by cranking through the algebra:
D c1 .1 (cid:0) x /2 C c2 .1 C 2x / C c3x .1 C 2x /
C c3x
C c2
.1 (cid:0) x /2
.1 (cid:0) x /2
.1 C 2x /.1 (cid:0) x /2
D c1 (cid:0) 2c1x C c1x 2 C c2 C 2c2x C c3x C 2c3x 2
2x 3 (cid:0) 3x 2 C 1
D c1 C c2 C .(cid:0)2c1 C 2c2 C c3 /x C .c1 C 2c3 /x 2
2x 3 (cid:0) 3x 2 C 1

C c3x
.1 (cid:0) x /2 :

c1
1 C 2x

(12.12)

:

15“mcs-ftl” — 2010/9/8 — 0:40 — page 370 — #376

Chapter 12 Generating Functions

For Equation 12.12 to hold, we need
8 D c1 C 2c3 ;
3 D (cid:0)2c1 C 2c2 C c3 ;
4 D c1 C c2 :
Solving these equations, we ﬁnd that c1 D 2, c2 D 2, and c3 D 3. Hence,
F .x / D 4x 3 C 2x 2 C 3x C 6
2x 3 (cid:0) 3x 2 C 1
D 2 C 2
C
C 3x
2
1 C 2x
.1 (cid:0) x /2
.1 (cid:0) x /2 :
Our massage is done! We can now compute the coefﬁcients of F .x / using Corol-
lary 12.4.3 and the Sum Rule. The result is
f0 D 2 C 2 C 2 D 6

and

fn D 2.n (cid:0) 0 C 1 (cid:0) 1/Š .(cid:0)2/n(cid:0)0
.n (cid:0) 0/Š .1 (cid:0) 1/Š
C 2.n (cid:0) 0 C 2 (cid:0) 1/Š .1/n(cid:0)0
.n (cid:0) 0/Š .2 (cid:0) 1/Š
C 3.n (cid:0) 1 C 2 (cid:0) 1/Š .1/n(cid:0)1
.n (cid:0) 1/Š .2 (cid:0) 1/Š
D .(cid:0)1/n2nC1 C 2.n C 1/ C 3n
D .(cid:0)1/n2nC1 C 5n C 2

for n (cid:21) 1.
Aren’t you glad that you know that? Actually, this method turns out to be useful
in solving linear recurrences, as we’ll see in the next section.

12.5 Solving Linear Recurrences

Generating functions can be used to ﬁnd a solution to any linear recurrence. We’ll
show you how this is done by means of a familiar example, the Fibonacci recur-
rence, so that you can more easily understand the similarities and differences of
this approach and the method we showed you in Chapter 10.

16“mcs-ftl” — 2010/9/8 — 0:40 — page 371 — #377

12.5. Solving Linear Recurrences

for n (cid:21) 2:

12.5.1 Finding the Generating Function
Let’s begin by recalling the deﬁnition of the Fibonacci numbers:
f0 D 0
f1 D 1
fn D fn(cid:0)1 C fn(cid:0)2
We can expand the ﬁnal clause into an inﬁnite sequence of equations. Thus, the
Fibonacci numbers are deﬁned by:
f0 D0
f1 D1
f2 Df1 C f0
f3 Df2 C f1
f4 Df3 C f2
:::

The overall plan is to deﬁne a function F .x / that generates the sequence on the
left side of the equality symbols, which are the Fibonacci numbers. Then we derive
a function that generates the sequence on the right side. Finally, we equate the two
and solve for F .x /. Let’s try this. First, we deﬁne:
F .x / D f0 C f1x C f2x 2 C f3x 3 C f4x 4 C (cid:1) (cid:1) (cid:1) :
Now we need to derive a generating function for the sequence:
h0; 1; f1 C f0 ; f2 C f1 ; f3 C f2 ; : : : i :
One approach is to break this into a sum of three sequences for which we know
generating functions and then apply the Addition Rule:
h0;
: : : i  ! x
0;
0;
0;
1;
h0; f0 ;
: : : i  ! xF .x /
f3 ;
f2 ;
f1 ;
C h0;
: : : i  ! x 2F .x /
f2 ;
f1 ;
f0 ;
0;
h0; 1 C f0 ; f1 C f0 ; f2 C f1 ; f3 C f2 ; : : : i  ! x C xF .x / C x 2F .x /
This sequence is almost identical to the right sides of the Fibonacci equations. The
one blemish is that the second term is 1 C f0 instead of simply 1. However, this
amounts to nothing, since f0 D 0 anyway.

17“mcs-ftl” — 2010/9/8 — 0:40 — page 372 — #378

Chapter 12 Generating Functions
If we equate F .x / with the new function x C xF .x / C x 2F .x /, then we’re
implicitly writing down all of the equations that deﬁne the Fibonacci numbers in
one fell swoop:

D f0 C f1
x C
x 2 C
x 3 C (cid:1) (cid:1) (cid:1)
F .x /
f2
f3
Î
Î
Î
Î
Î
x C xF .x / C x 2F .x / D 0 C .1 C f0 /x C .f1 C f0 /x 2 C .f2 C f1 /x 3 C (cid:1) (cid:1) (cid:1)
Solving for F .x / gives the generating function for the Fibonacci sequence:
F .x / D x C xF .x / C x 2F .x /

so

F .x / D
x
1 (cid:0) x (cid:0) x 2 :
This is pretty cool. After all, who would have thought that the Fibonacci numbers
are precisely the coefﬁcients of such a simple function? Even better, this function
is a ratio of polynomials and so we can use the method of partial fractions from
Section 12.4.4 to ﬁnd a closed-form expression for the nth Fibonacci number.

(12.13)

12.5.2 Extracting the Coefﬁcients
Repeated differentiation of Equation 12.13 would be very painful. But it is easy to
use the method of partial fractions to compute the coefﬁcients. Since the degree of
the numerator in Equation 12.13 is less than the degree of the denominator, the ﬁrst
step is to factor the denominator:
1 (cid:0) x (cid:0) x 2 D .1 (cid:0) ˛1x /.1 (cid:0) ˛2x /
where ˛1 D .1 C p
5/=2 and ˛2 D .1 (cid:0) p
5/=2. These are the same as the
roots of the characteristic equation for the Fibonacci recurrence that we found in
Chapter 10. That is not a coincidence.
The next step is to ﬁnd c1 and c2 that satisfy
C c2
D c1
x
1 (cid:0) x (cid:0) x 2
1 (cid:0) ˛1x
1 (cid:0) ˛2x
D c1 .1 (cid:0) ˛2x / C c2 .1 (cid:0) ˛1x /
.1 (cid:0) ˛1x /.1 (cid:0) ˛2x /
D c1 C c2 (cid:0) .c1˛2 C c2˛1 /x
1 (cid:0) x (cid:0) x 2
(cid:0) .c1˛2 C c2˛1 / D 1:

c1 C c2 D 0

Hence,

:

and

18“mcs-ftl” — 2010/9/8 — 0:40 — page 373 — #379

12.5. Solving Linear Recurrences

Solving these equations, we ﬁnd that
D 1p
c1 D
1
˛1 (cid:0) ˛2
5
c2 D (cid:0)1
D (cid:0)1p
˛1 (cid:0) ˛2
5
We can now use Corollary 12.4.3 and the Sum Rule to conclude that
(cid:0) ˛n
fn D ˛n
1p
2p
 
!n!
!n (cid:0)
  
1 C p
5
5
D 1p
5
2
5
This is exactly the same formula we derived for the nth Fibonacci number in Chap-
ter 10.

1 (cid:0) p
2

:

5

:

12.5.3 General Linear Recurrences
The method that we just used to solve the Fibonacci recurrence can also be used to
solve general linear recurrences of the form
fn D a1fn(cid:0)1 C a2fn(cid:0)2 C (cid:1) (cid:1) (cid:1) C ad fn(cid:0)d C gn
for n (cid:21) d . The generating function for hf0 ; f1 ; f2 ; : : : i is
h.x / C G.x /
F .x / D
1 (cid:0) a1x (cid:0) a2x 2 (cid:0) (cid:1) (cid:1) (cid:1) (cid:0) ad x d
d‚ …„ ƒ
where G.x / is the generating function for the sequence
0; 0; : : : ; 0; gd ; gd C1 ; gd C2 ; : : : i
h
and h.x / is a polynomial of degree at most d (cid:0) 1 that is based on the values of f0 ,
h.x / D d (cid:0)1X
f1 , . . . , fd (cid:0)1 . In particular,
i D0
hi D f0 (cid:0) a1fi (cid:0)1 (cid:0) a2fi (cid:0)2 (cid:0) (cid:1) (cid:1) (cid:1) (cid:0) ai f0

where
for 0  i < d .
To solve the recurrence, we use the method of partial fractions described in Sec-
tion 12.4.4 to ﬁnd a closed-form expression for F .x /. This can be easy or hard to
do depending on G.x /.

hi x i

19“mcs-ftl” — 2010/9/8 — 0:40 — page 374 — #380

Chapter 12 Generating Functions

12.6 Counting with Generating Functions

Generating functions are particularly useful for solving counting problems. In par-
ticular, problems involving choosing items from a set often lead to nice generating
functions by letting the coefﬁcient of x n be the number of ways to choose n items.

12.6.1 Choosing Distinct Items from a Set
E  ! (cid:0)k
D(cid:0)k
The generating function for binomial coefﬁcients follows directly from the Bino-
(cid:1)x C (cid:0)k
(cid:1) C (cid:0)k
(cid:1); 0; 0; 0; : : :
(cid:1); : : : ; (cid:0)k
(cid:1); (cid:0)k
(cid:1); (cid:0)k
(cid:1)x 2 C (cid:1) (cid:1) (cid:1) C (cid:0)k
(cid:1)x k
mial Theorem:
0
1
2
k
0
1
2
k
D .1 C x /k
(cid:1), the number of ways to choose n
Thus, the coefﬁcient of x n in .1 C x /k is (cid:0)k
distinct items3 from a set of size k . For example, the coefﬁcient of x 2 is (cid:0)k
(cid:1),
n
2
the number of ways to choose 2 items from a set with k elements. Similarly, the
coefﬁcient of x kC1 is the number of ways to choose k C 1 items from a size k set,
which is zero.

12.6.2 Building Generating Functions that Count
Often we can translate the description of a counting problem directly into a gen-
erating function for the solution. For example, we could ﬁgure out that .1 C x /k
generates the number of ways to select n distinct items from a k -element set with-
out resorting to the Binomial Theorem or even fussing with binomial coefﬁcients!
Let’s see how.
First, consider a single-element set fa1 g. The generating function for the number
of ways to select n elements from this set is simply 1 C x : we have 1 way to select
zero elements, 1 way to select one element, and 0 ways to select more than one
element. Similarly, the number of ways to select n elements from the set fa2 g is
also given by the generating function 1 C x . The fact that the elements differ in the
two cases is irrelevant.
Now here is the main trick: the generating function for choosing elements from
a union of disjoint sets is the product of the generating functions for choosing from
each set. We’ll justify this in a moment, but let’s ﬁrst look at an example. Ac-
cording to this principle, the generating function for the number of ways to select

3Watch out for the reversal of the roles that k and n played in earlier examples; we’re led to this
reversal because we’ve been using n to refer to the power of x in a power series.

20“mcs-ftl” — 2010/9/8 — 0:40 — page 375 — #381

D

D

D 1 C 2x C x 2 :

12.6. Counting with Generating Functions
n elements from the fa1 ; a2 g is:
„ ƒ‚ …
„ ƒ‚ …
„ ƒ‚ …
.1 C x /
(cid:1)
.1 C x /
.1 C x /2
select from fa1 g
select from fa2 g
select from fa1 ; a2 g
Sure enough, for the set fa1 ; a2 g, we have 1 way to select zero elements, 2 ways to
select one element, 1 way to select two elements, and 0 ways to select more than
two elements.
Repeated application of this rule gives the generating function for selecting n
items from a k -element set fa1 ; a2 ; : : : ; ak g:
„ ƒ‚ …
„ ƒ‚ …
„ ƒ‚ …
„ ƒ‚ …
.1 C x /k
.1 C x /
.1 C x /
(cid:1)
.1 C x /
(cid:1) (cid:1) (cid:1)
select from fak g
select from fa2 g
select from fa1 g
select from
fa1 ; a2 ; : : : ; ak g
This is the same generating function that we obtained by using the Binomial Theo-
rem. But this time around, we translated directly from the counting problem to the
generating function.
We can extend these ideas to a general principle:
Rule 12.6.1 (Convolution Rule). Let A.x / be the generating function for selecting
items from set A, and let B.x / be the generating function for selecting items from
set B . If A and B are disjoint, then the generating function for selecting items from
the union A [ B is the product A.x / (cid:1) B.x /.
This rule is rather ambiguous: what exactly are the rules governing the selection
of items from a set? Remarkably, the Convolution Rule remains valid under many
interpretations of selection. For example, we could insist that distinct items be
selected or we might allow the same item to be picked a limited number of times or
any number of times. Informally, the only restrictions are that (1) the order in which
items are selected is disregarded and (2) restrictions on the selection of items from
sets A and B also apply in selecting items from A [ B . (Formally, there must be a
bijection between n-element selections from A [ B and ordered pairs of selections
from A and B containing a total of n elements.)
To count the number of ways to select n items from A [ B , we observe that we
can select n items by choosing j items from A and n (cid:0) j items from B , where j is
any number from 0 to n. This can be done in aj bn(cid:0)j ways. Summing over all the
possible values of j gives a total of
a0bn C a1bn(cid:0)1 C a2bn(cid:0)2 C (cid:1) (cid:1) (cid:1) C anb0
ways to select n items from A [ B . By the Product Rule, this is precisely the
coefﬁcient of x n in the series for A.x /B.x /.

21“mcs-ftl” — 2010/9/8 — 0:40 — page 376 — #382

Chapter 12 Generating Functions

:

(cid:1)

(cid:1) (cid:1) (cid:1)

12.6.3 Choosing Items with Repetition
The ﬁrst counting problem we considered was the number of ways to select a dozen
doughnuts when ﬁve ﬂavors were available. We can generalize this question as
follows: in how many ways can we select n items from a k -element set if we’re
allowed to pick the same item multiple times? In these terms, the doughnut problem
asks how many ways we can select n D 12 doughnuts from the set of k D 5 ﬂavors
fchocolate; lemon-ﬁlled; sugar; glazed; plaing
where, of course, we’re allowed to pick several doughnuts of the same ﬂavor. Let’s
approach this question from a generating functions perspective.
Suppose we make n choices (with repetition allowed) of items from a set con-
taining a single item. Then there is one way to choose zero items, one way to
choose one item, one way to choose two items, etc. Thus, the generating function
for choosing n elements with repetition from a 1-element set is:
h1; 1; 1; 1; : : : i  ! 1 C x C x 2 C x 3 C (cid:1) (cid:1) (cid:1) D 1
1 (cid:0) x
The Convolution Rule says that the generating function for selecting items from
a union of disjoint sets is the product of the generating functions for selecting items
from each set:
1 (cid:0) x„ƒ‚…
1 (cid:0) x„ƒ‚…
1 (cid:0) x„ƒ‚…
„ ƒ‚ …
1
1
1
1
.1 (cid:0) x /k
choose ak ’s
choose a2 ’s
choose a1 ’s
repeatedly choose from
fa1 ; a2 ; : : : ; ak g
Therefore, the generating function for choosing items from a k -element set with
repetition allowed is 1=.1 (cid:0) x /k . Computing derivatives and applying the Taylor
 
!
Series Rule, we can ﬁnd that the coefﬁcient of x n in 1=.1 (cid:0) x /k is
n C k (cid:0) 1
This is the Bookkeeper Rule from Chapter 11—namely there are (cid:0)nCk(cid:0)1
:
n
n
select n items with replication from a set of k items.
12.6.4 Fruit Salad
In this chapter, we have covered a lot of methods and rules for using generating
functions. We’ll now do an example that demonstrates how the rules and methods
can be combined to solve a more challenging problem—making fruit salad.

(cid:1) ways to

D

22“mcs-ftl” — 2010/9/8 — 0:40 — page 377 — #383

12.6. Counting with Generating Functions

In how many ways can we make a salad with n fruits subject to the following
constraints?
(cid:15) The number of apples must be even.
(cid:15) The number of bananas must be a multiple of 5.
(cid:15) There can be at most four oranges.
(cid:15) There can be at most one pear.
For example, there are 7 ways to make a salad with 6 fruits:

Apples
6 4 4 2 2 0 0
Bananas 0 0 0 0 0 5 5
Oranges 0 2 1 4 3 1 0
Pears
0 0 1 0 1 0 1

These constraints are so complicated that the problem seems hopeless! But gener-
ating functions can solve the problem in a straightforward way.
Let’s ﬁrst construct a generating function for choosing apples. We can choose a
set of 0 apples in one way, a set of 1 apple in zero ways (since the number of apples
must be even), a set of 2 apples in one way, a set of 3 apples in zero ways, and so
forth. So we have:

A.x / D 1 C x 2 C x 4 C x 6 C (cid:1) (cid:1) (cid:1) D 1
1 (cid:0) x 2 :
Similarly, the generating function for choosing bananas is:
B.x / D 1 C x 5 C x 10 C x 15 C (cid:1) (cid:1) (cid:1) D 1
1 (cid:0) x 5 :
We can choose a set of 0 oranges in one way, a set of 1 orange in one way, and so
on. However, we can not choose more than four oranges, so we have the generating
function:
O .x / D 1 C x C x 2 C x 3 C x 4 D 1 (cid:0) x 5
1 (cid:0) x
Here we’re using the geometric sum formula. Finally, we can choose only zero or
one pear, so we have:
P .x / D 1 C x :

:

23“mcs-ftl” — 2010/9/8 — 0:40 — page 378 — #384

Chapter 12 Generating Functions

.1 C x /

1 (cid:0) x 5
1 (cid:0) x

The Convolution Rule says that the generating function for choosing from among
all four kinds of fruit is:
A.x /B.x /O .x /P .x / D 1
1
1 (cid:0) x 2
1 (cid:0) x 5
D
1
.1 (cid:0) x /2
D 1 C 2x C 3x 2 C 4x 3 C (cid:1) (cid:1) (cid:1) :
Almost everything cancels! We’re left with 1=.1 (cid:0) x /2 , which we found a power
series for earlier: the coefﬁcient of x n is simply n C 1. Thus, the number of ways
to make a salad with n fruits is just n C 1. This is consistent with the example
we worked out at the start, since there were 7 different salads containing 6 fruits.
Amazing!

24MIT OpenCourseWare
http://ocw.mit.edu 

6.042J / 18.062J Mathematics for Computer Science 
Fall 2010 

For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms . 

