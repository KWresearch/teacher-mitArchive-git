“mcs-ftl” — 2010/9/8 — 0:40 — page 5 — #11

1

Propositions
Deﬁnition. A proposition is a statement that is either true or false.

For example, both of the following statements are propositions. The ﬁrst is true
and the second is false.

Proposition 1.0.1. 2 + 3 = 5.

Proposition 1.0.2. 1 + 1 = 3.

Being true or false doesn’t sound like much of a limitation, but it does exclude
statements such as, “Wherefore art thou Romeo?” and “Give me an A!”.
Unfortunately, it is not always easy to decide if a proposition is true or false, or
even what the proposition means. In part, this is because the English language is
riddled with ambiguities. For example, consider the following statements:

1. “You may have cake, or you may have ice cream.”

2. “If pigs can ﬂy, then you can understand the Chebyshev bound.”

3. “If you can solve any problem we come up with, then you get an A for the
course.”

4. “Every American has a dream.”

What precisely do these sentences mean? Can you have both cake and ice cream
or must you choose just one dessert? If the second sentence is true, then is the
Chebyshev bound incomprehensible? If you can solve some problems we come up
with but not all, then do you get an A for the course? And can you still get an A
even if you can’t solve any of the problems? Does the last sentence imply that all
Americans have the same dream or might some of them have different dreams?
Some uncertainty is tolerable in normal conversation. But when we need to
formulate ideas precisely—as in mathematics and programming—the ambiguities
inherent in everyday language can be a real problem. We can’t hope to make an
exact argument if we’re not sure exactly what the statements mean. So before we
start into mathematics, we need to investigate the problem of how to talk about
mathematics.
To get around the ambiguity of English, mathematicians have devised a special
mini-language for talking about logical relationships. This language mostly uses
ordinary English words and phrases such as “or”, “implies”, and “for all”. But

1“mcs-ftl” — 2010/9/8 — 0:40 — page 6 — #12

Chapter 1 Propositions

mathematicians endow these words with deﬁnitions more precise than those found
in an ordinary dictionary. Without knowing these deﬁnitions, you might sometimes
get the gist of statements in this language, but you would regularly get misled about
what they really meant.
Surprisingly, in the midst of learning the language of mathematics, we’ll come
across the most important open problem in computer science—a problem whose
solution could change the world.

1.1 Compound Propositions

In English, we can modify, combine, and relate propositions with words such as
“not”, “and”, “or”, “implies”, and “if-then”. For example, we can combine three
propositions into one like this:

If all humans are mortal and all Greeks are human, then all Greeks are mortal.

For the next while, we won’t be much concerned with the internals of propositions—
whether they involve mathematics or Greek mortality—but rather with how propo-
sitions are combined and related. So we’ll frequently use variables such as P and
Q in place of speciﬁc propositions such as “All humans are mortal” and “2 C 3 D
5”. The understanding is that these variables, like propositions, can take on only
the values T (true) and F (false). Such true/false variables are sometimes called
Boolean variables after their inventor, George—you guessed it—Boole.

1.1.1 NOT, AND, and OR
We can precisely deﬁne these special words using truth tables. For example, if
P denotes an arbitrary proposition, then the truth of the proposition “NOT.P /” is
deﬁned by the following truth table:

P NOT.P /
F
T
F
T

The ﬁrst row of the table indicates that when proposition P is true, the proposition
“NOT.P /” is false. The second line indicates that when P is false, “NOT.P /” is
true. This is probably what you would expect.
In general, a truth table indicates the true/false value of a proposition for each
possible setting of the variables. For example, the truth table for the proposition

2“mcs-ftl” — 2010/9/8 — 0:40 — page 7 — #13

1.1. Compound Propositions

“P AND Q” has four lines, since the two variables can be set in four different ways:

P Q P AND Q
T
T T
T F
F
F
F T
F F
F

According to this table, the proposition “P AND Q” is true only when P and Q are
both true. This is probably the way you think about the word “and.”
There is a subtlety in the truth table for “P OR Q”:

P Q P OR Q
T
T T
T
T F
F T
T
F
F F

The third row of this table says that “P OR Q” is true even if both P and Q are
true. This isn’t always the intended meaning of “or” in everyday speech, but this is
the standard deﬁnition in mathematical writing. So if a mathematician says, “You
may have cake, or you may have ice cream,” he means that you could have both.
If you want to exclude the possibility of both having and eating, you should use
“exclusive-or” (XOR):

P Q P XOR Q
F
T T
T F
T
F T
T
F
F F

IM PL IE S

1.1.2
The least intuitive connecting word is “implies.” Here is its truth table, with the
lines labeled so we can refer to them later.

P Q P IM P L I E S Q
T
T T
F
T F
T
F T
T
F F

(tt)
(tf)
(ft)
(ff)

Let’s experiment with this deﬁnition. For example, is the following proposition
true or false?

3“mcs-ftl” — 2010/9/8 — 0:40 — page 8 — #14

Chapter 1 Propositions
“If the Riemann Hypothesis is true, then x 2 (cid:21) 0 for every real number x .”
The Riemann Hypothesis is a famous unresolved conjecture in mathematics —no
one knows if it is true or false. But that doesn’t prevent you from answering the
question! This proposition has the form P IM P L I E S Q where the hypothesis, P , is
“the Riemann Hypothesis is true” and the conclusion, Q, is “x 2 (cid:21) 0 for every real
number x ”. Since the conclusion is deﬁnitely true, we’re on either line (tt) or line
(ft) of the truth table. Either way, the proposition as a while is true!
One of our original examples demonstrates an even stranger side of implications.
“If pigs can ﬂy, then you can understand the Chebyshev bound.”
Don’t take this as an insult; we just need to ﬁgure out whether this proposition is
true or false. Curiously, the answer has nothing to do with whether or not you can
understand the Chebyshev bound. Pigs cannot ﬂy, so we’re on either line (ft) or
line (ff) of the truth table. In both cases, the proposition is true!
In contrast, here’s an example of a false implication:
“If the moon shines white, then the moon is made of white cheddar.”
Yes, the moon shines white. But, no, the moon is not made of white cheddar cheese.
So we’re on line (tf) of the truth table, and the proposition is false.
The truth table for implications can be summarized in words as follows:
An implication is true exactly when the if-part is false or the then-part is true.
This sentence is worth remembering; a large fraction of all mathematical statements
are of the if-then form!

1.1.3
IFF
Mathematicians commonly join propositions in one additional way that doesn’t
arise in ordinary speech. The proposition “P if and only if Q” asserts that P and
Q are logically equivalent; that is, either both are true or both are false.

P Q P I FF Q
T
T T
F
T F
F T
F
F F
T
For example, the following if-and-only-if statement is true for every real number
x 2 (cid:0) 4 (cid:21) 0 iff
jx j (cid:21) 2
For some values of x , both inequalities are true. For other values of x , neither
inequality is true . In every case, however, the proposition as a whole is true.

x :

4“mcs-ftl” — 2010/9/8 — 0:40 — page 9 — #15

1.1. Compound Propositions

1.1.4 Notation
Mathematicians have devised symbols to represent words like “AND” and “NOT”.
The most commonly-used symbols are summarized in the table below.

English

Symbolic Notation
:P
(alternatively, P )
NOT.P /
P ^ Q
P AND Q
P _ Q
P OR Q
P IM P L I E S Q P (cid:0)! Q
P (cid:0)! Q
if P then Q
P  ! Q
P I FF Q
For example, using this notation, “If P AND NOT.Q/, then R” would be written:
.P ^ Q/ (cid:0)! R

This symbolic language is helpful for writing complicated logical expressions com-
pactly. But words such as “OR” and “IM P L I E S” generally serve just as well as the
symbols _ and (cid:0)!, and their meaning is easy to remember. We will use the prior
notation for the most part in this text, but you can feel free to use whichever con-
vention is easiest for you.

1.1.5 Logically Equivalent Implications
Do these two sentences say the same thing?

If I am hungry, then I am grumpy.
If I am not grumpy, then I am not hungry.

We can settle the issue by recasting both sentences in terms of propositional logic.
Let P be the proposition “I am hungry”, and let Q be “I am grumpy”. The ﬁrst
sentence says “P IM P L I E S Q” and the second says “NOT.Q/ IM P L I E S NOT.P /”.
We can compare these two statements in a truth table:

P Q P IM P L I E S Q NOT.Q/ IM P L I E S NOT.P /
T T
T
T
F
F
T F
T
T
F T
F F
T
T

Sure enough, the columns of truth values under these two statements are the same,
which precisely means they are equivalent. In general, “NOT.Q/ IM P L I E S NOT.P /”

5“mcs-ftl” — 2010/9/8 — 0:40 — page 10 — #16

Chapter 1 Propositions

is called the contrapositive of the implication “P IM P L I E S Q.” And, as we’ve just
shown, the two are just different ways of saying the same thing.
In contrast, the converse of “P IM P L I E S Q” is the statement “Q IM P L I E S P ”.
In terms of our example, the converse is:

If I am grumpy, then I am hungry.

This sounds like a rather different contention, and a truth table conﬁrms this suspi-
cion:

P Q P IM P L I E S Q Q IM P L I E S P
T
T
T T
T F
T
F
F T
T
F
F F
T
T
Thus, an implication is logically equivalent to its contrapositive but is not equiva-
lent to its converse.
One ﬁnal relationship: an implication and its converse together are equivalent to
an iff statement. For example,

If I am grumpy, then I am hungry, AND
if I am hungry, then I am grumpy.

are equivalent to the single statement:

I am grumpy I FF I am hungry.

Once again, we can verify this with a truth table:

P Q .P IM P L I E S Q/
T T
T
F
T F
T
F T
F F
T

.Q IM P L I E S P /
T
T
F
T

.P IM P L I E S Q/ AND .Q IM P L I E S P / P I FF Q
T
T
F
F
F
F
T
T

1.2 Propositional Logic in Computer Programs

Propositions and logical connectives arise all the time in computer programs. For
example, consider the following snippet, which could be either C, C++, or Java:

if ( x > 0 || (x <= 0 && y > 100) )
:::
(further instructions)

6“mcs-ftl” — 2010/9/8 — 0:40 — page 11 — #17

1.3. Predicates and Quantiﬁers

The symbol || denotes “OR”, and the symbol && denotes “AND”. The further
instructions are carried out only if the proposition following the word if is true.
On closer inspection, this big expression is built from two simpler propositions.
Let A be the proposition that x > 0, and let B be the proposition that y > 100.
Then we can rewrite the condition “A OR .NOT.A/ AND B /”. A truth table reveals
that this complicated expression is logically equivalent to “A OR B ”.

A B A OR .NOT.A/ AND B / A OR B
T
T
T T
T
T
T F
T
T
F T
F F
F
F

This means that we can simplify the code snippet without changing the program’s
behavior:

if ( x > 0 || y > 100 )
:::
(further instructions)

Rewriting a logical expression involving many variables in the simplest form
is both difﬁcult and important. Simplifying expressions in software can increase
the speed of your program. Chip designers face a similar challenge—instead of
minimizing && and || symbols in a program, their job is to minimize the number
of analogous physical devices on a chip. The payoff is potentially enormous: a chip
with fewer devices is smaller, consumes less power, has a lower defect rate, and is
cheaper to manufacture.

1.3 Predicates and Quantiﬁers

1.3.1 Propositions with Inﬁnitely Many Cases
Most of the examples of propositions that we have considered thus far have been
straightforward in the sense that it has been relatively easy to determine if they
are true or false. At worse, there were only a few cases to check in a truth table.
Unfortunately, not all propositions are so easy to check. That is because some
propositions may involve a large or inﬁnite number of possible cases. For example,
consider the following proposition involving prime numbers. (A prime is an integer
greater than 1 that is divisible only by itself and 1. For example, 2, 3, 5, 7, and 11

7“mcs-ftl” — 2010/9/8 — 0:40 — page 12 — #18

Chapter 1 Propositions

are primes, but 4, 6, and 9 are not. A number greater than 1 that is not prime is said
to be composite.)
Proposition 1.3.1. For every nonnegative integer, n, the value of n2 C n C 41 is
prime.

(1.1)

It is not immediately clear whether this proposition is true or false.
In such
circumstances, it is tempting to try to determine its veracity by computing the value
of1
p .n/ WWD n2 C n C 41:
for several values of n and then checking to see if they are prime. If any of the
computed values is not prime, then we will know that the proposition is false. If all
the computed values are indeed prime, then we might be tempted to conclude that
the proposition is true.
We begin the checking by evaluating p .0/ D 41, which is prime. p .1/ D 43 is
also prime. So is p .2/ D 47, p .3/ D 53, . . . , and p .20/ D 461, all of which are
prime. Hmmm. . . It is starting to look like p .n/ is a prime for every nonnegative
integer n. In fact, continued checking reveals that p .n/ is prime for all n  39.
The proposition certainly does seem to be true.
But p .40/ D 402 C 40 C 41 D 41 (cid:1) 41, which is not prime. So it’s not true
that the expression is prime for all nonnegative integers, and thus the proposition is
false!
Although surprising, this example is not as contrived or rare as you might sus-
pect. As we will soon see, there are many examples of propositions that seem to be
true when you check a few cases (or even many), but which turn out to be false. The
key to remember is that you can’t check a claim about an inﬁnite set by checking a
ﬁnite set of its elements, no matter how large the ﬁnite set.
Propositions that involve all numbers are so common that there is a special no-
tation for them. For example, Proposition 1.3.1 can also be written as
8n 2 N: p .n/ is prime:
(1.2)
Here the symbol 8 is read “for all”. The symbol N stands for the set of nonnegative
integers, namely, 0, 1, 2, 3, . . . (ask your instructor for the complete list). The
symbol “2” is read as “is a member of,” or “belongs to,” or simply as “is in”. The
period after the N is just a separator between phrases.
Here is another example of a proposition that, at ﬁrst, seems to be true but which
turns out to be false.
1The symbol WWD means “equal by deﬁnition.” It’s always ok to simply write “=” instead of WWD,
but reminding the reader that an equality holds by deﬁnition can be helpful.

8“mcs-ftl” — 2010/9/8 — 0:40 — page 13 — #19

1.3. Predicates and Quantiﬁers
Proposition 1.3.2. a4 C b 4 C c 4 D d 4 has no solution when a; b; c ; d are positive
integers.

Euler (pronounced “oiler”) conjectured this proposition to be true in 1769. It
was checked by humans and then by computers for many values of a, b , c , and d
over the next two centuries. Ultimately the proposition was proven false in 1987
by Noam Elkies. The solution he found was a D 95800; b D 217519; c D
414560; d D 422481. No wonder it took 218 years to show the proposition is
false!
In logical notation, Proposition 1.3.2 could be written,
8a 2 ZC 8b 2 ZC 8c 2 ZC 8d 2 ZC
: a4 C b 4 C c 4 ¤ d 4 :
Here, ZC is a symbol for the positive integers. Strings of 8’s are usually abbrevi-
ated for easier reading, as follows:
8a; b; c ; d 2 ZC

: a4 C b 4 C c 4 ¤ d 4 :

The following proposition is even nastier.
Proposition 1.3.3. 313.x 3 C y 3 / D z 3 has no solution when x ; y ; z 2 ZC .
This proposition is also false, but the smallest counterexample values for x , y ,
and z have more than 1000 digits! Even the world’s largest computers would not be
able to get that far with brute force. Of course, you may be wondering why anyone
would care whether or not there is a solution to 313.x 3 C y 3 / D z 3 where x , y ,
and z are positive integers. It turns out that ﬁnding solutions to such equations is
important in the ﬁeld of elliptic curves, which turns out to be important to the study
of factoring large integers, which turns out (as we will see in Chapter 4) to be im-
portant in cracking commonly-used cryptosystems, which is why mathematicians
went to the effort to ﬁnd the solution with thousands of digits.
Of course, not all propositions that have inﬁnitely many cases to check turn out
to be false. The following proposition (known as the “Four-Color Theorem”) turns
out to be true.

Proposition 1.3.4. Every map can be colored with 4 colors so that adjacent2 re-
gions have different colors.

The proof of this proposition is difﬁcult and took over a century to perfect. Along
the way, many incorrect proofs were proposed, including one that stood for 10 years

2Two regions are adjacent only when they share a boundary segment of positive length. They are
not considered to be adjacent if their boundaries meet only at a few points.

9“mcs-ftl” — 2010/9/8 — 0:40 — page 14 — #20

Chapter 1 Propositions

in the late 19th century before the mistake was found. An extremely laborious
proof was ﬁnally found in 1976 by mathematicians Appel and Haken, who used a
complex computer program to categorize the four-colorable maps; the program left
a few thousand maps uncategorized, and these were checked by hand by Haken and
his assistants—including his 15-year-old daughter. There was a lot of debate about
whether this was a legitimate proof: the proof was too big to be checked without a
computer, and no one could guarantee that the computer calculated correctly, nor
did anyone have the energy to recheck the four-colorings of the thousands of maps
that were done by hand. Within the past decade, a mostly intelligible proof of the
Four-Color Theorem was found, though a computer is still needed to check the
colorability of several hundred special maps.3
In some cases, we do not know whether or not a proposition is true. For exam-
ple, the following simple proposition (known as Goldbach’s Conjecture) has been
heavily studied since 1742 but we still do not know if it is true. Of course, it has
been checked by computer for many values of n, but as we have seen, that is not
sufﬁcient to conclude that it is true.
Proposition 1.3.5 (Goldbach). Every even integer n greater than 2 is the sum of
two primes.

While the preceding propositions are important in mathematics, computer scien-
tists are often interested in propositions concerning the “correctness” of programs
and systems, to determine whether a program or system does what it’s supposed
to do. Programs are notoriously buggy, and there’s a growing community of re-
searchers and practitioners trying to ﬁnd ways to prove program correctness. These
efforts have been successful enough in the case of CPU chips that they are now
routinely used by leading chip manufacturers to prove chip correctness and avoid
mistakes like the notorious Intel division bug in the 1990’s.
Developing mathematical methods to verify programs and systems remains an
active research area. We’ll consider some of these methods later in the text.

1.3.2 Predicates
A predicate is a proposition whose truth depends on the value of one or more vari-
ables. Most of the propositions above were deﬁned in terms of predicates. For
example,

“n is a perfect square”

3See http://www.math.gatech.edu/˜thomas/FC/fourcolor.html
The story of the Four-Color Proof is told in a well-reviewed popular (non-technical) book: “Four
Colors Sufﬁce. How the Map Problem was Solved.” Robin Wilson. Princeton Univ. Press, 2003,
276pp. ISBN 0-691-11533-8.

10“mcs-ftl” — 2010/9/8 — 0:40 — page 15 — #21

1.3. Predicates and Quantiﬁers
is a predicate whose truth depends on the value of n. The predicate is true for n D 4
since four is a perfect square, but false for n D 5 since ﬁve is not a perfect square.
Like other propositions, predicates are often named with a letter. Furthermore, a
function-like notation is used to denote a predicate supplied with speciﬁc variable
values. For example, we might name our earlier predicate P :
P .n/ WWD “n is a perfect square”
Now P .4/ is true, and P .5/ is false.
This notation for predicates is confusingly similar to ordinary function notation.
If P is a predicate, then P .n/ is either true or false, depending on the value of n.
On the other hand, if p is an ordinary function, like n2 C n, then p .n/ is a numerical
quantity. Don’t confuse these two!

1.3.3 Quantiﬁers
There are a couple of assertions commonly made about a predicate: that it is some-
times true and that it is always true. For example, the predicate
“x 2 (cid:21) 0”
is always true when x is a real number. On the other hand, the predicate
is only sometimes true; speciﬁcally, when x D ˙p
“5x 2 (cid:0) 7 D 0”
7=5.
There are several ways to express the notions of “always true” and “sometimes
true” in English. The table below gives some general formats on the left and speciﬁc
examples using those formats on the right. You can expect to see such phrases
hundreds of times in mathematical writing!

For all n, P .n/ is true.
P .n/ is true for every n.

Always True
For all x 2 R, x 2 (cid:21) 0.
x 2 (cid:21) 0 for every x 2 R.
Sometimes True
There exists an n such that P .n/ is true. There exists an x 2 R such that 5x 2 (cid:0) 7 D 0.
5x 2 (cid:0) 7 D 0 for some x 2 R.
P .n/ is true for some n.
5x 2 (cid:0) 7 D 0 for at least one x 2 R.
P .n/ is true for at least one n.
All these sentences quantify how often the predicate is true. Speciﬁcally, an
assertion that a predicate is always true, is called a universally quantiﬁed statement.

11“mcs-ftl” — 2010/9/8 — 0:40 — page 16 — #22

Chapter 1 Propositions

An assertion that a predicate is sometimes true, is called an existentially quantiﬁed
statement.
Sometimes English sentences are unclear about quantiﬁcation:

“If you can solve any problem we come up with, then you get an A for the course.”

The phrase “you can solve any problem we can come up with” could reasonably be
interpreted as either a universal or existential statement. It might mean:

“You can solve every problem we come up with,”

or maybe

“You can solve at least one problem we come up with.”

In the preceding example, the quantiﬁed phrase appears inside a larger if-then
statement. This is quite normal; quantiﬁed statements are themselves propositions
and can be combined with AND, OR, IM P L I E S, etc., just like any other proposition.

1.3.4 More Notation
There are symbols to represent universal and existential quantiﬁcation, just as there
are symbols for “AND” (^), “IM P L I E S” ((cid:0)!), and so forth. In particular, to say
that a predicate, P .x /, is true for all values of x in some set, D , we write:
8x 2 D: P .x /
(1.3)
The universal quantiﬁer symbol 8 is read “for all,” so this whole expression (1.3)
is read “For all x in D , P .x / is true.” Remember that upside-down “A” stands for
“All.”
To say that a predicate P .x / is true for at least one value of x in D , we write:
9x 2 D: P .x /
(1.4)
The existential quantiﬁer symbol 9, is read “there exists.” So expression (1.4) is
read, “There exists an x in D such that P .x / is true.” Remember that backward
“E” stands for “Exists.”
The symbols 8 and 9 are always followed by a variable—typically with an in-
dication of the set the variable ranges over—and then a predicate, as in the two
examples above.
As an example, let Probs be the set of problems we come up with, Solves.x / be
the predicate “You can solve problem x ”, and G be the proposition, “You get an A
for the course.” Then the two different interpretations of

12“mcs-ftl” — 2010/9/8 — 0:40 — page 17 — #23

1.3. Predicates and Quantiﬁers

“If you can solve any problem we come up with, then you get an A for
the course.”

can be written as follows:
.8x 2 Probs: Solves.x // IM P L I E S G;

or maybe

.9x 2 Probs: Solves.x // IM P L I E S G:
1.3.5 Mixing Quantiﬁers
Many mathematical statements involve several quantiﬁers. For example, Gold-
bach’s Conjecture states:

“Every even integer greater than 2 is the sum of two primes.”

Let’s write this more verbosely to make the use of quantiﬁcation clearer:

For every even integer n greater than 2, there exist primes p and q such
that n D p C q .
Let Evens be the set of even integers greater than 2, and let Primes be the set of
„
ƒ‚
…
primes. Then we can write Goldbach’s Conjecture in logic notation as follows:
ƒ‚
…
„
n D p C q :
8n 2 Evens:
9p 2 Primes 9q 2 Primes:
for every even
there exist primes
integer n > 2
p and q such that
The proposition can also be written more simply as
8n 2 Evens: 9p; q 2 Primes: p C q D n:
1.3.6 Order of Quantiﬁers
Swapping the order of different kinds of quantiﬁers (existential or universal) usually
changes the meaning of a proposition. For example, let’s return to one of our initial,
confusing statements:

“Every American has a dream.”

This sentence is ambiguous because the order of quantiﬁers is unclear. Let A be
the set of Americans, let D be the set of dreams, and deﬁne the predicate H .a; d /
to be “American a has dream d .” Now the sentence could mean that there is a
single dream that every American shares:
9 d 2 D: 8a 2 A: H .a; d /

13“mcs-ftl” — 2010/9/8 — 0:40 — page 18 — #24

Chapter 1 Propositions

For example, it might be that every American shares the dream of owning their own
home.
Or it could mean that every American has a personal dream:
8a 2 A: 9 d 2 D: H .a; d /

For example, some Americans may dream of a peaceful retirement, while others
dream of continuing practicing their profession as long as they live, and still others
may dream of being so rich they needn’t think at all about work.
Swapping quantiﬁers in Goldbach’s Conjecture creates a patently false state-
ment; namely that every even number (cid:21) 2 is the sum of the same two primes:
„
ƒ‚
…
ƒ‚
„
…
9 p; q 2 Primes:
n D p C q :
8n 2 Evens:
for every even
there exist primes
integer n > 2
p and q such that

1.3.7 Variables Over One Domain
When all the variables in a formula are understood to take values from the same
nonempty set, D , it’s conventional to omit mention of D . For example, instead of
8x 2 D 9y 2 D: Q.x ; y / we’d write 8x9y : Q.x ; y /. The unnamed nonempty
set that x and y range over is called the domain of discourse, or just plain domain,
of the formula.
It’s easy to arrange for all the variables to range over one domain. For exam-
ple, Goldbach’s Conjecture could be expressed with all variables ranging over the
domain N as
8n: .n 2 Evens/ IM P L I E S .9p 9q : p 2 Primes AND q 2 Primes AND n D p C q /:
1.3.8 Negating Quantiﬁers
There is a simple relationship between the two kinds of quantiﬁers. The following
two sentences mean the same thing:

It is not the case that everyone likes to snowboard.
There exists someone who does not like to snowboard.

In terms of logic notation, this follows from a general property of predicate formu-
las:
NOT .8x : P .x //
is equivalent to 9x : NOT.P .x //:
Similarly, these sentences mean the same thing:

14“mcs-ftl” — 2010/9/8 — 0:40 — page 19 — #25

1.4. Validity

There does not exist anyone who likes skiing over magma.
Everyone dislikes skiing over magma.
We can express the equivalence in logic notation this way:
NOT .9x : P .x // I FF 8x : NOT.P .x //:
The general principle is that moving a “not” across a quantiﬁer changes the kind
of quantiﬁer.

(1.5)

1.4 Validity

A propositional formula is called valid when it evaluates to T no matter what truth
values are assigned to the individual propositional variables. For example, the
propositional version of the Distributive Law is that P AND .Q OR R/ is equiv-
alent to .P AND Q/ OR .P AND R/. This is the same as saying that

ŒP AND .Q OR R/ I FF Œ.P AND Q/ OR .P AND R/

(1.6)

is valid. This can be veriﬁed by checking the truth table for P AND .Q OR R/ and
.P AND Q/ OR .P AND R/:

P Q R P AND .Q OR R/
.P AND Q/ OR .P AND R/
T
T T T
T
T
T T F
T
T
T F T
T
T F F
F
F
F
F T T
F
F T F
F
F
F F T
F
F
F F F
F
F
The same idea extends to predicate formulas, but to be valid, a formula now must
evaluate to true no matter what values its variables may take over any unspeciﬁed
domain, and no matter what interpretation a predicate variable may be given. For
example, we already observed that the rule for negating a quantiﬁer is captured by
the valid assertion (1.5).
Another useful example of a valid assertion is
9x8y : P .x ; y / IM P L I E S 8y 9x : P .x ; y /:
Here’s an explanation why this is valid:

(1.7)

15“mcs-ftl” — 2010/9/8 — 0:40 — page 20 — #26

Chapter 1 Propositions

(1.8)

Let D be the domain for the variables and P0 be some binary predi-
cate4 on D . We need to show that if
9x 2 D 8y 2 D: P0 .x ; y /
holds under this interpretation, then so does
8y 2 D 9x 2 D: P0 .x ; y /:
(1.9)
So suppose (1.8) is true. Then by deﬁnition of 9, this means that some
element d0 2 D has the property that
8y 2 D: P0 .d0 ; y /:
By deﬁnition of 8, this means that

P0 .d0 ; d /
is true for all d 2 D . So given any d 2 D , there is an element in D ,
namely, d0 , such that P0 .d0 ; d / is true. But that’s exactly what (1.9)
means, so we’ve proved that (1.9) holds under this interpretation, as
required.

We hope this is helpful as an explanation, although purists would not really want
to call it a “proof.” The problem is that with something as basic as (1.7), it’s hard to
see what more elementary axioms are ok to use in proving it. What the explanation
above did was translate the logical formula (1.7) into English and then appeal to
the meaning, in English, of “for all” and “there exists” as justiﬁcation.
In contrast to (1.7), the formula
8y 9x : P .x ; y / IM P L I E S 9x8y : P .x ; y /:

(1.10)

is not valid. We can prove this by describing an interpretation where the hypoth-
esis, 8y 9x : P .x ; y /, is true but the conclusion, 9x8y : P .x ; y /, is not true. For
example, let the domain be the integers and P .x ; y / mean x > y . Then the hypoth-
esis would be true because, given a value, n, for y we could, for example, choose
the value of x to be n C 1. But under this interpretation the conclusion asserts
that there is an integer that is bigger than all integers, which is certainly false. An
interpretation like this which falsiﬁes an assertion is called a counter model to the
assertion.
4That is, a predicate that depends on two variables.

16“mcs-ftl” — 2010/9/8 — 0:40 — page 21 — #27

1.5. Satisﬁability

1.5 Satisﬁability

A proposition is satisﬁable if some setting of the variables makes the proposition
true. For example, P AND Q is satisﬁable because the expression is true if P is true
or Q is false. On the other hand, P AND P is not satisﬁable because the expression
as a whole is false for both settings of P . But determining whether or not a more
complicated proposition is satisﬁable is not so easy. How about this one?

.P OR Q OR R/ AND .P OR Q/ AND .P OR R/ AND .R OR Q/

The general problem of deciding whether a proposition is satisﬁable is called
SAT. One approach to SAT is to construct a truth table and check whether or not
a T ever appears. But this approach is not very efﬁcient; a proposition with n
variables has a truth table with 2n lines, so the effort required to decide about a
proposition grows exponentially with the number of variables. For a proposition
with just 30 variables, that’s already over a billion lines to check!
Is there a more efﬁcient solution to SAT? In particular, is there some, presum-
ably very ingenious, procedure that determines in a number of steps that grows
polynomially—like n2 or n14—instead of exponentially, whether any given propo-
sition is satisﬁable or not? No one knows. And an awful lot hangs on the answer.
An efﬁcient solution to SAT would immediately imply efﬁcient solutions to many,
many other important problems involving packing, scheduling, routing, and cir-
cuit veriﬁcation, among other things. This would be wonderful, but there would
also be worldwide chaos. Decrypting coded messages would also become an easy
task (for most codes). Online ﬁnancial transactions would be insecure and secret
communications could be read by everyone.
Recently there has been exciting progress on sat-solvers for practical applica-
tions like digital circuit veriﬁcation. These programs ﬁnd satisfying assignments
with amazing efﬁciency even for formulas with millions of variables. Unfortu-
nately, it’s hard to predict which kind of formulas are amenable to sat-solver meth-
ods, and for formulas that are NOT satisﬁable, sat-solvers generally take exponen-
tial time to verify that.
So no one has a good idea how to solve SAT in polynomial time, or how to
prove that it can’t be done—researchers are completely stuck. The problem of
determining whether or not SAT has a polynomial time solution is known as the “P
vs. NP” problem. It is the outstanding unanswered question in theoretical computer
science. It is also one of the seven Millenium Problems: the Clay Institute will
award you $1,000,000 if you solve the P vs. NP problem.

17“mcs-ftl” — 2010/9/8 — 0:40 — page 22 — #28

18MIT OpenCourseWare
http://ocw.mit.edu 

6.042J / 18.062J Mathematics for Computer Science 
Fall 2010 

For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms . 

