6.042/18.062J Mathematics  for  Computer  Science 
Tom  Leighton  and Marten  van  Dijk 

October  1,  2010 

Notes  for  Recitation  7 

1  A  Protocol  for  College  Admission 

Next, we are going to talk about a generalization of the stable marriage problem.  Recall that 
we have  some horses and we’d  like  to pair  them with  stables  so  that  there  is no  incentive  for 
two  horses  to  swap  stables.  Oh  wait,  that’s  a  diﬀerent  problem. 
�M
The  problem  we’re  going  to  talk  about  is  a  generalization  of  the  one  done  in  lecture. 
In  the  new  problem,  there  are  N  students  s1 , s2 , . . . , sN  and  M  universities  u1 , u2 , . . . , uM .
i=1 ni  = N .  Each student 
University ui  has ni  slots for students, and we’re guaranteed that 
ranks  all  universities  (no  ties)  and  each  university  ranks  all  students  (no  ties). 

Design  an  algorithm  to  assign  students  to  universities  with  the  following  properties 

1.  Every  student  is  assigned  to  one  university. 
2.	 ∀i,  ui  gets  assigned  ni  students. 
3.  There  does  not  exist	 si , sj , uk , u�  where  si  is  assigned  to  uk ,  sj  is  assigned  to  u� ,  sj 
prefers  uk  to  u� ,  and  uk  prefers  sj  to  si . 

4.  It  is  student-optimal.  This  means  that  of  all  possible  assignments  satisfying  the  ﬁrst 
three  properties,  the  students  get  their  top  choice  of  university  amongst  these  assign­
ments. 

The  algorithm  will  be  a  slight  modiﬁcation  of  the  mating  algorithm  given  in  lecture.  For 
your  convenience,  we  have  provided  a  copy  of  the mating  algorithm  on  the  next  page. 

Recitation  7 

Each  Day: 

�  Morning: 

2 

–	 Each  girl  stands  on  her  balcony 
–	 Each boy stands under the balcony of his favorite girl whom he has not yet crossed 
oﬀ  his  list  and  serenades.  If  there  are  no  girls  left  on  his  list,  he  stays  home  and 
does  6.042  homework. 

�	 Afternoon: 

–	 Girls  who  have  at  least  one  suitor  say  to  their  favorite  from  among  the  suitors 
that  day:  “Maybe,  come  back  tomorrow.” 
–	 To  the  others,  they  say  “No,  I  will  never marry  you!” 

�  Evening: 

–	 Any  boy  who  hears  “No”  crosses  that  girl  oﬀ  his  list. 

Termination  Condition:  If  there  is  a  day when  every  girl  has  at most  one  suitor, we  stop 
and  each  girl marries  her  current  suitor  (if  any). 

Recitation  7 

Solution.  Each  Day: 

�  Morning: 

3 

–	 Each  university  asks  which  students  are  interested  in  applying. 
–	 Each  student  applies  to  his/her  favorite  university  that  has  not  yet  rejected 
him/her.  If  there  are  no  universities  left  on  the  student’s  list,  the  student  takes 
some  time  oﬀ  to  think  about  life,  the  future,  and  the  unchangeable  past. 

�	 Afternoon: 

–	 Universities  ui  do  the  following: 
–	 ui  tells its favorite ni  applicants “Maybe, we are still processing your application.” 
If  ui  has  less  than  ni  applicants,  it  tells  all  of  its  applicants  this message. 
–	 If  ui  has more  than  ni  applicants,  it  tells  the  remaining  ones  “Sorry,  there were  a 
large number of very qualiﬁed students applying this year, yet we can only accept 
a  very  limited  number.  We  regret  to  inform  you  that  you  were  not  accepted. 
Thank  you  for  applying  to  our  university.” 

�  Evening: 

–	 Any  student who  hears  “Sorry,  . . .”  from  some  university,  crosses  oﬀ  that  univer­
sity  from  his/her  list. 

Termination  Condition:  If  there  is  a  day  when  each  university  ui  has  at most  ni  appli­
� 
cants,  we  stop  and  each  university  accepts  all  of  its  applicants  (if  any). 

1.  Before  we  can  say  anything  about  our  algorithm,  we  need  to  show  that  it  terminates. 
Show  that  the  algorithm  terminates  after N M  + 1  days. 
Solution.  On  each day,  if  the algorithm has not  terminated,  then  some university ui 
has more  than  ni  applicants.  It  follows  that  in  the  afternoon,  at  least  one  student  sj 
hears “Sorry,  . . .”, and thus  in the evening sj  crosses oﬀ ui  from his/her  list.  As there 
are N  students and M  universities,  it follows that the algorithm must terminate after 
N M + 1  days,  as  otherwise  there would  be  no  university  left  for  any  student  to  cross 
� 
oﬀ. 

2.  Next,  we  will  show  that  the  four  properties  stated  earlier  are  true  of  our  algorithm. 
To  start,  let’s  show  the  following:  if  during  some  day  a  university  uj  has  at  least  nj 
applicants,  then  when  the  algorithm  terminates  it  accepts  exactly  nj  students. 
Solution.  At  this  day,  each  of  the  students  applying  to  uj  has  uj  as  their  favorite 
university  that has not yet  rejected him/her.  Therefore,  if uj  tells a  student “Maybe, 
. . .”,  that  student will come back  the next day.  Since  there are at  least nj  applicants, 
it  follows  that  uj  will  tell  its  favorite  nj  “Maybe,  . . .”.  It  follows  by  induction  that 
every  day  after  this  day,  uj  will  have  at  least  nj  applicants.  Thus,  this  holds  when 
the  algorithm  terminates.  Since  when  the  algorithm  terminates  there  are  at most  nj 
� 
applicants,  it  follows  that  exactly  nj  students  are  assigned  to  uj . 

Recitation  7 

4 

3.  Next,  show  that  every  student  is  assigned  to  one  university. 

Solution.  It  is  clear  that  no  student  can  apply  to  more  than  one  university  at  once 
since  a  student  applies  to  at most  one  university  on  any  given  day,  so  this means  the 
students  can  be  assigned  to  at  most  one  university.  So  we  just  need  to  show  that 
each  student  is  assigned  to  at  least  one  university.  We  argue  by  contradiction. 
Suppose  not,  and  let  sj  be  a  student  not  assigned  to  any  university.  Then,  since  the 
algorithm terminates, and when the algorithm terminates each university ui  accepts at 
most ni  students,  it  follows  that  some university ui  accepts  less  than ni  students.  By 
the previous problem,  it  follows that  in every day, ui  had  less than ni  applicants.  But 
then  consider  the  day  that  sj  applied  to  ui .  Since  there  were  less  than  ni  applicants 
to ui  that day, it follows that ui  would have told sj  “Maybe, . . .” in that day, and thus 
in  every  future  day.  Thus,  sj  would  be  assigned  ui  when  the  algorithm  terminates. 
� 
This  is  a  contradiction. 

4.  Next,  show  that  for  all  i,  ui  gets  assigned  ni  students. 
�M 
Solution.  Since  the  algorithm  terminates,  on  some  day  each  ui  gets  assigned  at 
most  ni  students.  Suppose  some  ui  got  assigned  strictly  less  than  ni  students.  Since 
i=1 ui  =  N ,  this  means  that  some  student  is  not  assigned.  This  contradicts  the 
� 
previous  problem. 

5.  Before  continuing,  we  need  to  establish  the  following  property.	 Suppose  that  on  some 
day  a  university  uj  has  at  least  nj  applicants.  Deﬁne  the  rank  of  an  applicant  si  with 
respect  to  a  university  uj  as  si ’s  location  on  uj ’s  preference  list.  So,  for  example,  uj ’s 
favorite  student  has  rank  1.  Show  that  the  rank  of  uj ’s  least  favorite  applicant  that  it 
says  “Maybe,  . . .”  to  cannot  decrease  (e.g.,  going  from  1000  to  1005  is  decreasing)  on 
any  future  day.  Note  that  uj ’s  least  favorite  applicant  might  change  from  one  day  to 
the  next. 

Solution.  On  the  next  day,  there  are  two  cases:  uj  either  says  “Maybe,  . . .”  to  its 
least  favorite  applicant  si  from  the  previous  day,  or  it  says  “Sorry,  . . .”  to  si .  In  the 
ﬁrst  case,  this  means  that  all  of  the  nj  − 1  applicants  uj  liked  more  than  si  on  the 
previous day will  also be  told  “Maybe,  . . .”,  and  so  si  will  again be uj ’s  least  favorite 
applicant  it  did  not  reject.  Thus,  the  rank  of  its  least  favorite  applicant  did  not 
decrease.  In  the  second  case,  this  means  that  there  were  at  least  nj  applicants  that 
uj  preferred to si , and thus the rank of its least favorite applicant it said “Maybe, . . .” 
to did not decrease.  As  shown above, on any  future day uj  has at  least nj  applicants, 
and so by applying this analysis again, we conclude that the rank of uj ’s least favorite 
� 
applicant  that  it  says  “Maybe,  . . .”  to  cannot  decrease  on  any  future  day. 

6.  Next,  show	 there  does  not  exist  si , sj , uk ,  and  u�  where  si  is  assigned  to  uk ,  sj  is 
assigned  to  u� ,  sj  prefers  uk  to  u� ,  and  uk  prefers  sj  to  si .  Note  that  this  is  analogous 
to  a  “rogue  couple”  considered  in  lecture. 

Recitation  7 

5 

Solution.  Assume,  towards  a  contradiction,  that  such  an  si , sj , uk  and  u�  existed. 
Since  sj  prefers  uk  to  u� ,  but  is  assigned  to  u� ,  on  some  day  uk  told  sj  “Sorry,  . . .”. 
On  that  day,  there  must  have  been  more  than  nk  applicants  to  uk .  If  si  was  also  an 
applicant  to  uk  on  that  day,  then  si  would  have  also  been  rejected  since  uk  prefers  sj 
to  si ,  and  thus  si  could  not  have  been  assigned  to  uk .  On  the  other  hand,  if  at  any 
later  day  si  were  to  apply  to  uk ,  it  would  have  been  rejected  since  si ’s  rank  is  less 
than  sj ’s with  respect  to uk ,  since by  the previous  problem we  know  that  the  rank  of 
the  least  favorite  applicant  that  uk  says  “Maybe,  . . .”  to,  cannot  decrease.  Thus,  it 
� 
is  impossible  for  si  to  be  assigned  to  uk ,  which  is  a  contradiction. 

7.  Finally,  we  show  in  a  very  precise  sense  that  this  algorithm  is  student-optimal.  As  in 
lecture,  deﬁne  the  realm  of  possibility  of  a  student  to  be  the  set  of  all  universities  u, 
for  which  there  exists  some  assignment  satisfying  the  ﬁrst  three  properties  above,  in 
which  the  student  is  assigned  to  u.  Of  all  universities  in  the  realm  of  possibility  of  a 
student  we  say  that  the  student’s  favorite  is  optimal  for  that  student. 
Show  that  each  student  is  assigned  to  its  optimal  university. 

Solution.  We  argue  by  contradiction.  Consider  the  ﬁrst  (in  time)  student  si  not 
assigned  to  its  optimal  university,  and  suppose  for  si  this  university  is  uk .  Then  on 
the  date  si  is  rejected  from  uk ,  there  was  another  student  sj  which  uk  preferred  to 
si .  Since  uk  is  in  the  realm  of  possibility  of  si ,  there  is  an  assignment M  of  students 
to  universities  assigning  si  to  uk  with  the  properties  above.  Suppose M  assigns  sj  to 
u� .  Suppose  uopt  is  sj ’s  optimal  university.  Then,  since  si  was  the  ﬁrst  student  not 
assigned  its  optimal  university,  sj  prefers  uk  to  uopt ,  though  uk  may  equal  uopt .  On 
the  other  hand,  sj  prefers  uopt  to  u� ,  since  uopt  is  its  favorite  university  in  its  realm 
of  possibility,  and  u�  occurs  in  its  realm  of  possibility.  It  follows  that  sj  prefers  uk 
to  u� .  But  then  in  the  assignment  M  we  have  found  an  si , sj , uk ,  and  u�  with  si 
assigned  to  uk ,  sj  assigned  to  u� ,  sj  prefers  uk  to  u� ,  and  uk  prefers  sj  to  si .  This  is 
� 
a  contradiction  to  the  property  of M  established  in  the  previous  problem. 

MIT OpenCourseWare
http://ocw.mit.edu 

6.042J / 18.062J Mathematics for Computer Science 
Fall 2010 

For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms . 

