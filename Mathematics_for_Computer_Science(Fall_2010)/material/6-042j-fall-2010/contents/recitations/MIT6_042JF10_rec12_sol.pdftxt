6.042/18.062J Mathematics  for  Computer  Science 
Tom  Leighton  and Marten  van  Dijk 

October  20,  2010 

Notes  for  Recitation  12 

1  The  L-tower  problem 

Observe  the  structures  shown  in  Figure  1.  One  has  2  L-shapes,  the  other  5  L-shapes.  Con­
sider  a  tower with  k  L-shapes.  Assume  that  the  blocks  are  all  of  size  x × 1 where  x > 1.  As 
the  picture  indicates,  if  k  is  too  small  then  the  tower  falls  to  the  left.  On  the  other  hand,  if 
k  is  too  large  the  tower  would  fall  to  the  right.  Will  the  tower  be  stable  for  some  k?  Prove 
there  is  at  least  one  value  of  k  for  which  the  L-tower  is  stable.  Assume  that  a  structure  is 
stable  if  and  only  if  its  center  of  gravity  is  not  hanging  in  the  air  horizontally.  The  L-tower 
is  stable  if  and  only  if  each  of  its  subparts  is  stable. 

−3  ≤ k ≤  3x
−1 . 
Hint:  Show  the  tower  is  stable  if  and  only  if  3x
2
2

Figure  1:  Too  few  or  too many  L  shapes make  the  tower  unstable


Solution.  As  indicated  in  the  description,  an  arbitrary  structure  is  considered  stable  if 

and  only  if  its  center  of  gravity  lies  on  top  of  some  form  of  support.  For  our  L-towers

this  implies  several  conditions  that  must  hold  simultaneously.  Consider  the  case  k  =  3,


Recitation  12 

2 

Figure  2:  Three  necessary  conditions  for  stability,  when  k  =  3  .  Put  together,  we  also 
consider  them  suﬃcient. 

illustrated  in  Figure  2.  For  the  structure  to  be  stable,  we  need  the  topmost  L-shape  to 
be  stable  on  top  of  the  second  L-shape.  This  is  Condition  1.  We  also  need  the  structure 
formed  by  the  topmost  2  L-shapes  to  be  overall  stable  on  top  of  the  lowest  L-shape.  This 
is  Condition  2.  And  ﬁnally,  we  need  the  three  L-shapes  to  be  stable  on  top  of  the  single 
standing  block.  Call  this  Condition  3.  In  general,  if  there  are  k  L-shapes,  there  are  k 
conditions  that must  be  satisﬁed  for  the  structure  to  be  stable.  We will  explicitly  describe 
these  constraints  below. 

Throughout  the  solution  we  are  only  concerned  with  the  x-coordinates  of  the  center  of 
mass.  The  center  of  mass  of  a  set  of  L-shapes  can  be  computed  by  partitioning  the  ﬁgure 
into  individual  L  shapes,  and  then  averaging  their  individual  centers. 
Let  c1  be  the  position  of  the  center  of  mass  for  an  individual  L-shape  starts  at  0.  The 
vertical  block  has  its  center  at  1/2,  the  horizontal  block  at  x/2.  Hence,  the  center  of  a 
single  L-shape  is  (1/2 + x/2)/2 = (x + 1)/4  to  the  right  of  where  it  starts. 
Now  let  ch  be  the  position  for  the  center  of  mass  of  h  L-shapes  stacked  together,  where 
we  have  shifted  our  reference  frame  so  that  the  structure  starts  at  0.  This  new  center  of 
mass  can  be  obtained  from  averaging  the  center  of  a  single  L  shaped  shifted  by  1  every 
time.  So  we  get  ch  = [c1  + (c1  + 1) +  + (c1  + (h − 1))] /h.  Regrouping,  we  get  ch  = 
· · · 

Condition 3Condition 2Condition 1Recitation  12 
3 
[hc1  + (1 + 2 +  + (h − 1))] /h  = [hc1  + h(h − 1)/2] /h,  from  where  we  arrive  to:  ch  = 
· · · 
c1 + (h − 1)/2.  It is helpful to think visually about this equation.  When h = 1, we naturally 
get  ch  = c1 .  As  h  increases,  the  center  shifts  by  1/2  to  the  right  every  time. 
Now we  can write  explicitly  all  the  conditions  for  a  structure with  k  L-shapes  to be  stable. 
We need every structure to stand stable on top of the next L. If we imagine we have a stack 
of  i  L-shapes  starting  at  0  on  top  of  another  L-shape  starting  at −1,  we  require: 

ci  ≤ x − 1 

This  simply  means  that  if  we  have  a  stack  of  i  L-shapes  starting  right  on  the  origin,  we 
need  its  center  of  gravity  to  fall  within  the  next  L.  The  next  L  ends  at  x − 1. 
If  we  have  k  L-shapes,  this  constraint  applies  to  the  ﬁrst  k  −  1  stacks.  So  we  get  the 
conditions: 

c1  ≤ x − 1 
c2  ≤ x − 1 
. . . 
ck−1  ≤ x − 1 

Finally,  the  overall  stack  of  k  L-shapes  has  a  slightly  diﬀerent  requirement,  since  it  stands 
on  top  of  the  vertical  block: 

x − 1 ≤ ck  ≤ x 

Now we need  to ﬁnd whether  some k  satisﬁes all of  these  constraints.  Recall  ck−1  > ck−2  > 
> c1 ,  so we only need to check the  last two constraints ck−1  ≤ x − 1 and x − 1 ≤ ck  ≤ x.
· · · 
Substituting  ck  = (x + 1)/4 + (k − 1)/2  and  ck−1  = ck − 1/2 = (x + 1)/4 + (k − 1)/2 − 1/2, 
we  get  the  inequalities: 

(x + 1)/4 + (k − 1)/2 ≤ x − 1/2 
x − 1 ≤ (x + 1)/4 + (k − 1)/2 ≤ x 

The  ﬁrst  inequality  is  stronger  on  the  right  than  the  second,  so  consolidating  both we  get: 

x − 1 ≤ (x + 1)/4 + (k − 1)/2 ≤ x − 1/2 
which  solved  for  k  yields: 

3x − 3
2

≤ k ≤

3x − 1 
2 

Recitation  12 

4 

There  is  a  gap  between  the  upper  and  lower  bound  of  exactly  1.  Hence  either  there  is  an 
integer  right  between  them,  or  both  are  integers.  For  (3x − 3)/2  to  be  an  integer  we  need 
x  to be  an  odd  integer.  Hence  in  the  case where x  is  an  odd  integer we have  two  choices  of 
k  but  on  each  the  structure  will  be  barely  stable. 

� 

Recitation  12 
2  Double  Sums 

5 

Sometimes  we  have  to  evaluate  sums  of  sums,  otherwise  known  as  double  summations.  It’s 
� � 
good  to  know  how  to  tame  these  beasts!  Here’s  an  example  of  a  double  summation: 
n
i
j 
i=1  j=1 

Solution. 

= 1/2

It  looks  ferocious...all those sharp teeth!  But actually,  this double summation  is  just a sheep 
in wolf ’s clothing:  to evaluate  it, we can  just evaluate the  inner sum,  replace  it with a closed 
form  we  already  know,  and  then  evaluate  the  outer  sum  which  no  longer  has  a  summation 
� 
�  � 
inside  it. 
b.) 
a + 
(a + b) = 
�  Evaluate  the  summation.  (Hint: 
n� � i(i + 1) 
�n
i
j  = 
� 
2 
i=1 
i=1  j=1 
n
(i2  + i) 
�  � 
i=1 
n
n
i2  + 
= 1/2( 
i) 
i=1 
i=1 
n2 
n3 
n
+ + 
= 1/2( +
6 
3
2
n3  + 3n2  + 2n 
= 1/2( 
)
3 

n(n + 1) 
)
2 

� 

Unfortunately,  not  all  summations  are  so  docile.  Fortunately,  we  have  ways  to  deal  with 
this.  There’s  a  special  trick  that  is  often  extremely  useful  for  sums,  and  that  is  to  exchange 
the  order  of  summation.  We’ll  go  through  an  example  here. 
� 
For  the  remainder  of  the  problem  we’ll  wrestle  with  the  sum  of  the  harmonic  numbers: 
n
Hk 
k=1 

At  ﬁrst  glance,  it  looks  like  just  a  single  summation,  but  do  not  be  deceived. 

�  First,  write  it  as  a  double  summation. 

Recitation  12 

Solution. 

�  � � 
n
n
k
1/j 
Hk  =
k=1  j=1 
k=1 

6 

� 

�  Now  try  to  gain  some  intuition  for  exactly  what  you’re  up  against  by  integrating  the 
summation  in  its  less  threatening  single-summation  form.  You may  use Hk  ≈  ln k . 
�� 
Solution. 
n
Hk  ≈ 
k=1
k=1 

ln n = n ln n − n + 1. 

n 

� 

�  Finally,  we’ll  look  for  an  exact  answer.  If  we  think  about  the  pairs  (k , j )  over  which 
we are  summing,  they  form a  triangle  in  the  table below.  The values  in  the cells of  the 
table  correspond  to  the  terms  in  the  double  summation.  The  ﬁrst  two  rows  have  been 
ﬁlled  in  for  you.  Complete  the  remaining  three  rows  to  see  the  pattern. 

Solution. 

j 
k 
1 
2 
3 
4 

n 

1

j 
k 
1  1 
2  1
3  1
4  1
. . . 
n  1

1 

2 

3  4 

. . .  n 

1 
1  1/2 

. . . 

. . . 

2 

3 

4 

. . . 

n 

1/2 
1/2 1/3 
1/2 1/3 1/4 

1/2 1/3 1/4 

. . .  1/n 

� 

�	 The  summation  above  is  summing  each  row  and  then  adding  the  row  sums.  But  we 
can  tame  this  beast  if,  instead,  we  ﬁrst  sum  the  columns  and  then  add  the  column 
sums.  Use  the  table  to  rewrite  the  double  summation.  The  inner  summation  should 
sum  over  k ,  and  the  outer  summation  should  sum  over  j . 

Recitation  12 

Solution. 

�  � � 
n
n
k
1/j 
Hk  =
� � 
k=1  j=1 
k=1 
n
n
1/j 
j=1  k=j 

=

7 

� 

Solution. 

�  Now  simplify  the  summation  to  derive  a  closed  form  in  terms  of  n  and Hn . 
�  � � 
n
n
n
1/j 
Hk  =
�  � 
j=1  k=j 
k=1 
n
n
1/j 
1 
n� 1 
j=1 
k=j 
(n − j + 1) 
� 
j 
j=1 
n n − j + 1 
n + 1  � j 
j=1 �n
j
n
− 
n� 1  � 
j 
j
j=1 
j=1 
n
− 
1 
= (n + 1) 
j 
j=1 
j=1 
= (n + 1)Hn  − n 

= 

=

= 

= 

Notice  that  the  exact  solution  is  very  similar  in  form  to  the  approximation we  gener­
� 
ated  above. 

MIT OpenCourseWare
http://ocw.mit.edu 

6.042J / 18.062J Mathematics for Computer Science 
Fall 2010 

For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms . 

