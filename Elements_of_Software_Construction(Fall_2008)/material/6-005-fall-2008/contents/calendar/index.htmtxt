

















[MIT_OpenCourseWare,_Massachusetts_Institute_of_Technology]
                              [Submit ../../common/ [Click_to_visit_our
Subscribe to the [Enter Email images/               Facebook_page.][Click
OCW Newsletter   ]            button_subscribe.png] to_visit_our_Twitter
                                                    feed.]
HelpÂ Â Â |Â Â Â Contact_Us
Â 
    * [Click_for_site_home_page.]
    * Courses
      ***** Find courses by: *****
          o Topic
          o MIT_Course_Number
          o Department
      ***** Collections *****
          o Audio/Video_Lectures
          o New_Courses
          o Most_Visited_Courses
          o OCW_Scholar_Courses
          o Supplemental_Resources
      Â 
      ***** Cross-Disciplinary Topic Lists *****
          o Energy
          o Entrepreneurship
          o Environment
          o Introductory_Programming
          o Life_Sciences
          o Transportation
      Â 
      Â 
      ***** Translated Courses *****
          o ç¹é«å­_/_Traditional_Chinese
          o ç®ä½å­_/_Simplified_Chinese
          o EspaÃ±ol_/_Spanish
          o PortuguÃªs_/_Portuguese
          o à¸ à¸²à¸©à¸²à¹à¸à¸µà¸¢à¸_/_Thai
          o ÙØ§Ø±Ø³Û_/_Persian
          o TÃ¼rkÃ§e_/_Turkish
          o (ë¹ëì¤)íêµ­_/_Korean
          o More...
    * About
          o About_MIT_OpenCourseWare
          o Site_Stats
          o OCW_Stories
          o OpenCourseWare_Consortium
          o Media_Coverage
          o Newsletter
          o Press_Releases
          o OCW's_Next_Decade
    * Donate
          o Make_a_Donation
          o Why_Donate?
          o Become_a_Course_Champion
          o Our_Supporters
          o Other_Ways_to_Contribute
          o Shop_OCW
          o Become_a_Corporate_Sponsor
    * Featured Sites
          o Highlights_for_High_School
          o MITx
          o Teaching_Excellence_at_MIT
[Search              ] [Submit ../../common/images/button_search.png] Advanced
                                                                      Search
Home Â» Courses Â» Electrical_Engineering_and_Computer_Science Â» Elements_of
Software_Construction Â» Calendar
******  Calendar  ******
    * Course_Home
    * Syllabus
    * Calendar
    * Lecture_Notes
    * Assignments
    * Labs_and_Projects
    * Pedagogy
**** Abbreviations ****
JSP = Jackson Structured Programming
DPLL = Davis-Putnam-Logemann-Loveland (algorithm)
SQL = Structured Query Language
                               Course calendar.
SESÂ TOPICS                      ASSIGNMENTS       PROJECTS
       **** Introduction ****
       Basic Java syntax and
1      semantics; overview of      Â               Do lab 0.1
       objectives and structure of
       the course
       **** Classes ****
2      More Java: exceptions,      Exploration 1 out Â 
       input/output, classes,
       access control, static
       **** Subclassing and
       interfaces ****
       Subclassing, inheritance,
3      overriding, interfaces,     Â               Do lab 0.2
       packages; distinction
       between declared type and
       actual type; downcasting;
       anonymous classes
       **** Designing state
       machines ****
       State machine design;       Exploration 1 due
4      graphical and textual       Problem set 1 out Â 
       notation; state machine
       semantics; parallel
       combinations of machines
       **** Implementing state
       machines ****
5      State machine               Â               Â 
       implementation patterns;
       concurrency and queues;
       modularity and interfaces
       **** State machine
       invariants ****
       Safety and liveness
       properties; state
       properties and invariants;
6      inductive reasoning;        Â               Â 
       computing the product
       machine of a parallel
       combination; state
       explosion; fault tolerance;
       interlocks and the idea of
       a trusted base
       **** Designing stream
       processors ****
       Stream processing programs;                   Project 1 out
7      grammars vs. machines; JSP  Â               Do lab 1
       method of program
       derivation; regular
       grammars and expressions
       **** Decoupling and
       interfaces ****
8      Modularity, decoupling,     Problem set 1 due Â 
       information hiding; module
       dependence diagrams; using
       interfaces for decoupling
       **** Testing and coverage
       ****
       Why software testing is
       hard; input space
9      partitioning, boundary      Â               Â 
       testing, state machine
       coverage, code coverage;
       test-first development and
       regression testing
       **** Designing a SAT
       solver, part 1 ****
       The SAT problem and SAT
       solvers; a new paradigm of
       functions over immutable
10     types; use datatype         Exploration 2 out Project 1 due
       productions to model
       structured values; patterns
       for implementing datatypes
       (Variant as Class,
       Interpreter)
       **** Designing a SAT
       solver, part 2 ****
       Review of basic datatype
11     patterns; a naive solver    Â               Â 
       with backtracking search;
       design improvements with
       Facade, Option types, and a
       3-valued logic
       **** Debugging ****
       Techniques for avoiding
       debugging: assertions,
       modular development with
12     unit testing, code reviews; Exploration 2 due Â 
       strategies for debugging:   Problem set 2 out
       reducing test cases,
       hypothesis-driven
       debugging, binary search;
       Heisenbugs
       **** Designing a SAT
       solver, part 3 ****
       Abstract data types;
       representation
13     independence;               Â               Â 
       characterizing types by
       operations; encapsulation;
       examples of types used by
       DPLL solver; Factory Method
       pattern
       **** Rep invariants,
       equality, visitors ****
       Advice on implementing
14     types; rep invariants and   Â               Project 2 out
       abstraction functions;                        Do lab 2
       equality for immutable
       types; Iterator and Visitor
       patterns
       **** Little languages ****
       Representing behavior using
       data structures; language
15     datatypes, visitors,        Problem set 2 due Â 
       functional objects, higher-
       order functions; solving a
       problem by creating a
       domain-specific language
       **** Basics of mutable
       types ****
       Heap semantics (aliasing,
       assignment, field setting);
       reachability and conceptual
16     storage leaks; the Object   Exploration 3 out Project 2 due
       Contract and equality
       properties; hash maps and
       their representation
       invariant; problems caused
       by mutation of keys
       **** Event-based
       programming ****
       Fundamentals of programming
       graphical user interfaces;
17     view hierarchy, Composite   Â               Â 
       pattern, Publish-Subscribe
       pattern, Model-View-
       Controller (MVC); pitfalls
       of event-based programming
       **** Designing a photo
       organizer ****
       The relational paradigm;    Exploration 3 due
18     conceptual modeling; object Problem set 3 out Â 
       model syntax and semantics;
       Mitchell and Webb on "unity
       of purpose"
       **** Implementing a photo
       organizer ****
       Implementation as object
       model transformation; key
19     issue of where state        Â               Â 
       resides; standard patterns;
       navigation, immutability
       and encapsulation; MVC
       considerations
       **** Concurrency ****
       Shared-memory and message-
       passing paradigms; race                       Project 3 out
20     conditions and deadlock;    Â               Do lab 3 and team building
       using threads and blocking                    lab; Swing lab optional
       queues in Java; concurrency
       issues in graphical user
       interfaces
       **** Usability ****
       User interface design
       principles: learnability,
21     visibility, efficiency,     Problem set 3 due Â 
       errors, simplicity;
       iterative design; sketching
       and paper prototyping; user
       testing
       **** Relational databases
       ****
22     Using a database to         Â               Â 
       represent an object model;
       relational algebra and SQL;
       transactions
       **** Conclusion ****
       Final words; courses and
23     internships that might      Â               Project 3 due
       follow 6.005; winners of
       Project 3 awards; 6.005
       quiz game
*** Courses ***
    * Find_by_Topic
    * Find_by_Course_Number
    * Find_by_Department
    * Audio/Video_Courses
    * OCW_Scholar_Courses
    * Most_Visited_Courses
    * New_Courses
    * Translated_Courses
    * Supplemental_Resources
*** About ***
    * About_OpenCourseWare
    * Site_Stats
    * OCW_Stories
    * OCW_Consortium
    * Media_Coverage
    * Newsletter
    * Press_Releases
    * OCW's_Next_Decade
*** Donate ***
    * Make_a_Donation
    * Why_Donate?
    * Become_a_Course_Champion
    * Our_Supporters
    * Other_Ways_to_Contribute
    * Shop_OCW
    * Become_a_Corporate_Sponsor
*** Featured Sites ***
    * Highlights_for_High_School
    * MITx
    * Teaching_Excellence_at_MIT
*** Tools ***
    * Help_&amp;_FAQs
    * Contact_Us
    * Advanced_Search
    * Site_Map
    * Privacy_&amp;_Terms_of_Use
*** About MIT OpenCourseWare ***
MIT OpenCourseWare makes the materials used in the teaching of almost all of
MIT's subjects available on the Web, free of charge. With more than 2,000
courses available, OCW is delivering on the promise of open sharing of
knowledge.
[Massachusetts_Institute_of_Technology_logo_and_name.] [OpenCourseWare
Consortium_logo.] [Creative_Commons_logo_with_terms_BY-NC-SA.]
Â© 2001â2013
Massachusetts Institute of Technology
Your use of the MIT OpenCourseWare site and materials is subject to our
Creative_Commons_License and other terms_of_use.
Â 
