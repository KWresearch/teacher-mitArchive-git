MIT OpenCourseWare 
http://ocw.mit.edu 

6.005 Elements of Software Construction 
Fall 2008 

For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms . 

Today’s Topics 
getting up to speed with Java 
¾ note that programming experience is a prerequisite for 6.005 
¾ we assume you’ve used Python 
¾¾ these initial lectures will show the Java way to do things you should already 
these initial lectures will show the Java way to do things you should already 
be able to do in Python (or some other language) 
what makes software “good” 
¾ whether it works isn’t the only consideration 

Introduction 

Rob Miller 
Fall 2008 

© Robert Miller 2008 

© Robert Miller 2007 

Why We Use Java in 6.005 
safety 
¾ static typing catches errors before you even run (unlike Python) 
¾ strong typing and memory safety catch errors at run time (unlike C/C++) 
ubiquity
ubiquity 
¾ Java is widely used in industry and education 
libraries 
¾ Java has libraries and frameworks for many things 
tools 
¾ excellent, free tools exist for Java development (like Eclipse) 
it’s good to be multilingual 
¾ knowing two languages paves the way to learning more (which you should) 
why we regret using Java... 
¾ wordy, inconsistent, freighted with legacy baggage from older languages, 
no interpreter, no lambda expressions, no continuations, no tail recursion, 
... 
© Robert Miller 2007 

Hailstone Sequences 
start with some positive integer n 
¾ if n is even, then next number is n/2 

¾ if n is odd, then next number is 3n+1

¾¾ repeat these moves until you reach 1
repeat these moves until you reach 1

examples 
2, 1 
3, 10, 5, 16, 8, 4, 2, 1 
4, 2, 1 
5, 16, 8, 4, 2, 1 
¾ why “hailstone”? because hailstones in clouds also bounce up and down 
¾ why  hailstone  ? because hailstones in clouds also bounce up and down 
chaotically before finally falling to the ground 
let’s explore this sequence 
¾ open question: does every positive integer n eventually reach 1? 

7, 22, 11, 34, 17, 52, 26, 13, 40, ...? 
2n, 2n-1  , ... , 4, 2, 1 

© Robert Miller 2007 

1 

Computing a Hailstone Sequence 

Java 
// hailstone sequence from n 
while (n != 1) { 
if (n % 2 == 0) { 
n = n / 2; 
} else { 
n = 3 * n + 1; 

} 
} 

Python 
# hailstone sequence from n 
while n != 1: 
if n % 2 == 0: 
n = n / 2 
else: 
n = 3 * n + 1 

Java Syntax 
statement grouping 
¾ curly braces surround groups of statements 
¾ semicolons terminate statements 
¾¾ indentation is technically optional but essential for human readers
indentation is technically optional but essential for human readers 
comments 
¾ // introduce comment lines

¾ /* ...  */ surround comment blocks

control statements

¾ while and if require parentheses around their conditions

operators 

¾ mostly common with Python (+, -, *, /,  <, >, <=, >=, ==)

¾ !=  means “not equal to”  

¾ !  means “not” , so n!=1  is the same as !(n == 1)

¾ the % operator computes remainder after division


© Robert Miller 2007 

© Robert Miller 2007 

Computing a Hailstone Sequence 

int n = 3; 
while (n != 1) { 
System.out.println(n);

if (n % 2 == 0) {

n = n / 2;

} else {

n = 3 * n + 1;


}


}

System.out.println(n);


declares the integer 
declares the integer 
variable n 
variable n

prints a value to the console 
prints a value to the console
(useful for debugging) 
(useful for debugging)

Declarations and Types 
variables must be declared before being used

¾ a declaration includes the type of the variable

¾ two kinds of types, primitive and object

¾¾ primitive types include
primitive types include

•  int (integers up to +/- 2 billion) 
•  long (integers up to +/- 263) 
•  boolean (true or false) 
•  double (floating-point numbers) 
•  char (characters)

¾ objject types include 

yp
 
•  String (a sequence of characters, i.e. text) 
¾ you can define new object types (using classes), but you can’t define new 
primitive types 

© Robert Miller 2007 

© Robert Miller 2007 

2 

Static Typing 
static vs. dynamic

¾ static or compile-time means “known or done before the program runs”

¾ dynamic or run-time means “known or done while the program runs”


Java has static typing 
¾ expressions are checked for type errors before the program runs 
¾ Eclipse does it while you’re writing, in fact

int n = 1;

n = n + “2”; // type error – Eclipse won’t let you run the program

¾¾ P thPython hh as dd ynamiic tt ypiing – itit wou
“2” until it 
ldn’t ’t compllaiin abboutt n + + “2” 
til it 
reaches that line in the running program 
ld

A Complete Java Program 
public class Hailstone {

all Java code must be 
all Java code must be 
public static void main(String[] args) {

contained within a class
contained within a class 
int n = 
3; 
while (n != 1) {

System.out.println(n);

if (n % 2 == 0) {

n = n / 2; 

} else {

n = 3 * n + 1; 


a Java program starts by 
a Java program starts by 
running the main
running the main 
method of a class
method of a class 

}


}

System.out.println(n); 


}


}


we’ll talk about what 
we’ll talk about what 
public and static mean 
public and static mean 
in the next lecture; for 
in the next lecture; for 
now, we’ll just use them 
now, we’ll just use them 
on all methods
on all methods 

© Robert Miller 2007 

© Robert Miller 2007 

Length of a Hailstone Sequence 
/* 
* Returns the number of moves of the hailstone sequence 
* needed to get from n to 1.

type of value returned 
*/

y the method 
by  the method 
by the method
public static int hailstoneLength(int n) {

int moves = 0;

while (n != 1) {

if (isEven(n)) {

n = n / 2;

} else {

n = 3 * n + 1;


argument(s) of the method 
argument(s) of the method

}

++moves;


}

return moves;


}


More Method Definitions 
/* 
* Returns true if and only if n is even.

*/

public static boolean isEven(int n) {

return n % 2 == 0; 


}


/* 
* Start of the program.

*/

public static void main(String[] args) { ... } 

common operator, equivalent to 
common operator, equivalent to 
moves = moves + 1
moves = moves + 1 

© Robert Miller 2007 

¾ void means the method has no return type (so no return statement is

required)

¾ String [ ]  is an array of String objects (in this case, these strings are the 
arguments given to the program on the Unix/Windows/Mac command 
line) 

© Robert Miller 2007 

3 

Recursive Method 

public static int hailstoneLength(int n) {

if (n == 1) {

return 0;

} else if (isEven(n)) {

return 1 + hailstoneLength(n/2); 

} else {

return 1 + hailstoneLength(3*n + 1);


base case
 b

recursive cases 
recursive cases

}


}


Hailstone Sequence as a String 
/* 
* Returns the hailstone sequence from n to 1 
* as a comma-separated string. 
* e.g. if n=5, then returns "5,16,8,4,2,1". 
*/ 
public static String hailstoneSequence(int n) { 
... 
} 

© Robert Miller 2007 

© Robert Miller 2007 

Strings 
¾ a String is an object representing a sequence of characters 
•  returning a List of integers would be better, but we need more 
machinery for Java Lists, so we’ll defer it

¾ stringgs can be concatenated usingg +

•  “8” + “4”  Î “84” 
•	 String objects are immutable (never change), so concatenation 
creates a new string, it doesn’t change the original string objects 
¾ String objects have various methods 
String seq = “4,2,1”; 
seq.length() 
Î 5

seq.ch AharAt(0)
 
(0)  Î ‘4’
Î ‘4’

seq.substr(0, 2)  Î “4,”

¾ use Google to find the Java documentation for String

•  learn how to read the Java docs, and get familiar with them 

© Robert Miller 2007 

Hailstone Sequence as a String 
/* 
* Returns the hailstone sequence from n to 1
* as a comma-separated string. 
* e.g. if n=5, then returns "5,16,8,4,2,1".

*//

public static String hailstoneSequence(int n) {

String seq = n;

String seq = String.valueOf(n);

while (n != 1) {

if (isEven(n)) {

n = n / 2;

} else {

n = 3 * n + 1;

=
*
n 
3 
n + 1;


Type error!  Java requires 
Type error!  Java requires 
you to convert the integer 
you to convert the integer 
into a String object.  This is 
into a String object.  This is 
a compile‐time error. 
a compile‐time error.

}

seq += 

}

return seq;


}


"," + n;


But the + operator converts 
But the + operator converts 
numbers to strings automatically
numbers to strings automatically 

common shorthand for s = s + “,” + n
common shorthand for s = s + “,” + n 
© Robert Miller 2007 

4 

Hailstone Sequence as an Array 
/** 
* Returns the hailstone sequence starting from n as an 
* array of integers, e.g. hailstoneArray(8) returns 
* the length-4 array [8,4,2,1].

*//

public static int[] hailstoneArray(int n) { 

...

} 

© Robert Miller 2007 

Arrays 
array is a fixed-length sequence of values 
¾ base type of an array can be any type (primitive, object, another array type) 
int[] intArray; 
char[] charArray;
char[] charArray;

String[] stringArray;

double[][] matrix;  // array of arrays of floating-point numbers

¾ fresh arrays are created with new keyword

intArray = new int[5]; 
// makes array of 5 integers

¾ operations on an array

intArray[y[0]]  = 200;;

// sets a value 
// gets a value

intArray[0] Î 200 
// gets array’s length 

intArray.length Î 5 
¾ unlike a String, an array’s elements can be changed 

¾ but once created, an array’s length cannot be changed 

•  so it’s not like a Python list – a Java array can’t grow or shrink 
© Robert Miller 2007 

Hailstone Sequence as an Array 
/** 
* Returns the hailstone sequence starting from n as an
* array of integers, e.g. hailstoneArray(8) returns 
* the length-4 array [8,4,2,1].

*//

public static int[] hailstoneArray(int n) { 

int[] array = new int[hailstoneLength(n)+1];

int i = 0; 
while (n != 1) {
array[i] = n; 
++i; 
if (isEven(n)) {
n = n / 2;  
=
n 
n / 2; 
} else { 
n = 3 * n + 1; 

t happens if you omit 
pp 
y 
Wha
What happens if you omit 
“+1”?  The array is too 
this
this “+1”?  The array is too 
short, and Java produces a 
short, and Java produces a 
runtime error when you try 
runtime error when you try 
to write the last number. 
to write the last number.

Maximum Value of an Array 
/** 
* Returns the maximum value of an array of 
* positive integers. 
* Returns 0 if the array is empty.

*/

public static int maxValue(int[] array) {

int max = 0;

for (int i = 0; i < array.length; ++i) {

if (array[i] > max) max = array[i];


}

return max;


} 

The for loop is commonly used for 
ierat ing through a collection
iterating through a collection.
for (init; test; update) {... }
is roughly equivalent to
init; while (test) { ... ; update }

} 

} 
array[i] = n;

return array; 


} 

© Robert Miller 2007 

© Robert Miller 2007 

5 

What Makes “Good” Software 
easy to understand 
¾ well chosen, descriptive names

¾ clear, accurate documentation

¾¾ indentation
indentation

ready for change 
¾ nonredundant: complex code or important design decisions appear in only 
one place 
¾ “decoupled”: changeable parts are isolated from each other 
safe from bugs 
¾¾ static typing helps find bugs before you run
static typing helps find bugs before you run

¾ testable in small parts

¾ no hidden assumptions waiting to trap you or another programmer later 


© Robert Miller 2007 

Summary 
basic Java 
¾ control statements, expressions, operators 
¾ types and declarations 
¾¾ methods
methods 
¾ strings 
¾ arrays 
properties of good software 
¾ easy to understand

¾ ready for change

¾¾ safe from bugs
safe from bugs


A Larger View of Good Software 
correct 
¾ gets the right answers 
economical 
¾¾ runs ff ast, uses miiniimall resources, dd oesn’’t cost muchh to prodduce 
dependable 
¾ safe from bugs 
maintainable 
¾ easy to understand and ready for change 
usable 
¾ has an effective user interface 
secure 
¾ safe from malicious attacks 
... all these properties matter in practice 
¾ sometimes supporting each other, sometimes in conflict
© Robert Miller 2007 

About 6.005 
lecturers 
¾ Daniel Jackson and Rob Miller 
teaching assistants 
¾ Harold Cooper, Max Goldman, Eunsuk Kang, Clayton Sims, Kuat Yessenov 
Y
 K
  Si
 
k K
  E 
¾ H ld C   M G ld
 Cl
lab assistants 
¾ TBD 

© Robert Miller 2007 

© Robert Miller 2007 

6 

Objectives 
what you should expect to get out of this course 

fundamental programming skills 
¾ how to specify, design, implement and test a program

¾ proficiency in Java and use of Java APIs

¾ use of standard development tools (Eclipse, SVN, JUnit)

engineering sensibilities 
¾ capturing the essence of a problem

¾ inventing powerful abstractions

¾ appreciating the value of simplicity

¾ awareness of risks and fallibilities

cultural literacy 
¾ familiarity with a variety of technologies (http, postscript, sockets, etc) 

Intellectual Structure 
three paradigms 
¾ state machine programming

¾ symbolic programming

¾ object based programming

¾ object-based programming 

pervasive themes 
¾ models and abstractions

¾ interfaces and decoupling

¾ analysis with invariants


incremental approach 
¾ concepts introduced as needed 
¾ deepening sophistication as ideas are revisited 

© Robert Miller 2007 

© Robert Miller 2007 

Your Responsibilities 
assignments

¾ three 1-week explorations

•  writing a program we’ll use as a lecture example

¾ three 2 week problem sets

¾ three 2-week problem sets 
•  both written and programming components

¾ three 2-week projects

•  in rotating teams of 3 people

¾ three 3-hour project labs, one for each project

•  project labs prepare you to get started on the project 
meetings
meetings 
¾ two lectures each week (Mon,Wed, sometimes Fri) 
¾ one recitation each week 
¾ project meetings with your team members and teaching staff 
•  lecture time will often be made available for these meetings 

Grading Policy 
collaboration 
¾ projects in teams of 3: must have different teams for each project 
¾ problem sets and explorations are done individually 
•
•  discussion permitted but writing or code may not be shared
discussion permitted but writing or code may not be shared 
use of available resources 
¾ can use publicly available code, designs, specs 
¾ cannot reuse work done in 6.005 by another student (in this or past term) 
¾ cannot make your work available to other 6.005 students 
grade breakdown 
j 
¾ projectts 40%

¾ 
40%
¾ problem sets 30%

¾ explorations 20%

¾ participation 10%


© Robert Miller 2007 

© Robert Miller 2007 

7 

What You Should Do 
today 
¾ sign up for a recitation on the 6.005 web site 
tomorrow 
¾ go to the reciitation you’’ve been assigned to 
d
i
b
i 
h 
¾ 
Friday 
¾ read Lab 1 before coming to lab

¾ go to your assigned lab location for Lab 1


© Robert Miller 2007 

8 

