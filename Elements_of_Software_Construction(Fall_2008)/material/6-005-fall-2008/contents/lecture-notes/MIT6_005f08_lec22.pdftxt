MIT OpenCourseWare 
http://ocw.mit.edu 

6.005 Elements of Software Construction 
Fall 2008 

For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms . 

Databases
Database servers sit behind big web sites like Amazon 
and eBay
(cid:190) Databases are the standard way to maintain the state of a web site

Databases are embedded in many applications
(cid:190) Firefox browsing history is stored as a database on disk
(cid:190) Subversion stores your source code in a database

Embedded database is an alternative to saving and 
loading a file format
loading a file format
(cid:190) Instead of saving Java heap objects to a file with a textual format like XML, 
you can store the data in a database instead

Relational Databases

Rob Miller
Fall 2008

© Robert Miller 2008

© Robert Miller 2008

Benefits of Using a Database
Persistence
(cid:190) Databases are persistent by default – updates to the database are 
immediately stored on disk
(cid:190) Usually robust to program crashes and hardware reboots
(cid:190) Usually robust to program crashes and hardware reboots
(cid:190) Contrast with objects in the Java heap, which disappear on a crash
Query performance
(cid:190) Databases build and maintain indexes to answer complex queries quickly, 
e.g. “find books written by Stephen King in 2004”
Concurrency
(cid:190) Databases provide an effective synchronization mechanism, transactions, 
(cid:190) Databases provide an effective synchronization mechanism, transactions, 
that allows safe concurrent updates to a pile of relational data

Relational Databases
A relational database is a set of named tables
(cid:190) A table has a fixed set of named columns (aka fields or attributes) and a 
varying set of unnamed rows (aka records or tuples)
Person table
Person table
First Name
Daniel
Rob

3 
l
3 columns
LastName
Jackson
Miller

2 rows

Email
dnj@mit.edu
rcm@mit.edu

(cid:190) Each cell in the table stores a value of a primitive data type
• e.g. string, integer, date, time
• object references are represented by integer IDs
A table represents a relation
(cid:190) In general, a mathematical relation is a set of n-tuples (a binary relation is 
special case, which is a set of pairs)

© Robert Miller 2008

© Robert Miller 2008

12/5/2008

1

Example
An object model we want to store in a database

Song

lyric

duration
!
Integer

albumTracks

Album

songName

albumName

albumArtist

!

!
String

?

!
artistName

Artist

Pure Relational View
One table per binary relation
duration relation
songName relation
songId
songId
1
1
1
2
2
3
3
lyric relation
lyric
songId
Hey, hey, you, you, I don’t like your girlfriend...
3

songName
Mr. Brightside
Mr. Brightside
Somebody Told Me
Girlfriend

duration
4:17
5:57
3:42

albumName relation
albumName relation
albumName
albumId
Hot Fuss
101
102
The Best Damn Thing

albumTracks relation
albumTracks relation
songId
albumId
1
101
101
2
3
102

© Robert Miller 2008

© Robert Miller 2008

Class/Relation View
Often all the exactly-one (!) relations for a class are 
combined into a single table
Song relation
duration
songId
songName
Mr. Brightside
1
4:17
Somebody Told Me 5:57
2
3
Girlfriend
3:24

(cid:190) This table actually represents the Song class
(cid:190) Analogy to objects on the Java heap
gy
j
J
p
• id column is the object’s address in memory, and other columns are 
fields of the object
(cid:190) The id column is usually automatically generated by the database system 
so that all songs have a unique ID
• Analogy: Java’s new operator automatically generates a fresh address
© Robert Miller 2008

Bad Designs
Relations with other multiplicities (+, *, ?) generally 
should not be combined
(cid:190) Otherwise, ? relation would force columns to have empty cells
songId
songId
songName
songName
lyric
lyric
Mr. Brightside
1
2
Somebody Told Me
3
Girlfriend
Hey, hey, you, you, ...
• Sometimes this is done anyway for performance reasons, just like nulls 
are sometimes useful for Java field values
(cid:190) Multiplicity + and * would force columns to become arrays
albumName albumTracks
albumId
101
Hot Fuss
1, 2, 3, ...

albumId
101

albumName
Hot Fuss

track1
1

track2
2

track3
3

track4
4

© Robert Miller 2008

12/5/2008

2

Querying a Relational Database
SQL (“Structured Query Language”)
(cid:190) SQL is a standard language for querying (and mutating) a relational 
database
(cid:190) Most database systems support some flavor of SQL
(cid:190) Most database systems support some flavor of SQL
(cid:190) SQL’s SELECT statement offers a compact language for retrieving subsets 
of relational data
• Find all songs longer than 5 minutes 
SELECT songName FROM Song WHERE duration > 300
(cid:190) If you know nothing else about SQL, you should know about SELECT
• Note that SQL is case-insensitive, so SELECT and select are the same, 
 
 
as are songName and songname
N
  d 

Relational Algebra
SELECT is based on a few simple operations that can 
be performed on relations
(cid:190) Each operation takes one or more relations and produces  a relation
PROJECT
filters the columns
PROJECT
filters the columns
SELECT
filters the rows
PRODUCT adjoins columns from two relations
RENAME
renames columns
(cid:190) A relation is a set of rows, so the usual set operations also apply
UNION
INTERSECTION
DIFFERENCE

© Robert Miller 2008

© Robert Miller 2008

Projection
Projection keeps a set of named columns and discards 
the rest
SELECT songId, duration
FROM   Song
FROM   Song

songId
1
2
3

duration
4:17
4:57
5:57

Selection
Selection keeps the subset of rows that match a 
predicate and discards the rest
SELECT    *
FROM      Song
FROM      Song
WHERE duration > 300

songId songName
2
Somebody Told Me

duration
5:57

(cid:190) Like filtering on the rows

© Robert Miller 2008

© Robert Miller 2008

12/5/2008

3

Product
Cartesian product
(cid:190) The Cartesian product of two relations R1 and R2 is the result of 
concatenating each row in R1 with all rows in R2
SELECT    *
SELECT    
FROM      Song, Album

songId
1
2
3
1
1
2
3

songName
Mr. Brightside
Somebody Told Me
Girlfriend
Mr Brightside
Mr. Brightside
Somebody Told Me
Girlfriend

duration
4:17
5:57
3:24
4:17
4:17
5:57
3:24

albumId
101
101
101
102
102
102
102

albumName
Hot Fuss
Hot Fuss
Hot Fuss
The Best Damn Thing
The Best Damn Thing
The Best Damn Thing
The Best Damn Thing

Joins
A join is a special case of Cartesian product
(cid:190) When the two relations share a column, we only want to concatenate 
rows that have the same value for that column
SELECT    *
SELECT    
use the table name to disambiguate 
g
columns with the same name
FROM      Song,  AlbumTracks
WHERE   Song.songId = AlbumTracks.songId

songId songName
Mr. Brightside
1
2
Somebody Told Me
Girlfriend
3
Mr. Brightside
1
Somebody Told Me
2
3
Girlfriend

duration
4:17
5:57
3:24
4:17
5:57
3:24

albumId
101
101
101
101
102
102

songId
1
1
1
2
2
2

(cid:190) Join can be represented by a product followed by a selection

© Robert Miller 2008

© Robert Miller 2008

Question
How do I get a list of songName, albumName pairs?

songName
Mr Brightside
Mr. Brightside
Somebody Told Me
Girlfriend

albumName
Hot Fuss
Hot Fuss
Hot Fuss
The Best Damn Thing

SELECT    songName, albumName 
FROM      Song, AlbumTracks, Album
WHERE   Song.songId = AlbumTracks.songId 
AND AlbumTracks.albumId = Album.albumId

Other Set Operations
Union, intersection, difference of relations
(cid:190) Find songs longer than 5 minutes or containing “midnight” in the lyric
SELECT songId FROM Song WHERE duration > 300
UNION
UNION
SELECT songId FROM Lyrics WHERE lyric LIKE ‘%midnight%’
(cid:190) Find songs longer than 5 minutes for which we have the lyrics
SELECT songId FROM Song WHERE duration > 300
INTERSECT
SELECT songId FROM Lyrics
(cid:190) Find albums that don’t have any tracks
SELECT albumId FROM Album
SELECT albumId FROM Album
EXCEPT 
SELECT albumId FROM AlbumTracks
(cid:190) These operations are rarely used in practice, because select predicates can 
usually do the job, and database systems are good at optimizing SELECT

© Robert Miller 2008

© Robert Miller 2008

12/5/2008

4

Aggregate Functions
Accumulating a column of data into a single value
(cid:190) How long is the album Thriller?
SELECT    SUM(duration) 
FROM      Song, Album, AlbumTracks
FROM      Song, Album, AlbumTracks
WHERE   Song.songId = AlbumTracks.songId 
AND Album.albumId = AlbumTracks.albumId
AND Album.albumName = “Thriller”

SUM
10:14

Other aggregate functions
(cid:190) AVG
(cid:190) COUNT
(cid:190) MAX
(cid:190) MIN

© Robert Miller 2008

Exercise
Write SELECT statements for the following queries
(cid:190) Find the name of the album with the song named “Girlfriend”

(cid:190) Find names of albums for which we have lyrics (for at least one song)

(cid:190) List all albums, showing album name and number of songs
,
g
g

Grouping
GROUP BY computes aggregate functions on subsets 
of the tuples
(cid:190) How long is each album?
SELECT        albumName  SUM(duration)
SELECT        albumName , SUM(duration)
FROM          Song, Album, AlbumTracks
WHERE       Song.songId = AlbumTracks.songId 
AND Album.albumId = AlbumTracks.albumId
GROUP BY  albumName

albumName
Hot Fuss
Hot Fuss
The Best Damn Thing

SUM
10:14
10:14
3:47

© Robert Miller 2008

Mutating the Database
Insert a row
INSERT INTO Song
VALUES (4, “Thriller”, 6:02)

Update rows
UPDATE Song
SET songName=“Smile Like You Mean It”, duration=4:57
WHERE songId = 1

Delete rows
DELETE FROM Song
WHERE songName = “Girlfriend”

songId songName
Mr. Brightside
1
2
Somebody Told Me
Girlfriend
3

duration
4:17
5:57
3:24

© Robert Miller 2008

© Robert Miller 2008

12/5/2008

5

Concurrency in Databases
Transactions allow concurrent database modifications
(cid:190) A transaction is a block of SQL statements that need to execute together

Transactions implement ACID semantics
Transactions implement ACID semantics
(cid:190) Atomicity – either the full effects of a transaction are recorded or no trace 
of it will be found
(cid:190) Consistency – a transaction is recorded only if it preserves invariants
• e.g.,  every AlbumTrack row must contain an albumId that exists in 
Album and a songId that exists in Song
(cid:190) Isolation – if two transactions operate on the same data, the outcome will 
always be same as executing them sequentially one after the other
(cid:190) Durability – if the transaction completes, its effects will never be lost

Transaction Example
Transfer money between bank accounts
BEGIN TRANSACTION
SELECT balance FROM Account WHERE accountId = 1
and put it in local variable balance1
and put it in local variable balance1
SELECT balance FROM Account WHERE accountId = 2
and call it balance2
balance1 -= 100
balance2 += 100
UPDATE Account SET balance=balance1 WHERE accountId = 1
UPDATE Account SET balance=balance2 WHERE accountId = 2
COMMIT

© Robert Miller 2008

© Robert Miller 2008

Transactions vs. Locks
Transaction is tentative until successful commit
(cid:190) COMMIT fails if a simultaneous transaction changed the same rows and 
managed to commit first
(cid:190) If commit fails, the transaction is rolled back – i.e., it has no effect on the 
(cid:190) If commit fails, the transaction is rolled back i.e., it has no effect on the 
database
(cid:190) Your program can retry the transaction if the commit failed
Database handles low-level concurrency mechanisms
(cid:190) e.g.  it may lock the rows touched, or detect conflicts at commit time
Transactions are widely considered easier to program 
(cid:190) locking discipline and granularity (database, table, row) is managed by the 
(cid:190) locking discipline and granularity (database, table, row) is managed by the 
database implementer
(cid:190) programmer just has to think about which statements need to execute in 
isolation, without acquiring or releasing locks
(cid:190) active research on transactional memory is trying to bring the notion 
of transactions to the shared memory paradigm (like Java objects)

Summary
Relations as database tables
(cid:190) Relational database is a relation-centric implementation of an object model
Normal form
ll
(cid:190) All rows are unique, no entries can be null
 b  
 
i
 
 
(cid:190) All 
 
 
i
Relational algebra for querying
(cid:190) Project, select, and join operators combine relations
(cid:190) SQL select statement uses all three operators
Transactions support concurrency
(cid:190) Widely considered easier than locks

© Robert Miller 2008

© Robert Miller 2008

12/5/2008

6

