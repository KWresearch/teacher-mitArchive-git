Fuzzy and Rough Sets 

Part I


Decision Systems Group

Brigham and Women’s Hospital,

Harvard Medical School


HST 951 Spring 2003 
Harvard-MIT Division of Health Sciences and Technology

Aim


• Present aspects of fuzzy and rough 
sets. 
• Enable you to start reading 
technical literature in the field of 
AI, particularly in the field of fuzzy 
and rough sets. 
• Necessitates exposure to some 
formal concepts. 

HST 951 Spring 2003 

Overview Part I


• Types of uncertainty 
• Sets, relations, functions, 
propositional logic, propositions 
over sets 
= Basis for propositional rule based 
systems 

HST 951 Spring 2003 

Overview Part II 

• Fuzzy sets 
• Fuzzy logic 
• Rough sets 
• A method for mining rough/fuzzy 
rules 
• Uncertainty revisited 

HST 951 Spring 2003 

Uncertainty 

• What is uncertainty? 
– The state of being uncertain. (Webster). 
• What does uncertain mean? 
– Not certain to occur. 
– Not reliable. 
– Not known beyond doubt. 
– Not clearly identified or defined. 
(Webster). 
– Not constant. 

HST 951 Spring 2003 

Uncertainty 

•  Ambiguity: existence of one-to-many 
relations 
– Conflict: distinguishable alternatives 
– Non-specificity: indistinguishable 
alternatives 
•  Fuzziness: 
– Lack of distinction between a set and it’s 
complement (Yager 1979) 
– Vagueness: nonspecific knowledge about 
lack of distinction 

HST 951 Spring 2003 

Uncertainty 

• Klir/Yuan/Rocha: 
Uncertainty 

Fuzziness 

Ambiguity 

Vagueness 

Non-specificity 

Conflict


HST 951 Spring 2003 

Model 

• What is a model? 
– A mathematical representation 
(idealization) of some process 
(Smets 1994) 
• Model of uncertainty: 
– A mathematical representation of 
uncertainty 

HST 951 Spring 2003 

Sets: Definition 


• A set is a collection of elements 
– If i is a member of a set S, we write i˛  S, if 
not we write iˇ  S 
– S = {1,2,3,4} = {4,1,3,2} – explicit list 
– S = {i ˛  Z | 1£  i £  4} – defining condition 
– Usually: Uppercase letters denote sets, 
lowercase letters denote elements in sets, 
and functions. 

HST 951 Spring 2003 

Sets: Operations 

•  A = {1,2} , B = {2,3} – sets of elements 
union: 
A ¨  B = {1,2,3} = {i | i ˛  A or i ˛  B} 
Intersection: 
A ˙  B = {2} = {i | i ˛  A and i ˛  B} 
Difference: 
A - B = {1} = {i | i ˛  A but not i ˛  B} 

HST 951 Spring 2003 

Sets: Subsets


• A set  B  is a  subset of A  if and only 
if  all  elements  in  B  are  also  in  A. 
This is denoted 
B ˝  A. 
• {1,2} ˝  {2,1,4} 

HST 951 Spring 2003 

Sets: Subsets


• The  empty  set  ˘,  containing 
nothing, is a subset of all sets. 
• Also, note that A ˝  A for any A. 

HST 951 Spring 2003 

Sets: Cardinality


• For sets with a finite number of 
elements, the cardinality of a set is 
synonymous with the number of 
elements in the set. 
• |{1,2,3}| = 3 
• | ˘  | = 0 

HST 951 Spring 2003 

Cartesian Product: Set of 

Tuples

•  (a,b) is called an ordered pair or tuple 
•  The cartesian product A ·  B of sets A 
and B, is the set of all ordered pairs 
where the first element comes from A 
and the second comes from B. 
A ·  B = {(a,b) | a ˛  A and b ˛  B} 
•  {1,2} ·  {3,2} = 
{(1,3),(1,2),(2,3),(2,2)} 

HST 951 Spring 2003 

Relations: Subsets of 

Cartesian Products

• A relation R from A to B is a subset 
of A ·  B 
• R ˝  A ·  B 
• {(1,2),(2,3)} is a relation from 
{1,2} to {3,2} 
• {(1,3)} is also a relation from 
{1,2} to {3,2} 

HST 951 Spring 2003 

Binary Relations


•  A relation from a set A to itself is called 
a binary relation, i.e., R ˝  A ·  A is a 
binary relation. 
•  Properties of a binary relation R: 
– (a,a) ˛  R for all a ˛  A, 
• R is reflexive 
– (a,b) ˛  R implies (b,a) ˛  R, 
• R is symmetric 
– (a,b),(b,c) ˛  R implies (a,c) ˛  R, 
• R is transitive 

HST 951 Spring 2003 

Relations: Equivalence  

and Partitions

• A binary relation on A is an 
equivalence relation if it is 
reflexive, symmetric and 
transitive. 
• Let R(a) = {b | (a,b) ˛  R} 

HST 951 Spring 2003 

Relations: Equivalence  

and Partitions

•  If R is an equivalence relation, then for 
a,b ˛  R, either 
– R(a) = R(b) or 
– R(a) ˙  R(b) =˘. 
– R(a) is called the equivalence class of a 
under R 
•  The different equivalence classes under 
R of the elements of A form what is 
called a partition of A 

HST 951 Spring 2003 

Functions: Single Valued 

Relations 

• R ˝  {a,b,c} ·  {1,2} 
• R(a) = {1} 
• R(b) = {2} 
• R(c) = ˘ 
• |R(x)|£  1 for all x, R is 
single valued 

1 
2 
3 

0 
1 

•Is R’ on the right single valued? 


A

B 

R’ = {(1,0),(2,1)}


HST 951 Spring 2003 

Functions: Partial and  

Total 

• A single valued relation is called a 
partial function. 
• A partial function f from A to B is 
total if |f(a)| = 1  for all a ˛  A. It 
is then said to be defined for all 
elements of A. Usually a total 
function is just called a function. 

HST 951 Spring 2003 

Functions: Partial and  

Total 

• If a function f is from A to B, A is 
called the domain of f, while B is 
called the co-domain of  f. 
• A function f with domain A and co­
domain B is often written 
f:A ﬁ  B. 

HST 951 Spring 2003 

Functions: Extensions 


• A partial function g such that f ˝  g 
is called an extension of f. 

a 
b 
c 

1 
2 

a 
b 
c 

1 
2 

B 
A
f = {(a,1),(b,2)} 
HST 951 Spring 2003 

B 
A
g = {(a,1),(b,2),(c,2)} 

Characteristic functions:  

Sets

• A function f:A ﬁ  {0,1} is called a 
characteristic function of 
S = {a ˛  A | f(a) = 1}. 
• S ˝  A 

HST 951 Spring 2003 

Characteristic functions:  

Sets


f = {(a,0),(b,1),(c,1)} 

S = ? 

0 
1 

B 

a 
b 

c 

A

HST 951 Spring 2003 

Propositional Logic 

•  Proposition: statement that is either 
true or false. 

•  “This statement is false.” (Eubulides) 
•  If pain and ST-elevation, then MI. 
Patient is in pain and has ST-elevation. 
What can we say about the patient? 

HST 951 Spring 2003 

Propositional language 

• Language: 
– An infinite set of variables 
V={a, b, ….} 
– A set of symbols {~, v, (, )} 
• Any string of elements from the 
above two sets is an expression 
• An expression is a legal (well 
formed) formula (wff) or it is not 

HST 951 Spring 2003 

Propositional Syntax 

• wff formation rules: 
– A variable alone is a wff 
– If a  is a wff, so is ~a 
– If a  and b  are wff, so is (a  v b) 

• Is (a v ~~~b) a wff? 
• Is a v b a wff? 

HST 951 Spring 2003 

Propositional Operators


Truth functional 

• Negation (not): ~ 
~a 

• Disjunction (or): v 
(a  v b) 

HST 951 Spring 2003 

~ 
0  1 
1  0 

v 
0 
1 

0 
0 
1 

1 
1 
1 

Semantics


• A setting s:V ﬁ  {0,1} assigning 
each variable either 0 or 1, 
denoting true or false respectively 
• An Interpretation IV:wff ﬁ  {0,1} 
used to compute the truth value of 
a wff 

HST 951 Spring 2003 

Semantics 

• Variables 
I(a) = s(a) 
• Composite wff: 
I(~a) = ~I(a) 
I(a  v b) = I(a) v I(b) 

HST 951 Spring 2003 

Semantics Example


I(~(~a v ~b)) = ~I(~a v ~b) 
= ~(~I(a) v ~I(b)) 
= ~(~s(a) v ~s(b)) 

If we let s(a) = 1, s(b) = 0 
I(~(~a v ~b)) = ~(~1 v ~0) 
= ~(0 v 1) = ~1 = 0 

HST 951 Spring 2003 

New Operator: And 

• Conjunction (and): ^ 
(a  ^ b) = ~(~a  v ~b) 

^  0 
0 
0 
0 
1 

1 
0 
1 

HST 951 Spring 2003


New Operator: Implication


• Implication (if…then): ﬁ 
(a  ﬁ  b) = (~a  v b) 

ﬁ  0 
1 
0 
0 
1 

1 
1 
1 

HST 951 Spring 2003


New Operator:  

Equivalence

• Equivalence: « 
(a « b) = (a  ﬁ  b) ^ (b  ﬁ  a) 

«  0 
1 
0 
0 
1 

1 
0 
1 

HST 951 Spring 2003 

Semantics Of New 

Operators

• Conjunction: 
I(a  ^ b) = I(a) ^ I(b) 
• Implication: 
I(a  ﬁ  b) = ~I(a) v I(b) 
• Equivalence: 
I(a « b) = I(a  ﬁ  b) ^ I(bﬁ  a) 

HST 951 Spring 2003 

Propositional 

Consequence: A Teaser

• s = “Alf studies” 
• g = “Alf gets good grades” 
• t = “Alf has a good time” 
– (s ﬁ  g) 
– (~s ﬁ  t) 
– (~g ﬁ ~t) 
(~s v g) ^ (s v t) ^ (g v ~t) = g ^ (s v t) 
At least Alf gets good grades. 

HST 951 Spring 2003 

Propositions Over a Set 


• Propositions that describe 
properties of elements in a set 
• Modeled by characteristic functions 
• Example: even: N ﬁ  {0,1} 
even(x) = (x+1) modulo 2 
even(2) = 1 
even(3) = 0 

HST 951 Spring 2003 

Truth Sets 

• Truth set of proposition over U

p:U ﬁ  {0,1} 
TU(p) = {x | p(x) = 1} 

• Example TN(even) = {2,4,6,…} 

HST 951 Spring 2003 

Semantics


• Semantics are based on truth sets 
– IU(p(x)) = 1 if and only if x in TU(p) 

• Following previous definitions, we 
have that 
– TU(~p) = U – TU(p) 
– TU(p v q)  = TU(p) ¨  TU(q) 
– TU(p ^ q) = TU(p) ˙  TU(q) 

HST 951 Spring 2003 

Semantics Example


•  Two propositions over natural numbers 
– even 
– prime 

TN(even ^ prime) = TN(even) ˙  TN(prime) 
= {2} 
IN(even(x) ^ prime(x)) = 1 if and only if x=2 

HST 951 Spring 2003 

Inference: Modus Ponens 


• Modus Ponens (rule of 
detachment): 
a 
a  ﬁ  b 
b 

Ted is cold 
If Ted is cold, he shivers 
Ted shivers 

An “implication-type rule 
application” mechanism 
HST 951 Spring 2003 

Next Time 

• How to include uncertainty about 
set membership 
• Extend this to logic 
• A method for mining propositional 
rules 

HST 951 Spring 2003 

