
















[MIT_OpenCourseWare,_Massachusetts_Institute_of_Technology]
                              [Submit ../../common/ [Click_to_visit_our
Subscribe to the [Enter Email images/               Facebook_page.][Click
OCW Newsletter   ]            button_subscribe.png] to_visit_our_Twitter
                                                    feed.]
HelpÂ Â Â |Â Â Â Contact_Us
Â 
    * [Click_for_site_home_page.]
    * Courses
      ***** Find courses by: *****
          o Topic
          o MIT_Course_Number
          o Department
      ***** Collections *****
          o Audio/Video_Lectures
          o New_Courses
          o Most_Visited_Courses
          o OCW_Scholar_Courses
          o Supplemental_Resources
      Â 
      ***** Cross-Disciplinary Topic Lists *****
          o Energy
          o Entrepreneurship
          o Environment
          o Life_Sciences
          o Transportation
      Â 
      Â 
      ***** Translated Courses *****
          o ç¹é«å­_/_Traditional_Chinese
          o ç®ä½å­_/_Simplified_Chinese
          o EspaÃ±ol_/_Spanish
          o PortuguÃªs_/_Portuguese
          o à¸ à¸²à¸©à¸²à¹à¸à¸µà¸¢à¸_/_Thai
          o ÙØ§Ø±Ø³Û_/_Persian
          o TÃ¼rkÃ§e_/_Turkish
          o (ë¹ëì¤)íêµ­_/_Korean
          o More...
    * About
          o About_MIT_OpenCourseWare
          o Site_Stats
          o OCW_Stories
          o OpenCourseWare_Consortium
          o Media_Coverage
          o Newsletter
          o Press_Releases
          o OCW's_Next_Decade
    * Donate
          o Make_a_Donation
          o Why_Donate?
          o Become_a_Course_Champion
          o Our_Supporters
          o Other_Ways_to_Contribute
          o Shop_OCW
          o Become_a_Corporate_Sponsor
    * Featured Sites
          o Highlights_for_High_School
          o edX
[Search              ] [Submit ../../common/images/button_search.png] Advanced
                                                                      Search
Home Â» Courses Â» Electrical_Engineering_and_Computer_Science Â» Introduction
to_Computer_Science_and_Programming Â» Syllabus
******  Syllabus  ******
    * Course_Home
    * Syllabus
    * Software
    * References
    * [Expand_Menu] Unit_1
          o Introduction_to_6.00
          o Core_Elements_of_a_Program
          o Problem_Solving
          o Machine_Interpretation_of_a_Program
          o Objects_in_Python
          o Recursion
          o Debugging
          o Efficiency_and_Order_of_Growth
          o Memory_and_Search_Methods
          o Quiz_1
    * [Expand_Menu] Unit_2
          o Hashing_and_Classes
          o OOP_and_Inheritance
          o Introduction_to_Simulation_and_Random_Walks
          o Some_Basic_Probability_and_Plotting_Data
          o Sampling_and_Monte_Carlo_Simulation
          o Statistical_Thinking
          o Using_Randomness_to_Solve_Non-random_Problems
          o Curve_Fitting
          o Optimization_Problems_and_Algorithms
          o More_Optimization_and_Clustering
          o Quiz_2
    * [Expand_Menu] Unit_3
          o More_Clustering
          o Using_Graphs_to_Model_Problems,_Part_1
          o Using_Graphs_to_Model_Problems,_Part_2
          o Dynamic_Programming
          o Avoiding_Statistical_Fallacies
          o Queuing_Network_Models
          o What_Do_Computer_Scientists_Do?
          o Final_Exam
[OCW Scholar]
Â« Previous | Next Â»
***** About This Course *****
Let's start with the strategic goals of this course:
    * Help students (who may or may not intend to major in computer science) to
      feel justifiably confident of their ability to write small programs.
    * Map scientific problems into computational frameworks.
    * Position students so that they can compete for jobs by providing
      competence and confidence in computational problem solving.
    * Prepare college freshmen and sophomores who have no prior programming
      experience or knowledge of computer science for an easier entry into
      computer science or electrical engineering majors.
    * Prepare students from other majors to make profitable use of
      computational methods in their chosen field.
6.00SC can be summarized with these six major topics or objectives:
    * Learning a language for expressing computationsâPython
    * Learning about the process of writing and debugging a program
    * Learning about the process of moving from a problem statement to a
      computational formulation of a method for solving the problem
    * Learning a basic set of "recipes"âalgorithms
    * Learning how to use simulations to shed light on problems that don't
      easily succumb to closed form solutions
    * Learning about how to use computational tools to help model and
      understand data
6.00 is designed to help you become skillful at making the computer do what you
want it to do. Once you acquire this skill, your first instinct when confronted
with many tasks will be to write a program to do the task for you. Said another
way, we want to help you learn to apply computational modes of thought to frame
problems, and to guide the process of deducing information in a computational
manner.
This means that the primary knowledge you will take away from this course is
the art of computational problem solving. Unlike many introductory level
courses, having an ability to memorize facts will be of little help in 6.00.
This course is about learning to solve problems, not learning facts. (This, by
the way, is exactly why all exams are open book.)
***** Prerequisites and Preparation *****
This course is aimed at students with little or no prior programming experience
but a desire to understand computational approaches to problem solving. Now, by
definition, none of you are under-qualified for this course. In terms of being
over-qualified â if you have a lot of prior programming experience, we really
don't want you wasting your time, and in this case we would suggest that you
talk to me about how well this class suits your needs, and to discuss other
options. In addition, we want to maintain a productive educational environment,
and thus we don't want over-qualified students making other students feel
inadequate, when in fact they are only inexperienced.
Since computer programming involves computational modes of thinking, it will
help to have some mathematical and logical aptitude. You should be confident
with your math skills up to pre-calculus.
***** Textbook *****
A textbook for 6.00 is now available. The book and the course lectures parallel
each other, though there is more detail in the book about some topics. The book
is NOT required. We will not be referring to it in assignments or depending
upon it to cover holes in the lectures.
[mp_logo.gif] [Amazon_logo] Guttag, John. Introduction_to_Computation_and
Programming_Using_Python. MIT Press, 2013. ISBN: 9780262519632.
If you choose not to purchase this book, you will probably find it useful to
buy or borrow another book that covers Python. You might check your local
public library's resources, or search online for a free Python text, such as
How_to_Think_Like_a_Computer_Scientist or An_Introduction_to_Python.
Online readings will be posted on the appropriate session pages. A more
complete list of readings and references (not all of which are specifically
assigned during lectures) can be found in the References section.
***** Technical Requirements *****
Since one of the goals of this course is to become familiar with programming,
you will need to install and use the Python programming language and the
interpreter IDLE. Please see the Software section for information and
instructions on downloading the required software.
Most lectures involve programming demonstrations, and the code involved will
generally be posted twice: once as a handout in PDF format, and again as a code
file in .PY (Python) format. Additionally, many problem sets have accompanying
code required for completing the assignment, and these are posted as .PY
(Python) files. If you do not have the software installed, you will not be able
to properly open and use these files.
***** Acknowledgments *****
We would like to thank course TAs Mitchell Peabody, Gartheeban Ganeshapillai,
and Sarina Canelake for their participation in filming 6.00 recitations for OCW
Scholar, and Niki Castle and Elaina Cherry for their work and dedication
adapting the 6.00 materials for Scholar students. We would also like to thank
Eric Grimson for his role in the development of 6.00 teaching material over the
years, and for allowing us to record a guest lecture.
Â 
Â« Previous | Next Â»
*** Courses ***
    * Find_by_Topic
    * Find_by_Course_Number
    * Find_by_Department
    * Audio/Video_Courses
    * OCW_Scholar_Courses
    * Most_Visited_Courses
    * New_Courses
    * Translated_Courses
    * Supplemental_Resources
*** About ***
    * About_OpenCourseWare
    * Site_Stats
    * OCW_Stories
    * OCW_Consortium
    * Media_Coverage
    * Newsletter
    * Press_Releases
    * OCW's_Next_Decade
*** Donate ***
    * Make_a_Donation
    * Why_Donate?
    * Become_a_Course_Champion
    * Our_Supporters
    * Other_Ways_to_Contribute
    * Shop_OCW
    * Become_a_Corporate_Sponsor
*** Featured Sites ***
    * Highlights_for_High_School
    * edX
*** Tools ***
    * Help_&amp;_FAQs
    * Contact_Us
    * Advanced_Search
    * Site_Map
    * Privacy_&amp;_Terms_of_Use
*** About MIT OpenCourseWare ***
MIT OpenCourseWare makes the materials used in the teaching of almost all of
MIT's subjects available on the Web, free of charge. With more than 2,000
courses available, OCW is delivering on the promise of open sharing of
knowledge.
[Massachusetts_Institute_of_Technology_logo_and_name.] [OpenCourseWare
Consortium_logo.] [Creative_Commons_logo_with_terms_BY-NC-SA.]
Â© 2001â2013
Massachusetts Institute of Technology
Your use of the MIT OpenCourseWare site and materials is subject to our
Creative_Commons_License and other terms_of_use.
Â 
