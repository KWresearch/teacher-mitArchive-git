24.954, Spring 2010 
Fox
 

1 

Schlenker 2008 (only the basic cases) 

For Schlenker (like Heim, Karttunen and Stalnaker), the problem of projection is the 
following: 

Given a minimal sentence, S, with presupposition p (henceforth Sp),1 define constraints 
on the CG for the assertion of various sentences that dominate S.   

Strategy: let’s deal with another problem, namely that of explaining various conditions on 
the assertability of conjunctive sentences or sentences that dominate them. 

1. On the distribution of conjunctions 

(1) 	

 

(2) 	

Let C be a context of utterance in which the participants – speaker and 
addressee(s) – share the belief that a given sentence, S1, is true. In C, an utterance 
of the conjunction S1 and S2  is odd. 

Example of a relevant Context:  
Mary just announced that she is pregnant. 
  Mary continues: 
#I am pregnant and I plan to buy many toys for the child I hope to have. 

#If Mary is pregnant, she is pregnant and is planning to buy many toys for the 
child she’s gonna have. 

1.1. Global Redunandancy 

(3) 	

Global Redundancy Condition 
a. 	 A sentence that has the conjunction p and q as a sub-constituent, ϕ(p∧q), is 
not assertable given a context-set, C, if either p or q is globally redundant in ϕ 
given C. 
b. 	 A conjunct p (resp. q) is globally redundant in ϕ(p∧q) given C, if ϕ(p∧q) 
conveys exactly the same information given C as ϕ(q) (resp. ϕ(p)) 
c. 	 The information that a sentence ϕ conveys in C :=  C∩{w: [[ϕ]]w=1} 

While this condition might seem to have the ring of truth, it can’t be right as is: 

(4)  a. 	 #Mary is expecting a daughter, and she is pregnant. 
b. 	 Mary is pregnant, and she is expecting a daughter. 

1 where S is a minimal sentence with presupposition p if S is the minimal sentence dominating a 
presupposition trigger and the computed presupposition is p. 

24.954, Spring 2010 
Fox
 
1.2. Dynamic Triviality 

2 

-There is an account of this paradigm based on Heim’s CCPs. 
-The denotation of a sentence is a context change potential, a function from a context set 
to a subset thereof. 
-This update is dynamic. Instead of assuming that a sentence updates the common ground 
C by simply adding the proposition it expresses to C, the update procedure for a complex 
sentence S consists of a sequence of intermediate updates determined by the constituent 
structure of S. 
-As we’ve seen, each expression in the language is associated by its lexical entry with a 
particular update rule. For conjunction the rule states that S1 and S2  updates C in the 
following fashion: first C is updated by S1  and then the result of this update is updated by 
S2. For other lexical entries there are other lexical rules which I will not repeat here. 

(5)  Dynamic Triviality Condition: at every step of dynamic update, the context set C 
cannot entail the constituent that updates C. 

(van der Sandt 1992, with obvious roots in Stalnaker 1978).


1.3. Incremental Redundancy 

As we’ve seen in the case of presuppositions, the achievement here depends on the 
stipulative nature of the CCPs. 

An alternative: 

(6)  Incremental Redundancy
	A sentence, ϕ(p∧q), is not assertable in C if either p or q is incrementally 
a. 
 
redundant in ϕ given C. 
b. 	 p is incrementally redundant in ϕ(p∧q) if it is globally redundant given C in 
all ϕ'∈ GOOD-FINAL(∧, ϕ). 
b'. 	 q is incrementally redundant in ϕ(p∧q) if it is globally redundant given C in 
all ϕ'∈ GOOD-FINAL(q, ϕ). 
c. 	 A conjunct p (resp. q) is globally redundant in ϕ(p∧q), if ϕ(p∧q) conveys 
exactly the same information given C as ϕ(q) (resp. ϕ(p)).
	ϕ'∈ GOOD-FINAL (α,ϕ) iff it is obtained from ϕ by replacing any number of 
ϕ-constituents pronounced after alpha. 

d. 

 

(6) is clearly preferable to (5) as the theory of the assertability of conjunctive senteces. 
Schlenker’s point is that it can become a theory of presupposition projection once we 
realize a connection between the assertability of sentences that dominate a presupposition 
trigger and the assertability of certain conjunctive sentences. 

24.954, Spring 2010 
Fox
 
3. Core Generalization 

3 

(7) 	

Schlenker’s Generalization: A sentence, ϕ, that dominates Sp, ϕ(Sp) is assertable 
in a context C only if ϕ(p∧Sp) is not assertable in C. 

Evidence: 

(8) 	
 

Context: Mary just announced that she is pregnant.  
  Mary’s Husband: 
a.  #She is pregnant and she is happy about the fact that she is pregnant. 
b.  She is happy about the fact that she is pregnant. 

(9) 	

(10) 	

a.  #If Mary is pregnant, she is pregnant and she knows that she is pregnant.   
b.  If Mary is pregnant, she knows that she is pregnant. 

a.  #Mary is pregnant and she is pregnant and she knows that she is pregnant.   
b.  Mary is pregnant and she knows that she is pregnant.   

Schlenker’s Generalization is entirely expected in Heim’s framework (as we already 
mentioned, probably should be called van der Sandt’s generalization).  

However, Schlenker observes (as we already mentioned) that there is a predictive 
statement of the environments in which ϕ(p∧Sp) is not assertable, and subsequently a 
predictive statement of the projection properties. 

3. Basic setup (restricting attention to cases in which Sp is final) 

(11) Assumption about the representation of Sp: 
Sp has a classical semantics (non-partial), and Sp entails p. 

E.g., The king of France is bald receives the Russellian semantics. 

Assuming no independent factors are involved, we get the following for a sentence ϕ 
which contains only one presupposition trigger (where Sp is the minimal sentence 
dominating the trigger) 

(12) 

Assertable(C, ϕ(Sp)) iff ¬Assertable(C, ϕ(p∧Sp))  


Restricting ourselves to cases in which Sp is the last constituent in ϕ we get the following:  


(13) 	

If no items in ϕ follow Sp, we get: 
 ϕ(Sp)) iff ¬Assertable(C, ϕ(p∧Sp)) iff  ∀r[ϕ(p∧r) ⇔C  ϕ(r)] 
Assertable(C,

Or, we could skip the middle man: 

(14) 	

If no items in ϕ follow Sp, we get: 

24.954, Spring 2010 
Fox
 

Assertable(C,

 ϕ(Sp)) iff ∀r[ϕ(p∧r) ⇔C  ϕ(r)] 

4 

3.1. Unembedded Sp 

Sp is assertable in C iff p∧Sp is unassertable in C.  

p∧Sp is unassertable in C (given (6)), iff [p∧r] ⇔C r, for any choice of r, i.e., iff C⇒p. 

Hence Sp will presuppose p. 


3.2. ¬Sp 

¬Sp is assertable in C iff ¬[p∧Sp] is unassertable in C.  

¬[p∧Sp] is unassertable in C (given (6)), iff ¬[p∧r] ⇔C  ¬r, for any choice of r, i.e., iff  

C⇒p. Hence ¬Sp will presuppose p.  


3.3.  S1∧Sp 

S1∧Sp is assertable in C iff S1∧(p∧Sp) is unassertable in C. 

S1∧(p∧Sp) is unassertable in C (given (6)), iff [S1∧(p∧r)] ⇔C S1∧r, for any choice of r, 

i.e., iff C∧S1⇒p. 

Hence S1∧Sp will presuppose S1→p. 


3.4. S1→Sp 

S1→Sp is assertable in C iff S1→ (p∧Sp) is unassertable in C. 
S1→ (p∧Sp) is unassert. in C (given (6)), iff [S1→ (p∧r)] ⇔C S1→r, for any choice of r, 
i.e., iff C∧S1⇒p. 
Hence S1→Sp will presuppose S1→p. 

3.5. S1∨Sp 

S1∨Sp is assertable in C iff S1∨ (p∧Sp) is unassertable in C. 
S1∨ (p∧Sp) is unassertable in C (given (6)), iff S1∨ (p∧r) ⇔C S1∨r, for any choice of r, 
i.e., iff C∧¬S1⇒p. 
Hence S1∨Sp will presuppose ¬S1→p. 

4. Cases in which Sp is final 

4.1.  Sp∧S1 

Sp∧S1 is assertable in C iff (p∧Sp)∧S1 is unassertable in C. 
' 
'
(p∧Sp)∧S1is unassertable in C (given (6)), iff [(p∧r)♣ r ] ⇔C [(r ♣ r ], for any choice of 
sentences r, r', and connective ♣ , i.e., iff C ⇒p. 
Hence Sp∧S1 will presuppose p. 

24.954, Spring 20
10 
Fox
 
4.2. Sp → S1 

5 

Sp→S1 is assertable in C iff (p∧Sp) →S1 is unassertable in C. 
' 
'
(p∧Sp) →S1is unassertable in C (given (6)), iff [(p∧r)♣ r ] ⇔C [(r ♣ r ], for any choice of 
sentences r, r', and connective ♣ , i.e., iff C ⇒p. 
Hence Sp∧S1 will presuppose p. 

4.3. Sp∨ S1 

Sp∨ S1 is assertable in C iff (p∧Sp)∨S1 is unassertable in C. 
' 
'
(p∧Sp) ∨S1is unassertable in C (given (6)), iff [(p∧r)♣ r ] ⇔C [(r ♣ r ], for any choice of 
sentences r, r', and connective ♣ , i.e., iff C ⇒p. 

5. Is disjunction Symmetric? 

Evidence for symmetry: 

(15) 

a. There is no bathroom here or the bathroom is on the second floor. 
b. The bathroom is on the second floor or there is no bathroom here. 

If it’s symmetric, we need a different theory, and Schlenker considers a non-incremental 
version of his theory. 

However, he considers also another possibility (based on a proposal made to him by 
Spector). 

There is another proposal hinted at in Heim (1990), based on ideas by Soames and by 
Gazdar, namely that presuppositions can get cancelled in certain environments by a 
cancelation process (local accommodation in Heim’s framework. 

Cancelation in Schlenker’s framework amounts to exemption of Sp from its assertability 
condition (from competition with p∧ Sp) 

Cancelation (as suggested by Heim) is only allowed if its avoidance leads to a fatal result. 

In (15)b, if we avoid cancelation, the second disjunct contradicts the common ground and 
that is generally not allowed. (Homework: relate to Hurford’s constraint)   

Spector’s judgment (which I am sympathetic with): (16)a doesn’t have a presupposition 
(associated with the definite her illness) and (16)b does. 

(16) a.  Either she has no disease with detectable symptoms, or her illness will be evident 
to the doctor. 
b. 	 Either her illness will be evident to the doctor, or she has no disease with 

detectable symptoms. 


24.954, Spring 2010 
Fox
 

**** 

6 

Incremental-Presupposition-Transparency (IPT)  

(17) 	 Constraint on Conjunction (version 2) 
A sentence, X, which dominates p∧q, X(p∧q), is not assertable in C if the first 
conjunct is idle no matter what comes after the first conjunct: 

∀X'∈Good-final(X, ∧) [X'(p∧r) ⇔C X(r)] 

X'∈Good-final(X,a) if X' can be derived from X by replacing constituents that 
follow a in X. 

Assuming no independent factors are involved, we get the following for a sentence X 
which contains only one presupposition trigger (where Sp is the minimal sentence 
dominating the trigger) 

(18) 	 Assertable(C, X(Sp)) iff ¬Assertable(C, X(p∧Sp)) iff 
∀X'∈Good-final(X, ∧) [X(p∧r) ⇔C X(r)] 

Or, we could skip the middle man: 

(19) 

Assertable(C, X(Sp)) iff ∀X'∈Good-final(X, ∧) [X(p∧r) ⇔C X(r)] 

3.5. S1∨Sp 

S1∨Sp is assertable in C iff S1∨ (p∧Sp) is unassertable in C. 
S1∨ (p∧Sp) is unassertable in C (given (Error! Reference source not found.), iff S1∨ 
(p∧r) ⇔C S1∨r, for any choice of r, i.e., iff C∧¬S1⇒p. 
Hence S1∨Sp will presuppose ¬S1→p. 

This seems to be a good result: 

(20) 	 Either this house has no bathroom, or the bathroom is well hidden. 

24.954, Spring 2010 
Fox
 
4.2. Sp∨S1 

7 

Sp∨S1 is assertable in C iff (p∧Sp)∨ S1 is unassertable in C. 

(p∧Sp)∨ S1 is unassertable in C (given (Error! Reference source not found.), iff (p∧r)∨

S1 ⇔C r ∨ S1, for any choice of r, i.e., iff C∧¬S1⇒p. 

Hence Sp∨S1 will presuppose ¬S1→p. 


This also seems to be good result: 


(21)  Either the bathroom is well hidden, or there is no bathroom. 

5. [¬Sp]→S1 

[¬Sp]→S1 is assertable in C iff [¬(p∧Sp)]→S1 is unassertable in C. 
[¬(p∧Sp)]→S1 is unassertable in C (given (Error! Reference source not found.), iff 
[¬(p∧r)]→S1 ⇔C [¬r]→S1, for any choice of r, i.e., iff [¬S1→ (p∧r)]→ ⇔C [¬S1→ r], 
i.e., iff C∧¬S1⇒p. 

Hence [¬Sp]→S1 will presuppose ¬S1→p (i.e, the same presupposition as that of a 
disjunction of Sp or S1). 

This presupposition is radically different from that of Heim, and Philippe presents 
evidence in its support: 

(22) 

a. If Mary is pregnant, her doctor knows that she is pregnant. 
b. If Mary’s doctor doesn’t know that she is pregnant, she isn’t pregnant. 

We want to generalize these results. Schlenker discusses this in a separate paper that I 
didn’t read, for the incremental version…A naïve first step: 

6. ¬A when A presupposes p and dominates a single atomic Sq. 

A presupposes p. Hence A[Sq/q∧Sq] is unassertable in C iff C⇒p. Given (Error! 
Reference source not found., C⇒p iff for any choice of r A[Sq/q∧r] ⇔C A[Sq/r]. Since 
X ⇔C Y iff ¬X ⇔C ¬Y, we derive 

C⇒p iff for any choice of r ¬A[Sq/q∧r] ⇔C ¬A[Sq/r]. I.e., we derive that ¬A 
presupposes p. 

Homework (optional): see what happens with the other connectives, and when you allow 
for more than one presupposition trigger ☺ 

7. Symmetry in Conjunction? 

Sp∧S1: Sp∧S1 is assertable in C iff (p∧Sp)∧S1 is unassertable in C. 

24.954, Spring 2010 
Fox
 
(p∧Sp)∧S1 is unassertable in C (given (Error! Reference source not found.), iff 
(p∧r)∧S1 ⇔C r∧S1, for any choice of r, i.e., iff C∧S1⇒p. 
This doesn’t seems to be good result: #Sp∧p 

8 

(23) 	

#The king of France is bald and France has a king. 

8. Proposal 

(24) 	 Constraint on Conjunction (version 2) 
A sentence, X, that dominates p∧q is not assertable in C if one of the following 
holds: 
a.  ∀r [X[p∧q/ p∧r] ⇔C X[p∧q/ r]] 
b. 
[X[p∧q] ⇔C X[p∧q/ p]] 

(the first conjunct is idle no matter what the second conjunct is) 
(the second conjunct is idle given the first conjunct) 

9. Further Evidence 

9.1. No presupposition when p ⇒ Sp  (i.e., when p ⇔ Sp) 

(25) 	

(26) 	

a.  The king of France exists. 
b.  ?France has a king and the king of France exists 

a.  The king of France doesn’t exist. 
b.  ?It’s not the case that France has a king and the king of France exists 

Note: the argument would be more compelling if we had a semantics, I.e. if we knew 
why p ⇔ Sp. 

9.2. Sp∧S1 where S1 is more informative than p. 

(27) 	

a.  I can tell you that John knows he is sick and that he has cancer. 
b.  Is it true that John knows he is sick and that he has cancer? 
c.  It’s not the case that John knows he is sick and that he has cancer. 

10. Disjunction (potential problem) 

(28) 	 Either this house has no bathroom, or it has a bathroom and the bathroom is well 
(Schlenker pc, attributing to Heim pc) 
hidden. 

We get the right projection for disjunction based on our constraints on conjunction, but 
the constraints on conjunction seem to give the wrong results.  

Basic fact 

(p∨q) ⇔ (p∨([¬p]∧q)) 

9


24.954, Spring 2010 
Fox

Could we capitalize on the following fact?  


¬[(p∇q) ⇔ (p∇([¬p]∧q))] 


See our discussion of Hurford’s constraint.  


10. Disjunction (potential problem) 

11. Quantification 

11.1  	 Q A [λx.[B(x)]p(x)]. 

Universal Quantifiers 

(29) 	

a.  Every one of these ten boys drives his car to school. 
b. 	 At least one of these ten boys drives his car to school. 

(30) 	 Every A [λx.[B(x)]p(x)]. 
To get rid of clutter, we will write  
∀x[A(x) → Bp(x)] 

∀x[A(x) → Bp(x)] is assertable in C iff ∀x[A(x) → p(x)∧ Bp(x)] is unassertable in C. 
∀x[A(x) → p(x)∧Bp(x)] is unassertable in C (given (Error! Reference source not 
found.), iff  
∀x[A(x) → p(x)∧R(x)] ⇔C  ∀x[A(x) →  R(x)], for any choice of R, i.e., iff 
C ⇒ ∀x[A(x) → p(x)]. 

Proof (of the last iff statement): 

1.  Assume C ⇒ ∀x[A(x) → p(x)], then 
	Assume ∀x[A(x) →  R(x)]. It automatically follows that  
2. 
∀x[A(x) →  p(x)∧R(x)]

 

 
 
 

	Assume ∀x[A(x) →  R(x)] ⇔C  ∀x[A(x) →  p(x)∧R(x)] 
1. 
2. 	 Choose for R the tautological preidicate (λx. x=x).  

We now get in C  

(tautology) 
3.	 ∀x[A(x) → x=x] 
 
  
4.	 ∀x[A(x) →  p(x)∧x=x] 
 
(by 1) 
 
5.	 ∀x[A(x) →  p(x)] 

 
 
 

 
 
 

Existential Quantifiers 

(31) 	 ∃x[A(x)∧Bp(x)]. 

24.954, Spring 2010 
Fox
 
∃x[A(x)∧Bp(x)] is assertable in C iff ∃x[A(x)∧ p(x)∧ Bp(x)] is unassertable in C. 
∃x[A(x)∧ p(x)∧ Bp(x)] is unassertable in C (given (Error! Reference source not 
found.), iff  
∃x[A(x)∧ p(x)∧ R(x)] ⇔C  ∃x[A(x)∧R(x)], for any choice of R, i.e., iff 
C ⇒ ∀x[A(x) → p(x)]. 

10 

Proof (of the last iff statement): 

1.  Assume C ⇒ ∀x[A(x) → p(x)], then 
2. 
	Assume ∃x[A(x)∧R(x)], call this x, a. By 1, p(a), hence  
∃x[A(x)∧ p(x)∧ R(x)] 

1.  Assume ∃x[A(x)∧ p(x)∧ R(x)] ⇔C  ∃x[A(x)∧R(x)] 
2.  Let a∈A, and choose for R the predicate λx. x=a (if A is empty, we’re done) 
3.  Since ∃x[A(x)∧x=a], we conclude by 1, ∃x[A(x)∧p(x)∧x=a]. 
4.  This x can only be a, hence p(a). 
5.  This hold for any a∈A, hence ∀x[A(x) → p(x)] 

Note: As pointed out by Heim (1983), and later by Beaver, this prediction seems too 
strong. 

A few of these 10 women are pregnant. (?) Furthermore, at least one of these 10 women 
is pregnant and happy to be pregnant.  

Each of these 10 women is pregnant. (?) Furthermore, at least one of these 10 women is 
pregnant and happy to be pregnant.  

(32) 	 Constraint on Conjunction (speculation, will be too weak for what follows) 
  A sentence, X(p∧q) is not assertable in C if one of the following holds: 
 

a. 

b. 

[X(p) ⇔C X(T)]  where T is a tautology 
(the first conjunct is idle given a  tautological second conjunct) 
(the second conjunct is idle given the first conjunct) 

[X(p∧q) ⇔C X(p) 

(33) 	 ∃x[A(x)∧Bp(x)]. 

∃x[A(x)∧Bp(x)] is assertable in C iff ∃x[A(x)∧ p(x)∧ Bp(x)] is unassertable in C. 

∃x[A(x)∧ p(x)∧ Bp(x)] is unassertable in C (given (32), iff  

∃x[A(x)∧ p(x)∧ T(x)] ⇔C  ∃x[A(x)∧T(x)], for any choice of R, i.e., iff ? 

C ⇒ ∃xA(x) → ∃x[A(x) ∧ p(x)]. 


Proof (of the last iff statement): 

24.954, Spring 2010 
Fox
 

11 

1.  Assume C ⇒ ∃xA(x) → ∃x[A(x) ∧ p(x)] then 
2. 
	Clearly ∃x[A(x)] ⇒C  ∃x[A(x) ∧ p(x)] 

1.  Assume ∃x[A(x)∧ p(x)] ⇔C  ∃x[A(x)] 
2.  C∧∃x[A(x)] ⇒C ∃x[A(x)∧ p(x)], Hence 
3. 
	C⇒ ∃xA(x) → ∃x[A(x) ∧ p(x)]. 

11.2  Q (NP [λx.[RC(x)]p(x)]) (VP) 

Universal Quantifiers 

(34)  Among these ten boys  
a. 	 Every one who likes his car bought this policy. 
b. 	 At least one person who likes his car bought this policy. 

(35)  ∀x[NP(x)∧RCp(x) → B(x)] 

∀x[NP(x)∧RCp(x) → B(x)] is assertable in C iff ∀x[NP(x)∧p(x)∧RCp(x) → B(x)] is 
unassertable in C. 
∀x[NP(x)∧p(x)∧RCp(x) → B(x)] is unassertable in C (given (Error! Reference source 
not found.), iff  
∀x[NP(x)∧p(x)∧R(x) → B(x)] ⇔C  ∀x[NP(x)∧R(x) → B(x)] for any choice of R, i.e., iff  
C ⇒ ∀x(NP(x) → [p(x) ∨ B(x)]) 

Proof (of the last iff statement): 

1.  Assume C ⇒ ∀x(NP(x) → [p(x) ∨ B(x)]), then 
2. 
	Assume ∀x[NP(x)∧p(x)∧R(x) → B(x)] 
3.  Let x∈NP∩R. Given 1, x∈p or x ∈B. If x∈p (by 2) x∈B, hence in either 
case x∈B. Hence ∀x[NP(x)∧R(x) → B(x)] 

1.  Assume ∀x[NP(x)∧p(x)∧R(x) → B(x)] ⇔C  ∀x[NP(x)∧R(x) → B(x)] 
2. 	 Let R be the complement of p, we derive:  
∀x[NP(x)∧p(x)∧¬p(x) → B(x)] ⇔C  ∀x[NP(x) )∧¬p(x) → B(x)] 
3. 	 Since the left hand side is a tautology, C ⇒ ∀x[NP(x)∧¬p(x) → B(x)] 
⇒ ∀x(NP(x) → [p(x) ∨ B(x)]) 

This is very different from what is commonly assumed, but is it necessarily a bad result? 

Not obvious to me: 

(34)a suggests that every boy has a car, but that might be an artifact of the particular 

example (of our particular choice for the predicate B): buying the (relevant) policy 

suggests owning a car. Things don’t seem very different in (36).  


24.954, Spring 2010 
Fox
 
(36) 	 Among these ten boys everyone who didn’t buy this policy doesn’t like his car. 

12 

Consider the following: 

(37) 	 Among these ten boys  
a.  Everyone who is sick knows that he is sick. 
b.  Everyone who doesn’t know he is sick isn’t sick. 

(38) 	 Among these ten boys, everyone who doesn’t have a car is a friend of mine. 
Also everyone who hates his car is a friend of mine. 

Existential Quantifiers 

(39) 	 ∃x[NP(x)∧RCp(x)∧B(x)] 

∃x[NP(x)∧RCp(x)∧B(x)] is assertable in C iff ∃x[NP(x)∧ p(x)∧ RCp(x)∧B(x)] is 
unassertable in C. 
∃x[NP(x)∧ p(x)∧ RCp(x)∧B(x)] is unassertable in C (given (Error! Reference source 
not found.), iff  
∃x[NP(x)∧ p(x)∧ RCp(x)∧B(x)] ⇔C  ∃x[NP(x)∧ p(x)∧ RCp(x)∧B(x)], for any choice of 
R, i.e., iff 
∃x[NP(x)∧ B(x) ∧ p(x)∧ RCp(x)] ⇔C  ∃x[NP(x)∧B(x)∧ RCp(x)], 
i.e., iff 
C ⇒ ∀x(NP(x)∧B(x)  → p(x)) 

This is again very non-traditional, but is it obviously bad? 

(40) 	 a. Among these ten boys, at least one person who likes his car is a friend of mine. 
b. Among these ten boys, at least one person who is a friend of mine likes his car. 

MIT OpenCourseWare
http://ocw.mit.edu 

24.954 Pragmatics in Linguistic Theory 
Spring 2010 

For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms . 

