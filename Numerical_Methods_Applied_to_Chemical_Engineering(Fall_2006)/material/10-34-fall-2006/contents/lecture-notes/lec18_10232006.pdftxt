10.34, Numerical Methods Applied to Chemical Engineering 
Professor William H. Green 
Lecture #18: Optimization. Sensitivity Analysis. Introduction: Boundary Value 
Problems (BVPs). 
 
Summary: Optimization with Constraints 
minx f(x) such that   cm(x) - sm = 0  
sm ≥ 0  m = 1 … Ninequalities 
 
 
 
minx f(x) + ξ(c-s)2
sm = 0  m > Ninequalities 
 
 
penalty method, second term ξ(c-s)2 is optional 
 

 

 

 

Augmented 

Lagrangian  

(LA) 

 

{see book} 

 

 

 

 

 

 

 

 

 

x

=

c
⎞
⎟
λ
⎟
⎟
s
⎠

⎛
⎜
⎜
⎜
⎝

 

 

 

 

KKT conditions:  at constrained (local) minimum: 
(cid:86)xf – Σm(λm (cid:86)xcm) = 0  (cid:198) 
cm – sm = 0 
λmcm = 0  
sm ≥ 0  
sm = 0  

m = 1 … Ninequalities 
equalities 

 

 

∇

c

m

∑
f
λ
−∇
m
c
s
−
m
c
λ
mm
s

xF
)(

0
==

⎛
⎜
⎜
⎜
⎜
⎜
⎝
Newton (cid:198) SQP 

m

m

 

⎞
⎟
⎟
⎟
⎟
⎟
⎠

 

If everything is linear:  (cid:198)  SIMPLEX  (i.e. many business problems) 
g(x) = 0  (cid:198)  xN = G(x1, …, xN-1) 
Unconstrained  (cid:198) trust region Newton-type BFGS 

gigantic (cid:198)  conjugate gradient 

In Chemical Engineering, the problems often involve models with differential equations: 

o

 
−

tY
(
i

f(x) = 

cost 
return 
)
(
∑
tYw
x
x
);
(
);
i
i
i
knobs 
         what we need      what we produce 
(can adjust) 
feed composition   
 

 

f

Need Jacobian of G with respect to Y; need in stiff solver to solve. 

 

 

 

Yd
dt
Cite as: William Green, Jr., course materials for 10.34 Numerical Methods Applied to Chemical 
Engineering, Fall 2006. MIT OpenCourseWare (http://ocw.mit.edu), Massachusetts Institute of 
Technology. Downloaded on [DD Month YYYY]. 

xYG
);(

xY
)(
0

tY
(

=

=

)

 

0

 

Need gradient and f. 

To use all of our methods, we need to be able to compute:  

f
∂
x
∂

j

=

w
i

∑
i

i

Y
∂
,σ
x
∂

j

⎛
⎜
⎜
⎝

−

)

f

tY
(
∂
i
x
∂

j

 

⎞
⎟
⎟
⎠

 

 

 

⎞
=⎟
⎠

⎛
⎜
⎜
⎝

∑
n

G
∂
Y
∂
n

Y
∂
n
x
∂

j

⎞
⎟
+⎟
⎠

G
∂
x
∂

j

 

 

i

 

 

 

 

 

 

 

how do you compute this? 

{“sensitivity of Yi(tf) to xj”}  

 

chain rule 

 
Y
∂
i
t
∂

 

 

∂
x
∂

j

⎛
⎜
⎝

 

 

∂
t
∂

⎛
⎜
⎜
⎝

Y
∂
i
x
∂

j

⎞
⎟
⎟
⎠

 

 
   sij 
d
dt

s

   (cid:206)   (cid:86)f     

 (for every x we get an (cid:86)f that can be used for optimization) 

i

ij

G
∂
Y
∂
n

⎛
⎞
= ∑
⎜⎜
+⎟⎟
⎝
⎠
n
solve this with initial conditions 

G
∂
x
∂

s

nj

j

i

  {Jacobian of G} 
       J   
Have n2 differential equations; stiff; linear in s. 

 

 

SOLVE for s and f simultaneously 

 

 

Sensitivity Analysis 
Programs to do this:  DASPK  

 

 

 

 

 

 

 

 

DAEPACK 

DSL485 

 
G
∂
Y
∂
n

DASAC 
G
∂
x
∂

 

i

i

j

ij

nj

s

s

d
dt

⎞
+⎟⎟
⎠

⎛
= ∑
⎜⎜
⎝
n
Initial Conditions 
What is sji(t0)? 
{most knobs} 
sji(t0) = 0  
sji(t0) = 1 
{for adjustment of Y0} 
Professor Barton teaches an advanced course in optimization. 

10.34, Numerical Methods Applied to Chemical Engineering 
Prof. William Green 
 
 
Cite as: William Green, Jr., course materials for 10.34 Numerical Methods Applied to Chemical 
Engineering, Fall 2006. MIT OpenCourseWare (http://ocw.mit.edu), Massachusetts Institute of 
Technology. Downloaded on [DD Month YYYY]. 

Lecture 18 
Page 2 of 4 

 

 

Boundary Value Problems (BVPs) 
Conservation Laws:  ∂φ/∂t = -(cid:86)
·(φv) - (cid:86)·JD + S(φ) 
 
 
 
JD = Γ+(cid:86)φ  
isotropic:  JD = -c(cid:86)φ  
for steady-state, isotropic:  0 = -(cid:86)·(φv) - c(cid:86)2φ + S(φ)  ∀ x  
 
 
 
 
 
     Laplacian 

convection  diffusion  reaction 

 

 

 

Dirichlet  

Symmetry   

von Neumann  

Boundary conditions: 
φ(boundary) = number 
(cid:86)φ(boundary) = number or 0 
∂
φ
jx
∂
φ(x) infinite  {rare to find exact} 
adjust: large finite number (104) 
φapprox(x) = f(x; c) 
 

0=

 

 

 

basisN
φapprox =  ∑
n
1
=

Basis function expansions 
(
)
2
v
s
c
(
(
)
)
⋅∇−
∇+
+
φ
φ
φ
approx
approx
approx
(cid:11)(cid:11)(cid:11)(cid:11)(cid:11)(cid:11)(cid:11)
(cid:11)(cid:11)(cid:11)(cid:11)(cid:11)(cid:11)(cid:11)
(cid:8)
(cid:9)
(cid:10)
x
c
,(
),
ℜ
φ
approx

Ψ∫
m
Nm
,1
=
basis
CB
.
.

x
)(

 

n

c

Ψ
n

x
)(

=

0

x
)(
φ
approx

=

xf
{;(
})
φ
i

φ
approx

(

x

i

)

called “Residual” 

x
}{
i

=

mesh 

grid

 
interpolat
ion
some

 

 

−
φφφ
∂
Finite difference 
i
i
1
1
≈
−
+
 
 
 
x
x
x i
approximation 
−
∂
x
to differential equation 
φ(boundary)  {φ}  i = 1,N 
Dirichlet 
−
φφφ
∂
0
2
=
x
x
x
∂
−

φ
CB
.

1
+

 

i

i

1
−

.

2

0

x
1

State how you did 
approximation because there 
are many ways to do it 
 

 

 

von Neumann 

10.34, Numerical Methods Applied to Chemical Engineering 
Prof. William Green 
 
 
Cite as: William Green, Jr., course materials for 10.34 Numerical Methods Applied to Chemical 
Engineering, Fall 2006. MIT OpenCourseWare (http://ocw.mit.edu), Massachusetts Institute of 
Technology. Downloaded on [DD Month YYYY]. 

 
Lecture 18
Page 3 of 4
 

∂φ
0xx∂

 given φ0? 

Usual  (cid:198)  2nd order polynomials 

 

 
 

φ
0

=

f

 

x
)(
φ

=

(
φ

x

)

+

0

φ
∂
x
∂

x

0

(

x

−

x

0

)

+

1
2

2
φ
∂
x
2
∂

x

0

(

x

−

x

0

2

)

 

 
 
(
,
φφ
2
1

)

        unknown 
   known   
 
  (cid:57)  (cid:57) 
 
 
(
,
)
φφ
φφ
∂
2
1
2
=
x
x
∂
−

−
x

f

x
1

2

0

  unknown 

 

(
φ

x
1

)

=

φ
0

+

(
φ

x

)

2

=

φ
0

+

φ
∂
x
∂

x

0

φ
∂
x
∂

x

0

(

x
1

−

x

0

)

+

1
2

2
φ
∂
x
2
∂

x

0

(

x
1

−

x

0

2

)

...

 

(

x

2

−

x

0

)

+

1
2

2
φ
∂
x
2
∂

x

0

(

x

2

−

x

0

2

)

...

 

0

0

φ
0

=

φ
1

x
(
2
x
(
1
x
(
2
x
(
1

−
−
−
−

x
x
x
x

0

0

2

2

)
)
)
2
)

2

−

φ
2

−

1

for 

∂
φ
xx
∂

0

=0 

φ
If Δx uniform,  
0

4
φφ
−
1
2
3
This is how you find out B.C. with second order polynomial schemes and a finite difference 

=

 

approximation. 

 

10.34, Numerical Methods Applied to Chemical Engineering 
Prof. William Green 
 
 
Cite as: William Green, Jr., course materials for 10.34 Numerical Methods Applied to Chemical 
Engineering, Fall 2006. MIT OpenCourseWare (http://ocw.mit.edu), Massachusetts Institute of 
Technology. Downloaded on [DD Month YYYY]. 

Lecture 18 
Page 4 of 4 

