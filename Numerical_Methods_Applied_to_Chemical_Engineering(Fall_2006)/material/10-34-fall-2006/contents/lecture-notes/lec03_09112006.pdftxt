10.34, Numerical Methods Applied to Chemical Engineering 
Professor William H. Green 
Lecture #3: Matrix Factorization. Modularization. 
 

x
v
=⋅U

v
v

•
•
•
0
•
•
00
•
000

⎛
⎜
⎜
⎜
⎜⎜
⎝

•
•
•
•

⎛
⎞
⎜
⎟
⎜
⎟
⎜
⎟
⎜⎜
⎟⎟
⎠
⎝

2

x
1
x
x
x

3

4

⎞
⎟
⎟
⎟
⎟⎟
⎠

=

⎛
⎜
⎜
⎜
⎜⎜
⎝

2

v
1
v
v
v

3

4

⎞
⎟
⎟
⎟
⎟⎟
⎠

x
1

⎛ •
⎜
0
⎜
⎜
0
⎜⎜
0
⎝

⎞
⎟
⎟
⎟
⎟⎟
⎠

+

x

2

⎛
⎜
⎜
⎜
⎜⎜
⎝

•
•
0
0

⎞
⎟
⎟
⎟
⎟⎟
⎠

+

x

3

⎛
⎜
⎜
⎜
⎜⎜
⎝

•
•
•
0

⎞
⎟
⎟
⎟
⎟⎟
⎠

+

x

4

⎛
⎜
⎜
⎜
⎜⎜
⎝

•
•
•
•

⎞
⎟
⎟
⎟
⎟⎟
⎠

=

v
v
)(

 

 
function x = backsub(U,v) 
N = length(v);    % dimension of matrix 
 
for i = 1:(N-1) 
    m = N+1-i; 
 % backwards from bottom matrix 
    x(m) = v(m)/U(m,m);   % solve equation with one unknown 
    v = v – x(m)*U(:,m);  % move terms involving known x(m) to r.h.s. 
end 
 
x(1) = v(1)/U(1,1); 
% tested using: U = [1 2 3; 0 4 5; 0 0 6], v = [0 1 3] 
% x = [-.75 -.375 .5] 

To comment a 
block of text: 
Ctrl-R 

Gaussian Elimination 
 
⎛
⎜
⎜
⎜
⎝

321
654
087

Augment

0
1
3

⎞
⎟
⎟
⎟
⎠

⎛
⎜
⎜
⎜
⎝

⎞
⎟
⎟
⎟
⎠

=

*

xv

3
2
1
3-0
6-
21-6-0

⎛
⎜
⎜
⎜
⎝

0
1
3

⎞
⎟
⎟
⎟
⎠

nd
row 2*2 
add
rd
row 3 to

 

321
⎛
⎜
  :
654
⎜
⎜
087
⎝
1
2
3
6-3-0
0
0
9-

0
⎞
⎟
st
row1*4- 
add
  
1
⎟
nd
row 2 to
⎟
3
⎠
0
1
1

⎛
⎜
⎜
⎜
⎝

⎞
⎟
⎟
⎟
⎠

          
          
   
          
          

 Upper 
Triangular
solution
 
⇒

 
*gauss.m* 
 
function [U,v] = gauss(A,b) 
% uses Gaussian elimination to convert Ax=b to Ux=v 
% where U is upper triangular and A is NxN matrix and b is Nx1 matrix 
 
M = [A b];  N = length(b); 
for i = 1:(N-1) 
for j = (i+1):N 
 
 
 
lambda = -M(j,i)/M(i,i); 
 
M(j,i) = M(j,i)+lambda*M(i,i); 
 
end 

end 
U = M(i,1:N) 
unpacks augmented solution
v = M(i,N+1) 
Gaussian Elimination has N3 operations. Not good when N is large (106). Backsub 
requires N2 operations. 
 

Cite as: William Green, Jr., course materials for 10.34 Numerical Methods Applied to Chemical 
Engineering, Fall 2006. MIT OpenCourseWare (http://ocw.mit.edu), Massachusetts Institute of 
Technology. Downloaded on [DD Month YYYY]. 

av

can span entire 2D vector space (linear combination)

v
b
 
Figure 1. 2 vectors with a common origin and different directions. 
r
bcac
x
v
v
=
1 +
 
   
2
r
v
ac
bc
dc
x
v
v
=
+
+
 
1
3
2
*Not linearly independent if: 
 

 can span entire 3D vector space (linear combination) 
av
r
v
ac
bc
d
v
Figure 2. 2 vectors with a 
=
1 +
 
 
2
common origin and direction.
bv
 
 
 
 
 

same direction - not  independent 

  

       

 
rank (m) = # of linearly independent column vectors = dimension of space spanned 
 
by column vectors 
 
Existence     A * x = b
 
x
1

solution exists if: 
rank(A) == rank ([A b]) 
if rank(A) = N and A is NxN: does not matter what  br
is; always a solution 

col
N

col
2

col
1

⎞
=⎟⎟
⎠

⎞
+⎟⎟
⎠

⎞
+⎟⎟
⎠

+

x

v
b
)(

 

⎛
⎜⎜
⎝

N

L

⎛
⎜⎜
⎝

x

2

⎛
⎜⎜
⎝

 

Ay = 0
Ax = b
A(x+y) = 
b

 
If null space of A does not include any 
vector beyond 0, then solution unique 
The null space is the set of all vectors 
of such that x = 0. 
 
Run *gauss.m* => Error! 
NaN:  error – not a number (divided by 0) 
Need to pivot rows to avoid 0 in diagonal 
* see “gausselim_pivot.m” online * 
 
A*x1 = b1
A*x2 = b2
 
L-1 * A * x1 = L-1 * b1  
 
    U 
 
LUx = b
Lv = b  

Gauss elimination has nothing 
, only A 
to do with b

 
Ux=v
 

    v

 

 

L:  lower triangular 

Alternative method 
to Gaussian elimination 

 

For more info: help lu 

MATLAB:  [L,U,P] = lu(A) 
(factorizing A) 
A = P’*L*U 
PAx = Pb 
 
LU 
 
LUx = Pb 
 
Lv = P*b (forward sub) 
 
Ux = v  (backward sub) 

 

10.34, Numerical Methods Applied to Chemical Engineering 
Prof. William Green 
 
 
Cite as: William Green, Jr., course materials for 10.34 Numerical Methods Applied to Chemical 
Engineering, Fall 2006. MIT OpenCourseWare (http://ocw.mit.edu), Massachusetts Institute of 
Technology. Downloaded on [DD Month YYYY]. 

Lecture 1 
Page 2 of 2 

