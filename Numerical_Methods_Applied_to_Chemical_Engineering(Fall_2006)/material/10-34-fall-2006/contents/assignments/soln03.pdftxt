10.34 – Fall 2006 
Homework #3 - Solutions 

Problem 1: Peak Temperature 
In this problem, there are two situations that we are concerned with: 100% conversion 
and equilibrium conversion.  The 100% case is relatively easy to solve, since one only 
needs to solve the enthalpy with all of the CO being converted to products (it is easy 
because the outlet flow rates are known a priori.  The equilibrium case is slightly more 
complicated because one must also solve the equilibrium condition: 
[ H  ] [CO  ]
⎛  P  ⎞ − ∆n 
⎛ −∆G 
⎛ −∆G 
⎞
⎞
K A  = exp ⎜  RT
Rxn  ⎟ = KC  ⋅ ⎜ RT
⇒  exp ⎜  RT
2 
2 
Rxn  ⎟ = [CO
0  ⎟
] [ H O
]
 
 
 
⎝
⎠
⎝
⎠ 
⎝
⎠ 
2 
Since are dealing with an equimolar reaction, the dN term goes away.  We can also treat 
the concentrations as molar flow rates in this case, since the volume terms in the 
concentrations would also cancel.  Note that dG is temperature dependent.  As was done 
previously, the molar flow rates (concentrations) of the species can be written in terms of 
a single extent of reaction variable, so we are only left with T and extent as variables.   

 

Part A: 

Thermochem ist ry  for   the Water-Gas Shif t  React ion  

dH(Rxn) 
T*dS(Rxn) 
dG(Rxn) 

20 

10 

0 

-10  

-20  

-30  

-40  

 
]
e
l
o
m
/
J
k
[
 
y
r
t
s
i
m
e
h
c
o
m
r
e
h
T

-50  
500 

600 

700 

800 

900 
1100 
1000 
Temperature  [K] 

1200 

1300 

1400 

1500 

Parts B and C: 

Cite as: William Green, Jr., course materials for 10.34 Numerical Methods Applied to 
Chemical Engineering, Fall 2006. MIT OpenCourseWare (http://ocw.mit.edu), 
Massachusetts Institute of Technology. Downloaded on [DD Month YYYY]. 

Part D: 

Physically  Real izable Reactor  Condit ions  

 
]
K
[
 
t
u
O
 
T

1600


1400


1200


1000


800 

600 

1500


1500 


1400 


1300 


1200 


1100 


1000 


900


800


700


1000


T

  [K]  
In

500 

0 

20


60 


40 


CO Conversion    [%]  

80 


100


600


Cite as: William Green, Jr., course materials for 10.34 Numerical Methods Applied to 
Chemical Engineering, Fall 2006. MIT OpenCourseWare (http://ocw.mit.edu), 
Massachusetts Institute of Technology. Downloaded on [DD Month YYYY]. 

Problem 2: Finite Differences 

A.  The problem is almost completely formulated in the problem statement. The value 
of heat supplied by the  laser to the water is given by  

0.1I 0 
H  = 
(10% of laser is absorbed uniformly across the width w). 
w 
Now we can write the system of equations in the matrix form AT  = b , where A is 
the coefficient matrix and T is the vector of temperatures. 

The rule for making the matrix A and vector b is the following


A(1,1) = 1; b(1) = Ta; 


0.1 × I 0 (∆y ) 2

A(i-1,i) = 1; A(i,i) = -2; A(i+1,i) = 1; b(i) =  − 
kw 
A(n+1,n+1) =1; b(n+1) = Ta; 


Please look at the commented code Problem3a for the actual code.  


Once we make the A and b, we can solve for T using the back-slash command 


T  =  A b
\

. 


 

The sample output is given below 


>> u=problem2a; 

The maximum temperature is T =362.5 K 

The y-value at which temperature is maximum =0.005 cm

>> 


The graph of temperature v/s width is 

Cite as: William Green, Jr., course materials for 10.34 Numerical Methods Applied to 
Chemical Engineering, Fall 2006. MIT OpenCourseWare (http://ocw.mit.edu), 
Massachusetts Institute of Technology. Downloaded on [DD Month YYYY]. 

Temperature as a  func tion of  width for  uniform  laser absorption 

370 

360 

350 

340 

330 

320 

310 

 
)
K
(
 
e
r
u
t
a
r
e
p
m
e
T

300 
0	

0.2 

0.4 
0.6 
width (cm) 

0.8 

1 

B.  This problem is no longer linear. The temperature and intensity of light are related 
to each other and we have to know one before we can solve for the other. Let us 
make a vector u which holds the intensity of light and temperatures along the 
cross-section. If there are n+1 points, then there are n+1 uknown intensities and 
also n+1 unknown temperatures. Thus the vector of u is of length 2*(n+1). 
In the solution u is defined as 
⎡ I1  ⎤

⎢
⎥

⎢ I1  ⎥

⎢i 
⎥

⎢
⎥

⎢i 
⎥

⎢ I n +1 ⎥ 
u = ⎢ 
⎥

⎢T1  ⎥

⎢T  ⎥

⎢  2  ⎥

⎢i 
⎥

⎢i 
⎥

⎥

⎢
⎢T  ⎥

⎣  n +1 ⎦ 

As mentioned in the problem the Temperature and Intensities have to be 

discretized. 


Cite as: William Green, Jr., course materials for 10.34 Numerical Methods Applied to 
Chemical Engineering, Fall 2006. MIT OpenCourseWare (http://ocw.mit.edu), 
Massachusetts Institute of Technology. Downloaded on [DD Month YYYY]. 

Thus for our problem we have the following set of equations 

Equations 1 to Equation n+1 are given below and describe the descretized 
equations for Intensity. 

u1  − I 0  = 0 
u2  −
−u1  ε(un + 2 ) × u2  × ∆y = 0  (un + 2  is Temperature at grid point 2) 
i 
i 
u  1  − un  −ε(u2  n  2 ) × un  1 × ∆y = 0
n + 
× + 
+ 

Equations n+2 to Equation 2 × (n+1) are given below 

un + 2  − Ta  = 0 

un + 2  − 2un +3  + un + 4  −
i 
i 

ε(un +3 )u2 (∆y ) 2 
k 

= 0

ε(u  × + )un (∆y ) 2 
u  − 2u 
+ u n  2  − 
2  n  1 
2×n 
2× + n  1
2× + 
k 
u2  n  2  − Ta  = 0
× + 

= 0

These equations are a set of 2 × n+2 non-linear equations and can be solved using 
fsolve. The initial conditions for intensity is a vector of length n+1 with all the 
elements equal to Io. The initial condition for T is a vector of lenth n+1 with all 
the elements equal to Ta. Look at the code problem2b to see the exact 
implementation of the solution. 

1)  For the first problem the sample input and output is as follows. 
>> problem2b(100,-10,-1e-7); 
Optimization terminated: first-order optimality is less than options.TolFun. 
The maximum temperature is T =359.535 K 
The y-value at which temperature is maximum =0.5 cm 

Cite as: William Green, Jr., course materials for 10.34 Numerical Methods Applied to 
Chemical Engineering, Fall 2006. MIT OpenCourseWare (http://ocw.mit.edu), 
Massachusetts Institute of Technology. Downloaded on [DD Month YYYY]. 

Temperature as a  func tion of width for  non-uniform  laser absorption 

360 

350 

340 

330 

320 

310 

 
)
K
(
 
e
r
u
t
a
r
e
p
m
e
T

300 
0	

0.2 

0.4 
width (cm)


0.6 

0.8 

1


5 

x 10
3 

Intensity  of laser  as a  func tion of  width


 
)
m2
/
W
M
(
 
y
t
i
s
n
e
t
n
I

2.95 

2.9 

2.85 

2.8 

2.75 

2.7 
0	

0.2 

0.4 
width (cm)


0.6 

0.8 

1


2)  For the second problem the sample input and output is 

Cite as: William Green, Jr., course materials for 10.34 Numerical Methods Applied to 
Chemical Engineering, Fall 2006. MIT OpenCourseWare (http://ocw.mit.edu), 
Massachusetts Institute of Technology. Downloaded on [DD Month YYYY]. 

>> problem2b(100,-1000,-1e-7); 

Optimization terminated: first-order optimality is less than options.TolFun. 

The maximum temperature is T =662.1657 K 

The y-value at which temperature is maximum =0.24 cm

>> 


Temperature as a  func tion of width for  non-uni form  laser absorption 

700 

650 

600 

550 

500 

450 

400 

350 

 
)
K
(
 
e
r
u
t
a
r
e
p
m
e
T

300 
0 

0.2 

0.4 
0.6 
width  (cm) 

0.8 

1 

5 
x 10 

3 

Intensity  of  laser  as a  func tion of width 

 
)
m2
/
W
M
(
 
y
t
i
s
n
e
t
n
I

2.5 

2 

1.5 

1 

0.5 

0 
0 

0.2 

0.4 
0.6 
width (cm) 

0.8 

1 

Cite as: William Green, Jr., course materials for 10.34 Numerical Methods Applied to 
Chemical Engineering, Fall 2006. MIT OpenCourseWare (http://ocw.mit.edu), 
Massachusetts Institute of Technology. Downloaded on [DD Month YYYY]. 

3)  The sample input and output for part 3 is 

>> problem2b(500,-1000,-1e-7); 

Optimization terminated: first-order optimality is less than options.TolFun. 

The maximum temperature is T =640.401 K 

The y-value at which temperature is maximum =0.232 cm

>> 


Temperature as a  func tion of width for  non-uni form  laser absorption 

650 

600 

550 

500 

450 

400 

350 

 
)
K
(
 
e
r
u
t
a
r
e
p
m
e
T

300 
0	

0.2 

0.4 
width  (cm)


0.6 

0.8 

1


5 
x 10 

3 

Intensity  of  laser  as a  func tion of  width 

 
)
m2
/
W
M
(
 
y
t
i
s
n
e
t
n
I

2.5 

2 

1.5 

1 

0.5 

0 
0	

0.2 

0.4 
0.6 
width  (cm) 

0.8 

1 

Cite as: William Green, Jr., course materials for 10.34 Numerical Methods Applied to 
Chemical Engineering, Fall 2006. MIT OpenCourseWare (http://ocw.mit.edu), 
Massachusetts Institute of Technology. Downloaded on [DD Month YYYY]. 

There is definitely a difference between the temperature profiles obtained in 
problem 2 and problem 3. This basically means that for this problem the 
discretization of n=100 points is not enough to get a converged solution. As the 
amount of discretization increases, the solution has a better chance of converging 
to the actual physical solution. In most cases it is a good idea to solve the problem 
with varying degrees of discretization and use the solution which remains 
unchanged with increasing discretization. If we were to solve the same problem 
with n=800, we will realize that the solution obtained at n=800 is very similar to 
the one obtained at n=500. 

C.	

This problem can ideally be solved with the same solver we have used in the 
previous problem. But the difficult part is getting a good initial guess. My solver 
is not able to solve the problem with the basic initial guess of all T are equal to Ta 
and all I are I0. The problem with this problem is the large value of the coefficient 
of T2 (lets call itα ). To circumvent this problem we make a matrix of α as 
shown below 

α =[-1e-7; -1e-6; -1e-5; -7e-5; -1e-4; -2e-4; -1e-4; -3e-4] 


For the first value of α calculate a profile of temperature and Intensity. For the 

subsequent value of α , use the profiles of temperature and intensity from the 

previous α as the initial guess. For my program this strategy works and gives the 

correct answer. 


The sample input and output from the code is 


>> problem2c(100); 

Optimization terminated: first-order optimality is less than options.TolFun. 

Optimization terminated: first-order optimality is less than options.TolFun. 

Optimization terminated: first-order optimality is less than options.TolFun. 

Optimization terminated: first-order optimality is less than options.TolFun. 

Optimization terminated: first-order optimality is less than options.TolFun. 

Optimization terminated: first-order optimality is less than options.TolFun. 

Optimization terminated: first-order optimality is less than options.TolFun. 

Optimization terminated: first-order optimality is less than options.TolFun. 

The maximum temperature is T =894.0141 K 

The y-value at which temperature is maximum =0.42424 cm  

>> 


Cite as: William Green, Jr., course materials for 10.34 Numerical Methods Applied to 
Chemical Engineering, Fall 2006. MIT OpenCourseWare (http://ocw.mit.edu), 
Massachusetts Institute of Technology. Downloaded on [DD Month YYYY]. 

Temperature as a  func tion of width for  non-uniform  laser absorption 

900 

800 

700 

600 

500 

400 

 
)
K
(
 
e
r
u
t
a
r
e
p
m
e
T

300 
0 

0.2 

0.4 
width (cm)


0.6 

0.8 

1


5 
x 10 

3 

Intensity  of laser  as a  func tion of  width 

 
)
m2
/
W
M
(
 
y
t
i
s
n
e
t
n
I

2.5 

2 

1.5 

1 

0.5 
0	

0.2 

0.4 
width (cm)


0.6 

0.8 

1


Cite as: William Green, Jr., course materials for 10.34 Numerical Methods Applied to 
Chemical Engineering, Fall 2006. MIT OpenCourseWare (http://ocw.mit.edu), 
Massachusetts Institute of Technology. Downloaded on [DD Month YYYY]. 

Problem 3: Options for Broyden’s Method 

Part A: 
In this part we are charged with proving the following equation: 
( + 
(	
T )−1 
−1 )
T 
−1  v A  
−1 
= A  −γ A u
A uv 

We can start by right-multiplying by  ( A u T ) :
+ v

−1 ) ( A u T )

T )−1 ( A   uv  T )
( + 
−1 ( + 
T )
(
T 
−1 
= A   A uv   −γ A uv A 
A  uv 
+ v 
+
This will simplify initially to the following by multiplying out the terms: 
(
−1  )
(
−1  v T )
T 
T 
T 
−1 
−1	
−1  + −1 
I = A A   A uv −γ A uv A A −γ A uv A u
This will simplify to this, writing out gamma explicitly: 
T 
T 
T 
−1 
−1 
−1 
T  A uv I   A u
v A u
v
+ 
v − 
T 
−1

1 + v A u


1 
I A u
−	
= + 

I

I

T	
= + −1  v − 
I A u

T
−1
If you realize that  v A

 is a constant, you can rewrite the above as: 
(
) 
T 
T
T 
−1 
−1
−1 
A uv + A uv   v A u

T 
−1

1 + v A u

Now factor the numerator to get: 
T 
−1

T ⎛ 1 + v A u ⎞

T 
−1 
v − A uv	 ⎜⎜ 
−1  ⎟⎟

T 
⎝ 1 + v A u ⎠

You can easily see that this will simplify to: 
I = I 
Therefore, the equation we were trying to prove must be correct. 

I

−1 
I A u
= + 

Part B: 
We want to be able to update the new inverse Broyden matrix, using the old one. 

We can find the inverse update formula by starting with the normal update formula and 
utilizing the equation we proved in part A. 
⋅ ( n 1  − x )T
(
)+ 
)n 
) 1  = B x
(
F x( 
 
B x n + 
x + 
+ χ 
n 1 
n 
If we take the inverse of both sides of the above, we are left with: 
⋅ ( x  − x T ) −1 
) = (
) + χF x 
)
(
B −1 ( 
(
)
B x 
x 
n +1 
n +1 
n +1 
n 
n

Cite as: William Green, Jr., course materials for 10.34 Numerical Methods Applied to 
Chemical Engineering, Fall 2006. MIT OpenCourseWare (http://ocw.mit.edu), 
Massachusetts Institute of Technology. Downloaded on [DD Month YYYY]. 

( x n +1  − x n )T
Taking  xn
 and comparing the above with Eqn. 5 from the problem 
T 
∆ ≡ 
statement, we can see that the right hand side is that same form, with: 
(
) 
= (
) 
T
T 
u = χF x n +1  and 
v  = ∆x n 
and 
A B x n
So we can simply rewrite equation 5 with the appropriate terms substituted into the  
) B  ( x ) ⋅ F x( 
x B  ( x )
) ⋅ ∆ 
T 
−1 
−1 
⋅ 
(
(
) 
B −1  x n +1  = B −1  x n  − 
n
n
n +1 
n 
2 
) 
)
−1 (
( 
∆x T
T 
x 
x B 
⋅ F x
n  + ∆ 
⋅ 
n 
n
n +1 

)

 
n +1 

x n 

) − 

(
)n
x +1  ≡
B x  ∆ n 

Part C: 
In order to solve this part, we have to start with the normal formula for determining the 
( x n +1  − x n )T 
+1  ≡ ( x n + 2  − x n +1 )T
∆xn
step size, where:  xn
and 
. 
T 
T 
∆ ≡ 
) 
∆x  ≡ − −1 (
) 
(
⋅ F x
x 
B 
 
n +1 
n +1 
n +1 
However, we know that calculating the inverse is expensive and we would like to avoid 
it, which is the whole idea of this procedure.  Start by expanding the inverse: 
⎤
⎡
)  ∆ ⋅ 
) ⋅ F x( 
B  (
)x
(
T 
−1 
−1 
⋅ x B 
x  ≡ ⎢ B  (
n  ⎥ F x
(
−1 
n +1 
n
∆ n +1  − 
⋅

⎢ 
⎥ 
)n  ⋅ F x( 
(
) 
T 
∆x T
−1 
x B 
x 
∆ ⋅ 
+
⎣ 
⎦
n 1
n 
n 
+
Now we can left-multiply by B(xn), and distribute the F(xn): 
⎡
)x 
x B  (
(
)
(
(
) 
)
T 
−1 
−1 
B x B  
x 
⋅ F x  n 
⋅ 
⋅ ∆ 
⎢
) 
(
)
)
(
(
−1  x 
n 
n 
n 
n 
n F x  n +1  − 
B x B  
+1 
⋅ 
n 
2 
⎢
) ⋅
x B  (
(
T 
∆x T  + ∆ 
−1  x
F x
⋅ 
⎣ 
n 
n 
Taking care of the B*B-1 terms, we are left with: 
⎤
⎡ 
) 
( 
) ⋅
(
) 
(
T 
−1 
x n F x n +1  ⎥
F x  
x B 
⋅ ∆ ⋅ 
⎢
) 
(
n 
n 
F x 
1 
+ 
−
n +1 
2
⎥
⎢
)n  ⋅ F x( 
) 
(
∆x T 
T
−1 
x 
x B 
∆ ⋅ 
+
⎦
⎣ 
n 1
n 
n
+
( n +1 ) is a scalar, allowing for:
n  B −1 ( x n ) ⋅
As was mentioned before,  x T
F x 
∆ ⋅ 
1
1 
(
) 
F x n +1 
(
) 

∆ ⋅x B  (
)x 
T 
−1

n  ⋅ F x n +1 
λ 
n
2 
) 
x B  (
) ⋅
( 
T 
∆x T  + ∆ 
−1
x  F x
⋅ 
n +1 
n 
n 
n
Rearranging yields the following expression, which looks almost like the step update: 
) 
(
) 
(
λB x n  ∆x n +1  ≡ − F x
n +1 
However, if we take the LU decomposition of B(xn), we are left with: 
− F x( n +1 ) 
(
)n 
(
)n  ⋅ ∆  +
λL x U x  
x n 1  ≡

w e e : λ= 
h r
1 − 

(
B x n 

) ∆x +  ≡ −
n 1 

B x (
n

) ∆x  ≡ −
n +1 

x 
n
2 

−

n 1
+

⋅ F x(
) 
 

⎤ 
) 
⎥
⎥
⎦

n

n +1

Cite as: William Green, Jr., course materials for 10.34 Numerical Methods Applied to 
Chemical Engineering, Fall 2006. MIT OpenCourseWare (http://ocw.mit.edu), 
Massachusetts Institute of Technology. Downloaded on [DD Month YYYY]. 

−1

λ= 
1 − 

Well, we now have the needed expression for lambda: 
1 
) 
(
)n  ⋅ F (
T 
x B
x  +
x 
∆ ⋅ n 
n  1
2

( 
n  B −1 (
) 
)n  ⋅
∆x T
 + x T
x  +
F 
x
∆ ⋅ 
n 
n  1
However, we still have one problem, which is that the lambda has an inv(B) that must be 
calculated in order to evaluate it.  We need to find a way to replace this term.  If we start 
with the following: 
w = −1 ( xn ) ⋅
)n w
( 
) 
⋅ = F ( n +1 ) 
)U (
B (
) ⋅ = L (
F n 
 
or
xn
x  +1
x 
x 
xn w 
B
So if we can solve for w, then we can replace the problem terms.  We use the LU form to 
solve.  Since L and U are triangular, we can solve them using backward substitution at a 
cost of only O(N2). 
) = F (
(
) 
xn +1 
L xn p 
(
) ⋅ =w
p 
U xn 
Now we have the w vector to put in the lambda expression. 
∆x T
n  ⋅ w
1 
2
T 
x w

∆ ⋅ n 
∆x T
n
2 
x T  w
∆x T
 + ∆ 
⋅ 
n 
n 

λ= 
1 − 

⇒ 

λ= +1

The step updates can then be solved using backward substitution in two steps solving the 
following.  Each step update can be found for the cost of several backward substitutions 
once you have the initial LU decomposition.   
(
)
(
)n 
( n +1 ) 
⋅ ∆ x n +1  ≡ − F x
λL xn U  x 

Computational Cost: 
Calculating the inverse every time will cost you O(N3) operations at every iteration, so 
this method is not preferred.  It can also run into problem when the problem is ill-
conditioned.  Calculating the inverse once and then updating the inverse will cost you 
O(N3) once and O(N2) at every iteration to determine the update.  Again, this method is 
much less costly, but can have problems when calculating the first inverse if the matrix is 
nearly singular.  The LU method that avoid the inverse, but you have to do the LU 
decomposition once, which also takes O(N3) operations.  Once you have the LU, it is 
pretty simple since you can just do a couple of backwards substitutions per update, which 
are O(N2).  The LU method is preferred because it is more robust than the inverse 
methods, but still as fast as updating the inverse.   

Cite as: William Green, Jr., course materials for 10.34 Numerical Methods Applied to 
Chemical Engineering, Fall 2006. MIT OpenCourseWare (http://ocw.mit.edu), 
Massachusetts Institute of Technology. Downloaded on [DD Month YYYY]. 

