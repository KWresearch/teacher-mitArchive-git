6.042/18.062J Mathematics for Computer Science 
Srini Devadas and Eric Lehman 

February 10, 2005

Lecture Notes


Induction II 

1  Unstacking 

Here is another wildly fun 6.042 game that’s surely about to sweep the nation! 
You begin with a stack of n  boxes. Then you make a sequence of moves.  In each move, 
you divide one stack of boxes into two nonempty stacks.  The game ends when you have 
n  stacks, each containing a single box. You earn points for each move; in particular, if you 
divide  one  stack  of  height  a  + b  into  two  stacks with  heights  a  and  b,  then  you  score  ab 
points  for  that move.  Your  overall  score  is  the  sum  of  the  points  that  you  earn  for  each 
move. What strategy should you use to maximize your total score? 
As  an  example,  suppose  that we  begin with  a  stack  of n  = 10 boxes.  Then  the  game 
might proceed as follows: 

10  
5 
5 
4 
2 
2 
1 
1 
1 
1 

Stack Heights 

Score 

25 points 
5 
6 
3 2  
3 2 1  
4 
4 
3 2 1 2 
2 
2 2 1 2 1 
2 2 1 2 1 1 
1 
1 
1 2 1 2 1 1 1 
1 
1 1 1 2 1 1 1 1 
1 1 1 1 1 1 1 1 1 
1 
Total Score  =  45 points 

On  each  line,  the  underlined  stack  is  divided  in  the  next  step.  Can  you  ﬁnd  a  better 
strategy? 

1.1  Strong Induction 

We’ll  analyze  the  unstacking  game  using  a  variant  of  induction  called  strong  induction. 
Strong  induction  and  ordinary  induction  are  used  for  exactly  the  same  thing:  proving 
that a predicate P (n) is true for all n  ∈ N. 

2 

Induction II


Principle of Strong Induction.  Let P (n) be a predicate.  If 

•	 P (0) is true, and 
•  for all n ∈ N, P (0), P (1), . . . , P (n) imply P (n +  1), 

then P (n) is true for all n ∈ N. 

The  only  change  from  the  ordinary  induction  principle  is  that  strong  induction  allows 
you  to  assume more  stuff  in  the  inductive  step  of  your  proof!  In  an  ordinary  induction 
argument,  you assume  that P (n)  is  true and  try  to prove  that P (n +  1)  is also  true.  In a 
strong induction argument, you may assume that P (0), P (1),  . . . , P (n − 1), and P (n) are 
all true when you go to prove P (n +  1).  These extra assumptions can only make your job 
easier. 
Despite the name, strong induction is actually no more powerful than ordinary induc­
tion.  In other words,  any  theorem  that  can be proved with  strong  induction  can also be 
proved with ordinary induction. However, an apeal to the strong induction principle can 
make  some  proofs  a  bit  easier.  On  the  other  hand,  if  P (n)  is  easily  sufﬁcient  to  prove 
P (n +  1), then use ordinary induction for simplicity. 

1.2  Analyzing the Game 

Let’s use strong induction to analyze the unstacking game. We’ll prove that your score is 
determined entirely by the number of boxes; your strategy is irrelevant! 
Theorem 1.  Every way of unstacking n blocks gives a score of n(n − 1)/2  points. 

There are a couple technical points to notice in the proof: 

•	 The template for a strong induction proof is exactly the same as for ordinary induc­
tion. 

•	 As with ordinary  induction, we have  some  freedom  to adjust  indices.  In  this  case, 
we prove P (1) in the base case and prove that P (1), . . . , P (n − 1)  imply P (n) for all 
n ≥ 2  in the inductive step. 

Proof.  The  proof  is  by  strong  induction.  Let  P (n)   be  the  proposition  that  every  way  of 
unstacking n blocks gives a score of n(n − 1)/2. 
Base  case:  If n  = 1,  then  there  is only one block.  No moves are possible,  and  so  the  total 
score for the game is 1(1  − 1)/2   = 0. Therefore, P (1) is true. 

3 
Induction II 
Inductive  step:  Now we must  show  that P (1),  . . . ,  P (n  − 1)  imply P (n)   for  all n  ≥ 2.  So 
assume  that  P (1),  . . . ,  P (n  − 1)  are  all  true  and  that  we  have  a  stack  of  n  blocks.  The 
ﬁrst move must  split  this  stack  into  substacks with  sizes  k  and n  − k  for  some  k  strictly 
between 0 and n. Now the total score for the game is the sum of points for this ﬁrst move 
plus points obtained by unstacking the two resulting substacks: 

total score =  (score for 1st move) 
+  (score for unstacking k  blocks) 
+  (score for unstacking n  − k  blocks) 
k(k  − 1)
(n  − k)(n  − k  − 1) 
=  k(n  − k) + 
+ 
2 
2
2nk  − 2k2  +  k2  − k  +  n − nk  − n  − nk  +  k2  +  k 
2
2 
n(n  − 1) 
= 
2 
The second equation uses the assumptions P (k) and P (n−k) and the rest is simpliﬁcation. 
This shows that P (1), P (2), . . . , P (n) imply P (n  +  1). 
Therefore, the claim is true by strong induction. 

= 

2  The Game of Nim 

Nim  is  a  game  involving  two  players,  some  pennies,  and mathematical  induction.  The 
game begins with a bunch of pennies, arranged  in one or more rows.  For example, here 
we have three rows of pennies: 

◦ ◦ ◦ 
◦ ◦ ◦ ◦ 
◦ ◦ ◦ ◦ ◦ 

The two players take turns. On each turn, a player must remove one or more pennies, 
all  from  a  single  row.  The player who  takes  the  last penny wins.  For  example,  suppose 
that the ﬁrst player removes two pennies from the ﬁrst row: 
◦ 
◦ ◦ ◦ ◦ 
◦ ◦ ◦ ◦ ◦ 

Now the second player removes all the pennies from the last row, leaving this conﬁguar­
tion: 

◦ 
◦ ◦ ◦ ◦ 

4 

Induction II 

The ﬁrst player then takes three pennies from the last row: 
◦ 
◦ 

The  second  player  is  now  in  trouble;  she  must  take  exactly  one  of  these  two  pennies. 
Either way, the ﬁrst player takes the last penny and wins the game. 
There is a compact way to describe a conﬁguration in Nim:  list the number of pennies 
in  each  row.  For  example,  the  starting  conﬁguartion  in  the  game  above  is  (3, 4, 5).  The 
game then passed through the conﬁgurations (1, 4, 5), (1, 4, 0), and (1, 1, 0). 

2.1  Nimsums 

A Harvard  professor,  Charles  Bouton,  discovered  the  optimal  strategy  for Nim  in  1901. 
Bouton’s strategy relies on a special mathematical operation called a Nimsum.  The Nim­
sum of natural numbers c1 , . . . , ck  is itself a natural number that is computed as follows: 

•  Regard c1 , . . . , ck  as binary numbers. 

•  The i­th bit of the Nimsum is the xor of the i­th bits of c1 , . . . , ck . 

(Xor  is pronounced “eks­or ” and  is short  for “exclusive­or ”.  The xor of bits b1  and b2 
is denoted b1  ⊕ b2  and deﬁned as follows: 

b1 
0 
0 
1 
1 

b2 
0 
1 
0 
1 

b1  ⊕ b2 
0 
1 
1 
0 

As a consequence of this deﬁnition, the xor of bits b1 , . . . , bk  is 0 if the sum of the bi  is even 
and 1 if the sum is odd.  For example, 1  ⊕ 0  ⊕ 1  ⊕ 1  = 1  because 1  +  0  +  1  +  1  = 3  is odd, 
but 1  ⊕ 1  ⊕ 0  ⊕ 0  = 0  because 1  +  1  +  0  +   0  = 2  is even.) 
As an example, the Nimsum of 3, 4, and 5 is computed as follows: 

3  =  011 
4  =  100 
5  =  101 
010  = 2 

Here, we xor each column of bits to obtain the Nimsum 010, which is the binary represen­
tation of 2. 

Induction II	

2.2  The Winning Strategy 

5 

Suppose that (c1 , . . . , ck ) is a conﬁguration in Nim; that is, there are a total of k rows, and 
the i­th row contains ci  pennies. This conﬁguration is called: 

•	 safe if the Nimsum of c1 , . . . , ck  is nonzero 

•	 unsafe if the Nimsum of c1 , . . . , ck  is zero 

In  this way,  all  possible  conﬁgurations  in Nim  are  now  partitioned  into  two  groups: 
the safe conﬁgurations and the unsafe conﬁgurations. Bouton’s strategy is as follows: 

•	 If  you  see  a  safe  conﬁguration  on  your  turn,  then  select  a  move  that  leaves  your 
opponent with an unsafe conﬁguration. 

•	 If  you  see  an  unsafe  conﬁguration  on  your  turn,  you’re  doomed.  Every  possible 
move leaves your opponent with a safe conﬁguration; select among them arbitrarily 
and prepare to lose. 

Thus,  if  the ﬁrst player sees a safe position,  she selects a move  that  leaves  the second 
player an unsafe position. Every move available to the second player then leaves the ﬁrst 
player with another safe position.  This cycle repeats until the ﬁrst player wins the entire 
game. 

2.3  An Example 

Let’s use Bouton’s strategy in one example game before trying to prove a general theorem. 
The bizarre French movie “Last Year at Marienbad” features a Nim game beginning in the 
conﬁguration (1, 3, 5, 7). Let’s analyze this conﬁguration by computing the Nimsum: 

1  =  001 
3  =  011 
5  =  101 
7  =  111 
000  = 0 

Since  the Nimsum  is  zero,  this  is  a  hopeless  situation  for  the  ﬁrst  player.  In  particular, 
no matter what  she does,  the  second player  is  left with a  safe  conﬁguration;  that  is,  one 
in which the Nimsum is nonzero.  For example, suppose that the ﬁrst player removes the 
entire fourth row. Then the Nimsum becomes: 

6 

Induction II


1  =  001 
3  =  011 
5  =  101 
0  =  000 
111  = 7 

This  is  a  safe  conﬁguration.  To  maintain  her  advantage,  the  second  player  needs  to 
leave  the  ﬁrst  player  in  an  unsafe  position;  that  is,  a  position with Nimsum  zero.  Only 
one move accomplishes this:  removing three pennies from the third row: 

1  =  001 
3  =  011 
2  =  010 
0  =  000 
000  = 0 

Now the ﬁrst player is again confronted with an unsafe position, one with a Nimsum 
of zero.  No matter what she does, the second player will be left with a safe position.  For 
example, suppose that the ﬁrst player takes all three pennies from the second row.  Then 
the second player is left with: 

1  =  001 
0  =  000 
2  =  010 
0  =  000 
011  = 3 

Sure  enough,  this  is  a  safe  position.  One  again,  the  second  player  needs  to  leave  the 
ﬁrst player in an unsafe position.  Removing one penny from the third row accomplishes 
this: 

1  =  001 
0  =  000 
1  =  001 
0  =  000 
000  = 0 

The ﬁrst player  is clearly going  to  lose.  She must  take one of  the  two remaining pen­
nies, leaving the second player to take the other and win the game. 

2.4  Proof of Correctness 

Now let’s prove that Bouton’s strategy works. We’ll need two lemmas. 

Induction II 

7 

Lemma 2.  If  a player  sees  an unsafe  conﬁguration  on her  turn,  then  every possible move  leaves 
her opponent with a safe conﬁguration. 

Proof.  Suppose that the player sees an unsafe conﬁguration; that is, a conﬁguration (c1 , . . . , ck ) 
with  Nimsum  zero.  Then  the  player  must  remove  pennies  from  some  row  j ,  leaving 
� < cj  pennies behind.  In binary, the numbers cj  and cj
� must differ in some bit position. 
cj
But then the Nimsum of the resulting conﬁguration has a 1 in that bit position. Therefore, 
the Nimsum is nonzero, meaning that the resulting conﬁguration is safe. 
Lemma  3.  If  a  player  sees  a  safe  conﬁguration  on  her  turn,  then  she  has  a move  that  leaves  her 
opponent with an unsafe conﬁguration. 
Proof.  Suppose that the player sees a conﬁguration (c1 , . . . , ck ) with Nimsum s =�
0. 
Let  i be  the position  of  the most­signiﬁcant  1  in  the  binary  representation  of  s.  Since 
the i­th position of s is nonzero, there must be some row size cj  that is nonzero in the i­th 
� pennies  from  the  j ­th  row, 
position  as well.  Suppose  that  the  player  removes  all  but  cj
where c�
j  differs from cj  in exactly those positions where s has a 1. 
� , the number of pennies the player leaves behind, is less than cj , 
We must check that cj
the number of pennies originally in the j ­th row. This is true because cj  has a 1 in the i­th 
� has a 0 in this position, and the two numbers agree in all higher positions. 
position, cj
� reduces  the Nimsum  to zero, 
Modifying  the game conﬁguration by changing cj  by cj
� disagree  in  exactly  those  positions where  the  original Nimsum  had  a 
because  cj  and  cj
1. 

An example may clarify the preceding argument.  Suppose that a player sees the con­
ﬁguration (1, 2, 4, 4). We can compute the Nimsum as follows: 

1  =  001 
2  =  010 
4  =  100 
4  =  100 
011  =  3 

The Nimsum  is  011  in  binary.  The most  signiﬁcant  1  is  in  the  second  position  from  the 
right. The number of pennies in the second row, 010 in binary, also has a 1 in this position. 
We  should  leave  001  pennies  in  this  row,  since  this  differs  from  the  number  of  pennies 
there now (010) in every position where the Nimsum (011) has a 1. Now we compute the 
Nimsum of the resulting conﬁguration: 

1  =  001 
1  =  001 
4  =  100 
4  =  100 
000  = 0 

8 

As expected, this is an unsafe position. 
We’re ready to prove the main result. 

Induction II 

Theorem 4.  If  the  current player has  a  safe position,  then  she  can guarantee  a win.  Otherwise, 
the other player can guarantee a win. 

The proof uses induction, with the statement of the theorem as the induction hypoth­
esis. This hypothesis is quite complicated!  Suppose that we deﬁne three smaller proposi­
tions: 

A  =  current player has a safe position 
B  =  current player can guarantee a win 
C  =  next player can guarantee a win 

In  these  terms,  the  induction  hypothesis  is  (A  →  B ) ∧ (A   →  C ).  Induction  hypotheses 
containing  implications  are  always  a  bit  tricky,  but  this  one  has  two  implications!  Some 
square­bracketed comments are included in the proof to clairfy the structure. 

Proof.  The proof is by strong induction on n, the total number of pennies remaining.  Let 
P (n) be the proposition that in all Nim conﬁgurations with n pennies, if the current player 
has  a  safe  position,  then  she  can  guarantee  a  win  and,  otherwise,  the  other  player  can 
guarantee a win. 
Base  case.  Suppose  that  n  = 0;  that  is,  no  pennies  remain.  This  is  an  unsafe  position. 
Therefore,  the  ﬁrst  implication  is  trivially  true  because  the  if­part  is  false.  The  second 
implication is also true, because when the current player is left with no pennies, the other 
player  has  just won  the  game.  [In  other words,  the  proposition  (A   →  B ) ∧ (A   →  C )  is 
true because A is false and C is true.] 
Inductive  step.  We  must  show  that  for  all  n  ≥  0,  the  propositions  P (0), . . . , P (n)   imply 
P (n + 1). Assume P (0), . . . , P (n) and consider a conﬁguration with n + 1  pennies remain­
ing. Now we must show two things: 

1.	 If  the  conﬁguration  is  safe,  the  current  player  can  guarantee  a  win.  Suppose  that  the 
conﬁguration  is  safe.  By  Lemma  3,  the  current  player  has  a move  that  leaves  the 
next  player  with  an  unsafe  conﬁguration  involving  fewer  than  n  +  1  pennies.  If 
m  <   n +  1   pennies  remain,  then assumption P (m)  implies  that  the player  after  the 
B .]→ 
next player (which is the current player) can guarantee a win.  [This shows A
2.	 If  the  conﬁguration  is  unsafe,  the  next  player  can  guarantee  a  win.  Suppose  that  the 
conﬁguration is unsafe. By Lemma 2, every move leaves the next player with a safe 
conﬁguration involving m < n +  1  pennies. The assumption P (m) then implies that 
C .]→ 
the next player can guarantee a win.  [This shows A

Induction II 

9 

→
→
Putting these arguments together gives P (n  +  1).  [That is, A
C  together
B  and A
imply (A  → B ) ∧ (A  → C ).] Therefore, the theorem follows by the principle of induction. 

