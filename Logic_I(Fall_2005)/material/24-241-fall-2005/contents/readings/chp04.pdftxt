Semantics for the Sentential Calculus 

Linguistics, the study of language, is divided into three parts.  Syntax studies the 
internal structure of language. Syntax cares about when a string of words is a grammatical 
sentence, but it doesn’t care at all what the sentence means. There are two parts to syntax, 
phonetics, which examines how words are built up out of simple sounds, and grammar, 
which looks at how sentences are built up out of words. 
 
Semantics looks outside the internal structure of language to ask what the sentences 
mean. It looks at the connections between the expressions of a language and the things or 
states of affairs that those expressions are about. It asks what an expression refers to and 
what would make a sentence true. 
 

Semantics still leaves people out of the picture. It asks what object a word refers to, 
without taking account of the people who use the word to refer to the object. To discuss the 
relation between language, the community of people who use the language, and the things 
they use the language to talk about is the province of pragmatics. Pragmatics pays 
particular attention to words like “this,” “that,” “here,” and “now,” which refer to 
different things on different occasions.  
 

If someone asks you how your logic class is going, and you answer, “It’s going OK 
now. The professor showed up at this morning’s lecture completely sober,” you have lead 
your interlocutor to believe that the professor has a drinking problem. But you haven’t 
literally said that the prof is a heavy drinker. What you said will be literally true if the 
professor is a teetotaler. Still, though you haven’t said it, you have suggested that the 
professor is a lush, because we usually only tell somebody something if the thing we are 
reporting is somehow noteworthy, and the fact that the professor came to class sober this 
morning is only noteworthy if the professor usually shows up drunk. The “implication” 
that the professor is a drunk occurs at a pragmatic level, not at a semantic level. 
 

In the last chapter, we learned pretty much all there is to know about the syntax of 
languages of the sentential calculus. Whereas when you learn a natural language like 
Spanish or Nahuatl, you have to spend many tedious hours trying to learn the language’s 
grammar, in the formal language there is no subjunctive mood or ablative case or 
pluperfect tense to worry about. That’s one of the real benefits of a formal language: You 
can learn the grammar is just a few minutes. 
 

 

 

We now turn to semantics. 

 
Definition. A truth assignment for a language for the sentential 
calculus is a function that assigns a number, either 0 or 1, to each 
sentence. 
 

SC Semantics, p. 2 
 
Our plan will be to assign the number 1 to sentences that are true and 0 to sentences that 
are false. There isn’t anything about the notion of “truth assignment” that requires such a 
function to respect, in any way, the intended meanings of the connectives. That comes next: 
 

Definition. A truth assignment  ℑ
 for a language for the sentential 
calculus is a normal truth assignment (N.T.A.) just in case it satisfies 
the following conditions:    
 
A conjunction is assigned the value 1 if and only if both its conjuncts 
are assigned 1. 
 
A disjunction is assigned 1 if and only if one or both disjuncts are 
assigned 1. 
 
A conditional is assigned 1 if and only if either its antecedent is 
assigned 0 or its consequent is assigned 1 (or both). 
 
A biconditional is assigned 1 if and only if its components are both 
assigned the same value. 
 
A negation is assigned 1 if and only if the negatum is assigned 1. 
 
Definition. A sentence is said to be true under a N.T.A. if and only if 
it’s assigned the value 1 by the N.T.A. A sentence that’s assigned 0 by 
the N.T.A. is false under the N.T.A. 
 
This definition is handily summed up in the following table:   
 

 ψ)   (φ ↔
 ψ)   (φ →
 ψ)   (φ ∨
φ   ψ   (φ ∧
 ψ)   ¬φ  
                       1    1         1             1             1              1        0 
1    0         0             1             0              0        0 
0    1         0             1             1              0        1 
0    0         0             0             1              1        1  

 

 

   
Using this table, we can determine for even the most complicated SC sentence whether or 
not it is true under a given N.T.A., provided we know which of the atomic sentence that 
occur within the sentence are true under the N.T.A. The method is to determine whether a 
complicated sentence is true by first determining whether its simpler components are true, 
then applying the table. 
 

 B) →
For example, to see whether "(¬(A  ∨
 (A  ∧
 B))" is true under an N.T.A. under 
which "A" and "B" are both true, note that "(A  ∨
 B)" is true under the N.T.A., and so 
 B)" is false under the N.T.A.. "(A  ∧
"¬(A  ∨
 B)" will be true under the N.T.A., so that "(¬(A 

SC Semantics, p. 3 
 
 B) →
 (A  ∧
true.  

 B))" will be a conditional with a false antecedent and true consequent, and so 

Next consider an N.T.A. under which "A" is true and "B" false. Under this N.T.A., 
 B)" be true and so "¬(A  ∨
 B)" will be false, and so "(¬(A  ∨
 B)" will be false. "(A  ∧
"(A  ∨
 
B) →
 (A  ∧
 B))" will Be a conditional with a false antecedent and a false consequent, and so 
again true.  
 

Now consider an N.T.A. under which "A" is false and "B" true. Under this N.T.A., 
"(A  ∨
 B)" will Be true and so "¬(A  ∨
 B)" will be false. "(A  ∧
 B)" will be false, and so, once 
again, "(¬(A  ∨
 B) →
 (A  ∧
 B))" will be a conditional with a false  antecedent and a false 
consequent, and so true.   
 

 
This use of so-called truth tables to display the conditions under which a given sentence is 
true will prove to be extremely useful.   
 
Definition. An sentence is a tautology (or is valid or necessary) if and only if it 
is true under every N.T.A.. A sentence is a contradiction (or is inconsistent or 
impossible) if and only if it is false under every . A sentence is indeterminate 
(or contingent or mixed) if and only if it is true under some N.T.A.s and false 
under others.  
 
Examples: "((P →
 (Q  →
 Q)  ∨
 R))" is a tautology, as we can see by examining the following 
table; the main connective is "∨
," and there are all "1"s under the main connective: 

Finally, consider an N.T.A. under which "A" and "B" are Both false. Under this 
 B)" will be false, so that "¬(A  ∨
N.T.A. "(A  ∨
 B)" will be true. "(A  ∧
 B)" will be false. Thus 
under this N.T.A. "(¬(A  ∨
 B) →
 (A  ∧
 B))" will have a true antecedent and false consequent, 
and so it will be false.  
 

Our results are nicely summarized in the following table:   

 

A   B   (¬(A  ∨
 B) →
 (A  ∧
 B)) 
1    1     0 1   1 1   1  1  1 1 
1    0     0 1   1 0   1  1  0 0 
0    1     0 0   1 1   1  0  0 1 
0    0     1 0   0 0   0  0  0 0 

∨
SC Semantics, p. 4 
 
 

P   Q   R   ((P  →
 (Q  →
 Q)  ∨
 R)) 
1    1   1     1   1 1   1   1  1 1   
1    1   0     1   1 1   1   1  0 0   
1    0   1     1   0 0   1   0  1 1   
1    0   0     1   0 0   1   0  1 0   
0    1   1     0   1 1   1   1  1 1   
0    1   0     0   1 1   1   1  0 0   
0    0   1     0   1 0   1   0  1 1   
0    0   0     0   1 0   1   0  1 0 

 R)) 

P   Q   R   ¬((P  →
 (Q  →
 Q)  ∨
1    1   1    0   1 1  1   1   1 1 1 
1    1   0    0   1 1  1   1   1 0 0   
1    0   1    0   1 0 0    1   0 1 1   
1    0   0    0   1 0 0    1   0 1 0   
0    1   1    0   0 1 1    1   1 1 1   
0    1   0    0   0 1 1    1   1 0 0   
0    0   1    0   0 1 0    1   0 1 1   
0    0   0    0   0 1 0    1  0 1 0 

 
"¬((P →
 (Q  →
 Q)  ∨
 R))" is a contradiction, as we can see from the following table; here the 
main connective is "¬," and there are all "0"s under the main connective: 
    

 
"((P →
 (Q  →
 Q)  ∧
 R))" is indeterminate, as we see from the following truth table, in which 
there are both "1"s and "0"s beneath the main connective, which is " ∧ ": 
 

P   Q   R   ((P  →
 (Q  →
 Q)  ∧
 R)) 
1    1   1      1  1 1   1    1 1 1   
1    1   0      1  1 1   0    1 0 0   
1    0   1      1  0 0   0    0 1 1   
1    0   0      1  0 0   0    0 1 0   
0    1   1      0  1 1   1    1 1 1   
0    1   0      0  1 1   0    1 0 0   
0    0   1      0  1 0   1    0 1 1   
0    0   0      0  1 0   1    0 1 0        

 

A way to remember how to set up the columns of the truth table is to note that, if 
interpreted in binary notation, the numerals under the atomic sentences list the numbers 
from seven to zero, in decreasing order. 
 

In general, whether a sentence is true under a given N.T.A. is determined by 
determining which of the sentential letters the sentence contains are true, and which are 
false. If a sentence contains n sentential letters, there will be 2n ways to assign truth value to 

SC Semantics, p. 5 
 
the sentential letters, and so to test whether a sentence is a tautology, we have only to 
examine each of these 2n possibilities. We can organize this investigation efficiently by 
writing a truth table. We produce an array of n columns, each headed by a sentential letter, 
and 2n rows. At each position in this array we put either a "1" or an "0" in such a way 
that, the result will be the binary numerals for the natural numbers less than 2n, in 
decreasing order. To the right of the column we write the sentence we want to investigate, 
and underneath the sentential letters and connectives we write "1"s and "0"s as prescribed 
by the definition of N.T.A. If we wind up with all "1"s under the main connective, we shall 
conclude that the sentence we started with was a tautology. Similarly, if we wind up with 
all "0"s, we shall conclude that the sentence we started with was contradictory, whereas if 
we wind up with mixed "1"s and "0"s we shall conclude that the sentence we started with 
was indeterminate. 
  
Example: "((A  →
 

 B))" is a tautology, because it has the following truth table:   

 (¬A  →

 B) ∨

 

A   B   ((A  →
 (¬A  →
 B) ∨
 B))   
1    1       1 1  1   1  01  1 1   
1    0       1 0  0   1  01  1 0   
0    1       0 1  1   1  10  1 1   
0    0       0 1  0   1  10  0 0  
 
SC Theorem 1. An sentence is a tautology if and only if its negation is a 
contradiction.   
 
Proof: For any sentence φ,         
      
                      φ is a tautology 
            iff φ is true under every N.T.A.         
iff ¬φ is false under every N.T.A.         
iff ¬φ is contradictory.⌧ 

 
Here “iff” is an abbreviation for “if and only if.” 
 
SC Theorem 2. An SC sentence is contradictory iff its negation is a tautology. 
     

 
Proof: For any sentence φ,         
 
φ is contradictory         
iff φ is false under every N.T.A.         
iff ¬φ is true under every N.T.A.         
iff ¬φ is a tautology.⌧ 
 

SC Semantics, p. 6 
 
SC Theorem 3. An SC sentence is indeterminate iff its negation is 
indeterminate.   
 
Proof: For any sentence φ   
       

which φ 

which 

   

φ is indeterminate         
iff there are some N.T.A.s under which φ is true and other N.T.A.s under 

     is false            
iff there are some N.T.A.s under which ¬φ is false and other N.T.A.s under 

     ¬φ is true  false         
iff ¬φ is indeterminate.⌧ 

SC Theorem 4. A conjunction is tautological iff both its conjuncts are 
tautological.   

 
Proof: For any sentences φ and ψ, 
 

(φ ∧
 ψ) is tautological         
iff under every N.T.A. (φ ∧
 ψ) is true         
iff under every N.T.A. φ is true and ψ is true         
iff under every N.T.A. φ is true and under every  
    N.T.A. ψ is true         
iff φ is tautological and ψ is tautological.⌧ 

 

 

SC Theorem 5. For any SC sentences φ and ψ, if φ is a contradiction 
or ψ is a contradiction, then (φ ∧
 ψ) is a contradiction.  

 
Proof: The argument breaks up into two (not necessarily exclusive) cases: 
 
Case 1: φ is a contradiction. Then φ is false under every N.T.A. So (φ ∧
every N.T.A.. So (φ ∧
 ψ) is a contradiction. 
 
Case 2: ψ is a contradiction. Then ψ is false under every N.T.A. So (φ ∧
every N.T.A.. So (φ ∧
 ψ) is a contradiction.  
 

So, in either case, (φ ∧

 ψ) is a contradiction.⌧ 

 ψ) is false under 

 ψ) is false under 

Notice that the converse to SC Theorem 5 ("For any SC sentences φ and ψ, if (φ ∧
is a contradiction, then either φ is a contradiction or ψ is a contradiction.") is false. For 
example "(P ∧
 ¬P)" is a contradiction, even though neither "P" nor "¬P" is a 
contradiction.   

 ψ) 

SC Semantics, p. 7 
 

SC Theorem 6. A conditional is contradictory iff its antecedent is a 
tautology and its consequent is a contradiction.   

 
Proof: Take a conditional (φ →
 

 ψ). We have         

(φ →
 ψ) is a contradictory         
iff under every N.T.A. (φ →
 ψ) is false         
iff under every N.T.A. φ is true and ψ is false         
iff under every N.T.A. φ is true and under every  
    N.T.A. ψ is false         
iff φ is a tautology and ψ is a contradiction.⌧ 

 

 

 

Definition. Two sentences are logically equivalent iff they are true 
under precisely the same N.T.A.s.  

 
You can test whether two sentences are logically equivalent by writing out their truth 
tables. The sentences will be logically equivalent iff the columns of "1"s and "0"s under the 
main connectives of the two sentences are the same.    
 
Example: The two sentences "(P  ∨
 (Q  ∧
equivalent, since their truth table is 
 

 R))" are logically 

 (P ∨

 R))" and "((P  ∨

 Q)  ∧

P   Q   R   ((P  ∨
 (Q  ∧
 R))   ((P  ∨
 Q)  ∧
 (P ∨
 R)) 
1    1   1      1  1   1  1 1       1   1 1    1  1  1 1   
1    1   0      1  1   1  0 0       1   1 1    1  1  1 0   
1    0   1      1  1   0  0 1       1   1 0    1  1  1 1   
1    0   0      1  1   0  0 0       1   1 0    1  1  1 0   
0    1   1      0  1   1  1 1       0   1 1    1  0  1 1   
0    1   0      0  0   1  0 0       0   1 1    0  0  0 0   
0    0   1      0  0   0  0 1       0   0 0    0  0  1 1   
0    0   0      0  0   0  0 0       0   0 0    0  0  0 0 
 
SC Theorem 7. Two SC sentences φ and ψ are logically equivalent iff 
the biconditional (φ ↔
 ψ) is a tautology.   

 
Proof:  φ is logically equivalent to ψ 
     
 iff φ and ψ are assigned the same truth value by every  
     N.T.A.         
iff (φ ↔
 ψ) is true under every N.T.A.         
iff (φ ↔
 ψ) is a tautology.⌧ 

SC Semantics, p. 8 
 
SC Theorem 8 (Augustus de Morgan). ¬(φ ∨
to (¬φ ∧
 ¬ψ). 

 
Proof: For any N.T.A. ℑ
 

, we have 

(¬(φ ∨
 ψ)) = 1 
(φ ∨
iff ℑ
 ψ) = 0 
(φ) = 0 and ℑ
iff ℑ
(ψ) = 0 
iff ℑ
(¬φ) = 1 and ℑ
(¬ψ) = 1 
((¬φ ∧
iff ℑ
 ¬ψ)) = 1.⌧ 

 ψ) is logically equivalent 

 ψ) is logically equivalent to (¬φ 

 

SC Theorem 9 (also due to de Morgan). ¬(φ ∧
 ¬ψ). 

 
Proof: For any N.T.A. ℑ
 

, we have 

(¬(φ ∧
 ψ)) = 1 
((φ ∧
iff ℑ
 ψ)) = 0 
(φ) = 0 or ℑ
iff ℑ
(ψ) = 0 (or both) 
iff ℑ
(¬φ) = 0 or ℑ
(¬ψ) = 1 (or both) 
((¬φ ∨
iff ℑ
 ¬ψ)) = 1⌧ 

 
 ¬B)" is logically equivalent to "(¬A ∨
This theorem tells us, for instance, that "¬(A  ∧
 
¬¬B)". Now consider the two sentences "((C ↔
 (C  ∨
 ¬B)))) ∧
 ¬(A  ∧
 (A  →
 (¬D  ∨
 D))" and 
"((C ↔
 (¬D  ∨
 (A  →
 (¬A  ∨
 ¬¬B)))) ∧
 (C  ∨
 D))". The two sentences are just alike except that 
an occurrence within one of them of the subsentence "¬(A ∧
 ¬B)" has been replaced by an 
occurrence of the logically equivalent subsentence "(¬A ∨
 ¬¬B)", and it is easily shown, by 
using truth tables, that the two sentences are logically equivalent. This phenomenon is 
perfectly general, as the following theorem shows; even though the theoremm is more-or-
less obvious, its proof is long and intricate, so I won't give the proof: 
 
SC Theorem 10. Let ℑ
 be a N.T.A. and let φ, ψ, χ, and θ be SC 
sentences such that  ℑ
(φ) = ℑ
(ψ) and such that χ and θ are just alike 
except that some occurrences of φ as a subsentence of χ have been 
replace by occurrences of ψ as subsentences of θ. The ℑ
(χ) = ℑ
(θ). 
 
As an immediate corollary, we have this: 
 
SC Theorem 11. If the SC sentences φ and ψ are logically equivalent 
and if χ and θ are just alike except that some occurrences of φ as a 
subsentence of χ have been replaced by occurrences of ψ as a 
subsentence of θ, then χ and θ are logically equivalent. 
 

ℑ
∨
ℑ
SC Semantics, p. 9 
 

Definition. An SC sentence implies (or entails) a sentence ψ iff there is 
no N.T.A. under which φ is true and ψ is false. In other words, φ 
implies ψ iff ψ is true under every N.T.A. under which φ is true.  
 
Example: "¬(P ∨
 Q)" implies "¬(P  ∧
 Q)." We can see this by observing that, whenever a 
"1" appears under the main connective in the truth table for "¬(P ∨
 Q)" (namely, in the 
fourth row), a "1" also appears under the main connective in the truth table for "¬(P ∧
 
Q)": 
   

P   Q   ¬(P ∨
 Q)   ¬(P  ∧
 Q) 
1    1   0  1  1 1    0  1  1 1   
1    0   0  1  1 0    1  1  0 0   
0    1   0  0  1 1    1  0  0 1   
0    0   1  0  0 0    1  0  0 0  

SC Theorem 12. For any sentences φ and ψ, φ implies ψ iff the 
conditional (φ →
 ψ) is a tautology.   
 
Proof:  φ implies ψ 
     
 iff there is no N.T.A. under which φ is true and ψ is false 
iff there is no interpretation under which (φ →
 ψ) is false 
iff (φ →
 ψ) is a tautology.⌧ 

 

 

SC Theorem 13. A contradiction implies every sentence. 
   
Proof: Suppose that φ is a contradiction. Take an arbitrary sentence ψ. We want to see that 
φ implies ψ. Since φ is a contradiction, there is no N.T.A. under which φ is true. So there is 
no interpretation under which φ is true and ψ is false. That is, φ implies ψ.⌧ 
 

SC Theorem 14. A tautology is implied by every sentence. 

 
Proof: Suppose that ψ is a tautology. Take a sentence φ. We want to see that φ implies ψ. 
Since ψ is a tautology, there is no N.T.A. under which ψ is false. So there is no N.T.A. under 
which φ is true and ψ is false. That is, φ implies ψ.⌧ 
 

SC Theorem 15. Two sentences are logically equivalent iff each implies the 
other. 

 
Proof: Take sentences φ and ψ. We have: 
 

φ is equivalent to ψ 
iff φ and ψ are true under precisely the same N.T.A.s        

 

 

SC Semantics, p. 10 
 

iff φ is true under every N.T.A. under which ψ is true and ψ is true under 
every            N.T.A. under which φ is true 
iff φ implies ψ and ψ implies φ.⌧ 

 
A Distinction to Keep in Mind: Truth and falsity for SC sentences are relative notions. An 
SC sentence is true under a particular N.T.A. or false under a particular N.T.A.. It makes 
no sense to say, simply, that an SC sentence is true or false. The notions of tautology, 
contradiction, logical equivalence, and implication are absolute notions. To be a tautology 
is to be true under every N.T.A.. That a sentence is a tautology is a property of the 
sentence, not relative to any particular N.T.A.. It makes no sense to say that a sentence is a 
tautology under an N.T.A., or that it is a contradiction under an N.T.A., or that one 
sentence implies another under an N.T.A., or that one is logically equivalent to another 
under an N.T.A..⌧ 
 
Definition. An SC argument is a finite sequence of SC sentences. The 
last member of the sequence is the conclusion and the earlier 
members are the premisses. The argument is valid iff there is no 
N.T.A. under which all the premisses are true and the conclusion is 
false.  

 
For example, the sequence       
 

 B)       
 C)       

(A ∨
(B →
¬C  
 A  

 
is an SC argument whose premisses are "(A  ∨
 B)," "(B  →
 C)," and "¬C" and whose 
conclusion is "A." It's valid, as we can see from examining the following truth table: 
       

A  B  C (A  ∨
 B)   (B →
 C)   ¬C     A 
                        1  1   1       1            1        0         1       
 1  1   0       1            0        1         1       
 1  0   1       1            1        0         1        
 1  0   0       1            1        1         1       
 0  1   1       1            1        0         0       
 0  1   0       1            0        1         0       
 0  0   1       0            1        0         0       
 0  0   0       0            1        1         0 

  

 

    
We see that in every row in which there is a "1" under all three of the premisses (namely, 
in row 4) there is also a "1" under the conclusion. This means that under every N.T.A. 
under which all three of the premisses are true the conclusion is also true, that is, the 
argument is valid.  

∴
SC Semantics, p. 11 
 
 

Let's look at another SC argument. Consider        

(A ∨
 B)       
(C →
 B) 
¬C          
 A 

 
Looking at the truth table,       
A  B  C   (A ∨
 B)   (C →
 B)   ¬C   A       
1   1  1         1              1       0      1       
1   1  0         1              1       1      1       
1   0  1         1              0       0      1       
1   0  0         1              1       1      1       
0   1  1         1              1       0      0       
0   1  0         1              1       1      0       
0   0  1         0              0       0      0       
0   0  0         0              1       1      0 

 

 

 

the 

     

 
we see that in the sixth row all three premisses are true even though the conclusion is false. 
So the argument is not valid.  
 

SC Theorem 16. An SC argument                     

φ1 
φ2 
. 
. 
. 
φn 
 ψ 

is valid iff the conjunction (φ1 ∧

 (φ2 ∧

 ... ∧

 φn)...) implies ψ.  

 
Proof:  The argument is valid         
iff there's no N.T.A. under which all the premisses are  true and the 

conclusion 
                           false       
 
 
iff there's no N.T.A. under which the conjunction  (φ1 ∧

 (φ2 ∧

 ... ∧

 φn)...) of 

     premisses is true and the conclusion ψ is false         
 ... ∧
 (φ2 ∧
iff the conjunction (φ1 ∧
 φn)...) implies the conclusion ψ.⌧ 

∴
∴
SC Semantics, p. 12 
 

SC Theorem 17. An SC argument                     

is valid iff the conditional ((φ1 ∧

 (φ2 ∧

 ... ∧

 φn)...) →

 ψ)is a tautology.  

 (φ2 ∧

 ... ∧

 φn)...) implies  the conclusion ψ [by SC        

 (φ2 ∧

 ... ∧

 φn)...) →

 ψ) is a tautology [by SC Theorem 

 

 

 

φ1 
φ2 
. 
. 
. 
φn 
 ψ 

 
Proof:  The argument is valid         
iff the conjunction (φ1 ∧
         Theorem 16]         
iff the conditional ((φ1 ∧

   
                           12].⌧   
 
Thus the argument        
 

 B)        
 C)        

(A ∨
(B →
¬C   
 A   

 
is valid because the conditional  
 

(((A ∨

 B) ∧

 ((B →

 C)  ∧

 ¬C)) →

 A)  

 
is a tautology, as we can see from its truth table:       
 
A  B  C  (((A  ∨
 ¬C)) →
 C)   ∧
 ((B →
 B) ∧
 A)       
1   1   1          1       0       1       0  0      1 1       
1   1  0           1       0       0       0  1      1 1       
1   0  1           1       0       1       0  0      1 1       
1   0  0           1       1       1       1  1      1 1       
0   1  1           1       0       1       0  0      1 0       
0   1  0           1       0       0       0  1      1 0       
0   0  1           0       0       1       0  0      1 0       
0   0  0           0       0       1       1  1      1 0  

Similarly, the argument       

∴
∴
SC Semantics, p. 13 
 
 

(A ∨
 B)       
(C →
 B)       
¬C       
 A   

 
is invalid, as we can see by observing that the conditional 
 

(((A ∨

 B) ∧

 ((C →

 B) ∧

 ¬C)) →

 A)  

 
is not a tautology; look at its truth table:       
 

A  B  C   (((A  ∨
 B) ∧
 ((C →
 B) ∧
 ¬C)) →
 A)       
1   1   1           1      0        1      0 0       1 1       
1   1   0           1      1        1      1 1       1 1       
1   0   1           1      0        0      0 0       1 1       
1   0   0           1      1        1      1 1       1 1       
0   1   1           1      0        1      0 0       1 0       
0   1   0           1      1        1      1 1       0 0       
0   0   1           0      0        0      0 0       1 0       
0   0   0           0      0        1      1 1       1 0  

 

 

Thus we can use the method of truth tables to test whether an SC argument is valid. 
This gives us a method for showing that an English argument is valid: Translate the 
English argument into the language of the sentential calculus. If the SC argument you get is 
valid, the original English argument was valid. for example, the English argument       
 

Either Jack or Jill went up the hill.       
If Jill went up the hill, so did Clarissa.       
Clarissa didn't go up the hill.       
Therefore Jack went up the hill.   

 
is valid. It's valid because it translates into the valid SC argument 
       

(A ∨
 B)       
(B →
 C)       
¬C     
 A 

This method works because good translation is truth-value preserving. That is, if we 
take a body of English discourse and correctly translate it into the language of the 
sentential calculus, then an N.T.A. which counts a sentential letter as true iff the simple 
English sentence it translates is true will also make a compound SC sentence true iff the 

∴
∴
Socrates is a man.       
All men are mortal.       
Therefore Socrates is mortal.   
translates into the invalid SC argument       
 

P       
Q           
 R 

 

SC Semantics, p. 14 
 
compound English sentence it translates is true. Thus if an English argument with true 
premisses translates into a valid SC argument, then an N.T.A. which makes a sentential 
letter true iff the  simple English sentence it translates is true will count the premisses of 
the SC argument as true. So, since the SC argument is valid, the conclusion of the SC 
argument will be true under the N.T.A.. So, since translation is truth-value preserving, the 
conclusion of the English argument must have been true.         
 

The method doesn't work both ways. If you take an English argument and translate 
it into a valid SC argument, you can be sure the English argument is valid, but if you take 
an English argument and translate it into an invalid SC argument, you can't be sure that 
the English argument was invalid. Thus the valid English argument       
 

The method will only show a valid English argument to be valid if the reason the 
English argument is valid is because of the way compound English sentences that occur 
within the argument are built up out of simple English sentences; that's because the only 
thing the sentential calculus looks at is how compound sentences are built out of simple 
sentences. But the English argument might also be valid on account of the way the simple 
sentences it contains are constructed, in which case to see the argument is valid you need a 
deeper level of logical analysis that looks inside the simple sentences. 
 

Definition. A sentence φ is a logical consequence of a set of sentences Γ 
iff there is no N.T.A. which assigns the value T to all the members of Γ 
and assigns F to φ. 
 
Definition. A set of sentences is consistent iff there is at least one 
N.T.A. by which all its members are assigned T. 
 
Here are some facts about these two notions, which I'll state without proof, since these 
proofs are starting to get kind of tedious: 
 

φ is a logical consequence of {γ1,γ2,...,γn} if and only if the argument 
with γ1,γ2,...,γn as premisses and with φ as conclusion is valid. 
 
A sentence is a logical consequence of the empty set iff it's valid. 
 

∴
A sentence is a tautology iff it is a logical consequence of every set of 
sentences. 
 
Each member of a set of sentences is a logical consequence of that set 
of sentences. 
 
If every member of ∆ is a logical consequence of Γ and φ is a logical 
consequence of ∆, then φ is a logical consequence of Γ. 
 
If ∆ is a subset of Γ and φ is a logical consequence of ∆, then φ is a 
logical consequence of Γ. 
 
For any sentence ψ and set of sentences Γ, ψ is a logical consequence 
of Γ if and only if Γ and Γ ∪
 {ψ} have precisely the same logical 
consequences. 
(φ ∧
 ψ) is a logical consequence of Γ iff φ and ψ are both logical 
consequences of Γ. 
 
(φ →
 ψ) is a logical consequence of Γ iff ψ is a logical consequence of Γ 
 {φ}. 

 (γ2 ∧

...∧

 ¬P) is a logical consequence 

SC Semantics, p. 15 
 

 γn)...) is an inconsistent 

 
{γ1,γ2,...,γn} is inconsistent iff (γ1 ∧
sentence. 
 
If Γ is an inconsistent set of sentences, then every sentence is a logical 
consequence of Γ. 
 
A set of sentences Γ is inconsistent iff (P  ∧
of Γ. 
 
A set of sentences Γ is inconsistent iff every sentence is a logical 
consequence of Γ. 
 
If ∆ is inconsistent and ∆ ⊆
 
φ is a logical consequence of Γ iff Γ ∪

 Γ, then Γ is inconsistent. 

 {¬φ} is inconsistent. 

∪
