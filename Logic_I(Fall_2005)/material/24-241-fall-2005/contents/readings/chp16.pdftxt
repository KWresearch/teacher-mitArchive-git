Derivations in the Monadic Predicate Calculus 

What we want to do now is to obtain a proof procedure of the monadic predicate calculus 
by adding a few easy rules to the rules we already have for the sentential calculus. Before we 
begin, let me repeat a point I emphasized when whe introduced the rules of deduction for SC: In 
an important sense, introducing a proof procedure for the IMPC  is a giant step backward, since 
we already have a decision procedure. A decision procedure is vastly better than a proof 
procedure, for two related reasons: First, a decision procedure gives you a way to show an 
argument to be invalid, as well as a way to show an argument to be valid. Second, a decision 
procedure lets you know when it's time to give up trying to show that a given argument is valid, 
whereas if all you have is a proof procedure, you could find yourself stumbling around forever, 
searching for a proof that isn't there. The reason why,  in spite of these disadvantages, we persist 
in developing a MPC proof procedure is that we can use the exact same rules when we turn to 
the full predicate calculus, where no decision procedure is possible. 

The basic structure of our deductions will be unchanged from the SC.  A proof will be a 
numbered sequence of sentences, each with an associated premiss set, written down according to 
rules that ensure that each of the numbered sentences is a logical consequence of its premiss set. 
The basic rules of SC have this feature, so we make take them over verbatim: 

(CP) 	

(PI) 	 You may write down any sentence you like, taking the unit set of that 
sentence as your premiss set. 
If you have obtained ICI  with premiss set I?, you may write (cp  - @) with 
premiss set I? - { q ) .  
If you have written  cp with premiss set I? and (cp  - @) with premiss set A, 
(IMP) 	
you may write ICI  with premiss set I? u A. 
(MT) 	 If you have written ICI  with premiss set I? and (- cp  - - @) with premiss 
set A, you may write cp with premiss set I? u A. 

(DC) 	 You may write down any instance of any of the following schemata with 
((cp  v ICI)  - (- cp  - ICI)) 
the empty set of premisses: 
((- cp  - ICI)  - (cp  v ICI)) 
((cp A  ICI)  - - (cp  - - ICI)) 
(- (cp  - - ICI)  - (cp  A  ICI)) 
((cp  - ICI)  - ((cp  - ICI)  A (ICI  - cp)) 
(((cp  - ICI)  A (ICI  - cp))  - (cp  - ICI)) 
We can also take over the derived rule TH: 

(TH) 	 You may write down any IMPC  sentence that is a substitution instance of a 
SC theorem with the empty premiss set. 

MPC Derivations, p. 2 

Here a "substitution instance" of an SC sentence will be an MFC sentence that can be obtained 
fiom the SC sentence by  substituting MFC sentences fiom atomic SC sentences, making sure 
that different occurrences of the same atomic sentence can be replaced in the same way. We 
could, if we wanted to, after we'd introduced all the basic MFC rules, formulate an extension of 
rule TH where you start with a theorem of MPC (that is, an MPC sentence that you've derived 
fiom the empty set) and get a new new MPC theorem by uniformly substituting a formula for 
each predicate that occurs in the original theorem. But the W h e r  rule wouldn't be very useful, 
so that introducing it would be more trouble than it's worth. 

Rather than reintroducing the derived rules SE and BI, we incorporate them into a very 
powerful derived rule that assimilates the entire sentential calculus: 

Tautological consequence rule (TC). If you have written down sentences 
$,, $,,...,  $,  in a derivation, and cp  is a tautological consequence of 
then you may write down sentence $, taking the premiss 
set to be the union of the premiss sets of the $is.  In particular, if cp  is a 
tautology, we can write cp with the empty premiss set. 
then the conditional ($, - ($, - ... - ($,  - cp)...))  can be 
We know fiom the completeness theorem for the sentential calculus that, if cp  is a tautological 
consequence of  {$,,$,, ...,$,I,
derivations of the $p,  one after another, followed by the derivation fiom the empty set of ($, -
derived fiom the empty set by means of rules PI, CP, MP, MT, and DC. By first writing the 
($2  - ... - ($,  - cp)...)),  followed by n steps of MF, and finishing up with cp, we can get a 
derivation of cp with the union of the premiss sets of the $is  as its premiss set without making 
use of TC. This is what entitles TC to its humble title of "derived  rule." 

If, in rule TC, you replaced the words "tautological consequence" and "a  tautology" with 
"logical  consequence"  and "valid,"  you would still get a rule that had the property that anything 
you wrote down on the basis of the rule would be a logical consequence of its premiss set, but it 
would be a pretty silly rule,  since you could only apply the rule if you already knew how to 
recognize when one sentence is a logical consequence of some others, and the whole purpose of 
introducing the system of rules is to help us recognize when one sentence is a logical conse- 
quence of some others. Rule TC  isn't silly in this way, because we already have an efficient 
method for testing whether cp  is a tautological consequence of  {$,, $,.,,,  $,I,  namely the 
search-for-counterexamples technique, so we can readily test whether a purported applicationo 
of TC is legitimate. (To be sure, we also have a method of testing whether the MPC sentence $ 
is a logical consequence of {$,,$,,  ...,$,I,  but it's highly impractical, and moreover, we won't 
have any such method when we turn to full predicate calculus.) 

The reason for introducing TC is that we've already learned about SC and now we want 
to learn what's new in MFC, and rule TC lets us focus our attention where our interest is. As an 
illustration, using  "Wx" for "x went up the hill,"  "a" for "Jack," "b" for "Jill," and "c" for "Clar- 
issa," let's give a  derivation of "Either Jill or Clarissa went up the hill" ["(WbV Wc)"] fiom 

MPC Derivations, p.  3 

sa" ["(Wa - Wc)"]: 
"Either Jack or Jill went up the hill"  ["(Wa V Wb)"] and "If Jack went up the hill, so did Claris- 
2.  (Wa - Wc)  PI 
1. (WaV  Wb)  PI 
1 
2 
1,2 
3.  (W bV  Wc)  TC,  1 , 2  

We can verify that line 3 is truly a tautological consequence of lines  1 and 2 by the search-for- 
counterexample method, putting a " 1" under the main connective of each premiss, and a "0" 
under the main connective of the conclusion: 
(Wa V Wb)  (Wa - Wc)  :.(Wb  V Wc) 
1  n 
n 1 n  
A  A 
1  u 
u  1  u 
u  u 


Without rule TC, the derivation would be longer: 
2.  (Wa - Wc) 

1. (Wa V Wb) 
3 . ( (W a VW b ) - ( -W a -W b )   

5. - Wa 
4.  (- W a -   Wb) 
6. Wb 

7 . (W b - - -W b )   

8 . - -W b   

10. - Wb 
9 . ( -W a -
11. Wa 
13. (- Wb - Wc) 
12. Wc 
14. ((1Wb - Wc) - (Wb V Wc)) 
15. (Wb V Wc) 

- -W b )   


So far, our derivations have just  been SC derivations in a different notation. Now we're 
going to learn some rules that describe the operation of the quantifiers. Once again, the rules 
we'll use are taken over from Mates' Elementary Logic: 

Universal specification rule (US). If you've derived (Vx)cp, you may 
derive cpx/, with the same premiss set, for any constant c. 
I'(t/X)(Gx - Mx)" ("All Greeks are mortal"): 
For example, we derive "Ms" ("Socrates is mortal") from "Gs" ("Socrates is a Greek") and 

MPC Derivations, p. 4 

1 
2 
2 
1 2  

2.  (b'x)(Gx  - Mx) 
1. Gs 
3. (Gs - Ms) 
4. Ms 

PI 
PI 
US,2 
MP  1,3 

It's clear that rule US  is logical-consequence preserving, because cpxIc is a logical 
consequence of (b'x)cp.  If (b'x)cp  is true under U,  every member of IUI  satisfies cp  under U.  So, in 
particular, U(c) satisfies cp  under U,  so that, by the Substitution Principle, cpxIc is true under U. 

Universal generalization  ru le  (UG). If you've derived cpxIc from I? and if 
the constant c doesn't appear in cp  or in any of the sentences in I?, you may 
derive (b'x)cp  with premiss set I?. 
For example, we derive "(Vx)(Gx - Mx)" ("All Greeks are mortal") from "(Vx)(Gx -
Hx)" ("All Greeks are human beings") and "@ic)(Hx - Mx)" ("All human beings are mortal"): 
1. (b'x)(Gx  - Hx) 
2.  (Vx)(Hx - M x )  
PI 
PI 
4. (Ga - Ha) 
PI 
3. Ga 
u s ,  1 
6. (Ha - Ma) 
MP  3,4 
5. Ha 
u s , 2  
8. (Ga - Ma) 
7. Ma 
MP 5,6 
9.  (b'x)(Gx  - Mx)  UG,8 
CP,3,7 
Here, line 8 is gotten from "(Gx - M i ) , "  by  substituting "a" for free occurrences of "x," while 
constant "a" doesn't appear in the formula "(Gx - Mx)" and it doesn't appear in the premisses of 
line nine is gotten from the same formula by prefixing the universal quantifier "(Vx)." Since the 
line 8, we can derive line 9 fiom line 8 by rule UG. 

The idea behind rule UG is that, if you have derived cpxIc fiom I?, where c doesn't appear 
in I? or in cp,  then the reason you know cpxIc is true if all the members of I? are true can't have 
anything special to do with the particular individual named by c, because you don't know 
anything about the particular individual named by  c; that individual isn't even mentioned in the 
premiss set. Whatever reasons you have for believing that the individual named by  c satisfies cp 
are reasons that would apply just  as well to any other element of the universe. So every member 
of the universe satisfies cp.  So (Vx)cp is true. 

More formally, we  show that rule UG is logical-consequence preserving, as follows: 
Suppose that cpxIc is a logical consequence of I? and that the constant c doesn't appear in cp  or in 
any of the members of I?. We want to  see that (Vx)cp is a logical consequence of I?. 

Take an interpretation U under which all the members of r' are true. We want to see that 
(Vx)cp is true under U.  Take a member a of IUI.  We want to show that a satisfies cp  under U.  Since 
a was chosen arbitrarily, this will tell us that every member of bI  satisfies cp under U,  so that 
(Vx)cp is true under U. 

MPC Derivations, p.  5 

Let 23 be an interpretation which is just  like U except that  %(c) = a. It follows from the 
Locality Principle that all the members of r' are true under 23.  Hence cpxIc is true under 23.  It 
follows by the Substitution Principle that 23(c), which is a, satisfies cp under 23. Using the 
Locality Principle again, we know that a satisfies cp  under U, which is what we wanted to show. 
adult") from "(Vx)(Cx V  ( M i V Wx))," "(Vx)(Mx - Ax)," and "(Vx)(Wx - Ax)"; we want to fill 
As another example, let's derive "(Vx)(Cx V Ax)" ("Everyone is either a child or an 
in the blank in this: 
2.  (Vx)(Mx - Ax) 
1. (Vx)(Cx V  (Mx V Wx)) 
3. (Vx)(Wx + Ax) 

PI 
PI 
PI 

1 
2 
3 

1,293 

(Vx)(Cx v Ax) 
The sentence we're trying to prove is universal. There is a general strategy for proving universal 
sentences: To prove (Vx)cp, pick a new constant c that doesn't appear anywhere else in the proof, 
and try to prove cpxIc with the same premisses; then use UG. Thus we try to prove  "(Cc V Ac)": 
2.  (Vx)(Mx - Ax) 
1. (Vx)(Cx V  (Mx V Wx)) 
3. (Vx)(Wx + Ax) 

PI 
PI 
PI 

1 
2 
3 

UG, 

1,2,3 
1,293 

(Cc V Ac) 
(Vx)(Cx v Ax) 
We're now trying to prove something about the individual named by "c." What we know is a 
bunch of universal statements. From those universal statements, we are trying to derive conclu- 
sions about the individual named by "c," and the obvious way to do this is to use rule US: 
2.  (Vx)(Mx - Ax) 
1. (Vx)(Cx V  (Mx V Wx)) 
3. (Vx)(Wx - Ax) 

PI 
PI 
PI 

1 
2 
3 

MPC Derivations, p.  6 

4 
5 
6 

5. (Mc - Ac) 
4.  (Cc V  (Mc V Wc)) 
6. (Wc - Ac) 

1,2,3 
1,2,3 

(Cc V Ac) 
@;c)(Cx V Ax) 

US, 1 
US,2 
US,3 

UG, 

Now the sentence we're trying to prove is a disjunction. We don't have any general strategy for 
proving a disjunction, but we do have a strategy for proving conditionals: Assume the antecedent 
to prove,  "(Cc V Ac)" into the tautologically equivalent conditional "(-Cc  - Ac)," then to 
and try to prove the consequent. So what we want to do is to convert the sentence we are trying 
assume "-Cc"  as a premiss and try to derive "Ac" : 
2.  (Vx)(Mx - Ax) 
V  (Mx V Wx)) 
1. ~ ( C X  
3. (Vx)(Wx - Ax) 
5. (Mc - Ac) 
4.  (Cc V  (Mc V Wc)) 
6. (Wc - Ac) 
7. -Cc 

PI
PI 
PI 
US, 1 
US,2 
US,3 
PI 

1 
2 
3 
4 
5 
6 
7 

(-Cc  - Ac) 
Ac 

1,2,3,7 
c p , 7 ,   

1,2,3 
(Cc V Ac) 
TC, 

1 2 3  
@;c)(Cx V Ax) 
1,2,3 
UG, 

rewrite line 4 as "(-Cc  - (Mc V Wc))" and to apply modus ponens: 
Lines 4 and 7 together tautologically imply "(Mx V Wc)"; one way to see this is to 
2.  (Vx)(Mx - Ax) 
1. (Vx)(Cx V  (Mx V Wx)) 
PI 
3. (Vx)(Wx - Ax) 
PI 
PI 
5. (Mc - Ac) 
4.  (Cc V  (Mc V Wc)) 
US, 1 
6. (Wc - Ac) 
US,2 
US,3 
8. (- Cc - (Mc V Wc)) 
7. -Cc 
PI 
TC 4 
9. (Mc V Wc) 
MP 4,8 

1,2,3,7 
1,2,3 
1,2,3 
1,233 

(-Cc  - Ac) 
Ac 

(Cc V Ac) 
(Vx)(Cx v Ax) 
Lines 9, 5, and 6 tautologically imply "Ac," which is what we want: 

c p , 7 ,   

TC, 

UG, 


MPC Derivations, p.  7 

2. @'x)(Mx - Ax) 
1. (b'x)(Cx  V  (Mx V Wx)) 
3.  (b'x)(Wx  - Ax) 
5. (Mc - Ac) 
4. (Cc V  (Mc V Wc)) 
6.  (Wc - Ac) 
8. (- Cc - (Mc V Wc)) 
7. -Cc 
9.  (Mc V Wc) 
11. (-Cc  - Ac) 
10. Ac 
12. (Cc V Ac) 
13. (b'x)(Cx  V Ax) 

PI 
PI 
PI 
u s ,  1 
u s , 2  
u s , 3  
PI 
TC 4 
MP 4,8 
TC,5,6,8 
CP,7,10 
TC, 1 1 
UG, 1 1 

The last move we made in joining the two ends of our proof was an instance of a general 
trying to prove 8 ,  try to prove (cp  - 8 )  and ($ - 8 ) .  Then you can put the pieces together by rule 
strategy to use when one of the things you know is a disjunction. If you have (cp V $) and you're 
TC. 

Whenever you derive a sentence cp with the premiss set I?, you'll know that cp  is a logical 
consequence of I?.  In particular, if you derive cp  from the empty set of premisses, you can 
conclude that cp  is a logical consequence of the empty set, that is, you can conclude that cp  is 
valid. 
As an example, let's derive "((b'x)(Fx A Gx) - (('dx)Fx A @ir)Gx))" from the empty set. 
Our familiar strategy of proving a biconditioal by proving its two directions separately still 
serves, although the rule we apply is now called "TC";  BI is just  a special case of TC. So we 
want to fill in the blanks in this: 

(((b'x)Fx A  (b'x)Gx) - @ir)(Fx A Gx)) 
((b'x)(Fx A Gx) - ((b'x)Fx  A ('dx)Gx))  TC, 
To fill in the first blank, we assume the antecedent and try to derive the 
consequent: 

1 

1. @'x)(Fx A Gx) 

PI 

MPC Derivations, p.  8 

(('dx)(Fx A Gx) - (('dx)Fx A  ('dx)Gx))  CP, 1 

(('dx)Fx A  (Vx)Gx) 


((('dx)Fx A ('dx)Gx) - @ir)(FxA Gx)) 
(('dx)(Fx A Gx)  * (('dx)Fx A  vx)Gx))  

To prove a conjunction, try to prove both conjuncts: 

1 .  ('dx)(Fx A Gx) 

1 

1 
1 

TC 

PI 

W )G x  
(('dx)(Fx A Gx) - (('dx)Fx A  ('dx)Gx))  CP 
(('dx)Fx A  (Vx)Gx) 
TC 

((('dx)Fx A  ('dx)Gx) - @ir)(FxA Gx)) 
(('dx)(Fx A Gx) - (('dx)Fx A  ('dx)Gx)) 

TC 

To prove a universal statement, prove an instance of it with a new constant. We use this 
strategy to prove both  "('dx)FxW and "@ir)GxM: 

MPC Derivations, p.  9 

1. ('dx)(Fx A Gx) 	
2. (Fa A Ga) 	
3. Fa 	
4.  ('dx)Fx 	
5. (Fb A Gb) 	
6. Gb 	
7.  ('dx)Gx 	
9.  (('dx)(Fx A Gx) - (@ir)Fx A  ('dx)Gx)) 
8. ((Vx)Fx A @ir)Gx) 	
((('dx)Fx A  ('dx)Gx) - @ir)(Fx A Gx)) 

(('dx)(Fx A Gx) - (('dx)Fx A  ('dx)Gx)) 

PI 
u s ,  1 
TC,2 
UG,3 
u s ,  1 
TC,5 
UG,6 
TC,4,7 
CP,1,8 

TC, 


To fill in the remaining blank, we assume the antecedent and try to derive the consequent. 

1. ('dx)(Fx A Gx) 	
2.  (Fa A Ga) 	
3.  Fa 	
4.  ('dx)Fx 	
5. (Fb A Gb) 	
6.  Gb 	
7.  ('dx)Gx 	
9.  ((Vx)(Fx A Gx) - (@ir)Fx A  ('dx)Gx)) 
8. (('dx)Fx A @ir)Gx) 	
10. ((Vx)Fx A @ir)Gx) 	

PI 
u s ,  1 
TC,2 
UG,3 
u s ,  1 
TC,5 
UG,6 
TC,4,7 
CP,1,8 
PI 

10 	

((('dx)Fx A  ('dx)Gx) - @ir)(Fx A Gx)) 
@ir)(Fx A Gx) 
(('dx)(Fx A Gx) - (('dx)Fx A  ('dx)Gx)) 
What we have to work from is a conjunction, "(('dx)Fx A @ir)Gx)"; we simplify this by writing 
its two conjuncts on separate lines. What we're trying to prove is a universal sentence, "('dx)(Fx 
A Gx)," which we prove by first proving  "(Fc A Gc), intending to apply rule UG: 

CP,lO, 
TC 

1 

1. ('dx)(Fx A Gx) 	

PI 

MPC Derivations, p.  10 

2.  (Fa A Ga) 
u s ,  1 
3. Fa 
TC,2 
4.  (Vx)Fx 
UG,3 
5. (Fb A Gb) 
u s ,  1 
6. Gb 
TC,5 
7.  (Vx)Gx 
UG,6 
9. ((Vx)(Fx A Gx) - (@ic)Fx A  (Vx)Gx)) 
8. ((Vx)Fx A @ic)Gx) 
TC,4,7 
CP,1,8 
lo .  ((Vx)Fx A @ic)Gx) 
PI 
1 1. (Vx)Fx 
TC, 10 
12. (Vx)Gx 
TC,10 
13. Fc 
u s , 1 1  
14. Gc 
u s ,  12 
15. (Fc A Gc) 
TC,13,14 
17. ((@ic)Fx A  (Vx)Gx) - (Vx)(Fx A Gx)) 
16. (Vx)(Fx A Gx) 
UG, 15 
18. ((Vx)(Fx A Gx) - (@ir)Fx A  (Vx)Gx)) 
CP,10,16 
TC,9,17 
As another example, let's derive "(Fa - (Vx)(Gx - Fa))" from the empty set: 
2.  (Gb - Fa) 
PI 
1. Fa 
3. (Vx)(Gx - Fa) 
TC, 1 
4.  (Fa - @ic)(Gx - Fa)) 
UG,2 
CP, 1,3 
Let's derive "(@ir)(Fx - Gx) - ((Vx)Fx - (Vx)Gx))" from the empty set: 
1. (Vx)(Fx - Gx) 
PI 
3. (Fa - Ga) 
PI 
2.  (Vx)Fx 
us,1 
4. Fa 
u s , 2  
TC,3,4 
5. Ga 
7.  ((Vx)Fx - @ir)Gx) 
UG,5 
6. (Vx)Gx 
8. ((Vx)(Fx - Gx) - (@ic)Fx - (Vx)Gx)) 
CP,2,6 
CP, 1,7 
Remember the restriction on rule UG.  If you use rule UG to derive (Vx)cp from cpX/,, the 
you'll get poppycock, like the following bad derivation from the empty set of "(Ws - (Vx)Wx)" 
constant c shouldn't appear either in cp  or in any members of the premiss set of cpX/,. Otherwise, 
("If Socrates is wise, everyone is wise"): 

1 
2 
1 
2 
1 2  
1 2  
1 

1 
1 
1 

1. Ws 
2.  (Vx)Wx 
3 .(Ws-(Vx)Wx)  

PI 

CP,1,2 

Bad use of UG, 1 

MPC Derivations, p.  11 

We now have all the rules we need for dealing with the universal quantifier, and it's time 
to turn to the existential quantifier. We'll learn two rules, one easy and the other more compli- 
cated: 

Existential generalization ru le  (EG). If you have written cpX/,, for any 
constant c, you may write (3x)cp with the same premiss set. 

It's easy to see that this new rule is logical-consequence preserving, since (3x)cp is a logical 
consequence of cpX/,. 
("Socrates is a Greek"),  "Ps" ("Socrates is a philosopher"), and "(Vx)(Px - Bx)" ("All philoso- 
As an illustration, let's derive "(3x)(Gx A Bx)" ("Some Greeks have beards") from "Gs" 
phers have beards"): 

1 
2 
3 
3 
2,3 
1,2,3 
1,2,3 

1. Gs 
3.  (Vx)(Px - Bx) 
2. Ps 
4. (Ps - Bs) 
5. Bs 
6.  (Gs A Ws) 
7.  (3x)(Gx A Wx) 

PI 
PI 
PI 
US 3 
MP 2,4 
TC, 1,5 
EG,6 

We now rules that let us derive the consequences of a universal premiss (US), that let us 
derive a universal conclusion (UG), and that let us derive an existential conclusion (EG). What 
we lack is a rule for deriving the consequences of an existential premiss. The motivation for the 
new rule is this: Suppose we know that there is something that has property P. Let's pick such a 
thing and call it "c,"  If we are able to derive a conclusion that doesn't say anything specific 
about the thing named by "c,"  and if deriving the conclusion we don't use anything about the 
thing we have temporarily named "c"  other than that it has property P, then the conclusion we've 
reached doesn't really depend on the assumption that the thing named by "c"  has property P; it 
really only depends on the the thesis that there is something with property P. We  formalize this 
argumentative strategy in the following rule: 

Existential specification (ES). Suppose that you have derived (3x)cp with 
premiss set A and that you have derived $ with premiss set r u  {cpX/,), 
for some constant c.  Suppose M e r  that the constant c does not appear in 
cp,  in $, or in any member of r.Then you may derive $ with premiss set 
A u r. 

MPC Derivations, p.  12 
"(3x)(Sx A Fx)" ("Some squirrels fly") and "@ir)(Sx - Mx)" ("All squirrels are mam- 
Here's an example: We derive "(3x)(Mx A Fx)" ("Some mammals fly") fiom 
mals"): 
2.  (Vx)(Sx - Mx) 
1. (3x)(Sx A Fx) 
PI 
PI 
3. (Sa A Fa) 
PI (for ES) 
TC,3 
4.  Sa 
6. (Sa - Ma) 
5. Fa 
TC,3 
u s , 2  
MP 4,6 
7. Ma 
8. (Ma A Fa) 
TC,5,7 
9. (3x)(Mx A Fx) 
EG,8 
lo .  (3x)(Mx A Fx)  ES,1,3,9 

Here we were trying to prove "(3x)(Mx A Fx)," and one of the premisses we had 
available to use was the existential sentence "(3x)(Sx A Fx)." The way we used this 
existential premiss was to take an instance of the existential premiss as a new premiss at 
line 3. Then, at line 9, we used this new premiss to prove  "(3x)(Mx A Fx)." At line  10, 
we used rule ES to upgrade our premisses, replacing "(Sa A Fa)" in the premiss set of 
"(3x)(Mx A Fx)" with the premiss set of "(3x)(Sx A Fx)." 

We know that some squirrels fly. Take a flying squirrel; call him "a." From the 
assumption that a is a flying squirrel, we are able to conclude that some mammals fly. So 
this conclusion must already be entailed by  "Some squirrels fly." 

Notice that what rule ES permits you to do is merely to repeat a sentence you've 
already written earlier. What's changed is your premiss set. Notice also that an applica- 
tion of ES is always paired which an application of PI. PI occurs up to, ES at the bottom. 

As another example, let's derive "(3x)(Fx A Gx)" fiom "(3x)Fx" and "@ir)Gx": 

1 
2 
3 
2 
2,3 
2.3 
1,2 

1. (3x)Fx 
2.  (Vx)Gx 
3. Fa 
4. Ga 
5. (Fa A Ga) 
6. (3x)(Fx A Gx) 
7.  (3x)(Fx A Gx) 

PI 
PI 
PI (for ES) 
US,2 
TC,3,4 
EG,5 
ES,1,3,6 

We had  "(3x)Fx" as a premiss. We made use of it by taking "Fa" as a premiss, then using rule 
ES to upgrade the premiss set of our conclusion. 

MPC Derivations, p.  13 

There are two kinds of premisses: premisses we regard as hypotheses of whatever 
argument we're given, and premisses we introduce during the course of an argument on which 
we don't want our final conclusion to depend. There's no point in  introducing a premiss of the 
latter sort unless you have some way of removing it from the premiss set of your eventual 
conclusion, and we have two ways of removing something from the premiss set, CP and ES. To 
help keep track of where we're going, whenever we introduce a new premiss that isn't intended 
to be a premiss of the final argument, I've take to marking it as either "for  CP"  or "for  ES." 
Don't introduce a premiss unless you have a plan for getting rid of it. 
Now let's derive "(3x)(Fx A Gx)" from the premisses "(3x)(Ax A Bx)," "(b'x)(Ax -
Fx)," and "('dx)(Bx - Gx)" : 
2.  (b'x)(Ax  - Fx) 
1. (3x)(Ax A Bx) 
PI 
3.  ('dx)(Bx - Gx) 
PI 
PI 
4.  (Aa A Ba) 
PI (for ES) 
5. Aa 
TC,4 
7.  (Aa - Fa) 
6. Ba 
TC,4 
u s , 2  
9.  (Ba - Ga) 
MP,5,7 
8. Fa 
u s , 3  
10. Ga 
W ' 6 , 9  
11. (Fa A Ga) 
TC,8,10 
12. (3x)(Fx A Gx)  EG, 1 1 
13. (3x)(Fx A Gx)  ES, 1,4,12 

Why does ES work? The reasoning that shows that ES is logical-consequence preserving 
is similar to the reasoning behind UG. Suppose that (3x)cp is a logical consequence of A and that 
$ is a logical consequence of I? u  cpxIc, where c doesn't appear in cp  or $ or in any of the 
elements of I?. Let U be an interpretation under which every member of I? u A  is true. Then 
(3x)cp is true under U,  so there is an element s of IUI  that satisfies cp under U. Let 23  be an 
interpretation that's like U except that %(c) = s. The Locality Principle tells us that s satisfies cp 
under 23,  and so the Substitution Principle assures us that cpxIc is true under 23.  The locality 
principle assures us that all the members of I? are true under 23,  so we can conclude that q is true 
under 23.  By the Locality Principle, q is true under U as well. 

We'll introduce one last rule. It isn't strictly necessary - it's only a derived rule -but 
it's easy and useful: 

Quantifier exchange ru le  (QE). 

From -('dx)-cp,  you may infer (3x)cp with the same premiss set, and vice versa.  

From ('dx)-cp,  you may infer -(3x)(p  with the same premiss set, and vice versa.  

From -(b'x)cp,  you may infer (3x)-(p  with the same premiss set, and vice versa.  

From @ir)cp, you may infer -(3x)-(p  with the same premiss set, and vice versa.  


MPC Derivations, p.  14 
without the new rule, we can derive (3x)cp from  {- ('dx) - cp), and derive - (Vx)- cp  from 
To see that the first of these four rules is consequence-preserving, we'll verify that, even 
(3x)cp: 

PI 

PI (for CP) 

PI (for CP) 

EG 3 


PI 

PI (for ES) 

PI (for CP) 

us 3 

CP 3 , 4   

TC 2 , 5   

ES  1 , 2 ,  6 


The derivations for the other three rules are similar, and we won't go through them here. 

The new rule is useful, because, although we already had techniques for dealing with 
sentences that began with quantifiers, up until now we didn't have any direct way to deal with 
("No one is both a man and a woman") from "(Vx)(Mx - Bx)" ("All men have beards") and 
sentences that begin with negated quantiers. As an illustration, let's derive "-(3x)(Mx  A Wx)" 
"-(3x)(Wx  A Bx)" ("No women have beards"): 

PI 
l .W x ) (M x -B x )  
2. -(3x)(Wx  A Bx)  PI 
4.  (Ma - Ba) 
3. (Vx)-(Wx  A Bx)  QE,2 
US, 1 
5. -(Wa  A Ba) 
US,3 
PI (for CP) 
6. Ma 
8. - Wa 
MP  4 , 6  
7. Ba 
9. (Ma - - Wa) 
TC 5 , 7  
CP 6 , 8   

1 0 . - (M aAW a )  
T C 9   

11. (Vx)-  (Mx A Wx) UG  10 
12. -(3x)(Mx  A Wx)  QE  1 1 
-

"-(3x)(Kx  A Lx)"  ("No  kangaroos bear live young"),  "-(3x)(Kx  A - Mx)"  ("There  aren't any 
Lx)"  ('Not every mammal bears live young")  from 
Now let's derive "-(Vx)(Mx 
kangaroos that aren't mammals"),  and "(3x)Kx"  ("There  are kangaroos"). 

MPC Derivations, p.  15 

1.  - (3x)(Kx A Lx) 
2.  -(3x)(Kx  A - Mx) 
3.  (3x)Kx 
4.  Ka 
6.  - (Ka A La) 
5.  Vx ) - (Kx A Lx) 
8.  Vx ) - (Kx A - Mx) 
7.  - L a  
9.  - (KaA  -Ma )  
11. (Ma A - La) 
10. Ma 
12. - (Ma - La) 
1 3. (3x)-  (Mx - Lx) 
14. - Vx ) (Mx  - Lx) 
15. - ('dx)(Mx - Lx) 
Now that we have the rules,  let's talk about some strategies for applying the rules. These 
strategies aren't part of the rules; they're techniques for using the rules efficiently. To have a 
correct derivation, you have to follow the rules, but you don't have to follow the strategies if you 
don't want to. The strategies don't always work, but they usually do. 

PI 
PI 
PI 
PI (for ES) 
QE  1 
us 5 
TC 4 , 6  
QE 2 
US  8 
TC 4 , 9  
TC 7 , 1 0  
TC  11 
EG  12 
QE  13 
ES 3 , 4 ,   14 

The basic plan is always to work fiom two ends toward the middle. Thus, at each stage of 
a derivation, there will be a set of sentences you are assumed to know, and there are one or more 
sentences you are trying to prove. The strategies are techniques  for breaking up the sentences 
you are working with into sentences that are simpler and therefore, hopefully, easier to work 
with. 

There are two groups of strategies, bottom up strategies simplifling  the sentence you're 
trying to prove, and top down strategies for simplifling  the sentences you are assumed to know. 
Here is the main  strategy for simplifling the sentence you're trying to prove: 

If you're trying to prove a conditional, assume the antecedent as a premiss and try to derive the 
consequent. Then apply rule CP. 

Here are more bottom-up strategies: 
If you're trying to prove a disjunction (cp  V $),prove the conditional (-cp  - $), then apply rule 
TC. (Occasionally, you can simply prove one of the disjuncts.) 
If you're trying to prove a biconditional (cp  - $), prove the two conditionals (cp  - $) and ($ -
cp),  then apply TC. 

If you're trying to prove a conjunction, prove each of the conjuncts, then apply rule TC. 

MPC Derivations, p.  16 
If you're trying to prove a universal sentence, try to prove an instance of it the sentence with a 
new constant. Then apply UG. 

If you're trying to prove a negated conditional -(cp 

If you're trying to prove an existential sentence, try to prove an instance of it. Then apply EG. 
-

q ) ,  prove cp  and - q ,   then apply TC. 
If you're trying to prove a negated disjunction -(cp  V q ) ,  prove -cp  and - q ,   then apply TC. 
If you're trying to prove a negated biconditional -(cp  - q ) ,  try to prove (cp  - - q ) ,   then apply 
TC. 
If you're trying to prove negated conjunction, -(cp  A q ) ,  try to prove (cp  - - q ) ,   then apply TC. 
If you're trying to prove a negated universal sentence -(Vx)cp,  prove (3x)-(p,  then apply QE. 

If you're trying to prove a negated existential sentence -(3x)(p,  prove (Vx)-cp,  then apply QE. 

If you're trying to prove a negated negation --cp,  prove cp,  then apply TC. 

Now we turn to the top-down strategies for simplifjmg the premisses and sentences you 
have derived from the premisses. Let me refer to the premisses and the things you have derived 
from the premisses as your "assumptions"; here are the strategies for simplifying assumptions: 

If one of your assumptions is a conjunction, write the two conjuncts on separate lines, using TC. 
conditionals (cp  - 0 )  and ( q  - 0 ) ,  then apply TC. Whenever you apply this strategy, you're sure 
If one of your assumptions is a disjunction (cp  V q )  and you're trying to prove 0, prove the two 
first is to rewrite the disjunction as a conditional (-cp  - q )  (using TC), then to see if you can 
to wind up with a pretty long proof, so use this strategy only as a last resort. Something to try 
apply modus ponens  or modus  tollens. 
If one of your assumptions is a conditional (cp  - q ) ,  see if you can apply modusponens or 
modus tollens. If not, rewrite the conditional as (-cp  V q ) .  
If one of your assumptions is a biconditional (cp  - q ) ,  see if you know how to prove one 
component, in which case you can derive the other by TC. See if you know how to prove the 
negation of one component, in which case you can derive the negation of the other. Otherwise, 
rewrite the biconditional as ((cp A q )  V  (-cp  A -q ) ) ,   using TC 

If one of your assumptions is an existential sentence (3x)cp, pick a new constant c and assume 
cpxIc as a new premiss. Once you've proven what you're trying to prove, use ES to upgrade your 
premiss set, replacing {cpxIc) by the premiss set of (3x)cp. 

MPC Derivations, p.  17 
If one of your assumptions is a universal sentence @ir)cp, deduce cpxIc for each constant c that 
appears in the proof.* 

If one of your assumptions is a negated conjunctions -(cp  A @J, 
TC. 

rewrite it as (-cp  V  -@),  using 

If one of your assumptions is a negated disjunction, -(cp  V  @),  rewrite it as (-cp  A  -@),  using 
TC. 
If one of you assumptions is a negated conditional -(cp  - @),  rewrite it as (cp  A  -@),  using TC. 
If one of your assumptions is a negated biconditional -(cp  - @),  rewrite it as (cp  - -@),  using 
TC. 

If one of your assumptions is a negated existential sentence -(3x)cp,  rewrite it as @ir)-cp,  using 
QE. 

If one of your assumptions is a negated universal sentence -(Vx)cp,  rewrite it as (3x)-cp,  using 
QE. 

If one of your assumptions is a negated negation --cp, 

rewrite it as cp,  using TC. 

One final bottom-up rule: 

If all else fails, assume the negation of what you're trying to prove and try to derive an absurdity. 
If you're trying to @,  use PI to assume -@.  If you are able to prove @ or you are able to prove the 
negation of one of your other assumptions, you can use CP followed by TC to get the conclusion 
you want. 
"@ir)(Gx - Hx)"). We follow the strategy for using a disjunctive assumption, first proving 
Let's do some examples. Let's derive "(3x)(Fx V Hx)" from  ("((3x)Fx V (3x)Gx)," 
"((3x)Fx - (3x)(Fx V Hx))" and "((3x)Gx - (3x)(Fx V Hx))," then applying TC: 

* 
It generally only helps to derive cpxIc for constants c that appear elsewhere in the proof. It 
usually does no good to instantiate with a brand new constant. The only exceptions that I know 
from the empty set of ((Vx)Fx - (3x)Fx): 
of occur when there haven't been any constants in the proof so far. An example is the derivation 
PI 
1. ('dx)Fx 
1 
US, 1 
2. Fa 
1 
4 ((Vx)Fx - (3x)Fx)  CP, 1,3 
1 
3. (3x)Fx 
(EG),2 

MPC Derivations, p.  1 8 

2.  (Vx)(Gx - Hx) 
1. ((3x)Fx V (3x)Gx)) 
PI 
PI 
PI 
3. (3x)Fx 
PI (for ES) 
4.  Fa 
5. (Fa V Ha) 
TC,4 
6. (3x)(Fx V Hx) 
EG,5 
8. ((3x)Fx - (3x)(Fx V Hx)) 
7.  (3x)(Fx V Hx) 
ES,3,4,6 
CP,3,7 
PI 
9.  (3x)Gx 
11. (Gb - Hb) 
PI (for ES) 
10. Gb 
US,2 
TC,10,11 
12. Hb 
13. (Fb V Hb) 
TC, 12 
14. (3x)(Fx V Hx) 
EG, 13 
16. ((3x)Gx - (3x)(Fx V Hx)) 
15. (3x)(Fx V Hx) 
ES,9,10,14 
CP,9,15 
17. (3x)(Fx V Hx) 
TC, 1,8,16 
As another example, let's derive "(((3x)Ax V  (3x)Bx)  - (3x)(Ax V Bx))" from the 
proving "((3x)Ax - (3x)(Ax V Bx))" and "((3x)Bx - (3x)(Ax V Bx))," then using TC; this is 
empty set. We prove the two directions separately. We prove the left-to-right direction by 
our general strategy for working with disjunctive assumptions. We then prove the right-to-left 
direction by converting the disjunction we're trying to prove to a conditional: 

1. ((3x)Ax V (3x)Bx) 
2.  (3x)Ax 
3. Aa 
4.  (Aa V Ba) 
5. (3x)(Ax V Bx) 
7.  ((3x)Ax - (3x)(Ax V Bx)) 
6. (3x)(Ax V Bx) 
8. (3x)Bx 
9. Bb 
lo .  (Ab V Bb) 
11. (3x)(Ax V Bx) 
13. ((3x)Bx) - (3x)(Ax V Bx)) 
12. (3x)(Ax V Bx) 
15, (((3x)Ax V  (3x)Bx) - (3x)(Ax V Bx)) 
14. (3x)(Ax V Bx) 
16. (3x)(Ax V Bx) 
17. (Ac V Bc) 
1 8. -(3x)Ax 
19. ('dx)-Ax 
2 1. (-Ac  - Bc) 
20. -Ac 
22. Bc 

PI (for CP) 
PI (for CP) 
PI (for ES) 
TC,3 
EG,4 
ES,2,3,5 
CP,2,6 
PI (for CP) 
P (for ES) 
TC,9 
EG, 10 
ES,8,9,11 
CP,8,12 
TC,1,7,13 
CP,1,14 
PI (for CP) 
PI (for ES) 
PI (for CP) 
QE, 18 
US,19 
TC,17 
TC,20,2 1 

17,18 
16,18 
16 
16 

1 
2 
3 
1 
1,3 
1 2  
1 

1 
2 
2 
1,2 
1 
1 

MPC Derivations, p.  19 
EG,22 
ES, 16,17.23 
CP, 18,24 
TC,25 
CP, 16,26 
TC, 15,27 

23.  (3x)Bx 
24.  (3x)Bx  -
(3x)Bx) 
25.  (-(3x)Ax 
27.  ((3x)(Ax V Bx) - ((3x)Ax V (3x)Bx)) 
26.  ((3x)Ax V (3x)Bx) 
28.  (((3x)Ax V (3x)Bx) - (3x)(Ax V Bx)) 
Now we derive "((3x)Fx - Ga)" from  {"(Vx)(Fx - Ga)"): 
1. (Vx)(Fx - Ga) 
PI 
2.  (3x)Fx 
PI (for CP) 
4.  (Fb - Ga) 
PI (for ES) 
3. Fb 
US, 1 
MP,3,4 
5. Ga 
7.  ((3x)Fx - Ga) 
ES,2,3,5 
6. Ga 
CP,2,6 
We now do the converse proof, deriving "(Vx)(Fx - Ga)" from  ("((3x)Fx - Ga)"): 
1. ((3x)Fx - Ga) 
PI 
2. Fb 
PI (for CP) 
3. (3x)Fx 
EG,2 
5. (Fb - Ga) 
MP  1,3 
4. Ga 
6. (Vx)(Fx - Ga) 
CP,2,4 
UG,5 
Next we formalize an argument from Lewis Carroll's Symbolic Logic: 

No  one who really appreciates Beethoven fails to keep silence while the Moon- 

light Sonata is being played. 

Guinea pigs are hopelessly ignorant of music. 

No  one who is hopelessly ignorant of music ever keeps silence while the Moon- 

light Sonata is being played. 

Therefore, guinea pigs never really appreciate Beethoven. 


In symbols: 

(Vx)(Gx - Ix) 
-(3x)(Bx  A -Sx) 
-(3x)(Ix  A  Sx) 
:.  -(3x)(Gx  A Bx) 

We derive the translated conclusion from the translated premisses, thus showing the English 
argument is valid: 

MPC Derivations, p. 20 

2.  (Vx)(Gx - Ix) 
1. -(3x)(Bx  A -Sx) 
3. -(3x)(Ix  A  Sx) 
4. Ga 
5. (Vx)-(Bx  A -Sx) 
7.  (Ga - Ia) 
6. (Vx)-(Ix  A  Sx) 
8. -(Ba  A -Sa) 
9. -(Ia  A  Sa) 
1 1. (Ia - -Sa) 
10. Ia 
13. (Ba - Sa) 
12. -Sa 
15. (Ga - -Ba) 
14. -Ba 
16. -(Ga  A Ba) 
1 7.  (Vx)-(Gx  A Bx) 
1 8. -(3x)(Gx  A Bx) 

PI 
PI 
PI 
PI (for CP) 
QE, 1 
QE,3 
u s , 2  
u s , 5  
US,6 
MP  4,7 
TC,9 
MP  1 0 , l l  
TC,8 
TC,12,13 
CP,4,14 
TC,15 
UG, 16 
QE, 17 

Here is a more complicated example, again fiom Lewis Carroll: 

Animals are always mortally offended them if I fail to notice them. 

The only animals that belong to me are in that field. 

No  animal can guess a conundrum unless it has been properly trained in a Board- 

school. 

All badgers are animals. 

None of the animals in that field are badgers. 

When a animal is mortally offended, it always rushes about wildly and howls. 

I never notice any animals unless it belongs to me. 

No  animal that has been properly trained  in a Board-school ever rushes about 

wildly and howls. 

Therefore, no badger can guess a conundrum. 


In symbols: 

(Vx)((Ax A -Nx)  - Ox) 

(Vx)((Ax A Mx) - Fx) 

Nx)(Bx  - Ax) 

-(3x)((Ax  A Gx) A -Tx) 

(Vx)((Ax A Ox) - (Rx A Hx)) 

-(3x)((Ax  A Fx) A Bx) 

-(3x)((Ax  A Nx) A -Mx) 

-(3x)((Ax  A Tx) A  (Rx A Hx)) 

:.  -(3x)(Bx  A Gx) 


Now we derive the translated conclusion fiom the translated premisses: 

1. (&)((Ax  A  -Nx)  - Ox) 
2. @ic)((Ax A Mx) - Fx) 
4. @ic)(Bx - Ax) 
3. -(3x)((Ax  A  Gx) A  -Tx) 
6. @ic)((Ax A Ox) - (Rx A Hx)) 
5. -(3x)((Ax  A Fx) A Bx) 
7. -(3x)((Ax  A Nx) A  -Mx) 
8. -(3x)((Ax  A Tx) A  (Rx A Hx)) 
9. ('&)-((Ax  A  Gx) A  -TX) 
10. @ic)-((AX A FX)A BX) 
1 1. @ic)-((AX A NX)A  -MX) 
12. (&)-((Ax  A Tx) A  (Rx A Hx)) 
14. ((Aa A  -Na)  - Oa) 
13. Ba 
15. ((Aa A Ma) - Fa) 
16. (Ba - Aa) 
17. ((Aa A Oa) - (Ra A Ha)) 
1 8. -((Aa  A  Ga) A  -Ta) 
19. -((Aa  A Fa) A Ba) 
20. -((Aa  A Na) A  -Ma) 
2 1. -((Aa  A Ta) A  (Ra A Ha)) 
23. ((Aa A Fa) - -Ba) 
22. Aa 
25. (Aa - -Fa) 
24. -(Aa  A Fa) 
26. -Fa 
28. (Aa - -Ma) 
27. -(Aa  A Ma) 
30. ((Aa A Na) - Ma) 
29. -Ma 
32. (Aa - -Na) 
3 1. -(Aa  A Na) 
33. -Na 
34. (Aa A  -Na) 
35. Oa 
36. (Aa A  Oa) 
3 8. ((Aa A  Ta) - -@a  A Ha)) 
37. (Ra A Ha) 
40.  (Aa - -Ta) 
39. -(Aa  A Ta) 
42.  ((Aa A  Ga) - Ta) 
41. -Ta 
44.  (Aa - -Ga) 
43. -(Aa  A Ga) 
46.  (Ba - -Ga) 
45. -Ga 
47. -@a  A  Ga) 
48. Nx)-(Bx  A  Gx) 
49. -(3x)(Bx  A  Gx) 

MPC Derivations, p. 2 1 

PI 
PI 
PI 
PI 
PI 
PI 

PI 

PI 
QE,3 
QE,5 
QE,7 
QE,8 
PI (for CP) 
US, 1 
US,2 
US,4 
US,6 
US,9 
US,lO 
US,11 
US,12 
MP  13,16 
TC,19 
TC,13,23 
TC,24 
MP 22,24 
TC,15,26 
TC,27 
MP 22,28 
TC,20 
TC,29,30 
TC,3 1 
MP 22,32 
TC,22,32 
TC,14,34 
TC,22,35 
TC,17,36 
TC,2 1 
TC,37,38 
TC,39 
TC,22,40 
TC,18 
TC,4 1,42 
TC,43 
MP 22,44 
CP, 13,45 
TC,46 

UG,47 
QE,48 

