Massachusetts Institute of Technology 
6.042J/18.062J, Spring ’10: Mathematics for Computer Science 
Prof. Albert R. Meyer 

March 17 
revised March 15, 2010, 675 minutes 

Solutions to In-Class Problems Week 7, Wed. 

Problem 1. 
The Elementary 18.01 Functions (F18’s) are the set of functions of one real variable deﬁned recur­
sively as follows: 

Base cases: 

•  The identity function, id(x) ::= x is an F18, 

•  any constant function is an F18, 

•  the sine function is an F18, 

Constructor cases: 
If f , g are F18’s, then so are 

3.  the composition f

1.  f  + g , f g , eg  (the constant e), 
2.  the inverse function f (−1) , 
g .◦ 
(a)  Prove that the function 1/x is an F18. 
Warning:  Don’t  confuse  1/x  =  x−1  with  the  inverse,  id(−1)  of  the  identity  function  id(x).  The 
inverse id(−1)  is equal to id. 

Solution.  log x  is the  inverse of ex  so  log x  ∈  F18.  Therefore so  is c  log x for any constant c, and 
· 
hence ec log x  = xc  ∈ F18. Now let c = −1 to get x−1  = 1/x ∈ F18.1 
� 

(b)  Prove by Structural Induction on this deﬁnition that the Elementary 18.01 Functions are closed 
under taking derivatives.  That is, show that if f (x) is an F18, then so is f �  ::= df /dx.  (Just work out 
2 or 3 of the most interesting constructor cases; you may skip the less interesting ones.) 

Solution.  Proof.  By Structural Induction on def of f  ∈ F18. The induction hypothesis is the above 
statement to be shown. 

Creative Commons 
2010,  Prof. Albert R. Meyer. 
1There’s a  little problem here:  since  log x  is not real-valued for x  ≤  0,  the function f (x) ::= 1/x constructed  in this 
√
, use (x/ |x|) · f (|x|), where |x| = 
way is only deﬁned for x > 0. To get an F18 equal to 1/x deﬁned for all x = 0
x2 . 

�
2 

Solutions to In-Class Problems Week 7, Wed. 

Base Cases:  We want to show that the derivatives of all the base case functions are in F18. 
This  is  easy:  for  example,  d  id(x)/dx  = 1  is  a  constant  function,  and  so  is  in  F18.  Similarly, 
d  sin(x)/dx =  cos(x) which is also in F18 since cos(x) =  sin(x + π/2)  ∈  F18 by rules for constant 
functions, the identity function, sum, and composition with sine. 
This proves that the induction hypothesis holds in the Base cases. 
Constructor Cases:  (f (−1) ). Assume f , df /dx ∈ F18 to prove d f (−1) (x)/dx ∈ F18. Letting y = f (x), 
so x = f (−1) (y), we know from Leibniz’s rule in calculus that 
1 
df (−1) (y)/dy = dx/dy = 
. 
dy/dx 

(1)

For example, 

d sin(−1) (y)/dy = 1/(d sin(x)/dx) = 1/ cos(x) = 1/ cos(sin(−1) (y)). 
Stated as in  (1), this rule is easy to remember, but can easily be misleading because of the variable 
switching between x and y .  It’s more clearly stated using variable-free notation: 
◦ 
(f (−1) )�  = (1/f � )  f (−1) . 
(2)
Now, since f �  ∈ F18 (by assumption), so is 1/f �  (by part (a)) and f (−1)  (by constructor rule 2.), and 
therefore  so  is  their  composition  (by  rule  3).  Hence  the  righthand  side  of  equation  (2)  deﬁnes  a 
function in F18. 
Constructor Case:  (f  ◦ g ). Assume f , g , df /dx, dg/dx ∈ F18 to prove d(f  ◦ g)(x)/dx ∈ F18. 
The Chain Rule states that 

d(f (g(x))) 
dx 
Stated more clearly in variable-free notation, this is 
◦ 
◦
· 
g)�  = (f �  g)  g � .
The righthand side of this equation deﬁnes a function in F18 by constructor rules 3. and 1. 
The other Constructor cases are similar, so we conclude that the induction hypothesis holds in all

Constructor cases.

This completes the proof by structural induction that the statement holds for all f  ∈ F18. 

�


= 

df (g)  dg
· 
. 
dx 
dg 

(f

Problem 2.

Let  p  be  the  string  [ ] .  A  string  of  brackets  is  said  to  be  erasable  iff  it  can  be  reduced  to  the

empty string by repeatedly erasing occurrences of p.  For example, here’s how  to erase  the string

[ [ [ ] ] [ ] ] [ ] :

→ → 
→ 
[ [ [ ] ] [ ] ] [ ] 
[ [ ] ] 
[ ] 
λ.
On  the  other  hand  the  string  [ ] ] [ [ [ [ [ ] ]  is  not  erasable  because  when we  try  to  erase,  we  get 
stuck: 
[ ] ] [ [ [ [ [ ] ]  → ] [ [ [ [ ]  → ] [ [ [  �→ 
Let textE rasable be the set of erasable strings of brackets. Let textRecM atch be the recursive data 
type of strings of matched brackets given in Deﬁnition ??. 

Solutions to In-Class Problems Week 7, Wed. 

3 

(a)  Use structural induction to prove that 
textRecM atch ⊆ textE rasable. 

Solution.  Proof.  We  prove  by  structural  induction  on  the  deﬁnition  of  textRecM atch  that  the 
predicate 
P (x) ::= x ∈ textE rasable 

is true for all x ∈ textRecM atch. 
Base case: (x  =  λ) The empty string  is erasable by deﬁnition of textE rasable –  it can be reduced 
to itself by erasing the substring [  0 times.

Constructor  case: (x  =  [ s ] t  for  s, t  ∈  textRecM atch).  By  structural  induction  hypothesis,  we

may  assume  that  s, t  ∈  textE rasable.  So  to  erase  x,  erase  s  and  then  erase  t  to  be  left  with  the

substring [ ] , and one more erasure leads to the empty string.

This completes the proof by structural induction, so we conclude that

∀x. x ∈ textRecM atch  IM P L I E S  x ∈ textE rasable 
which by deﬁnition means that textRecM atch ⊆ textE rasable. 

� 

(b)  Supply the missing parts of the following proof that 
textE rasable ⊆ textRecM atch. 
Proof.  We  prove  by  induction  on  the  length,  n,  of  strings,  x,  that  if  x  ∈  textE rasable,  then  x  ∈
textRecM atch. The induction predicate is 
P (n) ::= ∀x ∈ textE rasable. (|x| ≤ n  IM P L I E S  x ∈ textRecM atch) 

Base case: 
What is the base case? Prove that P  is true in this case. 

Solution.  The base case is (n = 0). Now P (0) is true because the empty string is the only string of 
� 
length 0, and it is in textRecM atch by the base case of Deﬁnition ?? of textRecM atch. 
Inductive step: To prove P (n + 1), suppose |x| ≤ n + 1 and x ∈ textE rasable. We need only show 
that  x  ∈  textRecM atch.  Now  if  |x|  < n + 1,  then  the  induction  hypothesis,  P (n),  implies  that 
x ∈ textRecM atch, so we only have to deal with x of length exactly n + 1. 
Let’s say that a string y  is an erase of a string z  iff y  is the result of erasing a single occurrence of p 
in z . 
Since  x  ∈  textE rasable  and  has  positive  length,  there  must  be  an  erase,  y  ∈  textE rasable,  of 
x.  So  |y |  =  n −  1,  and  since  y  ∈  textE rasable,  we  may  assume  by  induction  hypothesis  that

y ∈ textRecM atch.

Now we argue by cases:

Case (y  is the empty string).

Prove that x ∈ textRecM atch in this case.


Solutions to In-Class Problems Week 7, Wed. 
� 

4 
Solution.  In this case x = p ∈ textRecM atch. 
Case (y = [ s ] t for some strings s, t ∈ textRecM atch.) Now we argue by subcases. 
•	 Subcase (x is of the form [ s� ] t where s is an erase of s� ). 
Since s ∈  textRecM atch, it is erasable by part (b), which implies that s�  ∈  textE rasable.  But 
|s� |  <  |x|,  so by  induction hypothesis, we may assume  that s�  ∈  textRecM atch.  This shows 
that x is the result of the constructor step of textRecM atch, and therefore x ∈ textRecM atch. 
•	 Subcase (x is of the form [ s ] t�  where t is an erase of t� ).

Prove that x ∈ textRecM atch in this subcase.

Solution.  The proof is essentially identical to the previous case, with t, t�  in place of s, s� : 
Now t is erasable by part (b), so t�  ∈  textE rasable.  But |t� | <  |x|, so by induction hypothesis, 
we may  assume  that  t�  ∈  textRecM atch.  This  proves  that  x  is  the  result  of  the  constructor 
step of textRecM atch and therefore x ∈ textRecM atch. 
� 

•	 Subcase(x = p[ s ] t).

Prove that x ∈ textRecM atch in this subcase.

Solution.  Let  t�  ::=  [ s ] t  and  s�  be  the  empty  string.  Then  x  =  [ s�  ] t� .  But  we  know 
s� , t�  ∈  textRecM atch,  which  implies  that  x  ∈  textRecM atch  because  it  is  the  result  the 
textRecM atch constructor step applied to s� , t� . 
� 

The proofs of the remaining subcases are just like this last one. List these remaining subcases. 

Solution. 

•	 case (x = [ ps ] t), 
•	 case (x = [ sp ] t), 
•	 case (x = [ s ] pt), 
•	 case (x = [ s ] tp). 

� 
This completes the proof by induction on n, so we conclude that P (n) holds for all n ∈ N.  There­
fore x ∈ textRecM atch for every string x ∈ textE rasable. That is, 
textE rasable ⊆ textRecM atch and hence textE rasable = textRecM atch. 

� 

Problem 3. 
Here is a simple recursive deﬁnition of the set, E , of even integers: 
Deﬁnition.  Base case:  0 ∈ E .

Constructor cases:  If n ∈ E , then so are n + 2 and −n.


Solutions to In-Class Problems Week 7, Wed. 
� 
� 
Provide similar simple recursive deﬁnitions of the following sets: 
(a)  The set S  ::=  2k 3m5n  | k , m, n ∈ N  . 
Solution.  We can deﬁne the set S  recursively as follows: 
•  1 ∈ S 
•  If n ∈ S , then 2n, 3n, and 5n are in S . 
� 
� 
(b)  The set T  ::=  2k 32k+m5m+n  | k , m, n ∈ N  . 
Solution.  We can deﬁne the set T  recursively as follows: 
•  1 ∈ T 
•  If n ∈ S , then 18n, 15n, and 5n are in T . 
� 
� 
(c)  The set L ::=  (a, b) ∈ Z2  | 3  | (a − b)  . 
Solution.  We can deﬁne a set L�  = L recursively as follows: 
•  (0, 0), (1, 1), (2, 2) ∈ L� 
•  If (a, b) ∈ L� , then (a + 3, b), (a − 3, b), (a, b + 3), and (a, b − 3) are in L� . 

5 

� 

� 

� 
Lots of other deﬁnitions are also possible. 
Let  L�  be  the  set  deﬁned  by  the  recursive  deﬁnition  you  gave  for  L  in  the  previous  part.  Now 
if  you  did  it  right,  then L�  =  L,  but maybe  you made  a mistake.  So  let’s  check  that  you  got  the 
deﬁnition right. 
(d)  Prove by structural induction on your deﬁnition of L�  that 
L�  ⊆ L. 
Solution.  For the L� deﬁned above, a straightforward structural induction shows that if (c, d) ∈ L� , 
then (c, d)  ∈  L.  Namely, each of  the base cases  in  the deﬁnition of L�  are  in L since 3  |  0.  For  the 
constructor cases, we may assume (a, b) ∈ L, that is 3  |  (a − b), and must prove that (a ± 3, b) ∈ L 
and  (a, b ± 3)  ∈  L.  In  the  ﬁrst  the  case,  we  must  show  that  3  |  ((a ± 3) − b).  But  this  follows 
immediately  because  ((a ±  3) −  b) = (a −  b) ±  3  and  3  divides  both  (a −  b)  and  3.  The  other 
constructor case (a, b ± 3) follows in exactly the same way.  So we conclude by structural induction 
on the deﬁnition of L�  that L�  ⊆ L. 
� 

(e)  Conﬁrm that you got the deﬁnition right by proving that 
L ⊆ L� . 

Solutions to In-Class Problems Week 7, Wed. 
6 
Solution.  Conversely, we must show that L  ⊆  L� .  So suppose (c, d)  ∈  L,  that is, 3  |  (c − d).  This 
means that c =  r + 3k and d =  r + 3j  for some r  ∈ {0, 1, 2} and j, k  ∈ Z.  Then starting from base 
case  (r, r)  ∈  L� , we can apply  the  (a ± 3, b) constructor rule  |k |  times  to conclude  that (c, r)  ∈  L� , 
and  then apply  the  (a, b ± 3)  rule  |j |  times  to conclude  that  (c, d)  ∈  L� .  This  implies  that L  ⊆  L� , 
which completes the proof that L = L� . 
� 

(f)  See if you can give an unambiguous recursive deﬁnition of L. 

Solution.  This is tricky. Here is an attempt: 
base cases:  (0, 0), (1, 1), (2, 2), (−1, −1), (−2, −2), (−3, −3)(1, −2), (2, −1), (−1, 2), (−2, 1) ∈ L 
Now  the  idea  is  to  constrain  the  constructors  so  the  two  coordinates  have  absolute  values  that 
� 
increase differing by at most 1,  then one coordinate only can continue to grow  in absolute value. 
Let 
1 if x ≥ 0, 
Sg(x) ::= 
−1 if x < 0. 

constructors:  if (a, b) ∈ L� , then 
•  if ||a| − |b|| ≤ 1, then (a + 3Sg(a), b + 3Sg(b)), (a + 3Sg(a), b), (a, b + 3Sg(b)) ∈ L� , 
•  if |a| > |b| + 1, then (a + 3Sg(a), b) ∈ L� , 
•  if |b| > |a| + 1, then (a, b + 3Sg(b)) ∈ L� . 

� 

MIT OpenCourseWare
http://ocw.mit.edu 

6.042J / 18.062J Mathematics for Computer Science 
Spring 2010 

For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms . 

