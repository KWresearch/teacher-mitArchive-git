Massachusetts Institute of Technology 
6.042J/18.062J, Spring ’10: Mathematics for Computer Science 
Prof. Albert R. Meyer 

February 19 
revised February 19, 2010, 1407 minutes 

In-Class Problems Week 3, Fri. 

Problem 1. 
Let’s refer to a programming procedure (written in your favorite programming language —C++, 
or Java, or Python, . . . )  as a string procedure when it is applicable to data of type string and only 
returns  values  of  type  boolean.  When  a  string  procedure,  P ,  applied  to  a  string,  s,  returns 
True,  we’ll  say  that  P  recognizes  s.  If  R  is  the  set  of  strings  that  P  recognizes,  we’ll  call  P  a 
recognizer for R. 
(a)  Describe how a recognizer would work  for  the set of strings containing only  lower case Ro­
man letter —a,b,...,z —such that each letter occurs twice in a row. For example, aaccaabbzz, 
is such a string, but abb, 00bb, AAbb, and a are not.  (Even better, actually write a recognizer pro­
cedure in your favorite programming language). 

A set of strings is called recognizable if there is a recognizer procedure for it. 
When  you  actually  program  a  procedure,  you  have  to  type  the  program  text  into  a  computer 
system.  This means  that every procedure  is described by some string of  typed characters.  If a 
string, s, is actually the typed description of some string procedure, let’s refer to that procedure 
as Ps . You can think of Ps  as the result of compiling s.1 
In  fact,  it  will  be  helpful  to  associate  every  string,  s,  with  a  procedure,  Ps ;  we  can  do  this  by 
deﬁning Ps  to be some ﬁxed string procedure —it doesn’t matter which one —whenever s  is not 
the  typed description of  an  actual procedure  that  can be  applied  to string  s.  The  result of  this 
is  that  we  have  now  deﬁned  a  total  function,  f ,  mapping  every  string,  s,  to  the  set,  f (s),  of 
strings recognized by Ps . That is we have a total function, 
f  : string → P (string). 

(1) 

(b)  Explain why the actual range of f  is the set of all recognizable sets of strings. 

This is exactly the set up we need to apply the reasoning behind Russell’s Paradox to deﬁne a set 
that is not in the range of f , that is, a set of strings, N , that is not recognizable. 
(c)  Let 

N  ::= {s ∈ string  | s /∈ f (s)} . 
Prove that N  is not recognizable.

Hint:  Similar to Russell’s paradox or the proof of Theorem ??.


Creative Commons 
2010,  Prof. Albert R. Meyer. 
1The  string,  s,  and  the  procedure,  Ps ,  have  to  be  distinguished  to  avoid  a  type  error:  you  can’t  apply  a  string  to 
string.  For  example,  let  s  be  the  string  that  you  wrote  as  your  program  to  answer  part  (a).  Applying  s  to  a  string 
argument, say oorrmm, should throw a type exception; what you need to do is apply the procedure Ps  to oorrmm. This 
should result in a returned value True, since oorrmm consists of three pairs of lowercase roman letters 

2 

In-Class Problems Week 3, Fri. 

(d)  Discuss  what  the  conclusion  of  part  (c)  implies  about  the  possibility  of  writing  “program 
analyzers” that take programs as inputs and analyze their behavior. 

Problem 2. 
The Axiom of Choice can say that if s is a set whose members are nonempty sets that are pairwise 
disjoint —that is no two sets in s have an element in common —then there is a set, c, consisting of 
exactly one element from each set in s. 
In formal logic, we could describe s with the formula, 
pairwise-disjoint(s) ::=  ∀x ∈ s. x =�
∅QAN D∀x, y ∈ s.(x =�

y)  IM P L I E S  (x ∩ y = ∅). 

Similarly we could describe c with the formula 
choice-set(c, s) ::=  ∀x ∈ s. ∃!z . z  ∈ c ∩ x. 
Here “∃!z .” is fairly standard notation for “there exists a unique z . 
Now we can give the formal deﬁnition: 

Deﬁnition (Axiom of Choice). 
∀s. pairwise-disjoint(s)  IM P L I E S  ∃c. choice-set(c, s). 

The  only  issue  here  is  that  Set  Theory  is  technically  supposed  to  be  expressed  in  terms  of  pure 
formulas  in  the  language  of  sets, which means  formula  that  uses  only  the membership  relation, 
∈, propositional connectives, and the two quantiﬁes ∀ and ∃.  Verify that the Axiom of Choice can 
be expressed as a pure formula, by explaining how to replace all impure subformulas above with 
equivalent pure formulas. 
For example, the formula x = y could be replaced with the pure formula ∀z . z  ∈ x I FF z  ∈ y . 

Problem 3. 
There  are  lots  of  different  sizes  of  inﬁnite  sets.  For  example,  starting with  the  inﬁnite  set,  N,  of 
nonnegative integers, we can build the inﬁnite sequence of sets 
N,  P (N),  P (P (N)),  P (P (P (N))),  . . . . 

By Theorem ?? from the Notes, each of these sets is strictly bigger2  than all the preceding ones. But 
that’s not all:  if we let U  be the union of the sequence of sets above, then U  is strictly bigger than 
every set in the sequence! Prove this: 
Lemma.  Let P n (N) be the nth set in the sequence, and 
∞
P n (N). 
U  ::= 
n=0 

Then

2Reminder:  set A is strictly bigger than set B  just means that A surj B , but NO T(B  surj A).


In-Class Problems Week 3, Fri. 
1.  U  surj P n (N) for every n ∈ N, but 
2.  there is no n ∈ N for which P n (N) surj U . 
Now  of  course,  we  could  take  U, P (U ), P (P (U )), . . .  and  can  keep  on  indeﬁnitely  building  still 
bigger inﬁnities. 

3 

MIT OpenCourseWare
http://ocw.mit.edu 

6.042J / 18.062J Mathematics for Computer Science 
Spring 2010 

For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms . 

