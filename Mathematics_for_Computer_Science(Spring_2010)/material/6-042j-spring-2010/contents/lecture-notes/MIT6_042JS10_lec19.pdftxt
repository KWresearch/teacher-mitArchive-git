Mathematics for Computer Science
MIT 6.042J/18.062J

Recursive Definitions 
& Structural Induction 

Recursive Deﬁnitions 

Define something in terms of a 
simpler version of the same thing: 
Base case(s) that don’t depend on 
anything else. 
Constructor case(s) that depend on 
simpler cases. 

Albert R Meyer,   March 17, 2010 

lec 7W.1 

Albert R Meyer,   March 17, 2010 

lec 7W.2 

Matched Paren Strings, M
set of strings, M  { ], [ }*
•Base:   M,
     (the empty string) 
•Constructor:
If s, t  M, then 
[s]t  M

Matched Paren Strings M

strings in M
  []

  [[]]

  [][]

  [[]][]

  [[[]]]



t = 
s = 
t = 
s = []
t =[]
s = 
t =[]
s = []
s = [[]] t = 



Albert R Meyer,   March 17, 2010 

lec 7W.9 

Albert R Meyer,   March 17, 2010 

7W.10

not in M
strings starting with ]
are not in M because
•  does not start with ]
• [s]t does not start with ]
and everything in M arises in
one of these two ways 

Matched Paren Strings, M
set of strings, M  { ], [ }*
•Base:   M,
•Constructor: If s,t  M,
then [s]t  M
• That’s all 
Extremal Clause
(Implicit part of definition) 

Albert R Meyer,   March 17, 2010 

7W.11

Albert R Meyer,   March 17, 2010 

lec 7W.12 

1

Structural Induction 

Matched Paren Strings M

To prove P(x) holds for all x in
recursively defined set R, prove 
•P(b) for each base case b  R
•P(c(x)) for each constructor, c,
assuming ind. hyp. P(x)

Lemma: Every s in M has the 
same number of ]’s and [’s.

Proof by structural induction
on the definition of M

Albert R Meyer,   March 17, 2010 

7W.13

Albert R Meyer,   March 17, 2010 

lec 7W.14 

Matched Paren Strings M

Lemma: Every s in M has the 
same number of ]’s and [’s.

Let EQ ::= {strings with same 
                   number of ] and [}

Lemma (restated): M  EQ

Albert R Meyer,   March 17, 2010 

lec 7W.15 

Structural Induction on M
Proof:
Ind. Hyp. P(s) ::= (s  EQ)

Base case (s = ):
 has 0 ]’s and 0 [’s,
so P() is true.
base case is OK
Albert R Meyer,   March 17, 2010 

lec 7W.17 

Structural Induction on M
Constructor step: s = [r]t
can assume P(r) and P(t)

#] in s = #] in r + #] in t + 1 
#[ in s = #[ in r + #[ in t + 1 

so =

= by P(r)

= by P(t)

so P(s) is true  constrct case is OK
lec 7W.18 
Albert R Meyer,   March 17, 2010 

Structural Induction on M

so by struct. induct. 
M  EQ
s  M. s  EQ
QED

Albert R Meyer,   March 17, 2010 

lec 7W.19 

2

The 18.01 Functions, F18
The set F18 of  functions on R:
IdR , constant functions, and sin x 
                                         are in F18. 
 if f, g   F18, then 
f + g, f (cid:1) g, ef, (the constant e)
 the inverse, f(-1), of f, and
f  g
(the composition of f and g)
are in F18.

The 18.01 Functions, F18

Some functions in F18:
= (1)(cid:1)x
x
= (x2)(-1)  ---inverse 
= (1 – (sin x (cid:1)sin x))1/2
cos x 
= (ex)(-1)
ln x 

Albert R Meyer,   March 17, 2010 

lec 7W.20 

Albert R Meyer,   March 17, 2010 

lec 7W.21 

The 18.01 Functions, F18

Recursive function on M

Lemma.
F18 is closed under 
taking derivatives: 
if f  F18, then f´ F18

Class Problem 

Def. depth(s) for s  M
depth()       ::= 0 
depth( [s]t ) ::= 
max{1+d(s), d(t)}

Albert R Meyer,   March 17, 2010 

lec 7W.22 

Albert R Meyer,   March 17, 2010 

7W.26

kn  recursive function on  N
expt(k, 0)    ::= 1 
expt(k, n+1) ::= k(cid:1)expt(k,n)
--uses recursive def of N:
•    0  N
•
if n  N then n+1  N

Recursive Functions 

summary:
f: Data (cid:2) Values 
f(b) def’d directly for base b
f(cnstr(x)) def’d using f(x), x

Albert R Meyer,   March 17, 2010 

7W.27

Albert R Meyer,   March 17, 2010 

7W.28

3

positive powers of two 

2  PP2
if x,y  PP2, then x(cid:1)y  PP2
2, 2(cid:1)2,  4(cid:1)2,  4(cid:1)4,  4(cid:1)8, … 
2   4       8      16     32 … PP2

loggy function on PP2 
loggy(2)::= 1 
loggy(x(cid:1)y) ::= x + loggy(y)
                         for x,y  PP2
loggy(4) = loggy(2(cid:1)2) = 2 + 1 = 3 
loggy(8) = loggy(2(cid:1)4) = 2 + loggy(4) 
                               = 2 + 3 = 5 
loggy(16) = loggy(8(cid:1)2) = 8 + loggy(2) 
                               = 8 + 1 = 9

Albert R Meyer,   March 17, 2010 

7W.47

Albert R Meyer,   March 17, 2010 

7W.49

loggy function on PP2 

loggy(16) = loggy(8(cid:1)2) = 9 
WAIT A SEC!: 

loggy(16) = loggy(2(cid:1)8)
        = 2 + loggy(8) = 2 + 5         
        = 7

ambiguous constructors 
The Problem: more than one way to  
construct elements of PP2 from 
cnstrct(x,y) = x (cid:1) y 
     16 = cnstrct(8,2) but also 
     16 =  cnstrct(2,8) 
ambiguous

Albert R Meyer,   March 17, 2010 

7W.50

Albert R Meyer,   March 17, 2010 

7W.51

Team Problems 
Problems 
1(cid:1)3

Albert R Meyer,   March 17, 2010 

lec 7W.53 

4

MIT OpenCourseWare

http://ocw.mit.edu

6.042J / 18.062J Mathematics for Computer Science

Spring 2010

For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms .

