Massachusetts Institute of Technology 
6.042J/18.062J, Spring ’10: Mathematics for Computer Science 
Prof. Albert R. Meyer 

February 10 
revised February 3, 2010, 2 minutes 

In-Class Problems Week 2, Wed. 

Problem 1. 
Prove by truth table that OR  distributes over AND: 

[P  OR  (Q  AND  R)] 

is equivalent to 

[(P  OR  Q)  AND  (P  OR  R)] 

(1) 

Problem 2. 
This problem1  examines whether the following speciﬁcations are satisﬁable: 

1.  If the ﬁle system is not locked, then 

(a)  new messages will be queued. 
(b)  new messages will be sent to the messages buffer. 
(c)  the  system  is  functioning  normally,  and  conversely,  if  the  system  is  functioning  nor­
mally, then the ﬁle system is not locked. 

2.  If new messages are not queued, then they will be sent to the messages buffer. 

3.  New messages will not be sent to the message buffer. 

(a)  Begin  by  translating  the  ﬁve  speciﬁcations  into  propositional  formulas  using  four  proposi­
tional variables: 

L 
Q 
B 
N 

::=  ﬁle system locked,

::=  new messages are queued,

::=  new messages are sent to the message buffer,

::=  system functioning normally.


(b)  Demonstrate that this set of speciﬁcations is satisﬁable by describing a single truth assignment 
for the variables L, Q, B , N  and verifying that under this assignment, all the speciﬁcations are true. 

(c)  Argue that the assignment determined in part (b) is the only one that does the job. 

Creative Commons 
2010,  Prof. Albert R. Meyer.

1From Rosen, 5th edition, Exercise 1.1.36


2 

In-Class Problems Week 2, Wed. 

Problem 3. 
When the Mathematician says to his student, “If a function is not continuous, then it is not differ­
entiable,” then letting D stand for “differentiable” and C  for continuous, the only proper transla­
tion of the Mathematician’s statement would be 

or equivalently, 

NO T(C )  IM P L I E S  NOT(D), 

D  IM P L I E S  C. 

But when a Mother says to her son, “If you don’t do your homework,  then you can’t watch TV,” 
then  letting T  stand for “watch TV” and H  for “do your homework,” a reasonable  translation of 
the Mother ’s statement would be 

NO T(H )  I FF  NOT(T ), 

or equivalently, 

H  I FF  T . 

Explain  why  it  is  reasonable  to  translate  these  two  IF-THEN  statements  in  different  ways  into 
propositional formulas. 

Problem 4. 
Propositional logic comes up in digital circuit design using the convention that T corresponds to 
1 and F to 0. A simple example is a 2-bit half-adder circuit.  This circuit has 3 binary inputs, a1 , a0 
and  b,  and  3  binary  outputs,  c, o1 , o0 .  The  2-bit word  a1a0  gives  the  binary  representation  of  an 
integer,  s  between  0  and  3.  The  3-bit  word  co1o0  gives  the  binary  representation  of  s +  b.  The 
output c is called the ﬁnal carry bit. 
So  if  s  and  b were  both  1,  then  the  value  of  a1a0  would  be  01  and  the  value  of  the  output  co1o0 
would 010, namely, the 3-bit binary representation of 1 + 1. 
In fact, the ﬁnal carry bit equals 1 only when all three binary inputs are 1, that is, when s = 3 and 
b = 1.  In that case, the value of co1o0  is 100, namely, the binary representation of 3 + 1. 
This 2-bit half-adder could be described by the following formulas: 

c0  = b 
o0  = a0  XOR  c0 
c1  = a0  AND  c0 
o1  = a1  XOR  c1 
c2  = a1  AND  c1 
c = c2 . 

the carry into column 1 

the carry into column 2 

(a)  Generalize the above construction of a 2-bit half-adder to an n + 1 bit half-adder with inputs 
an , . . . , a1 , a0  and b for arbitrary n ≥ 0. That is, give simple formulas for oi  and ci  for 0 ≤ i ≤ n + 1, 
where ci  is the carry into column i and c = cn+1 . 

(b)  Write similar deﬁnitions for the digits and carries in the sum of two n + 1-bit binary numbers 
an  . . . a1a0  and bn  . . . b1 b0 . 

In-Class Problems Week 2, Wed. 

3 

Visualized as digital circuits, the above adders consist of a sequence of single-digit half-adders or 
adders strung together in series.  These circuits mimic ordinary pencil-and-paper addition, where 
a carry into a column is calculated directly from the carry into the previous column, and the carries 
have to ripple across all the columns before the carry into the ﬁnal column is determined. Circuits 
with this design are called “ripple-carry” adders. Ripple-carry adders are easy to understand and 
remember and  require a nearly minimal number of operations.  But  the higher-order output bits 
and the ﬁnal carry take time proportional to n to reach their ﬁnal values. 

(c)  How many of each of the propositional operations does your adder from part (b) use to cal­
culate the sum? 

4 
The Propositional Operations


In-Class Problems Week 2, Wed. 

P 
T 
F 

NO T P 
F 
T 

P Q 
T T 
T F 
F T 
F F 

P  AND Q 
T 
F 
F 
F 

P Q 
T T 
T F 
F T 
F F 

P  OR Q 
T 
T 
T 
F 

P Q 
T T 
T F 
F T 
F F 

P  XOR Q 
F 
T 
T 
F 

P Q

T T 
T F 
F T 
F F 

P


IM P L I E S  Q 
T 
F 
T

T


P 
T

T

F

F


Q

T 
F 
T 
F 

P  I FF Q 
T

F

F

T


MIT OpenCourseWare
http://ocw.mit.edu 

6.042J / 18.062J Mathematics for Computer Science 
Spring 2010 

For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms . 

