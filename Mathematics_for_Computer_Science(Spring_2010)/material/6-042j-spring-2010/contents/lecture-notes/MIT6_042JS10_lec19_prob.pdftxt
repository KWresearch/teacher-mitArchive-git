Massachusetts Institute of Technology 
6.042J/18.062J, Spring ’10: Mathematics for Computer Science 
Prof. Albert R. Meyer 

March 17 
revised March 2, 2010, 733 minutes 

In-Class Problems Week 7, Wed. 

Problem 1. 
The Elementary 18.01 Functions (F18’s) are the set of functions of one real variable deﬁned recur­
sively as follows: 
Base cases: 

•  The identity function, id(x) ::= x is an F18, 

•  any constant function is an F18, 

•  the sine function is an F18, 

Constructor cases: 
If f , g are F18’s, then so are 

1.  f  + g , f g , eg  (the constant e), 
2.  the inverse function f (−1) , 
g .◦ 
3.  the composition f
(a)  Prove that the function 1/x is an F18. 
Warning:  Don’t  confuse  1/x  =  x−1  with  the  inverse,  id(−1)  of  the  identity  function  id(x).  The 
inverse id(−1)  is equal to id. 
(b)  Prove by Structural Induction on this deﬁnition that the Elementary 18.01 Functions are closed 
under taking derivatives. That is, show that if f (x) is an F18, then so is f �  ::= df /dx.  (Just work out 2 
or 3 of the most interesting constructor cases; you may skip the less interesting ones.) 

Problem 2.

Let  p  be  the  string  [ ] .  A  string  of  brackets  is  said  to  be  erasable  iff  it  can  be  reduced  to  the

empty string by repeatedly erasing occurrences of p.  For example, here’s how  to erase  the string

[ [ [ ] ] [ ] ] [ ] :

→ 
→ → 
[ ] 
[ [ ] ] 
[ [ [ ] ] [ ] ] [ ] 
λ.
On  the  other  hand  the  string  [ ] ] [ [ [ [ [ ] ]  is  not  erasable  because  when we  try  to  erase,  we  get 
stuck: 
[ ] ] [ [ [ [ [ ] ]  → ] [ [ [ [ ]  → ] [ [ [  �→ 
Let Erasable be the set of erasable strings of brackets.  Let RecMatch be the recursive data type of 
strings of matched brackets given in Deﬁnition 11.3.7. 

Creative Commons 

2010,  Prof. Albert R. Meyer. 

2	

In-Class Problems Week 7, Wed. 

(a)  Use structural induction to prove that 
RecMatch ⊆ Erasable . 

(b)  Supply the missing parts of the following proof that 
Erasable ⊆ RecMatch . 
Proof.  We  prove  by  induction  on  the  length,  n,  of  strings,  x,  that  if  x  ∈  Erasable,  then  x  ∈
RecMatch. The induction predicate is 
P (n) ::= ∀x ∈ Erasable . (|x| ≤ n  IM P L I E S  x ∈ RecMatch) 

Base case: 
What is the base case? Prove that P  is true in this case. 
Inductive step: To prove P (n + 1), suppose |x| ≤ n + 1 and x ∈ Erasable. We need only show that 
x ∈ RecMatch. Now if |x| < n+ 1, then the induction hypothesis, P (n), implies that x ∈ RecMatch,

so we only have to deal with x of length exactly n + 1.

Let’s say that a string y  is an erase of a string z  iff y  is the result of erasing a single occurrence of p

in z .

Since x ∈ Erasable and has positive length, there must be an erase, y ∈ Erasable, of x. So |y | = n−1,

and since y ∈ Erasable, we may assume by induction hypothesis that y ∈ RecMatch.

Now we argue by cases:

Case (y  is the empty string).

Prove that x ∈ RecMatch in this case.

Case (y = [ s ] t for some strings s, t ∈ RecMatch.) Now we argue by subcases.

•	 Subcase (x is of the form [ s� ] t where s is an erase of s� ). 
Since s ∈ RecMatch, it is erasable by part (b), which implies that s�  ∈ Erasable.  But |s� | <  |x|, 
so  by  induction  hypothesis,  we may  assume  that  s�  ∈  RecMatch.  This  shows  that  x  is  the 
result of the constructor step of RecMatch, and therefore x ∈ RecMatch. 
•	 Subcase (x is of the form [ s ] t�  where t is an erase of t� ).

Prove that x ∈ RecMatch in this subcase.

•	 Subcase(x = p[ s ] t).

Prove that x ∈ RecMatch in this subcase.

The proofs of the remaining subcases are just like this last one. List these remaining subcases. 
This completes the proof by induction on n, so we conclude that P (n) holds for all n ∈ N.  There­
fore x ∈ RecMatch for every string x ∈ Erasable. That is, 
Erasable ⊆ RecMatch  and hence  Erasable = RecMatch . 

� 

In-Class Problems Week 7, Wed. 

3 

Problem 3. 
Here is a simple recursive deﬁnition of the set, E , of even integers: 
Deﬁnition.  Base case:  0 ∈ E . 
Constructor cases:  If n ∈ E , then so are n + 2 and −n. 
� 
� 
Provide similar simple recursive deﬁnitions of the following sets: 
� 
� 
(a)  The set S  ::=  2k 3m5n  | k , m, n ∈ N  . 
� 
� 
(b)  The set T  ::=  2k 32k+m5m+n  | k , m, n ∈ N  . 
(c)  The set L ::=  (a, b) ∈ Z2  | 3  | (a − b)  . 
Let  L�  be  the  set  deﬁned  by  the  recursive  deﬁnition  you  gave  for  L  in  the  previous  part.  Now 
if  you  did  it  right,  then L�  =  L,  but maybe  you made  a mistake.  So  let’s  check  that  you  got  the 
deﬁnition right. 
(d)  Prove by structural induction on your deﬁnition of L�  that 
L�  ⊆ L. 

(e)  Conﬁrm that you got the deﬁnition right by proving that 
L ⊆ L� . 

(f)  See if you can give an unambiguous recursive deﬁnition of L. 

MIT OpenCourseWare
http://ocw.mit.edu 

6.042J / 18.062J Mathematics for Computer Science 
Spring 2010 

For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms . 

