Massachusetts Institute of Technology 
6.042J/18.062J, Spring ’10: Mathematics for Computer Science 
Prof. Albert R. Meyer 

February 10 
revised February 3, 2010, 3 minutes 

Solutions to In-Class Problems Week 2, Wed. 

Problem 1. 
Prove by truth table that OR  distributes over AND: 

[P  OR  (Q  AND  R)] 

is equivalent to 

[(P  OR  Q)  AND  (P  OR  R)] 

(1) 

Solution. 

(Q  AND  R)] 
[P  OR 
T 
T  T  T  T 
F 
F 
T  T  T 
T 
T  T  F 
F 
T  T  F 
F 
F 
T 
F  T  T  T 
F 
F 
F  F  T 
F  F  F 
F 
T 
F 
F 
F  F  F 

[(P  OR  Q)  AND 
(P  OR  R)] 
T  T  T  T  T  T  T 
T  T  T  T  T  T  F 
T  T  F  T  T  T  T 
T  T  F  T  T  T  F 
F  T  T  T 
F  T  T 
F  F  F 
F 
F  T  T 
F  T  T 
F 
F  F  F 
F  F  F 
F 
F  F  F 

The  two  columns  for  the  principle  operator  (underlined)  are  the  same,  and  therefore  the  corre­

�

sponding propositional formulas are equivalent. 

Creative Commons 

2010,  Prof. Albert R. Meyer. 

2 

Solutions to In-Class Problems Week 2, Wed. 

Problem 2. 
This problem1  examines whether the following speciﬁcations are satisﬁable: 

1.  If the ﬁle system is not locked, then 

(a)  new messages will be queued. 
(b)  new messages will be sent to the messages buffer. 
(c)  the  system  is  functioning  normally,  and  conversely,  if  the  system  is  functioning  nor­
mally, then the ﬁle system is not locked. 

2.  If new messages are not queued, then they will be sent to the messages buffer. 

3.  New messages will not be sent to the message buffer. 

(a)  Begin  by  translating  the  ﬁve  speciﬁcations  into  propositional  formulas  using  four  proposi­
tional variables: 

L 
Q 
B 
N 

::= 
::= 
::= 
::= 

ﬁle system locked, 
new messages are queued, 
new messages are sent to the message buff
system functioning normally. 

er, 

Solution.  The translations of the speciﬁcations are: 

NOT L IM P L I E S Q 
NOT L IM P L I E S B 
NO T LI FFN 
NOT Q IM P L I E S B 
NO T B 

(Spec. 1.(a)) 
(Spec. 1.(b)) 
(Spec. 1.(c)) 
(Spec. 2.) 
(Spec. 3.) 
� 

(b)  Demonstrate that this set of speciﬁcations is satisﬁable by describing a single truth assignment 
for the variables L, Q, B , N  and verifying that under this assignment, all the speciﬁcations are true. 

Solution.  An assignment that works is 

L  =  True

N  =  False

Q  =  True

B  =  False.


To ﬁnd this assignment, we could have started constructing the sixteen line truth table —one line 
for each way of assigning  truth values  to  the  four variables L, N , Q, and B —and calculated  the 

1From Rosen, 5th edition, Exercise 1.1.36 

Solutions to In-Class Problems Week 2, Wed. 

3 

truth  value  of  the AND  of  all  the  ﬁve  speciﬁcations  under  that  assignment,  continuing  until we 
got one that made the AND-formula true. 
If  for  every  one  of  the  sixteen  possible  truth  assignments,  the AND-formula was  false,  then  the 
� 
system is not satisﬁable. 

(c)  Argue that the assignment determined in part (b) is the only one that does the job. 

Solution.  We can avoid calculating all 16 rows of  the  full  truthtable calculation suggested  in  the 
previous solution to part (b) by reasoning as follows.  In any truth assignment that makes all ﬁve 
speciﬁcations true, 

•  B must be false, or the last speciﬁcation, (Spec. 3.), would be false. 
•  Given that B  is false, (Spec. 2.)  and (Spec. 1.(b)) can be true only if Q and L are true. 
•  Given that L is true, (Spec. 1.(c)) can be true only if N  is false. 

Thus, in order for all ﬁve speciﬁcations to be true, the assignment must be: 

L  =  True

N  =  False

Q  =  True

B  =  False.


� 

Problem 3. 
When the Mathematician says to his student, “If a function is not continuous, then it is not differ­
entiable,” then letting D stand for “differentiable” and C  for continuous, the only proper transla­
tion of the Mathematician’s statement would be 

or equivalently, 

NO T(C )  IM P L I E S  NOT(D), 

D  IM P L I E S  C. 

But when a Mother says to her son, “If you don’t do your homework,  then you can’t watch TV,” 
then  letting T  stand for “watch TV” and H  for “do your homework,” a reasonable  translation of 
the Mother ’s statement would be 

or equivalently, 

NO T(H )  I FF  NOT(T ), 

H  I FF  T . 

Explain  why  it  is  reasonable  to  translate  these  two  IF-THEN  statements  in  different  ways  into 
propositional formulas. 

4 

Solutions to In-Class Problems Week 2, Wed. 

Solution.  We know  that a differentiable  function must be  continuous,  so when a  function  is not 
continuous,  it  is  also  not  differentiable.  Now Mathematicians  use  IM P L I E S  in  the  technical way 
given  by  its  truth  table.  In  particular,  if  a  function  is  continuous  then  to  a  Mathematician,  the 
implication 

NO T(C )  IM P L I E S  NOT(D), 

is automatically  true since  the hypothesis  (left hand  side of  the  IMPLIES)  is  false.  So whether or 
not continuity holds, the Mathematician could comfortably assert the  IM P L I E S  statement knowing 
it is correct. 
And of course a Mathematician does not mean I FF, since she knows a function that is not differen­
tiable may well be continuous. 
On the other hand, while the Mother certainly means that her son cannot watch TV if he does not 
do  his  homework,  both  she  and  her  son most  likely  understand  that  if  he  does do  his  homework, 
then he will be allowed watch TV. In this case, even though the Mother uses an IF-THEN phrasing, 
she really means I FF. 
On the other hand, circumstances in the household might be that the boy may watch TV when he 
has not only done his homework, but also cleaned up his room.  In this case, just doing homework 
would not  imply being allowed to watch TV –the boy won’t be allowed to watch TV  if he hasn’t 
cleaned his room, even if he has done his homework. 
The  general  point  here  is  that  semantics  (meaning)  trumps  syntax  (sentence  structure):  even 
though the Mathematician’s and Mother ’s statements have the same structure, their meaning may 
warrant different translations into precise logical language. 

� 

Problem 4. 
Propositional logic comes up in digital circuit design using the convention that T corresponds to 
1 and F to 0. A simple example is a 2-bit half-adder circuit.  This circuit has 3 binary inputs, a1 , a0 
and  b,  and  3  binary  outputs,  c, o1 , o0 .  The  2-bit word  a1a0  gives  the  binary  representation  of  an 
integer,  s  between  0  and  3.  The  3-bit  word  co1o0  gives  the  binary  representation  of  s +  b.  The 
output c is called the ﬁnal carry bit. 
So  if  s  and  b were  both  1,  then  the  value  of  a1a0  would  be  01  and  the  value  of  the  output  co1o0 
would 010, namely, the 3-bit binary representation of 1 + 1. 
In fact, the ﬁnal carry bit equals 1 only when all three binary inputs are 1, that is, when s = 3 and 
b = 1.  In that case, the value of co1o0  is 100, namely, the binary representation of 3 + 1. 
This 2-bit half-adder could be described by the following formulas: 

c0  = b 
o0  = a0  XOR  c0 
c1  = a0  AND  c0 
o1  = a1  XOR  c1 
c2  = a1  AND  c1 
c = c2 . 

the carry into column 1 

the carry into column 2 

Solutions to In-Class Problems Week 2, Wed. 

5 

(a)  Generalize the above construction of a 2-bit half-adder to an n + 1 bit half-adder with inputs 
an , . . . , a1 , a0  and b for arbitrary n ≥ 0. That is, give simple formulas for oi  and ci  for 0 ≤ i ≤ n + 1, 
where ci  is the carry into column i and c = cn+1 . 

Solution.  The n + 1-bit word an  . . . a1a0  will be the binary representation of an integer, s, between 
0  and  2n+1  −  1.  The  circuit  will  have  n + 2  outputs  c, on , . . . , o1 , o0  where  the  n + 2-bit  word 
con  . . . o1o0  gives the binary representation of s + b. 
Here are some simple formulas that deﬁne such a half-adder: 

c0  = b, 
oi  = ai  XOR  ci 
ci+1  = ai  AND  ci 
c = cn+1 . 

for 0 ≤ i ≤ n, 
for 0 ≤ i ≤ n, 

(b)  Write similar deﬁnitions for the digits and carries in the sum of two n + 1-bit binary numbers 
an  . . . a1a0  and bn  . . . b1 b0 . 

Solution.  Deﬁne 

� 

c0  = 0 
oi  = ai  XOR  bi  XOR  ci 
ci+1  = (ai  AND  bi ) OR 
(ai  AND  ci ) OR  (bi  AND  ci ) 
c = cn+1 . 

for 0 ≤ i ≤ n, 

for 0 ≤ i ≤ n, 

� 

Visualized as digital circuits, the above adders consist of a sequence of single-digit half-adders or 
adders strung together in series.  These circuits mimic ordinary pencil-and-paper addition, where 
a carry into a column is calculated directly from the carry into the previous column, and the carries 
have to ripple across all the columns before the carry into the ﬁnal column is determined. Circuits 
with this design are called “ripple-carry” adders. Ripple-carry adders are easy to understand and 
remember and  require a nearly minimal number of operations.  But  the higher-order output bits 
and the ﬁnal carry take time proportional to n to reach their ﬁnal values. 

(c)  How many of each of the propositional operations does your adder from part (b) use to cal­
culate the sum? 

Solution.  The scheme given in the solution to part (b) uses 3(n + 1) AND’s, 2(n + 1) XOR’s, and 
2(n + 1) OR’s for a total of 7(n + 1) operations.2 

� 
2Because  c0  is always 0,  you  could  skip all  the operations  involving  it.  Then  the  counts are 3n + 1 AND’s,  2n + 1 
XOR’s, and 2n OR’s for a total of 7n + 2 operations. 

6 
The Propositional Operations 

Solutions to In-Class Problems Week 2, Wed. 

P  NO T P 
T 
F 
T 
F 

P  Q  P  AND Q 
T 
T  T 
F 
T  F 
F 
F  T 
F  F 
F 

P  Q  P  OR Q 
T 
T  T 
T  F 
T 
T 
F  T 
F  F 
F 

P  Q  P  XOR Q 
F 
T  T 
T 
T  F 
F  T 
T 
F 
F  F 

P  Q  P  IM P L I E S  Q 
T 
T  T 
F 
T  F 
T 
F  T 
F  F 
T 

P  Q  P  I FF Q 
T 
T  T 
T  F 
F 
F 
F  T 
F  F 
T 

MIT OpenCourseWare
http://ocw.mit.edu 

6.042J / 18.062J Mathematics for Computer Science 
Spring 2010 

For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms . 

