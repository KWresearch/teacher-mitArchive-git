Massachusetts Institute of Technology 
6.042J/18.062J, Spring ’10: Mathematics for Computer Science 
Prof. Albert R. Meyer 

February 19 
revised February 19, 2010, 1400 minutes 

Solutions to In-Class Problems Week 3, Fri. 

Problem 1. 
Let’s refer to a programming procedure (written in your favorite programming language —C++, 
or Java, or Python, . . . )  as a string procedure when it is applicable to data of type string and only 
returns  values  of  type  boolean.  When  a  string  procedure,  P ,  applied  to  a  string,  s,  returns 
True,  we’ll  say  that  P  recognizes  s.  If  R  is  the  set  of  strings  that  P  recognizes,  we’ll  call  P  a 
recognizer for R. 

(a)  Describe how a recognizer would work  for  the set of strings containing only  lower case Ro­
man letter —a,b,...,z —such that each letter occurs twice in a row. For example, aaccaabbzz, 
is such a string, but abb, 00bb, AAbb, and a are not.  (Even better, actually write a recognizer pro­
cedure in your favorite programming language). 

Solution.  All  the  standard  programming  languages  have  built-in  operations  for  scanning  the 
characters in a string.  So simply write a procedure that checks an input string left to right, verify­
ing that successive pairs of characters in the string are duplicated, lowercase roman characters. 
ACTUAL PROGRAM TBA 

� 

A set of strings is called recognizable if there is a recognizer procedure for it. 

When  you  actually  program  a  procedure,  you  have  to  type  the  program  text  into  a  computer 
system.  This means  that every procedure  is described by some string of  typed characters.  If a 
string, s, is actually the typed description of some string procedure, let’s refer to that procedure 
as Ps . You can think of Ps  as the result of compiling s.1 
In  fact,  it  will  be  helpful  to  associate  every  string,  s,  with  a  procedure,  Ps ;  we  can  do  this  by 
deﬁning Ps  to be some ﬁxed string procedure —it doesn’t matter which one —whenever s  is not 
the  typed description of  an  actual procedure  that  can be  applied  to string  s.  The  result of  this 
is  that  we  have  now  deﬁned  a  total  function,  f ,  mapping  every  string,  s,  to  the  set,  f (s),  of 
strings recognized by Ps . That is we have a total function, 
f  : string → P (string). 

(1) 

(b)  Explain why the actual range of f  is the set of all recognizable sets of strings. 

Creative Commons 
2010,  Prof. Albert R. Meyer. 
1The  string,  s,  and  the  procedure,  Ps ,  have  to  be  distinguished  to  avoid  a  type  error:  you  can’t  apply  a  string  to 
string.  For  example,  let  s  be  the  string  that  you  wrote  as  your  program  to  answer  part  (a).  Applying  s  to  a  string 
argument, say oorrmm, should throw a type exception; what you need to do is apply the procedure Ps  to oorrmm. This 
should result in a returned value True, since oorrmm consists of three pairs of lowercase roman letters 

2 

Solutions to In-Class Problems Week 3, Fri. 

Solution.  Since f (s)  is the set of strings recogized by Ps , everything  in range (f )  is a recogizable 
set.  Conversely, every recogizable set is in range (f ):  if R is a recognizable set, then by deﬁnition, 
there is a procedure, P , that recognizes R. So if r is the input program from which P  was compiled, 
then R = f (r). 
� 

This is exactly the set up we need to apply the reasoning behind Russell’s Paradox to deﬁne a set 
that is not in the range of f , that is, a set of strings, N , that is not recognizable. 
(c)  Let 

N  ::= {s ∈ string  | s /∈ f (s)} . 
Prove that N  is not recognizable.

Hint:  Similar to Russell’s paradox or the proof of Theorem ??.

Solution.  By deﬁnition of N , 

s ∈ N 

iff  s /∈ f (s). 

(2) 

for every string, s.

Now assume  to  the contrary  that N  was recognizable by some string procedure.  This procedure

must have a string, w , that describes it, so we have 
s ∈ N 

iff  Pw  applied to s returns True, 
iff  s ∈ f (w) 

(by def. of f ) 

(3) 

for all string’s s. 
Combining (2) and  (3), we have that for every string, s, 
iff  s ∈ f (w), 
s  /∈ f (s) 

for all string’s s. 
Now letting s be w in (4), we reach the contradiction 
w  /∈ f (w) 
iff  w ∈ f (w). 
This contradiction implies that the assumption that N  was recognizable must be false. 

(4) 

� 

(d)  Discuss  what  the  conclusion  of  part  (c)  implies  about  the  possibility  of  writing  “program 
analyzers” that take programs as inputs and analyze their behavior. 

Solution.  Let’s call a programming procedure “self-unconscious” if it does not return True when 
applied to its own textual deﬁnition. 
Rephrased  informally,  the  conclusion  of  part  (c)  says  that  it  is  logically  impossible  to  design  a 
general  program  analyzer,  which  takes  as  input  the  (textual  deﬁnition)  of  an  arbitrary  program, 
and  recognizes when  the program  is  self-unconscious.  This  implies  that  it  is  impossible  to write 
a  program  which  does  the  more  general  analysis  of  how  an  arbitrary  procedure  behaves  when 
applied to some given arguments. 

Solutions to In-Class Problems Week 3, Fri. 

3 

BTW, it is feasible to write a general procedure that recognizes when an arbitrary input procedure 
does  return  a  value when  appiled  to  the  string  that  describes  it —that  is,  when  the  procedure  is 
self-conscious.  The  general  procedure  appllied  to  input  s  just  simulates  Ps  applied  to  s.  In  other 
words,  this  general  procedure  just  acts  like  a  virtual machine  simulator  or  “interpreter ”  for  the 
programming language of its input programs. 
It’s also important to recognize that there’s no hope of getting around this by switching program­
ming languages.  For example, by part (c), no C++ program can analyze arbitrary C++ programs, 
and no  Java program can analyze  Java programs, but you might wonder  if a  language  like C++, 
which allows more intimate manipulation of computer memory than Java, might therefore allow 
a C++ program to analyze general Java programs. But there is no loophole here:  since it’s possible 
to write a Java program that is a simulator/interpreter for C++ programs, if a C++ program could 
analyze  Java  programs,  so  could  the  Java  program  that  simulated  the C++  program,  contradict­
ing (c). 
It’s a different story  if we think about the practical possibility of writing programming analyzers. 
The fact that it’s logically impossible to write analyzers for completely general programs does not 
mean that you can’t do a very good  job analyzing interesting programs that come up in practice. 
In  fact  these  “interesting” programs  are  commonly  intended  to be  analyzable  in order  to  conﬁrm 
that they do what they’re supposed to do. 
So  it’s  not  clear  how  much  of  a  hurdle  this  theoretical  limitation  implies  in  practice.  What  the 
theory does provide is some perspective on claims about general analysis methods for programs. 
The theory tells us that people who make such claims either 

•	 are exaggerating the power (if any) of their methods —say to get a grant or make a sale, or 
•	 are trying to keep things simple by not going into technical limitations they’re aware of, or 
•	 perhaps most commonly, are so excited about some useful practical successes of their meth­
ods, that they haven’t bothered to think about their limitations. 

So  from  now  on,  if  you  hear  people  making  claims  about  completely  general  program  analy­
� 
sis/veriﬁcation/optimization methods, you’ll know they can’t be telling the whole story. 

Problem 2. 
The Axiom of Choice can say that if s is a set whose members are nonempty sets that are pairwise 
disjoint —that is no two sets in s have an element in common —then there is a set, c, consisting of 
exactly one element from each set in s. 

In formal logic, we could describe s with the formula, 
pairwise-disjoint(s) ::=  ∀x ∈ s. x =�
∅QAN D∀x, y ∈ s.(x =�

y)  IM P L I E S  (x ∩ y = ∅). 

Similarly we could describe c with the formula 
choice-set(c, s) ::=  ∀x ∈ s. ∃!z . z  ∈ c ∩ x. 
Here “∃!z .” is fairly standard notation for “there exists a unique z . 
Now we can give the formal deﬁnition: 

4 

Solutions to In-Class Problems Week 3, Fri. 

Deﬁnition (Axiom of Choice). 
∀s. pairwise-disjoint(s)  IM P L I E S  ∃c. choice-set(c, s). 

The  only  issue  here  is  that  Set  Theory  is  technically  supposed  to  be  expressed  in  terms  of  pure 
formulas  in  the  language  of  sets, which means  formula  that  uses  only  the membership  relation, 
∈, propositional connectives, and the two quantiﬁes ∀ and ∃.  Verify that the Axiom of Choice can 
be expressed as a pure formula, by explaining how to replace all impure subformulas above with 
equivalent pure formulas. 
For example, the formula x = y could be replaced with the pure formula ∀z . z  ∈ x I FF z  ∈ y . 

Solution.  Here  is  how  the  impure  subformulas  used  in  the  above  deﬁnition  of  the  Axiom  of 
Choice can be translated into pure formulas: 

x =�

∅translatesinto∃y/ y ∈ x. 

[x ∩ y = ∅]translatesinto NO T(∃z . z  ∈ x AND  z  ∈ y). 

[z  ∈ x ∩ y ]translatesintoz  ∈ x AND  z  ∈ y . 

∃!z . P (z )translatesinto∃z . P (z ) AND ∀w. P (w)  IM P L I E S  w = z . 
This last formula is not pure because it uses =, but this is ok since we know it can be replaced by 
a pure formula. 

� 

Problem 3. 
There  are  lots  of  different  sizes  of  inﬁnite  sets.  For  example,  starting with  the  inﬁnite  set,  N,  of 
nonnegative integers, we can build the inﬁnite sequence of sets 
N,  P (N),  P (P (N)),  P (P (P (N))),  . . . . 

By Theorem ?? from the Notes, each of these sets is strictly bigger2  than all the preceding ones. But 
that’s not all:  if we let U  be the union of the sequence of sets above, then U  is strictly bigger than 
every set in the sequence! Prove this: 
Lemma.  Let P n (N) be the nth set in the sequence, and 
∞
P n (N). 
U  ::= 
n=0 

Then

2Reminder:  set A is strictly bigger than set B  just means that A surj B , but NO T(B  surj A).


5 

Solutions to In-Class Problems Week 3, Fri. 
1.  U  surj P n (N) for every n ∈ N, but 
2.  there is no n ∈ N for which P n (N) surj U . 
Now  of  course,  we  could  take  U, P (U ), P (P (U )), . . .  and  can  keep  on  indeﬁnitely  building  still 
bigger inﬁnities. 
Solution.  Everything  follows  from  a  trivial  observation:  if A  ⊇  B ,  then A  surj  B .  (Why  is  this 
trivial?) 
So since U  ⊇ P n (N), we have U  surj P n (N), which proves 1. 
To prove 2, assume to the contrary that P m (N) surj U . Now we know from 1 that U  surj P m+1 (N). 
But this implies that 
P m (N) surj P m+1 (N) = P (P m (N)), 
contradicting the fact that, by Theorem ??, a power set of P m (N)) is “strictly bigger ” than P m (N)). 
� 

MIT OpenCourseWare
http://ocw.mit.edu 

6.042J / 18.062J Mathematics for Computer Science 
Spring 2010 

For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms . 

