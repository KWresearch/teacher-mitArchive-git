Massachusetts Institute of Technology 
6.042J/18.062J, Spring ’10: Mathematics for Computer Science 
Prof. Albert R. Meyer 

April 7 
revised April 7, 2010, 888 minutes 

Solutions to In-Class Problems Week 9, Wed. 

Problem 1. 
Recall that for functions f , g on N, f  = O(g) iff 
∃c ∈ N ∃n0  ∈ N ∀n ≥ n0  c · g(n) ≥ |f (n)| . 

(1) 

For  each  pair  of  functions  below,  determine whether  f  =  O(g)  and whether  g  =  O(f ).  In  cases 
where one function is O() of the other, indicate the smallest nonegative integer, c, and for that small­
est c, the smallest corresponding nonegative integer n0  ensuring that condition (1) applies. 

(a)  f (n) = n2 , g(n) = 3n.

f  = O(g) 
YES 

Solution.  NO. 

NO 

If YES, c = 

, n0  =


YES 

NO 

g = O(f ) 

If YES, c = 

, n0  =

· 
Solution.  YES, with c = 1, n0  = 3, which works because 32  = 9, 3  3 = 9. 
(b)  f (n) = (3n − 7)/(n + 4), g(n) = 4 
f  = O(g) 
If YES, c = 
YES 
NO 
Solution.  YES, with c = 1, n0  = 0 (because |f (n)| < 3). 

, n0  = 

�


�


� 

g = O(f ) 

YES 

NO 

If YES, c = 

, n0  = 

Solution.  YES, with c = 2, n0  = 15. 
Since limn→∞ f (n) = 3, the smallest possible c is 2.  For c = 2, the smallest possible n0  = 15 which 
follows from the requirement that 2f (n0 ) ≥ 4. 
� 

(c)  f (n) = 1 + (n sin(nπ/2))2 , g(n) = 3n 
f  = O(g) 
YES 
NO 

If yes, c = 

n0  = 

Solution.  NO, because f (2n) = 1, which rules out g = O(f ) since g = Θ(n). 

If yes, c = 
g = O(f ) 
n0  = 
YES 
NO 
Solution.	 NO, because f (2n + 1) = n2  + 1  �= O(n) which rules out f  = O(g). 

Creative Commons 

2010,  Prof. Albert R. Meyer. 

� 

� 

2 

Problem 2. 

Solutions to In-Class Problems Week 9, Wed. 

(a)  Deﬁne a function f (n) such that f  = Θ(n2 ) and NO T(f  ∼ n2 ). 

Solution.  Let f (n) ::= 2n2 . 
(b)  Deﬁne a function g(n) such that g = O(n2 ), g  �= Θ(n2 ) and g  �= o(n2 ). 

� 

Solution.  Let g(n) ::= (n sin(nπ/2))2  + n (cos(nπ/2))2 . 
For odd n, we have g(n) = n2 , which implies that g =�
o(n2 ).  For even n, we have g(n) = n, which 
implies n2  =� O(g) and hence g = Θ(
n2 ). 

� 

Problem 3. 

False Claim. 

2n  = O(1). 

(2) 

Explain why the claim is false. Then identify and explain the mistake in the following bogus proof. 

Bogus proof.  The proof by induction on n where the induction hypothesis, P (n), is the assertion (2). 
base case: P (0) holds trivially. 
inductive step: We may assume P (n), so there is a constant c > 0 such that 2n  ≤ c  1. Therefore, 
· 
2n+1  = 2  2n  ≤ (2c) 1,
·
· 

which implies that 2n+1  = O(1). That is, P (n+1) holds, which completes the proof of the inductive 
step. 
We  conclude by  induction  that 2n  =  O(1)  for all n.  That  is,  the exponential  function  is bounded 
by a constant. 

� 

Solution.  A  function  is  O(1)  iff  it  is  bounded  by  a  constant,  and  since  the  function  2n  grows 
unboundedly with n, it is not O(1). 
The mistake in the bogus proof is in its misinterpretation of the expression 2n  in assertion (2). The 
intended interpration of (2) is 

Let f  be the function deﬁned by the rule f (n) ::= 2n . Then f  = O(1). 

(3) 

But the bogus proof treats (2) as an assertion, P (n), about n. Namely, it misinterprets (2) as mean­
ing: 

�
Solutions to In-Class Problems Week 9, Wed. 
Let fn  be the constant function equal to 2n . That is, fn (k) ::= 2n  for all k ∈ N. Then 
fn  = O(1). 

(4) 

3 

Now  (4)  is  true  since  every  constant  function  is  O(1),  and  the  bogus  proof  is  an  unnecessarily 
complicated, but correct, proof that that for each n, the constant function fn  is O(1). But in the last 
line, the bogus proof switches from the misinterpretation (4) and claims to have proved (3). 
So  you  could  say  that  the  exact  place  where  the  proof  goes  wrong  is  in  its  ﬁrst  line,  where  it 
deﬁnes  P (n)  based  on  misinterpretation  (4).  Alternatively,  you  could  say  that  the  proof  was  a 
correct proof  (of  the misinterpretation), and  its ﬁrst mistake was  in  its  last  line, when  it switches 
� 
from the misinterpretation to the proper interpretation (3). 

Problem 4. 
Give an elementary proof (without appealing to Stirling’s formula) that log(n!) = Θ(n log n). 

Solution.  One elementary proof goes as follows: 
� 
First, 
n
log i < 
i=1 
� 
n
log i 
i=�(n+1)/2� 

On the other hand, 

log(n!) = 

log(n!) = 

� 
n
log n = n log n. 
i=1 

� 
n
log i > 
n� 
i=1 
log(n/2) > 
i=�(n+1)/2� 
n((log n) − 1) 
2
n log n
− 
2 
· 
n log n.

= 
n log n 
6


> 

=

> 
1
= 
3 

n log n
2 

· 
log(n/2)

n 
2 

− 

n 
2 

for n > 8.

Therefore, (1/3)n log n <  log(n!) < n log n for n > 8, proving that log(n!) = Θ(n log n). 

� 

MIT OpenCourseWare
http://ocw.mit.edu 

6.042J / 18.062J Mathematics for Computer Science 
Spring 2010 

For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms . 

