

















[MIT_OpenCourseWare,_Massachusetts_Institute_of_Technology]
                              [Submit ../../common/ [Click_to_visit_our
Subscribe to the [Enter Email images/               Facebook_page.][Click
OCW Newsletter   ]            button_subscribe.png] to_visit_our_Twitter
                                                    feed.]
HelpÂ Â Â |Â Â Â Contact_Us
Â 
    * [Click_for_site_home_page.]
    * Courses
      ***** Find courses by: *****
          o Topic
          o MIT_Course_Number
          o Department
      ***** Collections *****
          o Audio/Video_Lectures
          o New_Courses
          o Most_Visited_Courses
          o OCW_Scholar_Courses
          o Supplemental_Resources
      Â 
      ***** Cross-Disciplinary Topic Lists *****
          o Energy
          o Entrepreneurship
          o Environment
          o Introductory_Programming
          o Life_Sciences
          o Transportation
      Â 
      Â 
      ***** Translated Courses *****
          o ç¹é«å­_/_Traditional_Chinese
          o ç®ä½å­_/_Simplified_Chinese
          o EspaÃ±ol_/_Spanish
          o PortuguÃªs_/_Portuguese
          o à¸ à¸²à¸©à¸²à¹à¸à¸µà¸¢à¸_/_Thai
          o ÙØ§Ø±Ø³Û_/_Persian
          o TÃ¼rkÃ§e_/_Turkish
          o (ë¹ëì¤)íêµ­_/_Korean
          o More...
    * About
          o About_MIT_OpenCourseWare
          o Site_Stats
          o OCW_Stories
          o OpenCourseWare_Consortium
          o Media_Coverage
          o Newsletter
          o Press_Releases
          o OCW's_Next_Decade
    * Donate
          o Make_a_Donation
          o Why_Donate?
          o Become_a_Course_Champion
          o Our_Supporters
          o Other_Ways_to_Contribute
          o Shop_OCW
          o Become_a_Corporate_Sponsor
    * Featured Sites
          o Highlights_for_High_School
          o MITx
          o Teaching_Excellence_at_MIT
[Search              ] [Submit ../../common/images/button_search.png] Advanced
                                                                      Search
Home Â» Courses Â» Electrical_Engineering_and_Computer_Science Â» Mathematics
for_Computer_Science Â» Syllabus
******  Syllabus  ******
    * Course_Home
    * Syllabus
    * Calendar
    * Readings
    * Lecture_Notes
    * Assignments
    * Exams
***** Course Meeting Times *****
Lectures: 3 sessions / week, 1.5 hours / session
***** Contents *****
    * Introduction
    * Considerations_for_Taking_the_Subject_This_Term
    * Problem_Sets
    * Online_Tutor_Problems
    * Weekly_Reading_Comments
    * Biweekly_Mini-quizzes
    * Final_Exam
    * Collaboration
    * Grades
    * LaTeX_Macros
Introduction
This subject offers an introduction to Discrete Mathematics oriented toward
Computer Science and Engineering. The subject coverage divides roughly into
thirds:
   1. Fundamental concepts of mathematics: definitions, proofs, sets,
      functions, relations.
   2. Discrete structures: graphs, state machines, modular arithmetic,
      counting.
   3. Discrete probability theory.
The prerequisite is 18.01 (first term calculus), in particular, some
familiarity with sequences and series, limits, and differentiation and
integration of functions of one variable.
The goals of the course are summarized in a statement of Course_Objectives_and
Educational_Outcomes.
Considerations for Taking the Subject This Term
There are two main considerations for students in deciding to take 6.042J/
18.062J this termâor at all.
   1. Team Problem Solving
      This term, as in many previous terms, the subject is being taught in
      Lecture/Team Problem Solving style. More than half the class meeting time
      will generally be devoted to problem solving in teams of 7 or 8 sitting
      around a table with a nearby whiteboard where a team can write their
      solutions. Each TA covers 3 tables, acting as coach and providing
      feedback on students' solutions. The Lecturer acts likewise, circulating
      among all the tables. The coach will resist answering questions about the
      material, always trying first to find a team member who can explain the
      answer to the rest of the team. Of course the coach will provide hints
      and explanations when the whole team is stuck.
      Problem solving sessions will generally be preceded by half hour
      presentations by the lecturer, usually reviewing just the topics needed
      to understand the problems. These overviews are not intended as first-
      time introductions to the material nor as complete coverage of the
      assigned reading.
      The Good News is that the immediate, active engagement in problem solving
      sessions is an effective and enjoyable way for most students to master
      the material. Team sessions also provide a supervised setting to acquire
      and practice technical communication skills. Student grades for problem
      solving sessions depend on degree of active, prepared participation,
      rather than problem solving success. Sessions are not aimed to test how
      well a student can solve the problems in class; the goal is to have them
      understand how to solve them by the end of the session. Participation in
      team sessions counts for 20% of the final grade.
      In-class team problem solving works to solidify students' understanding
      of material they have already seen. The Bad News is that this requires
      students to arrive prepared at the sessions: they need to have read
      (though not carefully studied) the assigned reading and done the Online
      Tutor problems before class. There is no way to make up for not working
      with the team, so it is necessary to keep up and be thereâno focusing
      on something else for a month, aiming to catch up afterward. If you
      cannot commit to keeping up, you may prefer to take the subject some
      other term.
   2. This subject covers many mathematical topics that are essential in
      Computer Science but are not covered in the standard calculus curriculum.
      In addition, the subject teaches students about careful mathematics:
      precisely stating assertions about well-defined mathematical objects and
      verifying these assertions using mathematically sound proofs. While some
      students have had earlier exposure to some of these topics, in most cases
      they learn a lot more in 6.042J/18.062J.
The subject is required of all Computer Science (6-3) majors and is in a
required category for Math majors taking the Computer Science option (18C). But
students with a firm understanding of sound proofs, and who are familiar with
many of the covered topics, should discuss substituting a more advanced Math
subject for 6.042 with the Lecturer or their advisor.
Problem Sets
Problem Sets are normally due at the beginning of lecture on Fridays, but a few
may be due at alternate times because of holidays. Doing the problem sets is,
for most students, crucial for mastering the course material. Solutions to the
problem sets will be posted immediately after the due date. Consequently, late
problem sets will not be accepted.
Problem sets count for 25% of the final grade.
Students are encouraged to collaborate on problem sets as on teams in class.
The last page of each problem set has a collaboration statement to be completed
and attached as the first page of a problem set submission:
"I worked alone and only with course materials"
or
"I collaborated on this assignment with (students in class),
got help from (people other than collaborators and course staff),
and referred to (citations to sources other than the material from this term)".
No problem set will be given credit until it has a collaboration statement.
Online Tutor Problems
There are weekly Online Tutor problems due before class on specified dates.
These consist of straightforward questions that provide useful feedback about
the assigned material. Tutor problems should take about 20 minutes after the
reading has been completed. (Some students prefer to try the tutor problems
before doing the reading, which is fine.)
Like team problem-solving in class, online tutor problems are graded solely on
participation: students receive full credit as long as they try the problem,
even if their answer is wrong. Tutor problems count for 5% of the final grade.
Weekly Reading Comments
A comment on the week's reading using the NB online annotation system is due on
specified dates by 9AM before class.
A single comment citing some paragraph that specially catches your attention is
all that is required. The comment should indicate why this paragraph stood out,
for example, because you found it especially
    * difficult/confusing, or
    * surprising, or
    * mistaken (pointing out typos &amp; suggesting corrections is
      appreciated), or
    * funny, or
    * boring, or
    * lacking Computer Science motivation, or
    * poorly written,
    * something you'd like reviewed in class, ....
Comments in response to other people's comments are generally also OK to
satisfy this requirement. Multiple comments are welcomed.
Note that global comments such as "I understood everything in the reading,
found it all interesting, and have no questions" are not considered responsive.
Even if you understood everything, there must, in the 15 to 30 pages assigned
each week, have been something that stood out for you as suggested above.
Similarly, responses to other comments such as "I agree," "lol,"..., are not
sufficient.
Reading comments count for 5% of the final grade.
Collaboration and Outside Sources
We encourage students to collaborate on homework as on in-class problems. Study
groups can be a big help in mastering course material, besides being fun and a
good way to make friends. However, students must write up solutions on their
own, neither copying solutions nor providing solutions to be copied. All
collaborators must be cited, and if a source beyond the course materials is
used in a solutionâfor example, an "expert" consultant other than 6.042
staff, or another textâthere must be a proper scholarly citation of the
source.
We discourage, but do not forbid, use of materials from prior terms other than
those available on OCW. We repeat, however, that use of material from any
previous term requires a proper scholarly citation. As long as a student
provides accurate citation and collaboration statements, a questionable
submission will rarely be sanctionedâinstead, we'll explain why we judge the
submission unsatisfactory (and maybe deny credit for specific, clearly copied
solutions). But omission of such a citation will be taken as a priori evidence
of cheating, with unpleasant consequences for everyone.
Biweekly Mini-quizzes
A 25-30 minute mini-quiz will generally be given every other week, usually on
Wednesdays. Mini-quizzes count for a total of 20% of the final grade.
Material to study for a mini-quiz is very well defined: a mini-quiz will cover
only the material in problems from the previous two weeks. Mini-quiz questions
are often simply some parts of these online, class, and problem set problems.
Students can prepare for a mini-quiz simply by reviewing the posted problem
solutions for the previous two weeks.
Final Exam
There will be a standard 3 hour final exam. This exam is worth 25% of the final
course grade.
Grades
The lowest mini-quiz score and problem set score, and the lowest two team
problem-solving scores will not count in grade calculation. This effectively
gives everyone 1 mini-quiz, 1 problem set, and 2 team problem-solving sessions
they can miss without excuse or penalty.
Grades for the course will be based on the following weighting:
         Grading criteria.
ACTIVITIES              PERCENTAGES
Problem sets            25%
Final                   25%
Class participation     20%
Mini-quizzes            20%
Weekly reading comments 5%
Online tutor problems   5%
LaTeX Macros
Course handouts are formatted using LaTeX, which is the preferred formatting
system among Mathematics professionals. Note that we do not think it's
worthwhile for students to use it for their class submissions.
*** Courses ***
    * Find_by_Topic
    * Find_by_Course_Number
    * Find_by_Department
    * Audio/Video_Courses
    * OCW_Scholar_Courses
    * Most_Visited_Courses
    * New_Courses
    * Translated_Courses
    * Supplemental_Resources
*** About ***
    * About_OpenCourseWare
    * Site_Stats
    * OCW_Stories
    * OCW_Consortium
    * Media_Coverage
    * Newsletter
    * Press_Releases
    * OCW's_Next_Decade
*** Donate ***
    * Make_a_Donation
    * Why_Donate?
    * Become_a_Course_Champion
    * Our_Supporters
    * Other_Ways_to_Contribute
    * Shop_OCW
    * Become_a_Corporate_Sponsor
*** Featured Sites ***
    * Highlights_for_High_School
    * MITx
    * Teaching_Excellence_at_MIT
*** Tools ***
    * Help_&amp;_FAQs
    * Contact_Us
    * Advanced_Search
    * Site_Map
    * Privacy_&amp;_Terms_of_Use
*** About MIT OpenCourseWare ***
MIT OpenCourseWare makes the materials used in the teaching of almost all of
MIT's subjects available on the Web, free of charge. With more than 2,000
courses available, OCW is delivering on the promise of open sharing of
knowledge.
[Massachusetts_Institute_of_Technology_logo_and_name.] [OpenCourseWare
Consortium_logo.] [Creative_Commons_logo_with_terms_BY-NC-SA.]
Â© 2001â2013
Massachusetts Institute of Technology
Your use of the MIT OpenCourseWare site and materials is subject to our
Creative_Commons_License and other terms_of_use.
Â 
