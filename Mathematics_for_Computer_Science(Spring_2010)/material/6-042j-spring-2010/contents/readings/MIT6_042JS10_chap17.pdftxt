Chapter 17 

Generating Functions 

Generating Functions are one of the most surprising and useful inventions in Dis­
crete  Math.  Roughly  speaking,  generating  functions  transform  problems  about 
sequences  into  problems  about  functions.  This  is  great  because  we’ve  got  piles  of 
mathematical machinery  for manipulating  functions.  Thanks  to generating  func­
tions, we can apply all  that machinery  to problems about sequences.  In  this way, 
we can use generating functions to solve all sorts of counting problems.  There is a 
huge chunk of mathematics concerning generating functions, so we will only get a 
taste of the subject. 
In this chapter, we’ll put sequences in angle brackets to more clearly distinguish 
them from the many other mathematical expressions ﬂoating around. 
The ordinary generating function for �g0 , g1 , g2 , g3  . . . � is the power series: 
G(x) = g0  + g1x + g2x 2  + g3x 3  + · · ·  . 
There are a  few other kinds of generating  functions  in common use, but ordinary 
generating  functions  are  enough  to  illustrate  the power of  the  idea,  so we’ll  stick 
to them.  So from now on generating function will mean the ordinary kind. 
A generating  function  is  a  “formal” power  series  in  the  sense  that we usually 
regard  x  as  a  placeholder  rather  than  a  number.  Only  in  rare  cases will we  actu­
ally  evaluate  a  generating  function  by  letting  x  take  a  real  number  value,  so  we 
generally ignore the issue of convergence. 
Throughout this chapter, we’ll indicate the correspondence between a sequence 
and its generating function with a double-sided arrow as follows: 
�g0 , g1 , g2 , g3 , . . . �  ←→  g0  + g1x + g2x 2  + g3x 3  + · · · 
For example, here are some sequences and their generating functions: 
�0, 0, 0, 0, . . . �  ←→  0 + 0x + 0x 2  + 0x 3  +  = 0 
· · · 
�1, 0, 0, 0, . . . �  ←→  1 + 0x + 0x 2  + 0x 3  +  = 1 
· · · 
�3, 2, 1, 0, . . . �  ←→  3 + 2x + 1x 2  + 0x 3  +  = 3 + 2x + x 2 
· · · 

385 

386 

CHAPTER 17.  GENERATING FUNCTIONS 

The  pattern  here  is  simple:  the  ith  term  in  the  sequence  (indexing  from  0)  is  the 
coefﬁcient of xi  in the generating function. 
Recall that the sum of an inﬁnite geometric series is: 

1 + z + z 2  + z 3  +

1
1 − z 
This equation does not hold when |z | ≥ 1, but as remarked, we don’t worry about 
convergence  issues.  This  formula  gives  closed  form  generating  functions  for  a 
whole range of sequences.  For example: 

· · · 

= 

�1, 1, 1, 1, . . . �  ←→  1 + x + x2  + x3  + · · · 

=

�1, −1, 1, −1, . . . �  ←→  1 − x + x2  − x3  + x4  − · · ·  = 
�
� 
1, a, a2 , a3 , . . . 

1 + ax + a2x2  + a3x3  +

←→ 

· · · 

= 

�1, 0, 1, 0, 1, 0, . . . �  ←→  1 + x2  + x4  + x6  + · · · 

=

1 
1 − x 
1 
1 + x 

1
1 − ax 
1 
1 − x2 

17.1  Operations on Generating Functions 

The  magic  of  generating  functions  is  that  we  can  carry  out  all  sorts  of  manipu­
lations  on  sequences  by  performing mathematical  operations  on  their  associated 
generating  functions.  Let’s  experiment with  various  operations  and  characterize 
their effects in terms of sequences. 

17.1.1  Scaling 
Multiplying a generating function by a constant scales every term in the associated 
sequence by the same constant.  For example, we noted above that: 

�1, 0, 1, 0, 1, 0, . . . �  ←→  1 + x 2  + x 4  + x 6  + · · · =

1 
1 − x2 

Multiplying the generating function by 2 gives 
2  = 2 + 2x 2  + 2x 4  + 2x 6  +
1 − x2 

· · · 

which generates the sequence: 

�2, 0, 2, 0, 2, 0, . . . � 

17.1.  OPERATIONS ON GENERATING FUNCTIONS 

387 

Rule 11 (Scaling Rule).  If 

�f0 , f1 , f2 , . . . �  ←→  F (x), 

then 

�cf0 ,  cf1 ,  cf2 ,  . . . �  ←→  c F (x).
· 
The idea behind this rule is that: 
�cf0 , cf1 , cf2 , . . . �  ←→ 
= 
= 

cf0  + cf1x + cf2x 2  + · · · 
· 
· · · 
c  (f0  + f1x + f2x 2  + )
cF (x) 

17.1.2  Addition 
Adding  generating  functions  corresponds  to  adding  the  two  sequences  term  by 
term.  For example, adding two of our earlier examples gives: 
�  1, 
�  ←→ 

. . . 

1, 

1, 

1, 

1, 

1, 

+  �  1,  −1,  1,  −1,  1,  −1, 

. . . 

�  ←→ 

1 
1 − x 
1 
1 + x 

1 
1
�  ←→ 
�  2, 
+ 
0, 
2, 
0, 
2, 
0, 
. . . 
1 − x 
1 + x 
We’ve now derived two different expressions that both generate the sequence �2, 0, 2, 0, . . . �. 
They are, of course, equal: 
1  =
1  + 
1 − x 
1 + x 
Rule 12 (Addition Rule).  If 
�f0 , f1 , f2 , . . . �  ←→  F (x), 
�g0 , g1 , g2 , . . . �  ←→  G(x), 

(1 + x) + (1 − x)
(1 − x)(1 + x)

2

1 − x2


and 

= 

then 

�f0  + g0 , f1  + g1 , f2  + g2 ,  . . . �  ←→  F (x) + G(x). 
� � 
The idea behind this rule is that: 
∞
�f0  + g0 , f1  + g1 , f2  + g2 ,  . . . �  ←→ 
� 
�  � 
(fn  + gn )x n 
� 
� 
n=0 
∞
∞
gnx n 
fnx n  + 
n=0 
n=0 
F (x) + G(x) 

= 

= 

388 

CHAPTER 17.  GENERATING FUNCTIONS 

17.1.3  Right Shifting 
Let’s start over again with a simple sequence and its generating function: 
�1, 1, 1, 1, . . . �  ←→ 

1 
1 − x 
Now let’s right-shift the sequence by adding k  leading zeros: 
�� 
� 
� 
�0, 0, . . . , 0, 1, 1, 1, . . . � 
←→ 
k zeroes 

· · · 
x k  + x k+1  + x k+2  + x k+3  + 

= 

= 

· 
· · · 
x k  (1 + x + x 2  + x 3  + )
kx
1 − x 
Evidently, adding k  leading zeros to the sequence corresponds to multiplying the 
generating function by xk . This holds true in general. 
Rule 13 (Right-Shift Rule).  If �f0 , f1 , f2 , . . . �  ←→  F (x), then: 
�� 
� 
� 
· 
�0, 0, . . . , 0, f0 , f1 , f2 , . . . �  ←→  x k  F (x)
k zeroes 
The idea behind this rule is that: 
� 
�� 
� 
k zeroes 
�0, 0, . . . , 0, f0 , f1 , f2 , . . . �  ←→ 
= 
= 

f0x k  + f1x k+1  + f2x k+2  + · · · 
· 
· · · 
x k  (f0  + f1x + f2x 2  + f3x 3  + )
· 
x k  F (x)

d
dx 

(1 + x + x 2  + x 3  + x 4  + · · · )

17.1.4  Differentiation 
What  happens  if we  take  the  derivative  of  a  generating  function?  As  an  example, 
let’s differentiate  the now-familiar generating  function  for an  inﬁnite sequence of 
� 
� 
1’s. 
1 
d 
dx  1 − x 
1
(1 − x)2 
1 
(1 − x)2 
We found a generating function for the sequence �1, 2, 3, 4, . . . � of positive integers! 
In  general,  differentiating  a  generating  function  has  two  effects  on  the  corre­
sponding sequence:  each term is multiplied by its index and the entire sequence is 
shifted left one place. 

�1, 2, 3, 4, . . . �  ←→ 

1 + 2x + 3x 2  + 4x 3  +

(17.1)

· · · 

= 

= 

17.1.  OPERATIONS ON GENERATING FUNCTIONS 

389 

Rule 14 (Derivative Rule).  If 
�f0 , f1 , f2 , f3 , . . . �  ←→  F (x), 

then 

�f1 , 2f2 , 3f3 , . . . �  ←→  F � (x). 
The idea behind this rule is that: 
�f1 , 2f2 , 3f3 , . . . �  ←→  f1  + 2f2x + 3f3x 2  + · · · 
d  (f0  + f1x + f2x 2  + f3x 3  + )
· · · 
= 
dx 
d = 
dx 

F (x)

The Derivative Rule is very useful.  In fact, there is frequent, independent need 
for each of differentiation’s two effects, multiplying terms by their index and left-
shifting one place. Typically, we want just one effect and must somehow cancel out 
the other.  For example, let’s try to ﬁnd the generating function for the sequence of 
squares,  �0, 1, 4, 9, 16, . . . �.  If we  could  start with  the  sequence  �1, 1, 1, 1, . . . �  and 
multiply each term by its index two times, then we’d have the desired result: 
�0 0,  1 1,  2 2,  3 3,  . . . � = �0, 1, 4, 9, . . . �
·
·
·
· 

A  challenge  is  that differentiation not  only multiplies  each  term  by  its  index,  but 
also shifts the whole sequence left one place. However, the Right-Shift Rule 13 tells 
how to cancel out this unwanted left-shift: multiply the generating function by x. 
Our procedure, therefore, is to begin with the generating function for �1, 1, 1, 1, . . . �, 
differentiate, multiply by x, and then differentiate and multiply by x once more. 

= 

�1, 1, 1, 1, . . . �  ←→ 
�1, 2, 3, 4, . . . �  ←→ 

1 
1 − x 
1 
1
d 
dx  1 − x 
(1 − x)2 
1 
x 
�0, 1, 2, 3, . . . �  ←→  x · 
(1 − x)2  = 
(1 − x)2 
1 + x 
x 
d
dx  (1 − x)2  = 
(1 − x)3 
1 + x
x(1 + x) 
�0, 1, 4, 9, . . . �  ←→  x · 
(1 − x)3  = 
(1 − x)3 

�1, 4, 9, 16, . . . �  ←→ 

Thus, the generating function for squares is: 

x(1 + x) 
(1 − x)3 

(17.2) 

390 

CHAPTER 17.  GENERATING FUNCTIONS 

17.1.5  Products 
Rule 15 ( Product Rule).  If 
�a0 , a1 , a2 , . . . �  ←→  A(x), 

and 

�b0 , b1 , b2 , . . . �  ←→  B (x), 

then 

�c0 , c1 , c2 ,  . . . �  ←→  A(x)  B (x),
· 

where 

· · · 
+ an b0 .

cn  ::= a0 bn  + a1 bn−1  + a2 bn−2  +
� 
To understand this rule, let 
∞
cnx n .
n=0 
· 
We  can  evaluate  the  product  A(x)  B (x)  by  using  a  table  to  identify  all  the 
cross-terms from the product of the sums: 

· 
C (x) ::= A(x)  B (x) = 

b0x0 

b1x1 

b2x2 

b3x3 

a0x0 

a0 b0x0 

a0 b1x1 

a0 b2x2 

a0 b3x3 

a1x1 

a1 b0x1 

a1 b1x2 

a1 b2x3 

. . . 

. . . 

. . . 

a2x2 

a2 b0x2 

a2 b1x3 

. . . 

a3x3 

a3 b0x3 

. . . 

. . . 

. . . 
Notice  that  all  terms  involving  the  same  power  of  x  lie  on  a  /-sloped  diagonal. 
Collecting these terms together, we ﬁnd that the coefﬁcient of xn  in the product is 
the sum of all the terms on the (n + 1)st diagonal, namely, 
· · · 

a0 bn  + a1 bn−1  + a2 bn−2  +

+ an b0 . 

(17.3)

This  expression  (17.3)  may  be  familiar  from  a  signal  processing  course;  the  se­
quence �c0 , c1 , c2 , . . . � is called the convolution of sequences �a0 , a1 , a2 , . . . � and �b0 , b1 , b2 , . . . �. 

17.2  The Fibonacci Sequence 

Sometimes we can ﬁnd nice generating functions for more complicated sequences. 
For example, here is a generating function for the Fibonacci numbers: 
x 
�0, 1, 1, 2, 3, 5, 8, 13, 21, . . . �  ←→ 
1 − x − x2 

17.2.  THE FIBONACCI SEQUENCE 

391 

The  Fibonacci  numbers  may  seem  like  a  fairly  nasty  bunch,  but  the  generating 
function is simple! 
We’re going  to derive  this generating  function and  then use  it  to ﬁnd a closed 
form  for  the  nth  Fibonacci  number.  The  techniques we’ll  use  are  applicable  to  a 
large class of recurrence equations. 

17.2.1  Finding a Generating Function 
Let’s begin by recalling the deﬁnition of the Fibonacci numbers: 

f0  = 0 
f1  = 1 
fn  = fn−1  + fn−2 

(for n ≥ 2) 
We  can  expand  the  ﬁnal  clause  into  an  inﬁnite  sequence  of  equations.  Thus,  the 
Fibonacci numbers are deﬁned by: 

f0  =0 
f1  =1 
f2  =f1  + f0 
f3  =f2  + f1 
f4  =f3  + f2 
. . . 
Now the overall plan is to deﬁne a function F (x) that generates the sequence on 
the  left  side  of  the  equality  symbols, which  are  the  Fibonacci  numbers.  Then we 
derive a  function  that generates  the sequence on  the right side.  Finally, we equate 
the two and solve for F (x). Let’s try this.  First, we deﬁne: 
F (x) = f0  + f1x + f2x 2  + f3x 3  + f4x 4  + · · · 
Now we need to derive a generating function for the sequence: 
�0,  1, f1  + f0 , f2  + f1 , f3  + f2 ,  . . . � 
One  approach  is  to  break  this  into  a  sum  of  three  sequences  for which we  know 
generating functions and then apply the Addition Rule: 
�  ←→  x 
�  0, 
1, 
�  ←→  xF (x) 
�  0,
f0 ,
�  ←→  x2F (x) 
�  0, 
0,
�  ←→  x + xF (x) + x2F (x) 
�  0,  1 + f0 ,
This sequence is almost identical to the right sides of the Fibonacci equations.  The 
one  blemish  is  that  the  second  term  is  1 + f0  instead  of  simply  1.  However,  this 
amounts to nothing, since f0  = 0 anyway. 

0, 
f3 , 
f2 , 
f3  + f2 , 

. . . 
. . . 
. . . 
. . . 

+	

0, 
f1 ,
f0 ,
f1  + f0 ,

0, 
f2 ,
f1 ,
f2  + f1 ,

392 

CHAPTER 17.  GENERATING FUNCTIONS 

Now if we equate F (x) with the new function x + xF (x) + x2F (x), then we’re 
implicitly writing down  all of  the  equations  that deﬁne  the Fibonacci numbers  in 
one fell swoop: 

x3  + · · · 
=  f0  + 
F (x)
x + 
x2  + 
f3 
f2 
f1 
� 
� 
� 
� 
� 
x + xF (x) + x2F (x)  =  0  + (1 + f0 ) x + (f1  + f0 ) x2  + (f2  + f1 ) x3  + · · · 

Solving for F (x) gives the generating function for the Fibonacci sequence: 

F (x) = x + xF (x) + x 2F (x) 

so 

x 
1 − x − x2 
.
Sure enough, this is the simple generating function we claimed at the outset. 

F (x) = 

17.2.2  Finding a Closed Form 
Why should one care about the generating function for a sequence? There are sev­
eral answers, but here  is one:  if we can ﬁnd a generating function for a sequence, 
then we can often ﬁnd a closed form for the nth coefﬁcient— which can be pretty 
useful!  For example, a closed form for the coefﬁcient of x in the power series for 
n
x/(1 − x − x2 ) would be an explicit formula for the nth Fibonacci number. 
So our next task is to extract coefﬁcients from a generating function.  There are 
several  approaches.  For  a  generating  function  that  is  a  ratio  of  polynomials,  we 
can use  the method  of  partial  fractions, which  you  learned  in  calculus.  Just  as  the 
terms in a partial fraction expansion are easier to integrate, the coefﬁcients of those 
terms are easy to compute. 
Let’s  try  this  approach  with  the  generating  function  for  Fibonacci  numbers. 
First, we factor the denominator: 
1 − x − x 2  = (1 − α1x)(1 − α2x) 
5) and α2  =  1 (1 − √
5). Next, we ﬁnd A1  and A2  which satisfy: 
2 
A2 
A1 
x
1 − α2x 
1 − α1x 
1 − x − x2 
We  do  this  by  plugging  in  various  values  of  x  to  generate  linear  equations  in A1 
and A2 . We can then ﬁnd A1  and A2  by solving a linear system. This gives: 

√
where α1  =  1 (1 + 
2

+

=

A1  =

A2  = 

1 
1
√
= 
α1  − α2 
5 
−
= − √1
1 
− 
5 
α1 
α2 

17.2.  THE FIBONACCI SEQUENCE 

393 

� 
�
Substituting  into  the  equation  above  gives  the  partial  fractions  expansion  of 
F (x): 
1 
1
1 
x 
1 − x − x2  =  √
1 − α2x 
1 − α1x 
5
Each term in the partial fractions expansion has a simple power series given by the 
geometric sum formula: 

− 

1 
1x 2  + · · · 
= 1 + α1x + α2
1 − α1x 
1 
2x 2  + · · · 
= 1 + α2x + α2
1 − α2x 
� 
� 
Substituting in these series gives a power series for the generating function: 
1
1 
1 
F (x) =  √
1  �
� 
1 − α2x 
1 − α1x 
5
=  √
1x 2  + · · · ) − (1 + α2x + α2
2x 2  + · · · )  , 
(1 + α1x + α2
5 

− 

so 

1  − α2 
�� 
αn 
n 
fn  =  √
5 
√
1 + 
2 

1 
=  √
5

�
n
5 

� 
� � 
1 − √
n
5 
− 
2 

This  formula  may  be  scary  and  astonishing  —it’s  not  even  obvious  that  its 
value  is  an  integer  —but  it’s  very  useful.  For  example,  it  provides  (via  the  re­
peated  squaring method)  a much more  efﬁcient way  to  compute  Fibonacci  num­
bers  than  crunching  through  the  recurrence,  and  it  also  clearly  reveals  the  expo­
nential growth of these numbers. 

17.2.3  Problems 
Class Problems 

Problem 17.1. 
The famous mathematician, Fibonacci, has decided to start a rabbit farm to ﬁll up 
his time while he’s not making new sequences to torment future college students. 
Fibonacci  starts his  farm on month zero  (being a mathematician),  and at  the  start 
of month one he receives his ﬁrst pair of rabbits. Each pair of rabbits takes a month 
to mature,  and  after  that  breeds  to  produce  one  new  pair  of  rabbits  each month. 
Fibonacci decides that in order never to run out of rabbits or money, every time a 
batch of new rabbits is born, he’ll sell a number of newborn pairs equal to the total 
number of pairs he had three months earlier.  Fibonacci is convinced that this way 
he’ll never run out of stock. 

394 

CHAPTER 17.  GENERATING FUNCTIONS 

(a)  Deﬁne  the  number,  rn ,  of  pairs  of  rabbits  Fibonacci  has  in month  n,  using  a 
recurrence relation. That is, deﬁne rn  in terms of various ri  where i < n. 

(b)  Let R(x) be the generating function for rabbit pairs, 
R(x) ::= r0  + r1x + r2x 2  + ·. 
Express R(x) as a quotient of polynomials. 

(c)  Find a partial fraction decomposition of the generating function R(x). 

(d)  Finally, use the partial fraction decomposition to come up with a closed form 
expression for  the number of pairs of rabbits Fibonacci has on his farm on month 
n. 

Problem 17.2. 
Less well-known than the Towers of Hanoi —but no less fascinating —are the Tow­
ers  of  Sheboygan.  As  in Hanoi,  the  puzzle  in  Sheboygan  involves  3  posts  and  n 
disks of different sizes.  Initially, all the disks are on post #1: 

Post #1 

Post #2 

Post #3 

The  objective  is  to  transfer  all  n  disks  to  post  #2  via  a  sequence  of moves.  A 
move  consists  of  removing  the  top  disk  from  one  post  and  dropping  it  onto  an­
other post with the restriction that a larger disk can never lie above a smaller disk. 
Furthermore,  a  local ordinance  requires  that  a disk  can  be moved  only  from  a post  to 
the  next  post  on  its  right —or  from  post  #3  to  post  #1.  Thus,  for  example,  moving  a 
disk directly from post #1 to post #3 is not permitted. 
(a)  One  procedure  that  solves  the  Sheboygan  puzzle  is  deﬁned  recursively:  to 
move an initial stack of n disks to the next post, move the top stack of n − 1 disks 
to the furthest post by moving it to the next post two times, then move the big, nth 
disk to the next post, and ﬁnally move the top stack another two times to land on 
top of the big disk.  Let sn  be the number of moves that this procedure uses. Write 
a simple linear recurrence for sn . 
(b)  Let S (x) be the generating function for the sequence �s0 , s1 , s2 , . . . �. Show that 
S (x) is a quotient of polynomials. 

17.2.  THE FIBONACCI SEQUENCE 

395 

(c)  Give a simple formula for sn . 

(d)  A  better  (indeed  optimal,  but  we  won’t  prove  this)  procedure  to  solve  the 
Towers  of  Sheboygan  puzzle  can  be  deﬁned  in  terms  of  two  mutually  recursive 
procedures,  procedure  P1 (n)  for  moving  a  stack  of  n  disks  1  pole  forward,  and 
P2 (n)  for moving a stack of n disks 2 poles  forward.  This  is  trivial  for n  = 0.  For 
n > 0, deﬁne: 
P1 (n): Apply P2 (n − 1) to move the top n − 1 disks two poles forward to the third 
pole.  Then move  the  remaining  big  disk  once  to  land  on  the  second  pole.  Then 
apply P2 (n − 1) again to move the stack of n − 1 disks two poles forward from the 
third pole to land on top of the big disk. 
P2 (n):  Apply  P2 (n − 1)  to  move  the  top  n − 1  disks  two  poles  forward  to  land 
on  the  third  pole.  Then  move  the  remaining  big  disk  to  the  second  pole.  Then 
apply P1 (n − 1)  to move  the stack of n − 1 disks one pole  forward  to  land on  the 
ﬁrst pole.  Now move  the big disk 1 pole  forward again  to  land on  the  third pole. 
Finally, apply P2 (n − 1) again to move the stack of n − 1 disks two poles forward 
to land on the big disk. 
Let tn  be the number of moves needed to solve the Sheboygan puzzle using proce­
dure P1 (n).  Show that 

tn  = 2tn−1  + 2tn−2  + 3, 

(17.4) 

for n > 1. 
Hint:  Let sn  be the number of moves used by procedure P2 (n).  Express each of tn 
and sn  as linear combinations of tn−1  and sn−1  and solve for tn . 

(e)  Derive values a, b, c, α, β  such that 

tn  = aαn  + bβ n  + c. 

Conclude that tn  = o(sn ). 

Homework Problems 

Problem 17.3. 
Taking derivatives of generating functions is another useful operation. This is done 
termwise, that is, if 

F (x) = f0  + f1x + f2x 2  + f3x 3  + · · ·  , 

then 

For example, 

F � (x) ::= f1  + 2f2x + 3f3x 2  + · · ·  . 
�
� 
� 
1 
(1 − x) 

= 1 + 2x + 3x 2  +

1
(1 − x)2 

= 

· · · 

396 

CHAPTER 17.  GENERATING FUNCTIONS 

so 

H (x) ::= 

= 0 + 1x + 2x 2  + 3x 3  +

x 
(1 − x)2 
is the generating function for the sequence of nonegative integers. Therefore 
1 + x 
(1 − x)3  = H � (x) = 1 + 22 x + 32 x 2  + 42 x 3  + · · ·  , 

· · · 

so 

x2  + x 
(1 − x)3  = xH � (x) = 0 + 1x + 22 x 2  + 32 x 3  + · · · + n 2 x n  + · · · 
is the generating function for the nonegative integer squares. 
(a)  Prove  that  for  all  k  ∈  N,  the  generating  function  for  the nonnegative  integer 
kth  powers  is  a  quotient  of  polynomials  in  x.  That  is,  for  all  k  ∈  N  there  are 
� 
� 
polynomials Rk (x) and Sk (x) such that 
Rk (x) 
Sk (x) 

= n . 
k

(17.5)

[x n ]

Hint: Observe that the derivative of a quotient of polynomials is also a quotient of 
polynomials.  It is not necessary work out explicit formulas for Rk  and Sk  to prove 
this part. 

(b)  Conclude that if f (n) is a function on the nonnegative integers deﬁned recur­
sively in the form 
f (n) = af (n − 1) + bf (n − 2) + cf (n − 3) + p(n)αn 
where  the  a, b, c, α  ∈  C  and  p  is  a polynomial with  complex  coefﬁcients,  then  the 
generating function for the sequence f (0), f (1), f (2), . . .  will be a quotient of poly­
nomials in x, and hence there is a closed form expression for f (n). 
Hint: Consider 

Rk (αx) 
Sk (αx) 

Problem 17.4. 
Generating functions provide an interesting way to count the number of strings of 
matched  parentheses.  To  do  this,  we’ll  use  the  description  of  these  strings  given 
in Deﬁnition  11.1.2  as  the  set,  GoodCount,  of  strings  of  parentheses with  a  good 
count.  Let cn  be the number of strings in GoodCount with exactly n left parenthe­
ses, and let C (x) be the generating function for these numbers: 
C (x) ::= c0  + c1x + c2x 2  + · · ·  . 

17.2.  THE FIBONACCI SEQUENCE 

397 

(a)  The  wrap  of  a  string,  s,  is  the  string,  (s),  that  starts  with  a  left  parenthesis 
followed  by  the  characters  of  s,  and  then  ends with  a  right  parenthesis.  Explain 
why the generating function for the wraps of strings with a good count is xC (x). 
Hint:  The wrap of a  string with good  count also has a good  count  that  starts and 
ends with 0 and remains positive everywhere else. 

(b)  Explain why, for every string, s, with a good count, there is a unique sequence 
s1  · · · 
of  strings  s1 , . . . , sk  that  are wraps  of  strings with  good  counts  and  s  = 
sk .
For  example,  the  string  r  ::= (())()(()())  ∈  GoodCount  equals  s1 s2 s3  where  s1  = 
(()), s2  =  (), s3  =  (()()),  and  this  is  the  only  way  to  express  r  as  a  sequence  of 
wraps of strings with good counts. 

(17.6) 

(17.7)

(17.8)

(17.9)

(c)  Conclude that 

so 

and hence 

C  = 1 + xC + (xC )2  + · · · + (xC )n  + · · ·  , 

, 

1 
C  = 
1 − xC 
1 ± √
1 − 4x 
2x 

C  = 

. 

Let D(x) ::= 2xC (x). Expressing D as a power series 
D(x) = d0  + d1x + d2x 2  + · · ·  , 

we have 

dn+1 . 
2 
(d)  Use (17.12), (17.13), and the value of c0  to conclude that 
D(x) = 1 − √
1 − 4x. 

cn  = 

(e)  Prove that 

dn  = 

(2n − 3) · (2n − 5) · · · 5 · 3 · 1 · 2n 
. 
n! 

Hint:  dn  = D(n) (0)/n! 

(f)  Conclude that 

� �
2n 
1
n + 1  n 

. 

cn  = 

398 

CHAPTER 17.  GENERATING FUNCTIONS 

Exam Problems 

Problem 17.5. 
Deﬁne the sequence r0 , r1 , r2 , . . .  recursively by the rule that r0  = r1  = 0 and 

rn  = 7rn−1  + 4rn−2  + (n + 1), 
for n  ≥  2.  Express  the generating  function of  this sequence as a quotient of poly­
nomials  or  products  of  polynomials.  You  do  not  have  to  ﬁnd  a  closed  form  for 
rn . 

17.3  Counting with Generating Functions 

Generating functions are particularly useful for solving counting problems.  In par­
ticular, problems involving choosing items from a set often lead to nice generating 
functions by letting the coefﬁcient of xn  be the number of ways to choose n items. 

17.3.1  Choosing Distinct Items from a Set 
� � 
� �  � � 
�� � � � � � 
� � 
� � 
� 
The  generating  function  for  binomial  coefﬁcients  follows  directly  from  the  Bino­
mial Theorem: 
k 
k 
k 
←→ 
· · · 
k
k
k
k
k
x 2  +
x k 
+ 
, 0, 0, 0, . . . 
+ 
x + 
, 
, 
, . . . , 
0
1
2 
0
1 
2 
k 
k 
� � 
(1 + x)k 
= 
� � 
Thus, the coefﬁcient of xn  in (1 + x)k  is  k  , the number of ways to choose n dis­
n 
tinct items from a set of size k . For example, the coefﬁcient of x2  is  k 
2  , the number 
of ways  to choose 2  items  from a  set with k  elements.  Similarly,  the coefﬁcient of 
xk+1  is the number of ways to choose k + 1 items from a size k  set, which is zero. 
(Watch  out  for  this  reversal  of  the  roles  that  k  and  n  played  in  earlier  examples; 
we’re led to this reversal because we’ve been using n to refer to the power of x in 
a power series.) 

17.3.2  Building Generating Functions that Count 
Often we  can  translate  the description  of  a  counting problem directly  into  a  gen­
erating  function  for  the  solution.  For  example, we  could  ﬁgure  out  that  (1 + x)k 
generates the number of ways to select n distinct items from a k-element set with­
out resorting to the Binomial Theorem or even fussing with binomial coefﬁcients! 
Here is how.  First, consider a single-element set {a1 }.  The generating function 
for the number of ways to select n elements from this set is simply 1 + x: we have 1 
way to select zero elements, 1 way to select one element, and 0 ways to select more 
than one element.  Similarly, the number of ways to select n elements from the set 
{a2 } is also given by the generating function 1 + x. The fact that the elements differ 
in the two cases is irrelevant. 

17.3.  COUNTING WITH GENERATING FUNCTIONS 

399 

· 

= 

= 1 + 2x + x 2 

= 

Now  here  is  the main  trick:  the  generating  function  for  choosing  elements  from  a 
union of disjoint sets is the product of the generating functions for choosing from each set. 
We’ll justify this in a moment, but let’s ﬁrst look at an example.  According to this 
principle, the generating function for the number of ways to select n elements from 
the {a1 , a2 } is: 
� �� � 
�  ��  � 
� �� � 
(1 + x)2 
(1 + x) 
(1 + x) 
gen func for

gen func for 
gen func for 
selecting an a2 
selecting from

selecting an a1 
{a1 , a2 }

Sure enough, for the set {a1 , a2 }, we have 1 way to select zero elements, 2 ways to 
select  one  element,  1 way  to  select  two  elements,  and  0 ways  to  select more  than 
two elements. 
Repeated  application  of  this  rule gives  the  generating  function  for  selecting n 
items from a k-element set {a1 , a2 , . . . , ak }: 
� �� � 
� �� � 
�  ��  � 
� ��  � 
· 
· · · 
(1 + x)k 
(1 + x) 
(1 + x) 
(1 + x) 
gen func for 
gen func for 
gen func for 
gen func for 
selecting from 
selecting an ak 
selecting an a2 
selecting an a1 
{a1 , a2 , . . . , ak } 
This is the same generating function that we obtained by using the Binomial Theo­
rem. But this time around we translated directly from the counting problem to the 
generating function. 
We can extend these ideas to a general principle: 
Rule  16  (Convolution  Rule).  Let  A(x)  be  the  generating  function  for  selecting  items 
from  set A,  and  let B (x)  be  the  generating  function  for  selecting  items  from  set B .  If A
and B  are disjoint, then the generating function for selecting items from the union A ∪ B 
· 
is the product A(x)  B (x).
This  rule  is  rather ambiguous:  what  exactly are  the  rules governing  the  selec­
tion of  items  from  a  set?  Remarkably,  the Convolution Rule  remains valid under 
many  interpretations of selection.  For example, we could  insist  that distinct  items 
be  selected  or  we  might  allow  the  same  item  to  be  picked  a  limited  number  of 
times or any number of  times.  Informally,  the only restrictions are  that  (1)  the or­
der in which items are selected is disregarded and (2) restrictions on the selection 
of  items  from  sets A  and  B  also  apply  in  selecting  items  from A ∪ B .  (Formally, 
there  must  be  a  bijection  between  n-element  selections  from  A ∪ B  and  ordered 
pairs of selections from A and B containing a total of n elements.) 
To count the number of ways to select n items from A ∪ B , we observe that we 
can select n  items by choosing j  items from A and n − j  items from B , where j  is 
any number  from 0  to n.  This can be done  in aj bn−j  ways.  Summing over all  the 
possible values of j  gives a total of 
a0 bn  + a1 bn−1  + a2 bn−2  +

· · · 
+ an b0

400 

CHAPTER 17.  GENERATING FUNCTIONS 

ways to select n items from A ∪ B . By the Product Rule, this is precisely the coefﬁ­
cient of xn  in the series for A(x)B (x). 

17.3.3  Choosing Items with Repetition 
The  ﬁrst  counting  problem  we  considered  was  the  number  of  ways  to  select  a 
dozen doughnuts when ﬁve ﬂavors were  available.  We  can  generalize  this ques­
tion  as  follows:  in  how many ways  can we  select  n  items  from  a  k-element  set  if 
we’re allowed to pick the same item multiple times?  In these terms, the doughnut 
problem asks  in how many ways we can select n  =  12 doughnuts  from  the set of 
k = 5 ﬂavors 
{chocolate, lemon-ﬁlled, sugar, glazed, plain} 
where, of course, we’re allowed to pick several doughnuts of the same ﬂavor. Let’s 
approach this question from a generating functions perspective. 
Suppose we make n choices  (with repetition allowed) of  items  from a set con­
taining  a  single  item.  Then  there  is  one  way  to  choose  zero  items,  one  way  to 
choose one item, one way to choose two items, etc.  Thus, the generating function 
for choosing n elements with repetition from a 1-element set is: 
1 + x + x 2  + x 3  + · · · 
�1, 1, 1, 1, . . . �  ←→ 
1 
= 
1 − x 
The Convolution Rule says that the generating function for selecting items from 
a union of disjoint sets is the product of the generating functions for selecting items 
from each set: 
� �� � 
� �� � 
� �� � 
�  ��  � 
1 
1 
1
1
(1 − x)k 
1 − x 
1 − x 
1 − x 
gen func for 
gen func for 
gen func for 
gen func for 
choosing ak ’s 
choosing a2 ’s 
choosing a1 ’s 
repeated choice from 
{a1 , a2 , . . . , ak } 

· · · 

· 

= 

Therefore,  the  generating  function  for  choosing  items  from  a  k-element  set  with 
repetition allowed is 1/(1 − x)k . 
Now  the Bookkeeper Rule  tells us  that  the number of ways  to  choose n  items 
� 
� 
with repetition from an k element set is 
n + k − 1 
, 
n 
so this is the coefﬁcient of xn  in the series expansion of 1/(1 − x)k . 
On the other hand, it’s instructive to derive this coefﬁcient algebraically, which 
we can do using Taylor ’s Theorem: 

17.3.  COUNTING WITH GENERATING FUNCTIONS 

401 

f (x) = f (0) + f � (0)x + 

Theorem 17.3.1 (Taylor ’s Theorem). 
f ���
f ��
(0) 
(0) 
(0) 
)
f (n
x 3  + · · · + 
x n  + · · ·  . 
x 2  + 
!
3!
2!
n
This theorem says that the nth coefﬁcient of 1/(1 − x)k  is equal to its nth deriva­
tive evaluated at 0 and divided by n!.  Computing the nth derivative turns out not 
to be very difﬁcult (Problem 17.7). 

17.3.4  Problems 
Practice Problems 

Problem 17.6. 
You would  like  to  buy  a  bouquet  of  ﬂowers.  You  ﬁnd  an  online  service  that will 
make bouquets of lilies, roses and tulips, subject to the following constraints: 

•  there must be at most 3 lilies, 

•  there must be an odd number of tulips, 

•  there can be any number of roses. 

Example: A bouquet of 3 tulips, 5 roses and no lilies satisﬁes the constraints. 
Let fn  be the number of possible bouquets with n ﬂowers that ﬁt the service’s 
constraints. Express F (x), the generating function corresponding to �f0 , f1 , f2 , . . . �, 
as a quotient of polynomials (or products of polynomials). You do not need to sim­
plify this expression. 

Class Problems 
�
Problem 17.7. 
∞ 
Let A(x) = 
n=0 anxn . Then it’s easy to check that 

A(n) (0) 
, 
n! 
where A(n)  is the nth derivative of A. Use this fact (which you may assume) instead 
∞ � 
n + k − 1� 
� 
of the Convolution Counting Principle, to prove that 
n
x . 
k − 1 
n=0 

1 
(1 − x)k 

an  = 

= 

So  if  we  didn’t  already  know  the  Bookkeeper  Rule,  we  could  have  proved  it 
from this calculation and the Convolution Rule for generating functions. 

402 

CHAPTER 17.  GENERATING FUNCTIONS 

Problem 17.8. 
We are interested in generating functions for the number of different ways to com­
pose a bag of n donuts  subject  to various  restrictions.  For each of  the  restrictions 
in (a)-(e) below, ﬁnd a closed form for the corresponding generating function. 
(a)  All the donuts are chocolate and there are at least 3. 

(b)  All the donuts are glazed and there are at most 2. 

(c)  All the donuts are coconut and there are exactly 2 or there are none. 

(d)  All the donuts are plain and their number is a multiple of 4. 

(e)  The donuts must be chocolate, glazed, coconut, or plain and: 

•  there must be at least 3 chocolate donuts, and 
•  there must be at most 2 glazed, and 
•  there must be exactly 0 or 2 coconut, and 
•  there must be a multiple of 4 plain. 

(f)  Find  a  closed  form  for  the  number  of ways  to  select  n  donuts  subject  to  the 
constraints of the previous part. 

Problem 17.9.  (a)  Let 

S (x) ::= 

x2  + x 
(1 − x)3 
.
What is the coefﬁcient of xn  in the generating function series for S (x)? 
�
(b)  Explain why S (x)/(1 − x) is the generating function for the sums of squares. 
That is, the coefﬁcient of xn  in the series for S (x)/(1 − x) is 
n  k2 .
k=1 
n� 
(c)  Use the previous parts to prove that 
k2  = 
k=1 

n(n + 1)(2n + 1) 
. 
6 

Homework Problems 

Problem 17.10. 
We  will  use  generating  functions  to  determine  how  many  ways  there  are  to  use 
pennies, nickels, dimes, quarters, and half-dollars to give n cents change. 
(a)  Write the sequence Pn  for the number of ways to use only pennies to change 
n cents. Write the generating function for that sequence. 

(b)  Write the sequence Nn  for the number of ways to use only nickels to change n 
cents. Write the generating function for that sequence. 

17.4.  AN “IMPOSSIBLE” COUNTING PROBLEM 

403 

(c)  Write the generating function for the number of ways to use only nickels and 
pennies to change n cents. 

(d)  Write the generating function for the number of ways to use pennies, nickels, 
dimes, quarters, and half-dollars to give n cents change. 

(e)  Explain  how  to  use  this  function  to  ﬁnd  out  how  many  ways  are  there  to 
change  50  cents;  you do  not have  to provide  the  answer  or  actually  carry  out  the 
process. 

Exam Problems 

Problem 17.11. 
The  working  days  in  the  next  year  can  be  numbered  1,  2,  3,  . . . ,  300.  I’d  like  to 
avoid as many as possible. 

•	 On even-numbered days, I’ll say I’m sick. 

•	 On days that are a multiple of 3, I’ll say I was stuck in trafﬁc. 

•	 On days that are a multiple of 5, I’ll refuse to come out from under the blan­
kets. 

In total, how many work days will I avoid in the coming year? 

Problem 17.12. 
Deﬁne the sequence r0 , r1 , r2 , . . .  recursively by the rule that r0  = r1  = 0 and 

rn  = 7rn−1  + 4rn−2  + (n + 1), 
for n  ≥  2.  Express  the generating  function of  this sequence as a quotient of poly­
nomials  or  products  of  polynomials.  You  do  not  have  to  ﬁnd  a  closed  form  for 
rn . 

Problem 17.13. 
Find the coefﬁcients of x10 y5  in (19x + 4y)15 

17.4  An “Impossible” Counting Problem 

So  far  everything we’ve done with  generating  functions we  could have done  an­
other way.  But here  is an absurd counting problem— really over  the  top!  In how 
many ways can we ﬁll a bag with n fruits subject to the following constraints? 

•	 The number of apples must be even. 

404 

CHAPTER 17.  GENERATING FUNCTIONS 

•  The number of bananas must be a multiple of 5. 

•  There can be at most four oranges. 

•  There can be at most one pear.


For example, there are 7 ways to form a bag with 6 fruits:

6  4  4  2  2  0  0 
Apples 
Bananas  0  0  0  0  0  5  5 
Oranges  0  2  1  4  3  1  0 
0  0  1  0  1  0  1 
Pears 

These  constraints  are  so  complicated  that  the  problem  seems  hopeless!  But  let’s 
see what generating functions reveal. 
Let’s ﬁrst construct a generating function for choosing apples. We can choose a 
set of 0 apples in one way, a set of 1 apple in zero ways (since the number of apples 
must be even), a set of 2 apples  in one way, a set of 3 apples  in zero ways, and so 
forth.  So we have: 

· · · 

A(x) = 1 + x 2  + x 4  + x 6  +

1 
1 − x2 
Similarly, the generating function for choosing bananas is: 
1 
· · · 
1 − x5 
Now,  we  can  choose  a  set  of  0  oranges  in  one way,  a  set  of  1  orange  in  one way, 
and  so  on.  However, we  can not  choose more  than  four  oranges,  so we have  the 
generating function: 

B (x) = 1 + x 5  + x 10  + x 15  +

= 

= 

1 − x5 
1 − x 
Here we’re using the geometric sum formula.  Finally, we can choose only zero or 
one pear, so we have: 

O(x) = 1 + x + x 2  + x 3  + x 4  =

P (x) = 1 + x 
The Convolution Rule says that the generating function for choosing from among 
all four kinds of fruit is: 

A(x)B (x)O(x)P (x) = 

1 − x5 
1
1 
(1 + x)
1 − x2  1 − x5  1 − x 
1 
= 
(1 − x)2 
= 1 + 2x + 3x 2  + 4x 3  + · · · 
Almost  everything  cancels!  We’re  left with  1/(1 − x)2 ,  which we  found  a  power 
series for earlier:  the coefﬁcient of xn  is simply n + 1. Thus, the number of ways to 
form a bag of n fruits is just n + 1.  This is consistent with the example we worked 
out, since there were 7 different fruit bags containing 6 fruits. Amazing! 

17.4.  AN “IMPOSSIBLE” COUNTING PROBLEM 

405 

17.4.1  Problems 
Homework Problems 

Problem 17.14. 
Miss McGillicuddy never goes outside without a collection of pets.  In particular: 

•  She brings a positive number of songbirds, which always come in pairs. 

•  She may or may not bring her alligator, Freddy. 

•  She brings at least 2 cats. 

•  She brings two or more chihuahuas and labradors leashed together in a line. 

Let Pn  denote the number of different collections of n pets that can accompany 
her, where we  regard chihuahuas and  labradors  leashed up  in different orders as 
different collections, even if there are the same number chihuahuas and labradors 
leashed in the line. 
For example, P6  = 4 since there are 4 possible collections of 6 pets: 

•  2 songbirds, 2 cats, 2 chihuahuas leashed in line 

•  2 songbirds, 2 cats, 2 labradors leashed in line 

•  2 songbirds, 2 cats, a labrador leashed behind a chihuahua 

•  2 songbirds, 2 cats, a chihuahua leashed behind a labrador 

And P7  = 16 since there are 16 possible collections of 7 pets: 

•  2 songbirds, 3 cats, 2 chihuahuas leashed in line 

•  2 songbirds, 3 cats, 2 labradors leashed in line 

•  2 songbirds, 3 cats, a labrador leashed behind a chihuahua 

•  2 songbirds, 3 cats, a chihuahua leashed behind a labrador 

•  4 collections consisting of 2 songbirds, 2 cats, 1 alligator, and a line of 2 dogs 

•  8 collections consisting of 2 songbirds, 2 cats, and a line of 3 dogs. 

(a)  Let 

P (x) ::= P0  + P1x + P2x 2  + P3x 3  + · · · 
be the generating function for the number of Miss McGillicuddy’s pet collections. 
Verify that 

P (x) = 

(b)  Find a simple formula for Pn . 

4x6 
(1 − x)2 (1 − 2x) 
.

406 

CHAPTER 17.  GENERATING FUNCTIONS 

Problem 17.15. 
Generating functions provide an interesting way to count the number of strings of 
matched  parentheses.  To  do  this,  we’ll  use  the  description  of  these  strings  given 
in Deﬁnition  11.1.2  as  the  set,  GoodCount,  of  strings  of  parentheses with  a  good 
count.  Let cn  be the number of strings in GoodCount with exactly n left parenthe­
ses, and let C (x) be the generating function for these numbers: 
C (x) ::= c0  + c1x + c2x 2  + · · ·  . 
(a)  The  wrap  of  a  string,  s,  is  the  string,  (s),  that  starts  with  a  left  parenthesis 
followed  by  the  characters  of  s,  and  then  ends with  a  right  parenthesis.  Explain 
why the generating function for the wraps of strings with a good count is xC (x). 
Hint:  The wrap of a  string with good  count also has a good  count  that  starts and 
ends with 0 and remains positive everywhere else. 

(b)  Explain why, for every string, s, with a good count, there is a unique sequence 
s1  · · · 
of  strings  s1 , . . . , sk  that  are wraps  of  strings with  good  counts  and  s  = 
sk .
For  example,  the  string  r  ::= (())()(()())  ∈  GoodCount  equals  s1 s2 s3  where  s1  = 
(()), s2  =  (), s3  =  (()()),  and  this  is  the  only  way  to  express  r  as  a  sequence  of 
wraps of strings with good counts. 

(17.10) 

(17.11)

(17.12)

(17.13)

(c)  Conclude that 

C  = 1 + xC + (xC )2  + · · · + (xC )n  + · · ·  , 

so 

and hence 

, 

1 
C  = 
1 − xC 
1 ± √
1 − 4x 
2x 

Let D(x) ::= 2xC (x). Expressing D as a power series

D(x) = d0  + d1x + d2x 2  + · · ·  , 

C  = 

. 

we have 

(e)  Prove that 

dn+1 . 
cn  = 
2 
(d)  Use (17.12), (17.13), and the value of c0  to conclude that 
D(x) = 1 − √
1 − 4x. 
(2n − 3) · (2n − 5) · · · 5 · 3 · 1 · 2n 
.
n! 
� �
2n 
1
n + 1  n 

(f)  Conclude that 

Hint:  dn  = D(n) (0)/n! 

cn  = 

. 

dn 

= 

17.4.  AN “IMPOSSIBLE” COUNTING PROBLEM 

407 

Exam Problems 

Problem 17.16. 
T-Pain is planning an epic boat trip and he needs to decide what to bring with him. 

•	 He deﬁnitely wants to bring burgers, but they only come in packs of 6. 

•	 He and his  two friends can’t decide whether  they want  to dress formally or 
casually. He’ll either bring 0 pairs of ﬂip ﬂops or 3 pairs. 

•	 He doesn’t have very much  room  in his suitcase  for  towels,  so he can bring 
at most 2. 

•	 In order  for  the boat  trip  to be  truly epic, he has  to bring at  least 1 nautical­
themed pashmina afghan. 
�
(a)  Let gn  be the the number of different ways for T-Pain to bring n items (burgers, 
pairs of ﬂip ﬂops, towels, and/or afghans) on his boat trip. Express the generating 
∞ 
function G(x) ::= 
n=0 gnxn  as a quotient of polynomials. 
(b)  Find a closed formula in n for the number of ways T-Pain can bring exactly n 
items with him. 

408 

CHAPTER 17.  GENERATING FUNCTIONS 

MIT OpenCourseWare
http://ocw.mit.edu 

6.042J / 18.062J Mathematics for Computer Science 
Spring 2010 

For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms . 

