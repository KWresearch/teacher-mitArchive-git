Chapter 5 

First-Order Logic 

5.1  Quantiﬁers 

There are a couple of assertions commonly made about a predicate:  that it is some­
times true and that it is always true.  For example, the predicate 
“x 2  ≥ 0” 

is always true when x is a real number. On the other hand, the predicate 
� 
“5x 2  − 7 = 0” 
is only sometimes true; speciﬁcally, when x = ±  7/5. 
There are several ways to express the notions of “always true” and “sometimes 
true”  in English.  The table below gives some general formats on the  left and spe­
ciﬁc examples using those formats on the right. You can expect to see such phrases 
hundreds of times in mathematical writing! 

For all n, P (n) is true. 
P (n) is true for every n. 

Always True 
For all x ∈ R, x2  ≥ 0. 
x2  ≥ 0 for every x ∈ R. 
Sometimes True 
There exists an n such that P (n) is true.  There exists an x ∈ R such that 5x2  − 7 = 0.

5x2  − 7 = 0 for some x ∈ R.

P (n) is true for some n. 
5x2  − 7 = 0 for at least one x ∈ R.

P (n) is true for at least one n. 
All  these  sentences  quantify  how  often  the  predicate  is  true.  Speciﬁcally,  an 
assertion that a predicate is always true is called a universal quantiﬁcation, and an 
assertion  that a predicate  is  sometimes  true  is an  existential quantiﬁcation.  Some­
times the English sentences are unclear with respect to quantiﬁcation: 

73 

74 

CHAPTER 5.  FIRST-ORDER LOGIC 

“If you can solve any problem we come up with, then you get an A for the 
course.” 

The phrase “you  can  solve any problem we  can  come up with”  could  reasonably 
be interpreted as either a universal or existential quantiﬁcation: 

“you can solve every problem we come up with,” 

or maybe 

“you can solve at least one problem we come up with.” 

In any case, notice that this quantiﬁed phrase appears inside a larger if-then state­
ment. This is quite normal; quantiﬁed statements are themselves propositions and 
can be combined with and, or, implies, etc., just like any other proposition. 

5.1.1  More Cryptic Notation 
There  are  symbols  to  represent  universal  and  existential  quantiﬁcation,  just  as 
there  are  symbols  for  “and”  (∧),  “implies”  (−→),  and  so  forth.  In  particular,  to 
say that a predicate, P , is true for all values of x in some set, D , one writes: 
∀x ∈ D . P (x) 
The symbol ∀ is read “for all”, so this whole expression is read “for all x in D , P (x) 
is  true”.  To  say  that  a  predicate P (x)  is  true  for  at  least  one  value  of  x  in D ,  one 
writes: 
∃x ∈ D . P (x) 
The backward-E, ∃, is read “there exists”. So this expression would be read, “There 
exists an x in D such that P (x) is true.”  The symbols ∀ and ∃ are always followed 
by a variable —usually with an indication of the set the variable ranges over —and 
then a predicate, as in the two examples above. 
As an example, let Probs be the set of problems we come up with, Solves(x) be 
the predicate “You can solve problem x”, and G be the proposition, “You get an A 
for the course.” Then the two different interpretations of 

“If you can solve any problem we come up with, then you get an A for 
the course.” 

can be written as follows: 
(∀x ∈ Probs. Solves(x)) IM P L I E S G, 

or maybe 

(∃x ∈ Probs. Solves(x)) IM P L I E S G. 

5.1.  QUANTIFIERS 

75 

5.1.2  Mixing Quantiﬁers 
Many  mathematical  statements  involve  several  quantiﬁers.  For  example,  Gold­
bach’s Conjecture states: 

“Every even integer greater than 2 is the sum of two primes.” 

Let’s write this more verbosely to make the use of quantiﬁcation clearer: 

For every even integer n greater than 2, there exist primes p and q such 
that n = p + q . 

Let  Evens  be  the  set  of  even  integers  greater  than  2,  and  let  Primes  be  the  set  of 
primes. Then we can write Goldbach’s Conjecture in logic notation as follows: 
�
��
� � 
�� 
� 
∀n ∈ Evens  ∃p ∈ Primes ∃q ∈ Primes. n = p + q . 
for every even 
there exist primes 
integer n >  2 
p and q such that 

5.1.3  Order of Quantiﬁers 
Swapping the order of different kinds of quantiﬁers (existential or universal) usu­
ally changes the meaning of a proposition.  For example,  let’s return to one of our 
initial, confusing statements: 

“Every American has a dream.” 

This sentence is ambiguous because the order of quantiﬁers is unclear. Let A be 
the  set of Americans,  let D  be  the  set of dreams,  and deﬁne  the predicate H (a, d) 
to be “American a has dream d.”.  Now  the  sentence could mean  there  is a  single 
dream that every American shares: 
∃ d ∈ D ∀a ∈ A. H (a, d) 

For  example,  it might  be  that  every  American  shares  the  dream  of  owning  their 
own home. 
Or it could mean that every American has a personal dream: 
∀a ∈ A ∃ d ∈ D . H (a, d) 

For  example,  some Americans may  dream  of  a  peaceful  retirement,  while  others 
dream of continuing practicing their profession as long as they live, and still others 
may dream of being so rich they needn’t think at all about work. 
Swapping  quantiﬁers  in  Goldbach’s  Conjecture  creates  a  patently  false  state­
ment that every even number ≥ 2 is the sum of the same two primes: 
� �
��
� 
� 
�� 
∃ p ∈ Primes ∃ q ∈ Primes  ∀n ∈ Evens. n = p + q . 
for every even 
there exist primes 
integer n >  2 
p and q such that 

76 

CHAPTER 5.  FIRST-ORDER LOGIC 

Variables Over One Domain 

When  all  the variables  in  a  formula  are understood  to  take values  from  the  same 
nonempty set, D ,  it’s conventional to omit mention of D .  For example,  instead of 
∀x  ∈  D  ∃y  ∈  D .  Q(x, y) we’d write  ∀x∃y .  Q(x, y).  The  unnamed  nonempty  set 
that x and y  range over is called the domain of discourse, or just plain domain, of the 
formula. 
It’s  easy  to  arrange  for  all  the variables  to  range  over  one domain.  For  exam­
ple, Goldbach’s Conjecture could be expressed with all variables ranging over the 
domain N as 
∀n. n ∈ Evens IM P L I E S  (∃ p∃ q . p ∈ Primes ∧ q ∈ Primes ∧ n = p + q). 

5.1.4  Negating Quantiﬁers 
There is a simple relationship between the two kinds of quantiﬁers. The following 
two sentences mean the same thing: 

It is not the case that everyone likes to snowboard. 
There exists someone who does not like to snowboard. 

In terms of logic notation, this follows from a general property of predicate formu­
las: 
NO T ∀x. P (x)  is equivalent to  ∃x.  NO T P (x). 
Similarly, these sentences mean the same thing: 

There does not exist anyone who likes skiing over magma. 
Everyone dislikes skiing over magma. 

We can express the equivalence in logic notation this way: 
(NO T ∃x. P (x)) I FF ∀x.  NO T P (x). 

(5.1) 

The  general  principle  is  that  moving  a  “not”  across  a  quantiﬁer  changes  the  kind  of 
quantiﬁer. 

5.1.5  Validity 
A propositional formula is called valid when it evaluates to T no matter what truth 
values  are  assigned  to  the  individual  propositional  variables.  For  example,  the 
propositional version of the Distributive Law is that P  AND (Q OR R) is equivalent 
to (P  AND Q) OR  (P  AND R). This is the same as saying that 

[P  AND  (Q OR R)] I FF  [(P  AND Q) OR  (P  AND R)] 

is valid. 

5.1.  QUANTIFIERS 

77 

The  same  idea  extends  to  predicate  formulas,  but  to  be  valid,  a  formula  now 
must  evaluate  to  true  no matter what  values  its  variables may  take  over  any  un­
speciﬁed domain,  and no matter what  interpretation a predicate variable may be 
given.  For example, we already observed that the rule for negating a quantiﬁer is 
captured by the valid assertion (5.1). 
Another useful example of a valid assertion is 
∃x∀y . P (x, y) IM P L I E S ∀y∃x. P (x, y). 

(5.2) 

Here’s an explanation why this is valid: 

(5.3) 

Let D be the domain for the variables and P0  be some binary predicate1 
on D . We need to show that if 
∃x ∈ D ∀y ∈ D . P0 (x, y) 
holds under this interpretation, then so does 
∀y ∈ D  ∃x ∈ D . P0 (x, y). 
(5.4) 
So suppose (5.3)  is true.  Then by deﬁnition of ∃,  this means that some 
element d0  ∈ D has the property that 
∀y ∈ D . P0 (d0 , y). 
By deﬁnition of ∀, this means that 
P0 (d0 , d) 
is  true  for  all  d  ∈  D .  So  given  any  d  ∈  D ,  there  is  an  element  in  D , 
namely,  d0 ,  such  that  P0 (d0 , d)  is  true.  But  that’s  exactly  what  (5.4) 
means,  so  we’ve  proved  that  (5.4)  holds  under  this  interpretation,  as 
required. 

We  hope  this  is  helpful  as  an  explanation,  but  we  don’t  really  want  to  call  it 
a  “proof.”  The  problem  is  that  with  something  as  basic  as  (5.2),  it’s  hard  to  see 
what more  elementary  axioms  are  ok  to  use  in  proving  it.  What  the  explanation 
above did was  translate  the  logical  formula  (5.2)  into English  and  then  appeal  to 
the  meaning,  in  English,  of  “for  all”  and  “there  exists”  as  justiﬁcation.  So  this 
wasn’t a proof,  just an explanation that once you understand what (5.2) means,  it 
becomes obvious. 
In contrast to (5.2), the formula 
∀y∃x. P (x, y) IM P L I E S ∃x∀y . P (x, y). 

(5.5) 

is not valid.  We  can prove  this  just by describing an  interpretation where  the hy­
pothesis,  ∀y∃x.  P (x, y),  is  true  but  the  conclusion,  ∃x∀y .  P (x, y),  is  not  true.  For 
1 That is, a predicate that depends on two variables. 

78 

CHAPTER 5.  FIRST-ORDER LOGIC 

example,  let  the  domain  be  the  integers  and  P (x, y)  mean  x > y .  Then  the  hy­
pothesis would be true because, given a value, n, for y we could choose the value 
of x  to be n + 1,  for example.  But under  this  interpretation  the conclusion asserts 
that there is an integer that is bigger than all integers, which is certainly false.  An 
interpretation  like  this which  falsiﬁes  an  assertion  is  called  a  counter model  to  the 
assertion. 

5.1.6  Problems 
Class Problems 

Problem 5.1. 
A media  tycoon  has  an  idea  for  an  all-news  television  network  called  LNN:  The 
Logic News Network.  Each segment will begin with a deﬁnition of the domain of 
discourse and a few predicates.  The day’s happenings can then be communicated 
concisely in logic notation.  For example, a broadcast might begin as follows: 
“THIS IS LNN. The domain of discourse is {Albert, Ben, Claire, David, Emily}. 
Let D(x) be a predicate that is true if x is deceitful. Let L(x, y) be a pred­
icate  that  is  true  if x  likes y .  Let G(x, y) be a predicate  that  is  true  if x 
gave gifts to y .” 

Translate the following broadcasted logic notation into (English) statements. 
(a) 

( (D(Ben) ∨ D(David))) −→ (L(Albert, Ben) ∧ L(Ben, Albert))
¬

(b) 

(c) 

(d) 

∀x (x = Claire ∧ ¬L(x, Emily)) ∨ (x =� Claire ∧ L(x, Emily)) ∧ 
∀x (x = David ∧ L(x, Claire)) ∨ (x =� David ∧ ¬L(x, Claire)) 

¬D(Claire) −→ (G(Albert, Ben) ∧ ∃ xG(Ben, x)) 

∀x∃y∃z  (y =�

z ) ∧ L(x, y) ∧ ¬L(x, z ) 

(e)  How  could  you  express  “Everyone  except  for  Claire  likes  Emily”  using  just 
propositional connectives without using any quantiﬁers (∀, ∃)? Can you generalize 
to explain how any logical formula over this domain of discourse can be expressed 
without quantiﬁers?  How big would the formula in the previous part be if it was 
expressed this way? 

5.1.  QUANTIFIERS 

79 

Problem 5.2. 
The  goal  of  this  problem  is  to  translate  some  assertions  about  binary  strings  into 
logic notation. The domain of discourse is the set of all ﬁnite-length binary strings: 
λ,  0,  1,  00,  01,  10,  11,  000,  001,  . . . .  (Here  λ  denotes  the  empty  string.)  In  your 
translations,  you may use  all  the  ordinary  logic  symbols  (including =),  variables, 
and the binary symbols 0, 1 denoting 0, 1. 
A  string  like  01x0y  of  binary  symbols  and  variables  denotes  the  concatenation 
of  the  symbols  and  the binary  strings  represented by  the variables.  For  example, 
if  the value of x  is 011 and  the value of y  is 1111,  then  the value of 01x0y  is  the 
binary string 0101101111. 
Here are some examples of formulas and their English translations. Names for 
these predicates are  listed  in the third column so that you can reuse them  in your 
solutions (as we do in the deﬁnition of the predicate NO -1 S  below). 

Meaning 
x is a preﬁx of y 
x is a substring of y 
x is empty or a string of 0’s 

Formula 
∃z  (xz = y) 
∃u∃v (uxv = y) 
NOT(SU B S TR ING(1, x)) 

Name 
PR E FIX (x, y ) 
SU B S TR ING (x, y ) 
NO -1 S (x) 

(a)  x consists of three copies of some string. 

(b)  x is an even-length string of 0’s. 

(c)  x does not contain both a 0 and a 1. 
(d)  x is the binary representation of 2k  + 1 for some integer k ≥ 0. 
(e)  An elegant, slightly trickier way to deﬁne NO -1 S(x) is: 

Explain why (*) is true only when x is a string of 0’s. 

PR E FIX(x, 0x). 

(*) 

Problem 5.3. 
For  each  of  the  logical  formulas,  indicate  whether  or  not  it  is  true  when  the  do­
main  of  discourse  is  N,  (the  nonnegative  integers  0,  1,  2,  . . . ),  Z  (the  integers),  Q 
(the  rationals),  R  (the  real  numbers),  and  C  (the  complex  numbers).  Add  a  brief 
explanation to the few cases that merit one. 
∃x 
∀x  ∃y 
∀y  ∃x 
∃y 
= 0 
∃x  ∃y 

(x2  =  2) 
(x2  =  y) 
(x2  =  y) 
(xy  =  1)
(x + 2y  =  2) ∧ (2x + 4y = 5) 

∀x  �

80 

CHAPTER 5.  FIRST-ORDER LOGIC 

Problem 5.4. 
Show that 

(∀x∃y . P (x, y)) −→ ∀z . P (z , z ) 
is not valid by describing a counter-model. 

Homework Problems 

Problem 5.5. 
Express each of the following predicates and propositions in formal logic notation. 
The domain of discourse  is  the nonnegative  integers, N.  Moreover,  in addition  to 
the propositional operators,  variables  and quantiﬁers,  you may deﬁne predicates 
using addition, multiplication, and equality symbols, but no constants (like 0, 1,. . . ) 
and no exponentiation (like xy ). For example, the proposition “n is an even number ” 
could be written 
∃m. (m + m = n). 
(a)  n is the sum of two fourth-powers (a fourth-power is k4  for some integer k). 
Since  the  constant  0  is not  allowed  to  appear  explicitly,  the predicate  “x  = 0” 
can’t be written directly, but note that it could be expressed in a simple way as: 
x + x = x. 
Then the predicate x > y could be expressed 
∃w. (y + w = x) ∧ (w = 0)
. 
Note  that  we’ve  used  “w  =�
0”  in  this  formula,  even  though  it’s  technically  not 
” is equivalent to the allowed formula “¬(w + w = w),” 
allowed.  But since “w = 0
we can use “w = 0
” with the understanding that it abbreviates the real thing. And 
now that we’ve shown how to express “x > y ,” it’s ok to use it too. 
(b)  x = 1. 
(c)  m is a divisor of n (notation: m  | n) 
(d)  n is a prime number (hint: use the predicates from the previous parts) 

(e)  n is a power of 3. 

Problem 5.6. 
Translate the following sentence into a predicate formula: 
There  is  a  student  who  has  emailed  exactly  two  other  people  in  the 
class, besides possibly herself. 
The domain of discourse should be the set of students in the class; in addition, 
the only predicates that you may use are 
•  equality, and 
•  E (x, y), meaning that “x has sent e-mail to y .” 

�
�
�
5.2.  THE LOGIC OF SETS 

81 

5.2  The Logic of Sets 

5.2.1  Russell’s Paradox 
Reasoning  naively  about  sets  turns  out  to  be  risky.  In  fact,  one  of  the  earliest  at­
tempts to come up with precise axioms for sets by a late nineteenth century logican 
named  Gotlob  Frege was  shot  down  by  a  three  line  argument  known  as  Russell’s 
Paradox:2  This was an astonishing blow to efforts to provide an axiomatic founda­
tion for mathematics. 

Let S  be a variable ranging over all sets, and deﬁne 
W  ::= {S  | S  �∈ S } . 

So by deﬁnition, 

S  ∈ W  iff S  �∈ S, 
for every set S .  In particular, we can let S  be W , and obtain the contra­
dictory result that 
W  ∈ W  iff W  �∈ W. 

A way  out  of  the paradox was  clear  to Russell  and  others  at  the  time:  it’s  un­
justiﬁed to assume that W  is a set.  So the step in the proof where we let S  be W  has 
no  justiﬁcation,  because  S  ranges  over  sets,  and W  may  not  be  a  set.  In  fact,  the 
paradox implies that W  had better not be a set! 
But denying  that W  is  a  set means we must  reject  the very natural  axiom  that 
every mathematically well-deﬁned  collection of  elements  is  actually  a  set.  So  the 
problem  faced  by  Frege,  Russell  and  their  colleagues  was  how  to  specify  which 
well-deﬁned collections are sets. Russell and his fellow Cambridge University col­
league Whitehead immediately went to work on this problem. They spent a dozen 
years  developing  a  huge  new  axiom  system  in  an  even  huger monograph  called 
Principia Mathematica. 

5.2.2  The ZFC Axioms for Sets 
It’s  generally  agreed  that,  using  some  simple  logical  deduction  rules,  essentially 
all of mathematics can be derived from some axioms about sets called the Axioms 
of Zermelo-Frankel Set Theory with Choice (ZFC). 
We’re not going to be working with these axioms in this course, but we thought 

2 Bertrand Russell was  a mathematician/logician  at Cambridge University  at  the  turn of  the Twen­
tieth Century.  He  reported  that when he  felt  too old  to do mathematics,  he began  to  study  and write 
about philosophy, and when he was no longer smart enough to do philosophy, he began writing about 
politics.  He was jailed as a conscientious objector during World War I. For his extensive philosophical 
and political writing, he won a Nobel Prize for Literature. 

82 

CHAPTER 5.  FIRST-ORDER LOGIC 

you might like to see them –and while you’re at it, get some practice reading quan­
tiﬁed formulas: 

Extensionality.  Two sets are equal if they have the same members.  In formal log­
ical notation, this would be stated as: 
(∀z . (z  ∈ x I FF z  ∈ y)) IM P L I E S x = y . 
Pairing.  For  any  two  sets  x  and  y ,  there  is  a  set,  {x, y},  with  x  and  y  as  its  only 
elements: 
∀x, y . ∃u. ∀z .  [z  ∈ u I FF  (z = x OR z = y)] 

Union.  The union, u, of a collection, z , of sets is also a set: 
∀z . ∃u∀x. (∃y . x ∈ y AND y ∈ z ) I FF x ∈ u. 

Inﬁnity.  There  is an  inﬁnite set.  Speciﬁcally,  there  is a nonempty set, x, such that 
for any set y ∈ x, the set {y} is also a member of x. 
Power Set.  All the subsets of a set form another set: 
∀x. ∃p. ∀u. u ⊆ x I FF u ∈ p. 

Replacement.  Suppose a formula, φ, of set theory deﬁnes the graph of a function, 
that is, 
∀x, y , z . [φ(x, y) AND φ(x, z )] IM P L I E S y = z . 
Then the image of any set, s, under that function is also a set, t. Namely, 
∀s ∃t ∀y . [∃x. φ(x, y) I FF y ∈ t]. 

Foundation.  There cannot be an inﬁnite sequence 
· · · ∈ xn  ∈  · · · ∈ x1  ∈ x0 

of  sets  each  of  which  is  a  member  of  the  previous  one.  This  is  equivalent 
to  saying  every  nonempty  set  has  a  “member-minimal”  element.  Namely, 
deﬁne 
member-minimal(m, x) ::= [m ∈ x AND ∀y ∈ x. y  /∈ m]. 
Then the Foundation axiom is 
∅  IM P L I E S  ∃m. member-minimal(m, x). 
∀x. x =�

Choice.  Given a set, s, whose members are nonempty sets no  two of which have 
any  element  in  common,  then  there  is a  set,  c,  consisting of  exactly one  ele­
ment from each set in s. 

5.2.  THE LOGIC OF SETS 

83 

5.2.3  Avoiding Russell’s Paradox 
These modern ZFC axioms for set theory are much simpler than the system Russell 
and Whitehead ﬁrst  came up with  to  avoid paradox.  In  fact,  the ZFC  axioms  are 
as simple and intuitive as Frege’s original axioms, with one technical addition:  the 
Foundation axiom.  Foundation captures  the  intuitive  idea  that  sets must be built 
up  from  “simpler ”  sets  in  certain  standard ways.  And  in  particular,  Foundation 
implies that no set is ever a member of itself.  So the modern resolution of Russell’s 
paradox  goes  as  follows:  since  S  �∈  S  for  all  sets  S ,  it  follows  that  W ,  deﬁned 
above, contains every set.  This means W  can’t be a set —or it would be a member 
of itself. 

5.2.4  Power sets are strictly bigger 
It turns out that the ideas behind Russell’s Paradox, which caused so much trouble 
for the early efforts to formulate Set Theory,  lead to a correct and astonishing fact 
about inﬁnite sets:  they are not all the same size. 
In particular, 
Theorem 5.2.1.  For any set, A, the power set, P (A), is strictly bigger than A. 
Proof.  First of all, P (A) is as big as A:  for example, the partial function f  : P (A) →
A,  where  f ({a})  ::= a  for  a  ∈  A  and  f  is  only  deﬁned  on  one-element  sets,  is  a 
surjection. 
To show that P (A) is strictly bigger than A, we have to show that if g  is a func­
tion  from A  to P (A),  then  g  is not  a  surjection.  So, mimicking Russell’s Paradox, 
deﬁne 
Ag  ::= {a ∈ A  | a /∈ g(a)} . 
Now Ag  is  a well-deﬁned  subset  of A, which means  it  is  a member  of P (A).  But 
Ag  can’t be in the range of g , because if it were, we would have 
Ag  = g(a0 ) 
for some a0  ∈ A, so by deﬁnition of Ag , 
iff  a /∈ g(a) 
a ∈ g(a0 ) 
iff  a ∈ Ag 
for all a ∈ A. Now letting a = a0  yields the contradiction 
iff  a0  ∈/ g(a0 ). 
a0  ∈ g(a0 ) 
So g  is not a surjection, because there is an element in the power set of A, namely 
� 
the set Ag , that is not in the range of g . 

Larger Inﬁnities 

There are lots of different sizes of inﬁnite sets.  For example, starting with the inﬁ­
nite set, N, of nonnegative integers, we can build the inﬁnite sequence of sets 
N,  P (N),  P (P (N)),  P (P (P (N))),  . . . . 

84	

CHAPTER 5.  FIRST-ORDER LOGIC 

By Theorem 5.2.1,  each of  these  sets  is  strictly bigger  than all  the preceding ones. 
But that’s not all:  the union of all the sets in the sequence is strictly bigger than each 
set in the sequence (see Problem 5.7).  In this way you can keep going, building still 
bigger inﬁnities. 
So there is an endless variety of different size inﬁnities. 

5.2.5  Does All This Really Work? 
So this is where mainstream mathematics stands today:  there is a handful of ZFC 
axioms  from which  virtually  everything  else  in mathematics  can  be  logically  de­
rived. This sounds like a rosy situation, but there are several dark clouds, suggest­
ing that the essence of truth in mathematics is not completely resolved. 

•	 The ZFC axioms weren’t etched in stone by God.  Instead,  they were mostly 
made  up  by  some  guy  named  Zermelo.  Probably  some  days  he  forgot  his 
house keys. 
So  maybe  Zermelo,  just  like  Frege,  didn’t  get  his  axioms  right  and  will  be 
shot  down  by  some  successor  to  Russell  who  will  use  his  axioms  to  prove 
a proposition P  and  its negation NOT P .  Then math would be broken.  This 
sounds crazy, but after all, it has happened before. 
In  fact,  while  there  is  broad  agreement  that  the  ZFC  axioms  are  capable  of 
proving  all  of  standard  mathematics,  the  axioms  have  some  further  conse­
quences  that  sound  paradoxical.  For  example,  the  Banach-Tarski  Theorem 
says  that,  as  a  consequence  of  the  Axiom  of  Choice,  a  solid  ball  can  be  di­
vided  into  six  pieces  and  then  the  pieces  can  be  rigidly  rearranged  to  give 
two solid balls, each the same size as the original! 

•	 Georg Cantor was a contemporary of Frege and Russell who ﬁrst developed 
the  theory  of  inﬁnite  sizes  (because  he  thought  he  needed  it  in  his  study  of 
Fourier series).  Cantor raised the question whether there is a set whose size 
is strictly between the “smallest3” inﬁnite set, N, and P (N); he guessed not: 
Cantor ’s Continuum Hypothesis: There is no set, A, such that P (N) is strictly 
bigger than A and A is strictly bigger than N. 
The  Continuum  Hypothesis  remains  an  open  problem  a  century  later.  Its 
difﬁculty  arises  from  one  of  the  deepest  results  in  modern  Set  Theory  — 
discovered  in  part  by  G ¨odel  in  the  1930’s  and  Paul  Cohen  in  the  1960’s — 
namely,  the ZFC  axioms  are not  sufﬁcient  to  settle  the Continuum Hypoth­
esis:  there  are  two  collections  of  sets,  each obeying  the  laws of ZFC,  and  in 
one collection the Continuum Hypothesis is true, and in the other it is false. 
So settling the Continuum Hypothesis requires a new understanding of what 
Sets  should be  to  arrive  at persuasive new  axioms  that  extend ZFC  and  are 
strong enough to determine the truth of the Continuum Hypothesis one way 
or the other. 
3 See Problem 4.3 

5.2.  THE LOGIC OF SETS	

85 

•	 But  even  if we  use more  or  different  axioms  about  sets,  there  are  some  un­
avoidable problems.  In  the 1930’s, G ¨odel proved  that, assuming  that an ax­
iom  system  like  ZFC  is  consistent  —meaning  you  can’t  prove  both  P  and 
NO T P  for any proposition, P  —then the very proposition that the system is 
consistent  (which  is  not  too  hard  to  express  as  a  logical  formula)  cannot  be 
proved in the system.  In other words, no consistent system is strong enough 
to verify itself. 

5.2.6  Large Inﬁnities in Computer Science 
If the romance of different size inﬁnities and continuum hypotheses doesn’t appeal 
to  you,  not  knowing  about  them  is  not  going  to  lower  your  professional  abilities 
as  a  computer  scientist.  These  abstract  issues  about  inﬁnite  sets  rarely  come  up 
in  mainstream  mathematics,  and  they  don’t  come  up  at  all  in  computer  science, 
where the focus is generally on “countable,” and often just ﬁnite, sets.  In practice, 
only logicians and set theorists have to worry about collections that are too big to 
be sets.  In fact, at the end of the 19th century, the general mathematical community 
doubted  the  relevance of what  they  called  “Cantor ’s paradise” of unfamiliar  sets 
of arbitrary inﬁnite size. 
But  the  proof  that  power  sets  are  bigger  gives  the  simplest  form  of  what  is 
known  as  a  “diagonal  argument.”  Diagonal  arguments  are  used  to  prove  many 
fundamental  results  about  the  limitations  of  computation,  such  as  the  undecid­
ability  of  the  Halting  Problem  for  programs  (see  Problem  5.8)  and  the  inherent, 
unavoidable, inefﬁciency (exponential time or worse) of procedures for other com­
putational problems.  So computer scientists do need to study diagonal arguments 
in order to understand the logical limits of computation. 

5.2.7  Problems 
Class Problems 

Problem 5.7. 
There are lots of different sizes of inﬁnite sets.  For example, starting with the inﬁ­
nite set, N, of nonnegative integers, we can build the inﬁnite sequence of sets 
N,  P (N),  P (P (N)),  P (P (P (N))),  . . . . 
By  Theorem  5.2.1  from  the Notes,  each  of  these  sets  is  strictly  bigger4  than  all  the 
preceding ones.  But that’s not all:  if we  let U  be the union of the sequence of sets 
above, then U  is strictly bigger than every set in the sequence! Prove this: 
Lemma.  Let P n (N) be the nth set in the sequence, and 

∞
P n (N). 
U  ::= 
n=0 

4Reminder:  set A is strictly bigger than set B  just means that A  surj B , but NOT(B  surj A). 

86 

CHAPTER 5.  FIRST-ORDER LOGIC 

Then 
1.	 U  surj P n (N) for every n ∈ N, but 
2.  there is no n ∈ N for which P n (N) surj U . 
Now  of  course,  we  could  take  U, P (U ), P (P (U )), . . .  and  can  keep  on  indeﬁ­
nitely building still bigger inﬁnities. 

Problem 5.8. 
Let’s  refer  to  a  programming  procedure  (written  in  your  favorite  programming 
language —C++, or Java, or Python, . . . )  as a string procedure when it is applicable 
to data of  type string and only returns values of  type boolean.  When a string 
procedure, P ,  applied  to a string,  s,  returns True, we’ll  say  that P  recognizes s. 
If R is the set of strings that P  recognizes, we’ll call P  a recognizer for R. 
(a)  Describe how a  recognizer would work  for  the set of strings containing only 
lower  case  Roman  letter —a,b,...,z —such  that  each  letter  occurs  twice  in  a 
row.  For example, aaccaabbzz, is such a string, but abb, 00bb, AAbb, and a are 
not.  (Even better, actually write a recognizer procedure in your favorite program­
ming language). 
A set of strings is called recognizable if there is a recognizer procedure for it. 
When  you  actually  program  a  procedure,  you  have  to  type  the  program  text 
into  a  computer  system.  This  means  that  every  procedure  is  described  by  some 
string  of  typed  characters.  If  a  string,  s,  is  actually  the  typed  description  of 
some  string procedure,  let’s  refer  to  that procedure  as Ps .  You  can  think  of Ps  as 
the result of compiling s.5 
In  fact,  it will be helpful  to  associate  every  string,  s, with a procedure, Ps ; we 
can  do  this  by  deﬁning  Ps  to  be  some  ﬁxed  string  procedure —it  doesn’t matter 
which one —whenever  s  is not  the  typed description of  an  actual procedure  that 
can be applied to string s.  The result of this is that we have now deﬁned a total 
function, f , mapping every string, s, to the set, f (s), of strings recognized by 
Ps . That is we have a total function, 
f  : string → P (string).	

(5.6) 

(b)	 Explain why the actual range of f  is the set of all recognizable sets of strings. 
This is exactly the set up we need to apply the reasoning behind Russell’s Para­
dox to deﬁne a set that is not in the range of f , that is, a set of strings, N , that is not 
recognizable. 

5 The string, s, and the procedure, Ps , have to be distinguished to avoid a type error: you can’t apply 
a  string  to  string.  For example,  let s be  the  string  that you wrote as your program  to answer part  (a). 
Applying s to a string argument, say oorrmm, should throw a type exception; what you need to do is 
apply the procedure Ps  to oorrmm. This should result in a returned value True, since oorrmm consists 
of three pairs of lowercase roman letters 

5.2.  THE LOGIC OF SETS 

87 

(c)  Let 

N  ::= {s ∈ string | s /∈ f (s)} . 

Prove that N  is not recognizable. 
Hint:  Similar to Russell’s paradox or the proof of Theorem 5.2.1. 

(d)  Discuss what the conclusion of part (c) implies about the possibility of writing 
“program analyzers” that take programs as inputs and analyze their behavior. 

Problem 5.9. 
Though it was a serious challenge for set theorists to overcome Russells’ Paradox, 
the  idea  behind  the  paradox  led  to  some  important  (and  correct  :-)  )  results  in 
Logic and Computer Science. 
To  show  how  the  idea  applies,  let’s  recall  the  formulas  from  Problem  5.2  that 
made  assertions  about  binary  strings.  For  example,  one  of  the  formulas  in  that 
problem was 

NO T[∃y ∃z .s = y1z ] 

(all-0s) 

This  formula deﬁnes a property of a binary  string,  s, namely  that s has no occur­
rence of a 1.  In other words, s  is a string of (zero or more) 0’s.  So we can say that 
this formula describes the set of strings of 0’s. 
More generally, when G is any formula that deﬁnes a string property, let ok-strings(G) 
be  the  set  of  all  the  strings  that  have  this  property.  A  set  of  binary  strings  that 
equals ok-strings(G) for some G is called a describable set of strings.  So,  for exam­
ple, the set of all strings of 0’s is describable because it equals ok-strings(all-0s). 
Now let’s shift gears for a moment and think about the fact that formula all-0s 
appears above. This happens because instructions for formatting the formula were 
generated by a computer text processor (in 6.042, we use the LATEX text processing 
system),  and  then  an  image  suitable  for  printing  or  display  was  constructed  ac­
cording  to  these  instructions.  Since  everybody  knows  that data  is  stored  in  com­
puter  memory  as  binary  strings,  this  means  there  must  have  been  some  binary 
string  in  computer  memory  —call  it  tall-0s  —that  enabled  a  computer  to  display 
formula all-0s once tall-0s  was retrieved from memory. 
In fact, it’s not hard to ﬁnd ways to represent any formula, G, by a correspond­
ing  binary word,  tG ,  that would  allow  a  computer  to  reconstruct G  from  tG .  We 
needn’t be concerned with how this reconstruction process works; all that matters 
for our purposes is that every formula, G, has a representation as binary string, tG . 
Now let 
V  ::= {tG  |  G deﬁnes a property of strings and tG  ∈/ ok-strings(G)} . 

Use reasoning similar to Russell’s paradox to show that V  is not describable. 

88 

CHAPTER 5.  FIRST-ORDER LOGIC 

Homework Problems 

Problem 5.10. 
Let [N → {1, 2, 3}] be the set of all sequences containing only the numbers 1, 2, and 
3, for example, 

(1, 1, 1, 1...), 
(2, 2, 2, 2...), 
(3, 2, 1, 3...). 

For any sequence, s, let s[m] be its mth element. 
Prove that [N → {1, 2, 3}] is uncountable. 
Hint:  Suppose there was a list 
L = sequence0 , sequence1 , sequence2 , . . . 
of sequences in [N → {1, 2, 3}] and show that there is a “diagonal” sequence diag ∈
[N → {1, 2, 3}] that does not appear in the list. Namely, 
diag ::= r(sequence0 [0]), r(sequence1 [1]), r(sequence2 [2]), . . . , 
where r  : {1, 2, 3} → {1, 2, 3} is some function such that r(i) =�
i for i = 1, 2, 3. 

Problem 5.11. 
→
B ] be the set of total functions from A to B . Prove 
For any sets, A, and B , let [A
B ]).→
that if A is not empty and B has more than one element, then NOT(A surj [A
Hint: Suppose there is a function, σ , that maps each element a ∈ A to a function 
� 
→ 
σa  : A
B . Pick any two elements of B ; call them 0 and 1. Then deﬁne 
0 if σa (a) = 1,
diag(a) ::= 
1 otherwise. 

5.3.  GLOSSARY OF SYMBOLS	

89 

5.3  Glossary of Symbols 

symbol	 meaning 
::= 
is deﬁned to be 
∧ 
and 
∨ 
or 
−→ 
implies 
¬ 
not
¬
not P
P 
not P 
P	
←→ 
iff 
←→ 
equivalent
⊕ 
xor 
∃ 
exists 
∀ 
for all 
∈ 
is a member of 
⊆ 
is a subset of 
⊂ 
is a proper subset of 
∪ 
set union 
∩ 
set intersection 
complement of a set, A 
A 
P (A) 
powerset of a set, A 
the empty set, {} 
∅ 

90 

CHAPTER 5.  FIRST-ORDER LOGIC 

MIT OpenCourseWare
http://ocw.mit.edu 

6.042J / 18.062J Mathematics for Computer Science 
Spring 2010 

For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms . 

