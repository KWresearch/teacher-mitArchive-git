Queueing Systems: Lecture 2

Amedeo R. Odoni
October 13, 2004

Lecture Outline

• Birth-and-death processes
• State transition diagrams
• Steady-state probabilities
• M/M/1
• M/M/m
• M/M/∞

Reference: Chapter 4, pp. 194-206

Birth-and-Death Queueing Systems

1. m parallel, identical servers.
Infinite queue capacity (for now).
2.
3. Whenever n users are in system (in 
queue plus in service) arrivals are 
Poisson at rate of λn per unit of time.
4. Whenever n users are in system, 
service completions are Poisson at 
rate of µn per unit of time.
5. FCFS discipline (for now).

The Fundamental Relationship

λn∆t

1-(λn+ µn)∆t

n users

µn∆t

n+1 users

n users

n-1 users

Pn(t) = Prob [n users 
in system at time t]

tP
(
n

+

t
)
∆

=

P
n

t
)(

⋅

Pt
∆µ
+
⋅
n
n
1
+

t
)(

⋅

tPt
t
(1[)(
)
]
∆λ
∆λµ
−⋅
+
+
⋅
⋅
n
n
n
n
1
−

−

1

+

1

The differential equations that 
determine the state probabilities
Pt
tPt
P
t
t
t
t
(1[)(
)
)(
)(
)
]
∆µ
=
⋅
⋅
∆λ
∆λµ
∆
+
⋅
⋅
−⋅
+
+
⋅
n
n
n
n
n
n
n
1
1
−
+

1
−

+

1

tP
(
n

+

)

⋅

⋅

1
−

1
−

+

1

⋅

P
n

+

1

t
)(

+

P
n

+

λ
n

µ
n

−=

tP
)(
n

(
+
µλ
n
n

After a simple manipulation:
dP
t
)(
n
dt
(1) applies when n = 1, 2, 3,….; when n = 0, we have: 
dP
t
)(
0
dt
• The system of equations (1) and (2) is known as the 
Chapman-Kolmogorov equations for a birth-and-death 
system

−=
λ
0

tP
)(
0

tP
)(
1

(2)

+

µ
1

⋅

t
)(

⋅

(1)

The “state balance” equations

• We now consider the situation in which the queueing 
system has reached “steady state”, i.e., t is large 
t
dPn
)(
tP
P
=)(
enough to have                  , independent of t, or 
n
n
dt
• Then, (1) and (2) provide the state balance equations:
P
P
n
)3(
0
µ
λ
=
⋅
=
⋅
1
1
0
0
P
P
P
n
(
)
,..3,2,1
)4(
+
=
µλ
=
⋅
λ
+
⋅
µ
⋅
n
n
n
n
n
n
n
1
1
1
1
−
−
+
+
• The state balance equations can also be written directly 
from the state transition diagram

=

0

Birth-and-Death System: State 
Transition Diagram

0

λ0

µ1

λ1

λ2

λm-1

λm

λm+1

1

2

……

m

m+1

……

µ2

µ3

µm

µm+1 µm+2

• We are interested in the characteristics of the system 
under equilibrium conditions (“steady state”), i.e., when 
the state probabilities Pn(t) are independent of t for 
large values of t

• Can write system balance equations and obtain 
closed form expressions for Pn, L, W, Lq, Wq

Solving…..

⋅

P
0

etc
.

=

⋅

;

=

⋅

P
1

=

P
1

P
0

P
2

Solving (3) and (4), we have:
⋅
λλ
λ
λ
1
0
0
1
µµ
µ
µ
⋅
1
2
2
1
and, in general, 
.....
⋅
⋅
⋅
⋅
λλ
λλ
n
n
1
2
0
1
−
−
.....
⋅
⋅
⋅
⋅
µµ
µµ
n
n
1
1
2
−
But, we also have:
=

P
n

P
0

1

∞
∑
P
n
n
0
=

=

⋅

=

PK
⋅
n
0

Giving, 

P
0

=

1
∞
∑
nK
n
1
=

1

+

)

n

=

P
0

1(
+⋅

∞
∑
K
n
1
=
Condition for steady state:
∞
∞<∑
nK
=1n

M/M/1: Observing State Transition 
Diagram from Two Points
• From point 1:

P
λP µ=
1
0
λ

P
P
P
(
1)
µλµλ
=
+
+
2
0
λ

0

1

µ

µ

• From point 2:

P
λP µ=
1
0
λ

P
P µλ =
1
2
λ

0

1

µ

µ

2

2

λ

µ

λ

µ

…

…

λ

µ

λ

µ

n-1

n-1

P
P
P
( 
)
µλµλ
=
− +
+
n
n
n
1
λ
λ

1
+

n

n

µ

λ

µ

n+1

µ

P µλ
P
=
n
n
λ

1+

n+1

µ

λ

µ

λ

µ

M/M/1: Derivation of P0 and Pn

Step 1:

P
1

=

λ
P
0
µ

,

P
2

=

2

⎛
⎜⎜
⎝

⎞
λ
⎟⎟
µ
⎠

P
0

,

,
L

P
n

=

n

⎛
⎜⎜
⎝

⎞
λ
⎟⎟
µ
⎠

P
0

Step 2:

∞
∑
n
0
=

P
n

   
    
,1
⇒=

P
0

∞
∑
n
0
=

⎛
⎜⎜
⎝

n
⎞
λ
    
    1
⇒=⎟⎟
µ
⎠

P
0

=

n

1
⎛
⎞
λ
⎜⎜
⎟⎟
µ
⎝
⎠

∞
∑
n
0
=

Step 3:

=
ρ

λ
∞
∑
,
  then  
µ
n
0
=

n
⎞
λ
=⎟⎟
µ
⎠

⎛
⎜⎜
⎝

∞
∑
n
0
=

n
ρ

=

1
∞
−
ρ
1
−
ρ

=

1
−
ρ

1

(
Q

<
ρ

)1

Step 4:

P
0

=

1
∑∞
n
0
=

n
ρ

1
−=

    
and
ρ

P
n

=

1(
)
n
ρρ
−

M/M/1: Derivation of L, W, Wq, and Lq

•

L

=

∞
∑
n
0
=

nP
n

=

∞
∑
n
0
=

n
1(
)
n
ρρ
−

1( 
−=

∞
∑
n
)
n
ρρ
n
0
=

          
1(
 
          
−=

d
⎛
)
ρρ
⎜
d
ρ
⎝

∞
∑
n
0
=

n
ρ

⎞
1(
−=⎟
⎠

1
−

1( 
−=

∞
∑
n
)
n
ρρρ
n
1
=
d
1
⎞
⎛
)
⎟⎟
⎜⎜
ρρ
d
1
ρρ
−
⎠
⎝
λ
µ
λ
µ

λ
λµ
−

1

−

=

=

          
1(
 
          
−=

⎛
)
⎜⎜
ρρ
⎝

1
)
−
ρ

⎞
=⎟⎟
⎠

2

1(

ρ
)
ρ
−

1(
1
1
λ
=
⋅
λµλλµ
−
−

•

LW
=
λ

=

•

WWq
=

−

1
1
1
−
=
µλµµ
−

=

λ
(
)
λµµ
−

•

L
q

=

W
λλ
⋅=
q

λ
(
)
λµµ
−

=

2
λ
(
)
λµµ
−

High Sensitivity of Delay at High 
Levels of Utilization

Expected delay

Demand

Capacity
ρ = 1

(

=

=

=

W

⋅

P
n

M/M/1: An alternative, direct derivation 
of L and W
• For an M/M/1 system, with FCFS discipline:
∞
nE
nE
L
n
1
1][
]1
)1
+
+
+
+
= ∑
[
µ
µ
µ
µ
n
0
=
• But from Little’s theorem we also have:
L
W
(2)
⋅= λ
It follows from (1) and (2) that, as before:
1
λ
;
λµ
λµ
−
−
Does the queueing discipline matter?

(1)

W

•

L

=

=

Additional important M/M/1 results

• The pdf for the total time in the system, w, can 
be computed for a M/M/1 system (and FCFS):
w
w
)
1(
(
)
−−
µρ
λµ
−
−
for w≥0
wf
e
e
1(
)
(
)
(
)
=
µρ
−
λµ
−
=
w
Thus, as already shown, W = 1/(µ -λ) = 1/[µ (1-ρ)]
• The standard deviation of N, w, Nq, wq are all 
proportional to 1/(1-ρ), just like their expected 
values (L, W, Lq, Wq, respectively)
• The expected length of the “busy period”, E[B], 
is equal to 1/(µ -λ) 

M/M/1: E[B], the expected length of a 
busy period

B = busy period
I = idle period

I

B

I

t
B

N

I

P
0

=

But, 

E
P
0

B
Idle
E
[
]
Busy
E
[
]
[
+
1
−=
ρ

Idle
]
Idle
E
[

]

=

1
λ
busy

Therefore, 

BE
[

]

=

E
[

Length

of

period

]

=

1
⋅
µ

1
−

1
=
)
λµρ
−

1(

M/M/m (infinite queue capacity)

λ

λ

λ

λ

λ

λ

λ

0

1

2

…

m-1

m

m+1

….

mµ

2µ

3µ

(m-1)µ

mµ

mµ

for

n

=

2,1,0

,....,

m

−

1

P
0

n

µ

(

P
n

=

n

λ
)
µ
n
!
λ
)
µ
mn
−

(

P
n

=

P
0

for

mmn
,
=

+

,1

m

+

,....2

m
m
!
⋅
• Condition for steady state?

M/M/∞ (infinite no. of servers)

λ

λ

λ

λ

λ

λ

…

m-1

m

m+1

…

3µ

(m-1)µ

mµ

(m+1}µ (m+2)µ

1

2

2µ

−

(

λ
)
µ

n

⋅

e

0

λ

µ

(

λ
)
µ

n

=

=

for

2,1,0
,.....

P
n
n
!
• N is Poisson distributed!
• L = λ / µ; W = 1 / µ ; Lq = 0; Wq = 0
• Many applications

M/M/1: finite system capacity, K; 
customers finding system full are lost

λ

λ

λ

λ

λ

0

1

2

…

K-1

K

µ

µ

µ

n

=

=

K

P
n

for

.....,

,2,1,0

µ
n
ρ
1
−

µ
1(
)
−⋅
ρ
K
1
+ρ
• Steady state is always reached
• Be careful in applying Little’s Law! Must count only the 
customers who actually join the system:
KP−⋅=′ λλ
1(
)

M/M/m: finite system capacity, K; 
customers finding system full are lost

0

λ

µ

λ

λ

λ

λ

λ

λ

λ

1

2

……

m

m+1

……

K-1

K

2µ

3µ

mµ

mµ mµ

mµ

mµ

• Can write system balance equations and obtain 
closed form expressions for Pn, L, W, Lq, Wq

• Often useful in practice

M/M/m: finite system capacity, m; 
special case!

λ

λ

λ

λ

λ

0

1

2

……

m-1

m

2µ

3µ

(m-1)µ

mµ

n

(

P
n

=

n

=

for

µ
λ
)
µ
n
!
λ
)
(
m
µ
∑
i
!
i
0
=
• Probability of full system, Pm, is “Erlang’s loss formula”
• Exactly same expression for Pn of M/G/m system with K=m

m
,...2,1,0

i

0

λ

µ

(

λ
)
µ

=

M/M/∞ (infinite no. of servers)

λ

λ

λ

λ

λ

λ

…

m-1

m

m+1

…

3µ

(m-1)µ

mµ

(m+1}µ (m+2)µ

1

2

2µ

−

(

λ
)
µ

n

⋅

e

n

=

for

2,1,0
,.....

P
n
n
!
• N is Poisson distributed!
• L = λ / µ; W = 1 / µ ; Lq = 0; Wq = 0
• Many applications

Variations and extensions of 
birth-and-death queueing systems
• Huge number of extensions on the previous 
models
• Most common is arrival rates and service 
rates that depend on state of the system; 
some lead to closed-form expressions
• Systems which are not birth-and-death, but 
can be modeled by continuous time, discrete 
state Markov processes can also be 
analyzed [“phase systems”]
• State representation is the key (e.g. M/Ek/1)

