Networks: Lecture 2

Amedeo R. Odoni
November 17, 2004

Outline

• Generic heuristics for the TSP
• Euclidean TSP: tour construction, tour 
improvement, hybrids
• Worst-case performance
• Probabilistic analysis and asymptotic 
result for Euclidean TSP [Separate 
handout]
• Extensions

Solving the TSP

Heuristics: Euclidean TSP

• Best existing exact algorithms can solve optimally 
problems with up to 15,000 points (as of 2001)
• Numerous heuristic approaches for good solutions to 
MUCH larger problems
• For practical purposes, heuristics are very powerful. A 
classification:
_ Tour construction
_ Tour improvement
_ Hybrid
• Analysis of heuristics:
_ Worst case
_ Asymptotic

_ Empirical
_ Probabilistic

8

9

10

7

6

2

3

4

1

5

The Nearest Neighbor Heuristic

Performance: Nearest Neighbor

L
(

NEARNEIGHB
L
TSP
(
)

OR

)

≤

1
2

log
⎡

2

n

⎤

+

1
2

• Poor performance in practice (+20%)
• Can be improved through 
refinements (e.g., “likely subgraph”)

8

9

1

5

7

6

2

3

4

Insertion Heuristics

10

?

•

•

•

•

Nearest insertion

Farthest insertion

Cheapest insertion

Random insertion

Worst-case Performance: 
Insertion Heuristics
RANDOM
INSERT
)
TSP
L
)
(
NEAR
INSERT
L
TSP
)
(

⎤ 1
+

<

2

)

≤

log
⎡

2

n

L
(

L
(

L
(

FAR
INSERT
L
TSP
)
(

)

=> Unknown

L
(

CHEAP
INSERT
TSP
L
(
)

)

<

2

Empirical Performance: Insertion 
Heuristics
• In practice “Farthest Insertion” and 
“Random Insertion” (+9%, +11%) seem 
to perform better than “Cheapest” and 
“Nearest” (+16%, +19%)
• Can be further refined (e.g., though the 
Convex Hull heuristic) 

The MST Heuristic for the TSP

8

9

10

7

6

2

3

4

1

5

Merging with a second copy of the MST

Improve Solution by Skipping Points 
Already Visited

8

9

10

7

6

2

3

4

1

5

8

9

10

7

6

2

3

4

1

5

Worst-case Performance: MST 
Heuristic for TSP

The Christofides Heuristic: Step 1

L(MST) ≤L(TSP-(longest edge of TSP)) < L(TSP)

=>        L(MST-TOUR) = 2*L(MST) < 2*L(TSP)

=>

L(MST
TOUR)
−
L(TSP)

2<

8

*

9

10

*

7

*
6

*

2

1

5

The Christofides Heuristic: Step 2

The Christofides Heuristic: Step 3

8

*

9

10

*

7

*

6

*

2

3

*

*

4

1

5

8

9

10

7

6

2

1

5

3
*

3

*
4

4

Improve Solution by Skipping 
Points Already Visited

8

9

10

7

6

2

3

4

1

5

Worst-case Performance: The 
Christofides Heuristic
L(CHRISTOFIDES) = L(MST) + L(M)

But, 
and

L(MST) < L(TSP)
L(M) ≤ L(M') ≤ L(TSP) / 2

(M' = minimum length pairwise matching of odd-
degree nodes of MST using only links that are 
part of TSP)
CHRISTOFID
L
ES
3
(
)
=> 
L
TSP
(
)
2

<

Worst-case Performance: The
Christofides Heuristic
• L(CHRISTOFIDES) = L(MST) + L(M)

• But,  L(MST) < L(TSP)
L(M) ≤ L(M') ≤ L(TSP) / 2
and

(M' = minimum length pairwise matching of 
odd- degree nodes of MST using only 
links that are part of TSP)

A Worst-Case Example for the 
Christofides Heuristic
(m nodes)
m-1

1

1- ε

1- ε

1

m
(m+1 nodes)

A Worst-Case Example for the
Christofides Heuristic (2)

1- ε

1- ε

L(Christofides) = 2*m*(1-ε) + m ≈ 3*m

A Worst-Case Example for the
Christofides Heuristic (3)
m-1

1- ε

m

L(TSP) = m + m – 1 + 2*(1 – ε) ≈ 2*m + 1

Therefore:
CHRISTOFID
L
(
TSP
L
)
(

ES

)

≈

m
3
m
+

2

1

→

3
2

mas

∞→

The Convex Hull Heuristic: 
Euclidean Plane

Adding New Points

8

9

10

7

6

1

5

2

3

4

8

9

10

7

6

1

5

2

3

4

Convex Hull Heuristic (Euclidean TSP)

The Savings Algorithm

• Optimal TSP tour cannot intersect 
itself
• Therefore, points on the convex 
hull must appear in same order on 
optimal TSP tour
• Provides good starting point; for 
instance, improves insertion 
heuristics by 2-3%, on average

The Savings Algorithm (2)

• Connect every node to the origin (“depot”) 
through a “round trip” (n-1 tours)
• Merge tours, one node at a time, by 
maximizing the “savings” 
s(i,j) = d(D,i) + d(D,j) – d(i,j)
• Tours should not violate such constraints as:
_ Vehicle capacity
_ Maximum length of a tour
_ Maximum number of stops per tour
• O(n3)
• Performs very well in practice; very flexible

8

9

Depot (D)
1

7

6

5

The Savings Algorithm (3)

8

9

7

6

D
1

5

2

2

3

3

4

4

10

10

Tour Improvement Heuristics: 
Node Insertion

Tour Improvement Heuristics: 
2-exchange (or “2-opt”)

p

i

q

k

j

• d(p,q) + d(j,i) + d(i,k) 

vs.

d(p,i) + d(i,q) + d(j,k)

• O(n2) computational effort on each iteration

Tour Improvement Heuristics: 
3-exchange (or “3-opt”)

1

2

6

5

⎧
⎪
⎨
⎪
⎩

16
−
32
−
54
−

⎫
⎪
⎬
⎪
⎭

26
−
31
−
54
−

⎧
⎪
⎨
⎪
⎩

⎫
⎪
⎬
⎪
⎭

46
16
−
−
⎫
⎧
⎧
⎪
⎪
⎪
23
42
−
−
⎬
⎨
⎨
⎪
⎪
⎪
51
53
−
−
⎭
⎩
⎩
2-opt really

⎫
⎪
⎬
⎪
⎭

36
−
14
−
52
−

⎧
⎪
⎨
⎪
⎩

⎫
⎪
⎬
⎪
⎭

26
−
41
−
53
−

⎧
⎪
⎨
⎪
⎩

⎫
⎪
⎬
⎪
⎭

36
−
24
−
51
−

⎧
⎪
⎨
⎪
⎩

⎫
⎪
⎬
⎪
⎭

46
−
13
−
52
−

⎧
⎪
⎨
⎪
⎩

⎫
⎪
⎬
⎪
⎭

3

4

n
3

⎛
⎜⎜
⎝

⎞
→⎟⎟
⎠

3nO
(

)

6

3

5

4

6

2

1

3

5

4

2

1

n
2

⎞
=⎟⎟
⎠

⎛
⎜⎜
⎝

)1

nn
(
−
2

→

2nO
(

)

Tour Improvement Heuristics: 
Variable Depth Search
• Lin and Kernighan (1973)
• Use combinations of 2-opt and 3-opt 
searches
• Initially many “short-depth”, later fewer
• Has been extended to “deeper” 
searches than 3-opt
• Numerous variations

