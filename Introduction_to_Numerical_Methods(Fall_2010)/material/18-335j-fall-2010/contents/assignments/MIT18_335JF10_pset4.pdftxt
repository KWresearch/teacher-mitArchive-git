Problem 2: Q’s ‘R us 
(a)  Trefethen, problem 27.5 

(b)  Trefethen, problem 28.2 

Problem 3: 
Trefethen, problem 33.2. 

Reminder:  ﬁnal project proposals 
A half-page ﬁnal-project proposal is due on October 
29,  outlining  the  goal  and  scope  of  your  proposed 
paper.  Problems motivated by your research are per­
fectly  ﬁne,  although  you  shouldn’t  simply  recycle 
something you’ve already done.  The only restriction 
is  that,  since  PDEs  are  covered  in  18.336  and  other 
courses,  I don’t want projects where  the primary fo­
cus  is  how  to  discretize  the  PDE  (e.g.  no  projects 
on  discontinuous  Galerkin  methods  or  stable  time-
stepping, please).  It is ﬁne to take a discretized PDE 
as input, however, and then work on solvers, precon­
ditioning, optimization, etcetera. Methods for ODEs 
are  also  fair  game  (especially  recent  developments 
that go beyond classic Runge-Kutta).  One source of 
ideas might be to thumb through a copy of Numerical 
Recipes or a similar book and ﬁnd a topic that inter­
ests you. Then go read some recent review papers on 
that  topic  (overview  books  like  Numerical  Recipes 
are not always trustworthy guides to a speciﬁc ﬁeld). 

18.335 Problem Set 4 

Problem 1: Hessenberg ahead! 
In  class, we described  an  algorithm  to ﬁnd  the Hes­
senberg factorization A = QHQ∗  of an arbitrary ma­
trix A, where H  is  upper-triangular  plus  nonzero  el­
ements  just below  the diagonal, and H  has  the same 
eigenvalues as A.  Suppose A  is Hermitian,  in which 
case H  is Hermitian and tridiagonal.  Given the Hes­
senberg  factorization H ,  we mentioned  in  class  that 
many things become much easier, e.g. we can evalu­
ate  p(z) = det(A − zI ) = det(H − zI ) in O(m) opera­
tions for a given z. 
(a)  Let	 B  be  an  arbitrary  m × m  tridiagonal  ma­
trix.  Argue that det B = Bm,m det B1:m−1,1:m−1 −
Bm−1,mBm,m−1 det B1:m−2,1:m−2 ..  Use  this  re­
currence  relation  to  write  a  Matlab  function 
evalpoly.m  that  evaluates  p(z)  in O(m)  time, 
given  the  tridiagonal  H  and  z  as  arguments. 
Check that your function works by comparing it 
to computing det(H − zI ) directly with the Mat-
lab det function. 
(b)  Explain  how,  given  the  tridiagonal  H ,  we  can 
compute  also  the  derivative  p� (z)  for  a  given  z 
in O(m) operations.  (Not  the coefﬁcients of the 
polynomial  p� , just its value at z!). Modify your 
evalpoly.m  routine  to  return  both  p(z)  and  its 
derivative  p� (z).  That  is,  your  function  should 
look like: 
[p,pderiv]  =  evalpoly(H,z)

......compute  p,  pderiv.....

Check  that  your  function  works  by  comparing 
your  p� (z)  to  [ p(z + Δz) − p(z − Δz)]/2Δz  for 
various z and small Δz. 
(c)  Using	 your  function  evalpoly, 
implement 
Newton’s  method  to  compute  some  eigenval­
ues  of  a  random  real-symmetric  matrix,  and 
compare  them  to  those  returned  by  Matlab’s 
eig  function—how  many  signiﬁcant  digits  of 
accuracy do you get? 

That  is,  to  get  a  random  real-symmetric  A, 
compute X=rand(m);  A=X’*X; ....  then, com­
pute H=hess(A);  to  get H .  Then  compute  the 
eigenvalues  with  eig(A),  and  apply  Newton’s 
method  starting  at  a  few  different  points  to 
converge to some different eigenvalues. 

1 

MIT OpenCourseWare
http://ocw.mit.edu 

18.335J / 6.337J Introduction to Numerical Methods

 
Fal l 2010 
 

For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms . 

