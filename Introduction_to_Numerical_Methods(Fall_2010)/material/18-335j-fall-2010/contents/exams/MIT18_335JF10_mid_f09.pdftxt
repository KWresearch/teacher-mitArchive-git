18.335  Mid-term  Exam  (Fall  2009) 
Problem  1:  Caches  and  QR  (30  pts) 
In class, we learned the Gram-Schmidt and modiﬁed Gram-Schmidt algorithms 
to form the (reduced) A  =  QR  factorization of an m × n  matrix A  (with in­
dependent columns a1 , a2 , . . .  and n  ≤  m).  In particular, for simplicity let us 
consider the computation of the m × n  matrix Q  only (whose columns are the 
orthonormal basis for the column space of A), not worrying about keeping track 
of R, and for simplicity consider classical (not modiﬁed) Gram-Schmidt: 
q1  = a1 /�a1 �
for  j  = 2, 3, . . . , n �j−1

vj  = aj  − 
∗aj )

i=1  qi (qi 
qj  = vj /�vj �

In this question, you will consider the cache complexity of this algorithm with an 
ideal cache of size Z  (no cache lines). If the algorithm is implemented directly as 
written above, there is little temporal locality and Θ(mn2 ) misses are required, 
independent of Z . You are also given  that you can multiply an m × n  matrix 
√
with an n × p matrix using Θ(mn + np + mp + mnp/
Z ) misses, and can add 
two m × n matrices using Θ(mn) misses. 

1. Suppose that n  is even and we have performed QR factorization (by some 
algorithm) on the ﬁrst-half  n/2  columns of A  to obtain an m ×  (n/2) 
matrix Q1 , and also on the second-half n/2  columns separately to obtain 
an m × (n/2) matrix Q2 . Using Q1  and Q2  , describe how to (eﬃciently) 
ﬁnd the m × n  matrix Q  from the QR factorization of A, and give the 
number of cache misses (in Θ  notation, ignoring constant factors). 

2. Describe an algorithm to compute the Q  from the QR factorization of A 
that has fewer than Θ(mn2 ) misses asymptotically, and give the number of 
cache misses (in Θ notation, ignoring constant factors). (You can describe 
either a cache-oblivious or blocked algorithm, but I ﬁnd a recursive cache­
oblivious algorithm easier.)  You can assume that n  is a power-of-2 size, 
for convenience. 

1 

Problem  2:  Lanczos  (30  pts) 
Let A  be a Hermitian m × m  matrix with eigenvalues λ1 , λ2 , 
· · · 
, λm  and cor­
responding orthonormal eigenvectors qˆ1 , qˆ2 , . . . , qˆm . Consider the Lanczos algo­
rithm applied to A: 
β0  = 0,  q0  = 0,  b = arbitrary,  q1  = b/�b�
for  n = 1, 2, 3, . . .

v = Aqn

αn  = qn
T v

v − βn−1 qn−1  − αn qn

←
v
βn  = �v� 
qn+1  = v/βn 
⎞
⎛ 
After m  steps, recall that this gives a unitary matrix Q 
⎟⎟⎟⎟⎠ 
⎜⎜⎜⎜⎝ 
α1  β1 
β1  α2  β2 
.
. . 
β2	 α3 
.
.
.	
.
. 
.	
Suppose that the initial b  is orthogonal to one of the eigenvectors qˆi  corre­
sponding to a simple (not repeated) eigenvalue λi .  Explain why the Lanczos 
process must break down (βn  = 0  for some n) if it is carried out in exact arith­
metic (no rounding), and the Tn  matrix (the n × n  upper-left corner of T ) at 
the n-th step (where breakdown occurs) cannot have an eigenvalue λi . 

=  (q1 q2  · · · qm )  and a 

tridiagonal matrix T  = 

such that AQ = QT .

Problem  3:  Backwards  stability  (30  pts) 
Let A be any invertible m×m matrix and b be any vector in Cn , and consider the 
function f (A, b) =  A−1 b: that is, the function returning the solution to Ax  = 
b. Now, consider the analogous function f˜(A, b)  implemented in ﬂoating-point 
arithmetic by a backwards-stable  algorithm, e.g. Gaussian elimination with 
partial pivoting, or Householder QR factorization. That is, if we let f (A, b) = x 
(the solution:  x  is the output  in this case) and f˜(A, b) −  f (A, b) =  δx  (the 
rounding error in the solution), then there is some δA and δb where (A+ δA)(x+ 
δx) = b + δb  and δA  and δb  are .... (yadda yadda...you should know the precise 
deﬁnition by now). 
Show that if f˜(A, b)  is backwards stable with respect to the inputs A  and b, 
then it must be backwards stable with respect to A alone. That is, ﬁnd a small 
δA�  = �A�O(εmachine )  such that (A + δA� )(x + δx) = b. 
(Hint: if you need to construct a matrix to turn one vector into another, you 
can always use a unitary rotation followed by a rescaling. And, of course, you 
can pick any convenient norm that you want, by the equivalence of norms.) 

2 

MIT OpenCourseWare
http://ocw.mit.edu 

18.335J / 6.337J Introduction to Numerical Methods 
Fall 2010 

For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms. 

