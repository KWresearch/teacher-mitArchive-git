Lecture 8 - Floating Point Arithmetic,

The IEEE Standard


MIT 18.335J / 6.337J


Introduction to Numerical Methods


Per-Olof Persson


October 3, 2006


1 

Floating Point Formats 

• 

Scientiﬁc  notation: 
10  −19 
1.602 
− � �� � × ����  ���� 
����  
signiﬁcand 
base 
exponent 
sign 
•  Floating point representation 
±  �d0  +  d1β −1  +  . . .  + dp−1β −(p−1)� β e , 
with base β  and precision p 

0  ≤ di  < β 

•	 Exponent range [emin , emax ] 
Normalized  if d0  = 0 (use e  =  emin  − 1 to represent 0) 
• 
2 

Floating Point Numbers 

Special Quantities 

•	 The gaps between adjacent numbers scale with the size of the numbers 
Relative resolution given by machine epsilon, ǫmachine  =  .5β 1−p 
• 
•  For all x, there exists a ﬂoating  point x ′  such that |x  − x ′  | ≤ ǫmachine |x| 
•  Example: β  = 2, p  = 3, emin  =  −1, emax  = 2 

0

1

2

3

4

5

6

7 

• ±∞ is returned when an operation overﬂo ws 
•  x/   ± ∞ = 0 for any number x, x/0 =  ±∞ for any nonzero number x 
•  Operations with inﬁnity  are deﬁned as limits , e.g. 
−∞ 
4 −
4 − ∞ x→∞ 
=  lim 
x  =
•	 NaN (Not a Number) is returned when the an operation has no 
well-deﬁned  ﬁnite or inﬁnite 
result 
Examples: ∞ − ∞, ∞/∞, 0/0, √−1, NaN  ⊙ x

• 

3 

4 

Denormalized Numbers 

IEEE Single Precision 

•  With normalized signiﬁcand  there is a “gap”  between 0 and β emin 
•  This can result in x  − y  =  0 even though x 
�=  y , and code fragments like 
if x 
�=  y then z  =  1/(x  − y) might break 
•  Solution: Allow non-normalized signiﬁcand  when the exponent is emin 
•  This gradual underﬂo w  garantees that 
x  =  y  ⇐⇒ x  − y  =  0 

0 

0 

β emin 

β emin+1 

β emin+2 

β emin 

β emin+1 

β emin+2 

β emin+3 

β emin+3 

•  1 sign bit, 8 exponent bits, 23 signiﬁcand  bits: 
0  00000000  0000000000000000000000000000000 

S 

E 

M 

•  Represented number : 
(−1)S  × 1.M  × 2E−127 
•  Special cases: 
E  =  255  
E  =  0 
0  <  E  <  255 
±∞  
±0 
NaN 
Denormalized  Ordinary numbers 

Powers of 2 

M  =  0 

M  =  0

5 

6 

�
�
IEEE Single Precision, Examples 

IEEE Floating Point Data Types 

Single precision 

Double precision 

Signiﬁcand  size (p) 

24 bits 

Exponent size 

Total size 

emax 

8 bits 

32 bits 

+127 

53 bits 

11 

64 bits 

+1023 

-1022 
-126 
emin 
2−1022  ≈ 10−308 
Smallest normalized  2−126  ≈ 10−38 
2127  ≈ 1038 
21023  ≈ 10308 
Largest normalized 
2−24  ≈ 6 ·  ·  ·  10−8  2−53  ≈ 10−16 

ǫmachine 

8 

S 

E 

M 

Quantity 

0 

1 

0 

0 

0 

0 

0 

0 

0 

1 

1 

1 

11111111 

00000100000000000000000  NaN 

11111111 

11111111 

10000001 

10000000 

00000001 

00000000 

00000000 

00000000 

00000000 

10000001 

11111111 

00100010001001010101010  NaN 
00000000000000000000000  ∞ 
10100000000000000000000  +1 ·  2129−127  ·  1.101 = 6.5 
00000000000000000000000  +1 ·  2128−127  ·  1.0 = 2 
00000000000000000000000  +1 ·  21−127  ·  1.0 = 2−126 
10000000000000000000000  +1 ·  2−126  ·  0.1 = 2−127 
00000000000000000000001  +1 ·  2−126  ·  2−23  = 2−149 
00000000000000000000000  0 
00000000000000000000000  −0 
10100000000000000000000  −1 ·  2129−127  ·  1.101 = −6.5 
00000000000000000000000  −∞ 
7 

Floating Point Arithmetic 

•  Deﬁ ne ﬂ(x) as the closest ﬂ oating point approximation to x 
•  By the deﬁ nition of ǫmachine , we have for the relative error : 
For all x  ∈ R, there exists ǫ with |ǫ| ≤ ǫmachine 
such that ﬂ(x) =  x(1  +  ǫ) 
•  The result of an operation ⊛ using ﬂ oating point numbers is ﬂ(a  ⊛ b) 
•  If ﬂ(a  ⊛ b) is the nearest ﬂ oating point number to a  ⊛ b, the arithmetic 
rounds correctly  (IEEE does), which leads to the following proper ty: 
For all ﬂ oating point x,  y , there exists ǫ with |ǫ| ≤ ǫmachine  such that 
x  ⊛ y  =  (x  ∗ y)(1  +  ǫ) 
•  Round to nearest even in the case of ties 

9 

MIT OpenCourseWare
http://ocw.mit.edu 

18.335J / 6.337J Introduction to Numerical Methods
Fal   l 2010


For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms . 



