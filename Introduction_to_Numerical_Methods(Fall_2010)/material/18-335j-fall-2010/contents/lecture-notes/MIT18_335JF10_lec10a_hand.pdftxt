Lecture 5

Gram-Schmidt Orthogonalization


MIT 18.335J / 6.337J


Introduction to Numerical Methods


Per-Olof Persson


September 21, 2006


1


Gram-Schmidt Projections 


•	 The or thogonal vectors produced by Gram-Schmidt can be written in 
terms of projectors 

q1  = 

P1a1 
√P1a1√

,

q2  = 

P2a2	
√P2a2√

, 

. . . ,  qn  = 

Pnan 
√Pnan√ 

where 

 
 
 
 
�
�
�
�
�
 
 
 
�
�
�
Pj  = I − Qˆ j−1Qˆ �  with Qˆ j−1  =  q1 
  · · · 
 q2 
 qj−1
�
�
�
j−1 
 
�
�
�
�
�
�
•	 Pj  projects or thogonally onto the space orthogonal to ∗q1 , . . . , qj−1 ∞, 
and rank(Pj ) = m − (j − 1) 

 

2


The Modiﬁed Gram-Sc hmidt Algorithm 


•	 The projection Pj  can equivalently be written as 
= P�qj−1  · · · 
P�q2 P�q1 
Pj 

where (last lecture) 

P�q  = I − qq � 
•	 P�q  projects or thogonally onto the space orthogonal to q , and 
rank(P�q ) = m − 1 
•	 The Classical Gram-Schmidt  algorithm computes an or thogonal vector by 
vj  = Pj aj 

while the Modiﬁed  Gram-Schmidt  algorithm uses 
= P�qj−1  · · · 
P�q2 P�q1 aj 
3 

vj 

Classical vs. Modiﬁed Gram-Sc hmidt


•  Small modiﬁcation  of classical G-S gives modiﬁed  G-S (but see next slide) 
•  Modi ﬁed  G-S is numerically stable (less sensitive to rounding errors) 
Classical/Modiﬁed  Gram-Schmidt


for j  = 1 to n 
vj  = aj 
for i = 1 to j − 1 
 
�
r = q a
�
i 
j
ij
rij  = qi vj 
�
vj  = vj  − rij qi 
rj j  = √vj √2 
qj  = vj /rj j 

4


(CGS)

(MGS) 

Implementation of Modi ﬁed Gram-Sc hmidt


•	 In modiﬁed  G-S, P�qi  can be applied to all vj  as soon as qi  is known 
• 
Makes the inner loop iterations independent (like in classical G-S) 

Classical Gram-Schmidt 

Modiﬁed Gram-Sc hmidt 

for	 j  = 1 to n 
vj  = aj

for i = 1 to j − 1

� 
rij	 = qi aj 
vj  = vj  − rij qi 
rj j  = √vj √2 
qj	 = vj /rj j 

for i = 1 to n

vi  = ai

for	 i = 1 to n 
rii  = √vi√ 
qi  = vi/rii 
for j  = i + 1 to n
� 
rij  = qi vj 
vj  = vj  − rij qi 

5 

Example: Classical vs. Modiﬁed Gram-Sc hmidt 

• 

•  Compare classical and modiﬁed  G-S for the vectors 
a1  = (1, �, 0, 0)T , a2  = (1, 0, �, 0)T , a3  = (1, 0, 0, �)T

making the approximation 1 + �2  � 1

Classical: 

r11  = →1 + �2  � 1,
q1  = v1/1 = (1, �, 0, 0)T 
v1  � (1, �, 0, 0)T ,
v2  � v2  − 1q1  = (0, −�, �, 0)T 
v2  � (1, 0, �, 0)T ,
T a2  = 1,
r12  = q1 
r22  = →2�,  q2  = v2/r22  = (0, −1, 1, 0)T /→2 
v3  � (1, 0, 0, �)T ,
r13  = q T a3  = 1,
v3  � v3  − 1q1  = (0, −�, 0, �)T 
1

r23  = q T a3  = 0,
v3  � v3  − 0q2  = (0, −�, 0, �)T

2

r33  = →2�,  q3  = v3/r33  = (0, −1, 0, 1)T /→2

6 

Example: Classical vs. Modiﬁed Gram-Sc hmidt 

• 

Modi ﬁed:

r11  = →1 + �2  � 1,
q1  = v1/1 = (1, �, 0, 0)T 
v1  � (1, �, 0, 0)T ,
r12  = q T v2  = 1,
v2  � v2  − 1q1  = (0, −�, �, 0)T 
v2  � (1, 0, �, 0)T ,
1 
r22  = →2�,  q2  = v2/r22  = (0, −1, 1, 0)T /→2 
v3  � (1, 0, 0, �)T ,
v3  � v3  − 1q1  = (0, −�, 0, �)T 
T v3  = 1,
r13  = q1 
r23  = q v3  = �/→2,
v3  � v3  − r23q2  = (0, −�/2, −�/2, �)T 
T 
2

q3  = v3/r33  = (0, −1, −1, 2)T /→6

r33  = →6�/2,

•  Check Or thogonality: 
–  Classical:  qT q3  = (0, −1, 1, 0)(0, −1, 0, 1)T /2 = 1/2
2 
–  Modiﬁed:  q q3  = (0, −1, 1, 0)(0, −1, −1, 2)T /→12 = 0 
T
2 
7 

Operation Count


ﬂops” – in 

•  Count number of ﬂoating points  operations  – “
•  Each +, −, ←, /, or → 
counts as one  ﬂop 
•  No distinction between real and complex 
•  No consideration of memory accesses or other performance aspects 

an algorithm 

8


Operation Count - Modiﬁed G-S 


•  Example: Count all +, −, ←, / in the Modiﬁed  Gram-Schmidt algorithm 
(not just the leading term) 

(1)  for i = 1 to n 
vi  = ai 
(2) 
(3)  for i = 1 to n 
rii  = √vi√ 
(4) 
qi  = vi/rii 
for j  = i + 1 to n 
rij  = q � 
i vj 
vj  = vj  − rij qi 

(7) 

(8) 

(5) 

(6) 

m multiplications, m − 1 additions 
m divisions 

m multiplications, m − 1 additions 
m multiplications, m subtractions 

9


Operation Count - Modiﬁed G-S 


= 

•  The total for each operation is 
 
⎝
�
n 
n 
 
 
n
 = n(m − 1) + 
⎞
⎞
⎞
(m − 1)(n − i) = 
m − 1�
#A = 
m − 1 + 
�
i=1 
i=1 
j=i+1 
1 
n(n − 1)(m − 1) 
n(n + 1)(m − 1)
= n(m − 1) + 
2

2
n 
n 
 
 
n
1

⎞
⎞ ⎞
m =  m(n − i) =  mn(n − 1)

2 
i=1  j=i+1 
i=1 
 
�
⎝
n 
 
n
 = mn +
⎞
⎞
m +
2m
�
�
i=1 
j=i+1 
2mn(n − 1) 
2 
= mn +
= mn 
2 

2m(n − i) =


n 
⎞
i=1 

#S  = 

#M  = 

n 
 
⎞
#D =  m = mn 
i=1 

10




Operation Count - Modiﬁed G-S 


and the total  ﬂop count is 


1 
1
n(n + 1)(m − 1) +  mn(n − 1) + mn 2  + mn = 
2

2
1

1
2mn 2  + mn − 
n 2  − 
n � 2mn 2 
2 
2 
•  The symbol � indicates asymptotic value as m, n ≈ ∼ (leading term) 
•  Easier to ﬁnd just  the leading term: 
–  Most work done in lines (7) and (8), with 4m ﬂops per iter ation 

– 

Including the loops, the total becomes 

 

 

n
n
�
�
i=1  j=i+1 

n 
 
�
4m = 4m 
(n − i) � 4m
i=1 
11


 
i = 2mn 2 

n 
�
i=1 

MIT OpenCourseWare
http://ocw.mit.edu 

18.335J / 6.337J Introduction to Numerical Methods 
Fall 2010
 

For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms . 

