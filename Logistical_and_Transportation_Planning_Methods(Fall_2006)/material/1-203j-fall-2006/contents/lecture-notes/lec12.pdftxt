Spatially Distributed 
Queues

M/G/1
2 Servers
N servers
Approximations

Why Spatial Queues?

(cid:97)Demand responsive transportation systems
(cid:97)Organ donation queues
(cid:97)Warehouses
(cid:97)Supply chains
(cid:97)Cell phone systems
(cid:97)People waiting to be evacuated in a 
hurricane

M/G/1

(0,Y0)

YA

Directions
Of Travel

Ambulance

(0,0)

XA

(X0,0)

M/G/1M/G/1

(0,Y0)

YA

Directions
Of Travel

Ambulance

(0,0)

XA

(X0,0)

M/G/1

(cid:97)Ambulance always returns home with 
each service;  standard M/G/1 applies
(cid:97)But suppose we have an emergency 
repair vehicle that travels directly from one 
customer to the next?…...

M/G/1with different 1st 
service time

2 = expected value and variance,respectively,  
S1 ,σS1
              of the 1st service time in a busy period
2 = expected value and variance,respectively,
S ,σS2
2
              of the 2nd 
&  all succeeding service times in a busy period
S2
λ < 1
= 1 − P0 = fraction of time server is busy
ρ

M/G/1with different 1st 
service time

ρ=

λS1
1 −λ( S2 − S1 )

L = ρ+

λ2
1 − λ( S2 − S1 )

2 +λ{S1(σS 2
2 ) − S 2 (σS1
2 )
2 + S1
2 + S 2
2 + S1
σS1
[
2(1 −λS 2)

]

M/G/1with different 1st 
service time

Little' s Law : Buy one, get three others for free!

L =λW

Lq = λWq

See the book, Eqs. (5.0) - (5.5)

M/G/1with different 1st 
service time

(cid:97)Does this new more general M/G/1 model 
apply exactly to the ambulance problem?

(cid:97)Why or why not?

Two-Server “Hypercube”
Queueing Model

(cid:97)Distinguishable servers
(cid:97)Different workloads (due to geography)
(cid:97)Can appear with or without queueing
(cid:96)With -- usually FCFS
(cid:96)Without -- usually means a backup contract 
service is in place

Our Effort Involves In-the-
Field Research Visitations, to 
Learn of Current Emergency 
Response Services

A

B-A

B = “Service Region”

Poisson Arrivals from any sub-region A

λ(B-A)=λ2

A

B-A

λ(A)=λ1

B = “Service Region”

λ = λ1+ λ2

Service Discipline

(cid:97)1st Dispatch Preference to ‘primary 
server’
(cid:97)Otherwise, assign customer to other 
server, if available
(cid:97)Otherwise, job is ‘lost” (What happens in 
practice?)

1,0

1,1

0,0

0,1

1,0

λ2

μ

0,0

λ

μ 

λ1

μ

1,1

λ

μ

0,1

Balance of Flow Equations, Loss System

OK?

1,0

λ2

μ

0,0

λ

μ 

λ1

μ
OK?

1,1

λ

μ

0,1

Balance of Flow Equations,
Finite Capacity Queue System

λ

1,1,3

1,0

λ2

μ

0,0

λ

μ 

λ1

μ

λ

1,1,2

2μ

λ

1,1

1,1,1

2μ

2μ

λ

μ

0,1

Balance of Flow Equations,
Infinite Capacity Queue System

λ

λ

1,1,2

λ
1,1,3

2μ

2μ

1,0

λ2

μ

0,0

λ

μ 

λ1

μ

λ

1,1

1,1,1

2μ

2μ

λ

μ

0,1

Balance of Flow Equations, Loss System

P00 (λ1 + λ2) = P01μ+ P10μ

P01 (λ+ μ) = P11μ+ P00 λ1

Etc.
P00 +P10+P01+P11 = 1

Workload and Imbalances

(cid:97)ρ1 = W1 = P01 + P11
(cid:97)ρ2 = W2 = P10 + P11
(cid:97)Workload Imbalance = ΔW = |W1 - W2|

To Obtain Travel Times, 
We Must Have Server 
Response Patterns
(cid:97)fnj = fraction of dispatches that are server 
n to response area j 
(cid:97)Tn(C) = average time for server n to travel 
to a customer in region C
(cid:97)T(A) = average system-wide travel time, 
assuming that server 1’s primary 
response area is region A.

Average System-Wide 
Travel Time

T(A)=f11T1(A) + f22T2(B-A)
+f12T1(B-A) + f21T2(A)

Average System-Wide 
Travel Time

T(A)=f11T1(A) + f22T2(B-A)
+f12T1(B-A) + f21T2(A)

Queueing

Average System-Wide 
Travel Time

T(A)=f11T1(A) + f22T2(B-A)
+f12T1(B-A) + f21T2(A)

Geometry

How do we obtain the fnj’s?

(cid:97)Consider a long time interval T
(cid:97)f12=(# requests that assign unit 1 to area 2)/ 
(total # requests answered)
(cid:97)Total # requests answered = (1-P11)λT
(cid:97)Average # requests that are “server 1 to area 
2” is λ2TP10.  Why?
(cid:97)Therefore f12 =(λ2TP10 / [1-P11]λT) =             
{λ2/(1-P11)λ)} P10

How do we generalize this 
to Nservers?

New York City 
EMS  Hypercube

New York City 
EMS  Hypercube

Rectangular City Example

y

-1

+1
x

x=-0.25

x=0.75

Rectangular City Example

y

1-w

w

High
Demand
Area:
50%
workload

-1

x=-0.25

*

+1
x

x=0.75

Equal travel time
Boundary line

Optimal Districting

(cid:97)“Dispatch the closest available server’ is 
often not optimal, where ‘optimal’ implies 
minimizing mean travel time
(cid:97)May not be good for reducing workload 
imbalance either
(cid:97)With numerical example in book, the 
optimal boundary line is shifted to the right 
by 10/126 miles.

Rectangular City Example

y

High
Demand
Area:
50%
workload

1-w*=73/126

w*=53/126

-1

x=-0.25

*

10/126

+1
x

x=0.75

Equal travel time
Boundary line

Optimal
Boundary Line

Boundary Line Comparison

(cid:97)Equal travel time boundary line
(cid:96)T(Aw=1/2)=0.46246
(cid:96)ΔW = 0.05236
(cid:97)Optimal boundary line
(cid:96)T(Aw*)=0.46166
(cid:96)ΔW = 0.04405

Two server Loss Model:  
Boundary Line Result

(cid:97)To minimize mean city-wide mean 
travel time:
(cid:97)The optimal partitioning consists of a 
set of points within the region that is a 
constant travel time s0 closer to facility 
1 than to facility 2.  (Carter, Chaiken, 
Ignall, 1972)
(cid:97)Does our rectangular city example work 
for this? 

S0: Optimal Partitioning
α≡ λ/ 2μ
μ1 = μ2
S0 = [2α/(2α+ 1)]{T2 ( B ) − T1 ( B)}

Rectangular City Example

y

High
Demand
Area:
50%
workload

1-w*=73/126

w*=53/126

-1

x=-0.25

*

S0/2=10/126

+1
x

x=0.75

Equal travel time
Boundary line

Optimal
Boundary Line

2

Directions
Of Travel

1

2

Directions
Of Travel

Equal travel time 
boundary line

1

Directions
Of Travel

2

S0 growing larger

1

2

Directions
Of Travel

1

And what about the corner 
case?

2

Directions
Of Travel

1

The S0 result is general

(cid:97)Works for discrete grid
(cid:97)One way streets
(cid:97)General transportation network

(cid:97)Rick Jarvis, in an MIT Ph.D. thesis, 
generalized this to N servers

