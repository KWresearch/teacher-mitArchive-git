Queueing Systems: Lecture 2 

Amedeo R. Odoni

October 11, 2006


Lecture Outline 

•  M/M/m 
•  M/M/∞ 
•  M/M/1: finite system capacity, K 
•  M/M/m: finite system capacity, K 
•  M/M/m: finite system capacity, K=m 
•  Related observations and extensions 
•  M/E2/1 example 
•  M/G/1: epochs and transition probabilities 
Reference: Chapter 4, pp. 203-217 

M/M/m (infinite queue capacity) 

λ 

λ 

λ 

λ 

λ 

λ 

λ 

0 

1 

2 

…

m-1 

m 

μ 

2μ

3μ

(m-1)μ 

mμ 

mμ 

m+1 

…. 

mμ 

λ ) n 
( 
μPn  = 
P0 
n!

λ ) n

( 
μ
P0 
n − m
m 
⋅ m! 
• Condition for steady state? 

Pn  = 

for  n = 0, 1, 2,...., m − 1 

for  n = m, m + 1, m + 2,.... 

M/M/∞ (infinite no. of servers)


λ 

λ 

λ 

λ 

λ 

λ 

λ 

0 

1 

2 

…

m-1 

m 

μ 

2μ

3μ

(m-1)μ 

mμ 

(m+1}μ 

m+1 

… 

(m+2)μ 

for  n = 0, 1, 2,..... 

λ

− ( 
)

λ ) n  ⋅ e 
μ 
( 
μPn  = 
n! 
• N is Poisson distributed! 
• L = λ / μ ; W = 1 / μ ; Lq  = 0; Wq = 0 
• Many applications 

M/M/1: finite system capacity, K; 
customers finding system full are lost 

λ 

λ

λ 

λ

λ 

0 

1 

2 

μ 
μ
ρ n  ⋅ (1 
) 
−
ρ 
K 
1
+
1 − ρ


Pn  =

…

μ

K-1 

K 

μ 

μ 

for  n = 0, 1, 2, ....., K


• Steady state is always reached 
• Be careful in applying Little’s Law! Must count only the 
customers who actually join the system: 
λ′ = λ⋅ (1 − PK ) 

M/M/m: finite system capacity, K; 
customers finding system full are lost 

λ 

λ

λ

λ 

λ 

λ

λ

λ 

0

1

2 

…… 

m 

m+1 

……

K-1 

K 

μ 

2μ 

3μ 

mμ 

mμ 

mμ 

mμ 

mμ

• Can write system balance equations and obtain 
closed form expressions for Pn, L, W, Lq, Wq 

• Often useful in practice 

M/M/m: finite system capacity, m; 
special case! 

λ 

λ

λ 

λ

λ 

0 

1 

2 

……

m-1 

m 

2μ

3μ

(m-1)μ 

mμ 

Pn  =	

for  n = 0, 1, 2,...m


μ 
λ ) n 
( 
μ 
n! 
λ ) i

( 
m  μ 
∑ 
i!
i = 0 
• Probability of full system, Pm, is “Erlang’s loss formula” 
• Exactly same expression for Pn  of M/G/m system with K=m 

M/M/∞ (infinite no. of servers)


λ 

λ 

λ 

λ 

λ 

λ 

λ 

0 

1 

2 

…

m-1 

m 

μ 

2μ

3μ

(m-1)μ 

mμ 

(m+1}μ 

m+1 

… 

(m+2)μ 

for  n = 0, 1, 2,..... 

λ

− ( 
)

λ ) n  ⋅ e 
μ 
( 
μPn  =	
n! 
• N is Poisson distributed! 
• L = λ / μ ; W = 1 / μ ; Lq  = 0; Wq = 0 
• Many applications 

Variations and extensions of 
birth-and-death queueing systems 
•	 Huge number of extensions on the previous
models 
•	 Most common is arrival rates and service 
rates that depend on state of the system; 
some lead to closed-form expressions 
•	 Systems which are not birth-and-death, but 
can be modeled by continuous time, discrete 
state Markov processes can also be
analyzed [“phase systems”] 
•	 State representation is the key (e.g. M/Ek/1) 

M/G/1: Background 

•	 Poisson arrivals; rate λ 
•	 General service times, S; fS(s); E[S]=1/μ; σS 
Infinite queue capacity 
•	
•	 The system is NOT a continuous time Markov process 
(most of the time “it has memory”) 
•	 We can, however, identify certain instants of time 
(“epochs”) at which all we need to know is the number 
of customers in the system to determine the probability
that at the next epoch there will be 0, 1, 2, …, n 
customers in the system 
•	 Epochs = instants immediately following the completion 
of a service 

M/G/1: Transition probabilities for 
system states at epochs (1) 
N = number of customers in the system at a random 
epoch, i.e., just after a service has been completed 
N' = number of customers in the system at the 
immediately following epoch 
R = number of new customers arriving during the
service time of the first customer to be served after 
an epoch 

N' = N + R – 1  

if  N > 0 

N' = R 
if N = 0 
•  Note: make sure to understand how R is defined 

Epochs and the value of R 

N 

Between t1 and t2, R=2 
Between t5 and t6, R=0 

t1 

t2  t3 

t4 

t5 

t6 

t 

M/G/1: Transition probabilities for 
system states at epochs (2) 
•	 Transition probabilities can be written in
terms of the probabilities: 

P[number of new arrivals during a service
time = r] = 
∞ (λt ) r  ⋅ e −λt 
α r  = ∫
0 
r! 
•	 Can now draw a state transition diagram
at epochs 

⋅  f S (t ) ⋅ dt 

for r  = 0, 1, 2,...

