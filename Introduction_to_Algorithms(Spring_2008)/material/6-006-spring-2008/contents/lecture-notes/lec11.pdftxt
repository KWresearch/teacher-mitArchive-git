MIT OpenCourseWare 
http://ocw.mit.edu

6.006 Introduction to Algorithms
Spring 2008

For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms. 

Lecture  11 

Sorting  IV:  Stable  Sorting,  Radix  Sort 

6.006  Spring  2008


Lecture  11:  Sorting  IV:  Stable  Sorting,  Radix  Sort 

Lecture  Overview 
•  Stable  Sorting 
• 
•
← 
Quick  Sort 
•  Sorting  Races 

Radix  Sort 

not  oﬃcially  a  part  of  6.006

Stable  Sorting 

Preserves  input  order  among  equal  elements 

Figure  1:  Stability 

Selection  Sort  and  Heap:  Find  maximum  element  and  put  it  at  end  of  array  (swap  with 
element  at  end  of  array)  NOT  STABLE! 

Figure  2:  Selection  Sort  Instability 

Radix  Sort 
•  Herman  Hollerith  card-sorting  machine  for  1890  census. 
•  Digit  by  Digit  sort  by mechanical machine 

1.  Examine  given  column  of  each  card  in  a  deck 
2.  Distribute  the  card  into  one  of  10  bins 

1 

3* 14’counting sort is stable414’3*433merge sort is stable3     2a     2b   2b    2a    3  ←define 2a <2bLecture  11 

Sorting  IV:  Stable  Sorting,  Radix  Sort 

6.006  Spring  2008


3.  Gather  cards  bin  by  bin,  so  cards  with  ﬁrst  place  punched  are  on  top  of  cards 
with  second  place  punched,  etc. 

Figure  3:  Punch  Card 

MSB  vs.  LSB? 

Sort  on  most  signiﬁcant  digit  ﬁrst  or  least  signiﬁcant  digit  ﬁrst? 

MSB  strategy:  Cards  in  9  of  10  bins  must  be  put  aside,  leading  to  a  large  number  of 
intermediate  piles 

LSB  strategy:  Can  gather  sorted  cards  in  bins  appropriately  to  create  a  deck! 

Example 

Figure  4:  Example  of Radix  Sort 

2


.....80 cols   10 places346847325533259779605734463825355230567799734834622335550969577334467825355239567709Digit sort needs to be stable, else will get wrong result!Lecture  11 

Sorting  IV:  Stable  Sorting,  Radix  Sort 

6.006  Spring  2008


Analysis 

Assume  counting  sort  is  auxiliary  stable  sort.  Θ(n + k)  complexity. 

Suppose  we  have  n  words  of  b  bits  each. 

One  pass  of  counting  sort  Θ(n + 2b )

b  passes  of  counting  sort 
Θ(b(n + 2)) = Θ(nb)

bn 
b 
b
) 
passes 
Θ(  (n + 2r ))  minimized  when  r =  lg n  Θ( 
lg n 
r 
r

Quick  Sort 

This  section  is  for  “enrichment”  only. 

Divide:  Partition  the  array  into  two.  Sub-arrays  around  a  pivot  x  such  that  elements  in 
lower  sub  array  ≤ x ≤  elements  in  upper  sub  array.  ←  Linear  Time 

Figure  5: Pivot Definition

Conquer:  Recursively  sort  the  two  sub  arrays 

Combine:  Trivial 

If  we  choose  a  pivot  such  that  two  sub  arrays  are  roughly  equal: 
⇒ 
T (n) = 2T (n/2) + Θ(n) =  T (n) = Θ(n lg n)

If  one  array  is much  bigger: 
T (n) = T (n − 1) + Θ(n) = ⇒  T (n) = Θ(n 2 ) 

Average  case  Θ(n lg n)  assuming  input  array  is  randomized! 

3


≤ x≥ x xpivotLecture  11 

Sorting  IV:  Stable  Sorting,  Radix  Sort 

6.006  Spring  2008


Sorting  Races 

Click  here  for  a  reference  on  this. 

Bubble Sort:  Repeatedly step through the list to be sorted.  Compare 2 items, swap if they 
are  in  the  wrong  order.  Continue  through  list,  until  no  swaps.  Repeat  pass  through 
list  until  no  swaps.  Θ(n 2 ) 

Shell  Sort:  Improves  insertion  sort  by  comparing  elements  separated  by  gaps  Θ(nlg2 n) 

4


