MIT OpenCourseWare 
http://ocw.mit.edu

6.006 Introduction to Algorithms
Spring 2008

For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms. 

Lecture  16	

Shortest  Paths  II:  Bellman-Ford 

6.006  Spring  2008


Lecture  16:  Shortest  Paths  II:  Bellman-Ford 

Lecture  Overview 
• 
Review:  Notation 
•  Generic  S.P.  Algorithm 
•  Bellman  Ford  Algorithm 
–  Analysis 
–  Correctness 

Recall: 

path p  =	 < v0 , v1 ,  . . . ,  vk  > 
� 
(v1 , vi+1 ) �E  0 ≤ i < k 
k−1
i−0 
Shortest path weight from u to v  is δ(u, v).  δ(u, v) is ∞ if v  is unreachable from u, undeﬁned 
if  there  is  a  negative  cycle  on  some  path  from  u  to  v . 

w(vi , vi+1 ) 

w(p) = 

Figure  1:  Negative Cycle

 

Generic  S.P.  Algorithm 

d [v ]  ← ∞
← 
Π [v ]	
NIL

Initialize:	

for  v � V : 
0← 
d[S ]
⎡ 
repeat 
Main:	
select  edge  (u, v) 
“Relax”  edge  (u, v)  ⎢⎣  d[v ] ← d[u] + w(u, v) 
[somehow] 
if d[v ] > d[u] + w(u, v) : 
u← 
π [v ] 
until  you  can’t  relax  any  more  edges  or  you’re  tired  or  . . . 

1 

uv-veLecture  16 

Shortest  Paths  II:  Bellman-Ford 

6.006  Spring  2008


Complexity: 

Termination:  Algorithm will continually relax edges when there are negative cycles present. 

Figure  2:  Algorithm may  not  terminate  due  to  negative Cycles

 

Complexity  could  be  exponential  time  with  poor  choice  of  edges. 

Figure  3:  Algorithm  could  take  exponential  time

 

2


0v134-1ud[u]1211-40-1-2210etcv0v1v2v3v4v5v648101213141310111246891011   (v0, v1)    (v1, v2)all of v2, vn    (v0, v2) all of v2, vnT(n) = θ(2n/2)  T(n) = 3 + 2T(n-2)  ORDERLecture  16 

Shortest  Paths  II:  Bellman-Ford 

6.006  Spring  2008


5-Minute  6.006 

Here’s  what  I  want  you  to  remember  from  6.006  ﬁve  years  after  you  graduate 

Figure  4:  Exponential  vs. Polynomial

 

Bellman-Ford(G,W,S) 

Initialize  () 
for  i = 1  to  | v  | −1 
for  each  edge  (u, v)�E : 
Relax(u, v) 
for  each  edge  (u, v)�E 
do  if  d[v ] > d[u] + w(u, v) 
then  report  a  negative-weight  cycle  exists 

At  the  end,  d[v ] = δ(s, v),  if  no  negative-weight  cycles 

Figure  5:  The  numbers  in  circles  indicate  the  order in  which  the  δ  values  are  computed

 

3


T(n)  =  C1 + C2T(n - C3)T(n)  =  C1 + C2T(n / C3)Exponential BadPolynomial Goodif  C2 > 1, trouble! Divide & Explode         C2 > 1 okay provided C3 > 1     if C3 > 1Divide & ConquerB5AECD4-3-12213∞-1∞∞∞01138265474    223End of pass 1B5AECD4-3-12213-11∞∞201138265471    -223End of pass 2 (and 3 and 4)Lecture  16 

Shortest  Paths  II:  Bellman-Ford 

6.006  Spring  2008


Theorem: 
If  G = (V , E )  contains  no  negative  weight  cycles,  then  after  Bellman-Ford  executes  d[v ] = 
δ(u, v)  for  all  v�V . 
Proof: 
v�V  be  any  vertex.  Consider  path  p  from  s  to  v  that  is  a  shortest  path  with  minimum 
number  of  edges. 

Figure  6:  Illustration  for proof 

 

Initially  d[v0 ] = 0 = δ(S, V0 )  and  is  unchanged  since  no  negative  cycles. 

After  1  pass  through  E ,  we  have  d[v1 ] = δ(s, v1 )

After  2  passes  through  E ,  we  have  d[v2 ] = δ(s, v2 )

After  k  passes  through  E ,  we  have  d[vk ] = δ(s, vk )

No  negative  weight  cycles  = ⇒  p  is  simple  = ⇒  p  has  ≤| V  | −1  edges 


Corollary 
If  a  value  d[v ]  fails  to  converge  after  |  V  | −1  passes,  there  exists  a  negative-weight  cycle 
reachable  from  s. 

4


p:Sv0v1v2vkvδ (s, vi) = δ (s, vi-1) + w (vi-1,vi) 