MIT OpenCourseWare 
http://ocw.mit.edu

6.006 Introduction to Algorithms
Spring 2008

For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms. 

Lecture  15 

Shortest  Paths  I:  Intro 

6.006  Spring  2008


Lecture  15:  Shortest  Paths  I:  Intro 

Lecture  Overview 
• 
Homework  Preview 
•  Weighted  Graphs 
•  General  Approach 
•  Negative  Edges 
•  Optimal  Substructure 

Readings 

CLRS,  Sections  24  (Intro) 

Motivation: 

)
Shortest  way  to  drive  from  A  to  B ( Google maps  “get  directions” 
Formulation:  Problem  on  a  weighted  graph  G(V , E )  W  : E → � 

Two  algorithms:  Dijkstra  O(V  lg V  + E )  assumes  non-negative  edge  weights 
Bellman  Ford  O(V E )  is  a  general  algorithm 

Problem  Set  5  Preview: 
•  Use  Dijkstra  to  ﬁnd  shortest  path  from  CalTech  to MIT 

)
–  See  “CalTech  Cannon  Hack”  photos (search web.mit.edu 
–  See  Google Maps  from  CalTech  to MIT 
•  Model  as  a  weighted  graph  G(V , E ), W  : E → � 

–  V  =  vertices  (street  intersections) 
–  E  =  edges  (street,  roads);  directed  edges  (one  way  roads) 
–  W (U, V ) =  weight  of  edge  from  u  to  v  (distance,  toll) 
path  p  = < v0 , v1 , . . . vk  > 
� 
for  0 ≤ i < k 
(vi , vi+1 ) � E 
k−1
i=0 

w(vi , vi+1 ) 

w(p) = 

1


Lecture  15 

Shortest  Paths  I:  Intro 

6.006  Spring  2008


Weighted  Graphs: 

Notation: 
p 
means  p  is  a  path  from  v0  to  vk . (v0 )  is  a  path  from  v0  to  v0  of  weight  0. 
v0  −→  vk 
Deﬁnition: 
� 
� 
⎧ ⎪⎨ ⎪⎩

Shortest  path  weight  from  u  to  v  as 
min  w(p) : 
∞ 
Single  Source  Shortest  Paths: 

otherwise  (v  unreachable  from  u)


if  ∃  any  such  path 

δ(u, v) =


p 
−→


v

u

Given G = (V , E ), w  and  a  source  vertex S ,  ﬁnd  δ(S, V )  [and  the  best  path]  from S  to  each 
v�V . 
Data  structures: 

� 

� 
d[v ]
 =  value  inside  circle

0 
if  v = s 
= 
∞ 
otherwise 
=  δ(s, v) ⇐ = 
at  end 
≥  δ(s, v)  at  all  times 

d[v ] 

⇐ = 

initially 

d[v ]  decreases  as  we  ﬁnd  better  paths  to  v 
Π[v ] =  predecessor  on  best  path  to  v ,  Π[s] = NIL 

2


Lecture  15 

Example: 


Shortest  Paths  I:  Intro 

6.006  Spring  2008


Figure  1:  Shortest  Path  Example:  Bold  edges  give  predecessor Π  relationships 

Negative-Weight  Edges: 
•  Natural  in  some  applications  (e.g.,  logarithms  used  for  weights) 
•  Some  algorithms  disallow  negative  weight  edges  (e.g.,  Dijkstra) 
•

⇒
If  you  have  negative  weight  edges,  you  might  also  have  negative  weight  cycles  = 
may  make  certain  shortest  paths  undeﬁned! 

Example: 

See  Figure  2 

B → D → C → B  (origin)  has  weight  −6 + 2 + 3 = −1 < 0! 
Shortest  path  S  −→  C  (or  B , D , E )  is  undeﬁned.  Can  go  around  B  →  D  →  C  as  many 
times  as  you  like 
Shortest  path  S  −→ A  is  deﬁned  and  has  weight  2 

3 

1A2B0S5C3D3E4F22211331114253Lecture  15	

Shortest  Paths  I:  Intro 

6.006  Spring  2008


Figure  2:  Negative-weight  Edges 

If negative weight  edges are present,  s.p.  algorithm  should ﬁnd negative weight  cycles  (e.g., 
Bellman  Ford) 

General  structure  of  S.P.  Algorithms  (no  negative  cycles) 

d [v ]  ← ∞
← 
Π [v ] 
NIL

Initialize:	

for  v � V : 
0← 
d[S ]
⎡ 
repeat 
Main:	
select  edge  (u, v) 
“Relax”  edge  (u, v)  ⎣⎢ 
[somehow] 
if d[v ] > d[u] + w(u, v) : 
d[v ] ← d[u] + w(u, v) 
u← 
π [v ] 
until  all  edges  have  d[v ]  ≤  d[u] + w(u, v) 

4


ABSCDE2-21342-6Lecture  15 

Shortest  Paths  I:  Intro 

6.006  Spring  2008


Complexity: 

Termination? 
(needs  to  be  shown  even  without  negative  cycles) 
Could  be  exponential  time  with  poor  choice  of  edges. 

Figure  3:  Running Generic Algorithm 

Optimal  Substructure: 

Theorem:  Subpaths  of  shortest  paths  are  shortest  paths 
Let  p  = < v0 , v1 , . . . vk  >  be  a  shortest  path 
0 ≤ i ≤ j  ≤ k 
Let  pij  = < vi , vi+1 , . . . vj  > 
Then  pij  is  a  shortest  path. 
Proof: 

Figure  4:  Optimal  Substructure  Theorem 
If  p�
ij  is  shorter  than  pij ,  cut  out  pij  and  replace  with  p�
ij ;  result  is  shorter  than  p. 
Contradiction. 

5 

v0v1v2v3v4v5v6v74810121314131011126784689107911T(0) = 0   v0, v1    v1, v2T(n+2) = 3 + 2T(n)  v2, vn    v0, v2T(n) = θ(2n/2)   v2, vnp = v0vivjvkp0jpijpjkpij’Lecture  15 

Shortest  Paths  I:  Intro 

6.006  Spring  2008


Triangle  Inequality: 

Theorem:  For  all  u, v , x �X ,  we  have 
δ (u, v) ≤ δ (u, x) + δ (x, v) 

Proof: 

Figure  5:  Triangle  inequality 

6


uvxδ (u,v)δ (x,v)δ (u,x)