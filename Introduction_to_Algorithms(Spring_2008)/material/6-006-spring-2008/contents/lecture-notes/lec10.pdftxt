MIT OpenCourseWare 
http://ocw.mit.edu

6.006 Introduction to Algorithms
Spring 2008

For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms. 

Lecture  10 

Sorting  III:  Linear  Bounds  Linear-Time  Sorting 

6.006  Spring  2008


Lecture  10:  Sorting  III:  Linear  Bounds 
Linear-Time  Sorting 

Lecture  Overview 
•  Sorting  lower  bounds 

–  Decision  Trees 
•  Linear-Time  Sorting 

–  Counting  Sort 

Readings 

CLRS  8.1-8.4 

Comparison  Sorting 

Insertion  sort,  merge  sort  and  heap  sort  are  all  comparison  sorts.

The  best  worst  case  running  time  we  know  is  O(n lg n).  Can  we  do  better?


Decision-Tree  Example 
· · · 
an  >.

Sort  < a1 , a2 ,

Figure  1:  Decision  Tree 
Each  internal node  labeled i : j , compare ai  and aj , go  left  if ai  ≤ aj , go right otherwise. 

1


1:22:31:31:32:3231321312132123213Lecture  10 

Sorting  III:  Linear  Bounds  Linear-Time  Sorting 

6.006  Spring  2008


Example 

Sort  < a1 , a2 , a3  >=< 9, 4, 6 >  Each  leaf  contains  a  permutation,  i.e.,  a  total  ordering. 

Figure  2:  Decision  Tree  Execution 

Decision  Tree  Model 

Can  model  execution  of  any  comparison  sort.  In  order  to  sort,  we  need  to  generate  a  total 
ordering  of  elements. 
•  One  tree  size  for  each  input  size  n 
•  Running  time  of  algo:  length  of  path  taken 
•  Worst-case  running  time:  height  of  the  tree 

Theorem 

Any  decision  tree  that  can  sort  n  elements  must  have  height  Ω(n lg n). 

Proof:  Tree must  contain ≥ n!  leaves  since  there  are  n!  possible  permutations.  A  height-h 
binary  tree  has  ≤ 2h  leaves.  Thus, 
n!  ≤  2h 
= ⇒  h  ≥ 
lg(n!)  (≥ lg((
≥  n lg n − n lg e 
=  Ω(n lg n) 

n 
)n ) Stirling) 
e 

2 

1:32:32:32311:29 > 4  (a1 > a2)(a2 ≤ a3) 4 ≤  69 > 6  (a1 > a3)4 ≤  6 ≤  9Lecture  10 

Sorting  III:  Linear  Bounds  Linear-Time  Sorting 

6.006  Spring  2008


Sorting  in  Linear  Time 

Counting  Sort:  no  comparisons  between  elements 

Input:  A[1 . . . n]  where  A[j ] � {1, 2, 
, k}

· · · 

Output:  B [1 . . . n]  sorted 


Auxiliary  Storage:  C [1 . . . k ]


Intuition 
Since elements are in the range {1, 2, 
· · · 
then  the  j ’s  such  that  A[j ] = 2,  etc. 
Don’t  compare  elements,  so  it  is  not  a  comparison  sort! 

, k}, imagine collecting all the j ’s such that A[j ] = 1, 

A[j ]’s  index  into  appropriate  positions. 

Pseudo  Code  and  Analysis 

Figure  3:  Counting  Sort 

3


θ(k) θ(n) θ(k) θ(n) {for i ← 1 to kdo C [i] = 0{for j ← 1 to ndo C [A[j]] = C [A[j]] + 1{for i ← 2 to kdo C [i] = C [i] + C [i-1]{for j ← n downto 1do B[C [A[j]]] = A[j]     C [A[j]] = C [A[j]] - 1θ(n+k) Lecture  10 

Sorting  III:  Linear  Bounds  Linear-Time  Sorting 

6.006  Spring  2008


Example 

Note:  Records  may  be  associated  with  the  A[i]’s. 

Figure  4:  Counting  Sort  Execution 

A[n] =  A[5] = 3

C [3]  =  3

B [3]  =  A[5] = 3, C [3] decr.

A[4]  =  4

C [4]  =  5

B [5]  =  A[4] = 4, C [4] decr. 

and  so  on  . . . 

4


143431     2     3     4     5313441     2     3      4      5 A:B:00001     2     3     4   C:0122C:11351     2     3     4   C:24