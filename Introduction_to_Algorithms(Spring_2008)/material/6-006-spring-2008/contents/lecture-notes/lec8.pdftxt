MIT OpenCourseWare 
http://ocw.mit.edu

6.006 Introduction to Algorithms
Spring 2008

For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms. 

Lecture  8 

Sorting  I:  Heaps 

6.006  Spring  2008


Lecture  8:  Sorting  I:  Heaps 

Lecture  Overview 
•  Review:  Insertion  Sort  and Merge  Sort 
• 
Selection  Sort 
•  Heaps 

Readings 

CLRS  2.1,  2.2,  2.3,  6.1,  6.2,  6.3  and  6.4 

Sorting  Review 

Insertion  Sort 

Figure  1:  Insertion  Sort  Example 

Merge  Sort 

Divide n-element array into two subarrays of n/2 elements each.  Recursively sort sub-arrays 
using mergesort.  Merge  two  sorted  subarrays. 

1


524613524613213456425613425613214563keyθ(n2) algorithmLecture  8 

Sorting  I:  Heaps 

6.006  Spring  2008


Figure  2:  Merge  Sort  Example 

In-Place  Sorting 

Numbers re-arranged in the array A with at most a constant  number of them sorted outside 
the  array  at  any  time. 

Insertion  Sort:  stores  key  outside  array  Θ(n2 )  in-place 

Merge  Sort:  Need  O(n)  auxiliary  space  Θ(n lg n)  during merging 

Question :  Can  we  have  Θ(n lg n)  in-place  sorting? 

Selection  Sort 

0. 

i = 1 

1.  Find  minimum  value  in  list  beginning  with  i 

2.  Swap  it  with  the  value  in  ith  position 

3. 

i = i + 1,  stop  if  i = n 

Iterate  steps  0-3  n  times.  Step  1  takes  O(n)  time.  Can  we  improve  to  O(lg n)? 

2


2457236112234567LARθ(n) timeθ(n) auxiliary       space24572361A[1: n/2] A[n/2+1: n]  want sorted A[1: n]w/o auxiliary space?? Lecture  8 

Sorting  I:  Heaps 

6.006  Spring  2008


Figure  3:  Selection  Sort  Example 

Heaps  (Not  garbage  collected  storage) 

A  heap  is  an  array  ob ject  that  is  viewed  as  a  nearly  complete  binary  tree. 

Figure  4:  Binary Heap 

Data  Structure 

root  A[i] 
Node  with  index  i 
PARENT(i)  = � 2 
i � 
LEFT(i)  = 2i 
RIGHT(i)  = 2i + 1 

Note:  NO  POINTERS! 

3 

2154215421542145i = 1θ(n2) time  in-place1614879324110123456789101016148712534937624981Lecture  8 

Sorting  I:  Heaps 

6.006  Spring  2008


length[A]: 

number  of  elements  in  the  array


heap-size[A]:  number  of  elements  in  the  heap  stored  within  array  A

heap-size[A]:  ≤  length[A]


Max-Heaps  and  Min-Heaps 
Max-Heap  Property:  For  every  node  i  other  than  the  root  A[PARENT(i)]  ≥ A[i] 
Height  of  a  binary  heap  O(lg n) 

MAX  HEAPIFY:  O(lg n) maintains  max-heap  property 

BUILD  MAX  HEAP:  O(n)  produces max-heap  from  unordered  input  array 

HEAP  SORT:  O(n lg n) 

Heap  operations  insert,  extract  max  etc  O(lg n). 

Max  Heapify(A,i) 

← 
l 
left(i)
← 
r 
right(i)
if  l ≤  heap-size(A)  and  A[l] > A[i] 
l← 
then  largest 
i← 
else  largest 
if  r ≤  heap-size(A)  and  A[r ] >  largest 
r← 
then  largest 
if  largest  = i 
then  exchange  A[i]  and  A[largest] 
MAX  HEAPIFY(A,  largest) 

This  assumes  that  the  trees  rooted  at  left(i)  and  Right(i)  are  max-heaps.  A[i]  may  be 
smaller  than  children  violating  max-heap  property.  Let  the  A[i]  value  “ﬂoat  down”  so 
subtree  rooted  at  index  i  becomes  a  max-heap. 

4


�
Lecture  8 

Example


Sorting  I:  Heaps 

6.006  Spring  2008


Figure  5:  MAX  HEAPIFY  Example 

5


101641471253493762898110161447125349376298110161487125349376249811081010MAX_HEAPIFY (A,2)heap_size[A]  = 10Exchange A[2] with A[4]Call MAX_HEAPIFY(A,4) because max_heap property is violatedExchange A[4] with A[9]No more calls