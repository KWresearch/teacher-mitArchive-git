MIT OpenCourseWare 
http://ocw.mit.edu
 
 
 
6.006 Introduction to Algorithms 
Spring 2008 
 
 
 
For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms.  
 

Introduction to Algorithms:  6.006 
Massachusetts   Institute  of  Technology  
Professors  Srini  Devadas  and  Erik  Demaine 

March  7,  2008 
Handout  6 

Quiz 1 Practice Problems 

1  Asymptotic Notation 
Decide  whether  these  statements   are  True  or  False.  You  must  brieﬂy  justify  all  your   answers   to 
receive  full  credit. 

1.   If   f (n) = Θ(g(n)) and  g(n) = Θ(h(n)),  then  h(n) = Θ(f (n)) 

2.   If   f (n) = O(g(n)) and  g(n) = O(h(n)),  then  h(n) = Ω(f (n)) 

3.   If   f (n) = O(g(n)) and  g(n) = O(f (n)) then  f (n) = g(n) 

4.  

n
100 

= Ω(n)

2 

Handout 6: Quiz 1 Practice Problems 

5.   f (n) = Θ(n2 ),  where  f (n) is  deﬁned  to  be  the  running  time  of  the  program  A(n): 

def  A(n): 
atuple  =  tuple(range(0,  n))  #  a  tuple  is  an  immutable  version  of  a 
#  list,  so  we  can  hash  it 

S  =  set() 
for  i  in  range(0,  n): 
for  j  in  range(i+1,  n): 
#  add  tuple  (i,...,j-1)  to  set  S 
S.add(atuple[i:j]) 

2  Linked List Equivalence 
Let  S  and   T  be  two  sets   of  numbers,  represented  as  unordered   linked  lists  of  distinct  numbers.  All 
you have  are  pointers to the  heads of the  lists, but  you do not know the list lengths.  Describe  an 
O(min {|S | , |T |})-expected-time  algorithm  to  determine  whether  S  =  T .  You  may  assume  that 
any operation  on  one  or  two  numbers  can  be  performed  in  constant  time. 

Handout 6: Quiz 1 Practice Problems 

3 

3  Hash Table Analysis 
You   are  given  a  hash  table  with n keys  and m slots,  with  the  simple  uniform  hashing  assumption 
(each key is equally likely to be hashed into each slot).  Collisions are resolved by chaining. 
What   is  the  probability  that   the  ﬁrst  slot   ends  up  empty? 

4  Heaps 
1.   The  sequence  �20, 15, 18, 7, 9, 5, 12, 3, 6, 2� is  a  max-heap. 
True  False 
Explain: 

2.   Where  in   a  max-heap  can  the  smallest  element  reside,  assuming  all  elements  are  distinct? 
Include  both  the  location  in   the  array  and  the  location  in  the  implicit  tree  structure. 

3.   Suppose  that  instead  of  using  Build-Heap  to  build   a  max-heap  in  place,  the  Insert 
operation  is   used  n  times.  Starting  with  an  empty  heap,  for   each  element,  use  Insert  to 
insert  it   into  the  heap.  After  each  insertion,  the  heap  still  has  the  max-heap  property,  so  after 
n Insert operations,  it   is   a  max-heap  on  the  n elements. 

(i)  Argue  that   this  heap  construction   runs  in  O(n log n) time. 

(ii)  Argue  that   in   the  worst  case,  this  heap  construction  runs  in  Ω(n log n) time.


4 

Handout 6: Quiz 1 Practice Problems 

5  Python and Asymptotics 
1. Give an example of a built-in Python  operation that does not take  constant time in the size 
of   its  input(s).  What   time  does  it  take? 

2.   Since  dictionary  lookup  takes  constant  expected  time,  one  can  output  all  n keys  in  a  dictio­
nary   in  sorted  order  in   expected  time  O(n). 
True  False 
Explain: 

3.   Write  a  recurrence  for  the  running  time  T (n)  of  f (n),  and  solve  that  recurrence.  Assume 
that  addition  can  be  done  in   constant  time. 

def  f(n):

if  n  ==  1:

return  1

else:

return  f(n-1)+f(n-1)


4.   Write  a  recurrence  for  the  running  time  of  g(n),  and  solve  that  recurrence.  Assume  that 
addition  can  be  done  in   constant   time. 

def  g(n): 
if  n  ==  1: 
return  1 
else: 
x  =  g(n-1) 
return  x+x 

5.   Now  assume  addition  takes  time  Θ(b) where  b  is  the  number   of  bits  in  the  larger  number. 
Write a new  recurrence for the  running time of  g(n),  and  solve  that  recurrence.  Express   your 
ﬁnal  answer  in   Θ-notation. 

Handout 6: Quiz 1 Practice Problems 

5 

6  Hashing 
1.   Given a  hash  table  with  more  slots  than keys,  and  collision  resolution by  chaining,  the worst 
case  running   time  of  a  lookup  is   constant   time. 
True  False 
Explain: 

2.   Linear  probing  satisﬁes  the  assumption   of  uniform  hashing. 
True  False 
Explain: 

3.   Assume  that  m = 2r  for  some  integer  r >  1. We  map a key  k  into  one  of  the  m slots  using 
the  hash   function   h(k) =  k mod m.  Give  one  reason  why this  might  be  a  poorly  chosen 
hash  function. 

