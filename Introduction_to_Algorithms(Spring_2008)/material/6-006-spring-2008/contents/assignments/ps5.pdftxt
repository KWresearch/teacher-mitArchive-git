MIT OpenCourseWare 
http://ocw.mit.edu 

6.006 Introduction to Algorithms 
Spring 2008 

For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms. 

Introduction  to  Algorithms:  6.006 
Massachusetts  Institute  of  Technology 
Professors  Srini  Devadas  and  Erik  Demaine 

April  10,  2008 
Handout  10 

Problem  Set  5 

This  problem  set  is  due Thursday  April  24  at  11:59PM.

Solutions should be turned in through the course website in PDF form using LATEX or scanned

handwritten  solutions.

A  template  for  writing  up  solutions  in  LATEX  is  available  on  the  course  website.

Remember, your goal is to communicate.  Full credit will be given only to the correct solution

which is described clearly.  Convoluted and obtuse descriptions might receive low marks, even

when they are correct.  Also, aim for concise solutions, as it will save you time spent on write-

ups,  and  also  help  you  conceptualize  the  key  idea  of  the  problem.


Exercises  are  for  extra  practice  and  should  not  be  turned  in. 
Exercises: 
•  CLRS  24.1-1  (page  591) 
•  CLRS  24.3-2  (page  600) 
•  CLRS  24.3-4  (page  600) 
•  CLRS  24.5-8  (page  614) 
•  CLRS  24.3-6  (page  600) 

1.  (15  points) True  or  False. 
Decide  whether  these  statements  are True  or  False.  You must  brieﬂy  justify  all  your 
answers  to  receive  full  credit. 

(a)	 (5  points)  If  some  edge  weights  are  negative,  the  shortest  paths  from  s  can  be 
obtained  by  adding  a  constant  C  to  every  edge  weight,  large  enough  to  make  all 
edge  weights  nonnegative,  and  running  Dijkstra’s  algorithm. 
(b)	 (5  points)  Let  P  be  a  shortest  path  from  some  vertex  s  to  some  other  vertex 
t.  If  the  weight  of  each  edge  in  the  graph  is  squared,  P  remains  a  shortest  path 
from  s  to  t. 

2 

Handout  10:  Problem  Set  5 

(c)	 (5  points)  A  longest  simple  path  from  s  to  t  is  deﬁned  to  be  a  path  from  s  to  t 
that  does  not  contain  cycles,  and  has  the  largest  possible  weight. 
Given  a  directed  graph  G  with  nonnegative  edge  weights  and  two  nodes  s  and  t, 
the  following algorithm  can be used  to  either ﬁnd a  longest  simple path  from s  to 
t,  or  determine  that  a  cycle  is  reachable  from  s: 
•	 Negate  all  the  edge  weights. 
•	 Run  Bellman-Ford  on  the  new  graph. 
•	 If  Bellman-Ford  ﬁnds  a  shortest  path  from  s  to  t,  return  that  as  the  longest 
simple  path. 
•  Otherwise,  declare  that  a  cycle  is  reachable  from  s.

Assume  t  is  reachable  from  s.


2.	 (15  points) Critical  Edges. 
You  are  given  a  graph  G = (V , E )  a  weight  function  w  : E  → �,  and  a  source  vertex 
s.	 Assume  w(e) ≥ 0  for  all  e ∈ E . 
We say that an edge e is u pwards critical if by increasing w(e) by any � > 0 we increase 
the  shortest  path  distance  from  s  to  some  vertex  v ∈ V . 
We  say  that  an  edge  e  is  downwards  critical  if  by  decreasing  w(e)  by  any  � >  0  we 
decrease the shortest path distance from s to some vertex v ∈ V  (however, by deﬁnition, 
if w(e) = 0 then e is not downwards critical, because we can’t decrease its weight below 
0). 

(a)	 (5  points)  Claim:  an  edge  (u, v)  is  downwards  critical  if  and  only  if  there  is  a 
shortest  path  from  s  to  v  that  ends  at  (u, v),  and  w(u, v)  >  0.  Prove  the  claim 
above. 
(b)	 (5  points) Make a claim similar to the one above, but  for upwards critical edges, 
and  prove  it. 
(c)	 (5 points) Using the claims from the previous two parts, give an O(E log V ) time 
algorithm that ﬁnds all downwards critical edges and all upwards critical edges  in 
G. 

Handout  10:  Problem  Set  5 

3 

3.  (30  points)  Implementing  Dijkstra. 

The  Howe  &  Ser  Moving  Company  is  transporting  the  Caltech  Cannon  from  Cal-
tech’s  campus  to  MIT’s  and  wants  to  do  so  most  eﬃciently.  Fortunately,  you  have  at 
your  disposal  the  National  Highway  Planning  Network  (NHPN),  packaged  for  you  in 
ps5_dijkstra.zip.  You  can  learn more  about  the  NHPN  at 
http://www.fhwa.dot.gov/planning/nhpn/ 

This  data  includes  node  and  link  text  ﬁles  from  the  NHPN.  Open  nhpn.nod  and 
nhpn.lnk  in  a  text  editor  to  get  a  sense  of  how  the  data  is  stored  (datadict.txt 
has  a more  precise  description  of  the  data  ﬁelds  and  their meanings).  To  save  you  the 
trouble  of  parsing  these  structures  from  a  ﬁle,  we  have  provided  you  with  a  Python 
module  nhpn.py  containing  code  to  load  the  text  ﬁles  into  Node  and  Link  ob jects. 
Read  nhpn.py  to  understand  the  format  of  the  Node  and  Link  ob jects  you  will  be 
given. 

Additionally,  we  have  provided  some  tools  to  help  you  visualize  the  output  from  your 
algorithms.  You  can  use  the  Visualizer  class  to  produce  a KML  (Google Earth)  ﬁle. 
To  view  such  a  ﬁle  on Google Maps,  place  it  in  a web-accessible  location,  such  as  your 
Athena  Public  directory,  and  then  search  for  its  URL  on Google Maps. 

For  this  problem,  you  will  modify  the  ﬁle  dijkstra.py.  As  you  solve  each  part  of 
the  problem,  check  your  work  by  running  test_dijkstra.py.  As  usual,  remember  to 
comment  your  code,  including  docstrings  at  the  top  of  each  function. 

(a)	 (3  points)  Write  a  short  function  node_by_name(nodes,  city,  state)  to  re­
turn  a  node  from  the  given  city/state.  Note  that  some  nodes  have  a  description 
which  isn’t  solely  the  city  name,  e.g.  CAMBRIDGE  NW  or  NORTH  CAMBRIDGE,  either 
of  which  we  would  like  to  match  a  query  where  city==’CAMBRIDGE’.  Given  a 
choice  of more  than  one  node,  choose  the  ﬁrst  node  that  appears  in  the  data. 

(b)	 (3  points) The  links you are given do not  include weights,  so  instead we will use 
the  geographical  positions  of  the  edge’s  nodes.

Write  a  function  distance(node1,  node2)  to  return  the  distance  between  two

NHPN nodes.  Nodes  come with  latitude  and  longitude  (in millionths  of degrees). 

For  simplicity,  treat  these  instead  as  (x, y)  coordinates  on  a  ﬂat  surface,  where

the  distance  between  two  points  can  be  easily  calculated  using  the  Pythagorean

Theorem.

Hint:  You may  ﬁnd  the  math.hypot  function  useful. 

(c)	 (24  points)  Implement  Dijkstra’s  algorithm  to  ﬁnd  the  shortest  path  between 
two  vertices  in  a  graph  with  non-negative  edge  weights. 
Your  function  shortest_path(nodes,  edges,  weight,  s,  t)  will  be  given  a 
list  of  Node  ob jects,  a  list  of  Edge  ob jects  (undirected),  a  function 
weight(node1,  node2) which returns the weight of any edge between node1 and 

4 

Handout  10:  Problem  Set  5 

node2,  a  source  Node  s  and  a  destination  Node  t.  Your  function  should  return  a 
list  of  Node  ob jects  representing  a  path  from  s  to  t. 
Dijkstra’s  algorithm  uses  a  priority  queue,  but  this  priority  queue  has  one  subtle 
requirement  not  met  by  the  heap.py  implementation  seen  earlier  in  class.  Di­
jkstra’s  algorithm  calls  decrease_key,  but  decrease_key  requires  the  index  of 
an  item  in  the  heap,  and Dijkstra’s  algorithm would  have  no way  of  knowing  the 
current  index  corresponding  to  a  particular  Node.  To  solve  this  problem,  the 
course  staﬀ  has  written  an  augmented  heap  ob ject,  heap_id,  with  the  following 
extra  features: 
•	 insert(key)  returns  a  unique  ID. 
•	 A  new  method,  decrease_key_using_id(ID,  key)  takes  an  ID  instead  of 
an  index. 
•	 A new method, extract_min_with_id() extracts the minimum element and 
returns  a  pair  (key,  ID) 

You may  import  heap_id,  without  submitting  the  separate  ﬁle. 
Hint:  The  format  in  which  you  are  given  the  data  (a  list  of  nodes,  and  a  list  of 
edges),  is not what you want  to use  for Dijkstra’s algorithm.  Start by preprocess­
ing  the data  into  a more useful  graph  representation.  Don’t  forget  that  the  edges 
you  are  given  are  undirected. 
(d)	 (Optional)  Included  in nhpn.py  is  a method  to  convert a  list  of nodes  to a .kml 
ﬁle.  .kml  ﬁles  can  be  viewed  using  Google  Maps,  by  putting  the  ﬁle  in  a  web-
accessible  location  (like  your  Athena  Public  directory),  going  to 
http://maps.google.com  and  putting  the  URL  in  the  search  box. 
Run  visualize_path.py.  This  will  create  two  ﬁles,  path_flat.kml  and 
path_curved.kml.  Both  should  be  paths  from  Pasadena  CA  to  Cambridge MA. 
path_flat.kml was created using the distance function you wrote in part (b), and 
path_curved.kml was created using a distance function that does not assume the 
Earth  is  ﬂat.  Can  you  explain  the  diﬀerences?  Also,  try  asking  Google Maps  for 
driving directions  from Caltech  to MIT  to get a  sense of how  similar  their answer 
is. 

