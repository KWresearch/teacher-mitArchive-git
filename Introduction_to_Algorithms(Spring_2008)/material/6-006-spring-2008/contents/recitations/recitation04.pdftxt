MIT OpenCourseWare 
http://ocw.mit.edu 

6.006 Introduction to Algorithms 
Spring 2008 

For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms. 

6.006 Recitation

Build 2008.7


Outline 

• Basic concepts review 
• AVL algorithms 
• Python implementation for AVLs 


BST Invariants


•  Binary rooted tree 
•  All left descendants have 
keys < node’s key 
•  All right descendants 
have keys > node’s key 

1 

3 

4 

8 

10 

6

14 

7 

13 

Node Height 


•  Leaves: height = 0 
•  Inner nodes: height = 
max(children height) +1 
•  Null tree: height = -1 
•  Rationale: 
•  a subtree operation 

takes O(h) time


1 

3 

4 

8 

10 

6

14 

7 

13 

Node Height 


•  Leaves: height = 0 
•  Inner nodes: height = 
max(children height) +1 
•  Null tree: height = -1 
•  Rationale: 
•  a subtree operation 

takes O(h) time


8 

3 

10 

1 
0 

6

14 

4 

0 

7 

0 

13 

0 

Node Height 


•  Leaves: height = 0 
•  Inner nodes: height = 
max(children height) +1 
•  Null tree: height = -1 
•  Rationale: 
•  a subtree operation 

takes O(h) time


8 

3 

10 

1 

6

1

14 

1 
0 

4 

0 

7 

0 

13 

0 

Node Height 


•  Leaves: height = 0 
•  Inner nodes: height = 
max(children height) +1 
•  Null tree: height = -1 
•  Rationale: 
•  a subtree operation 

takes O(h) time


8 

2 
10 

1 

6

1

14 

3 

1 
0 

4 

0 

7 

0 

13 

0 

Node Height 


•  Leaves: height = 0 
•  Inner nodes: height = 
max(children height) +1 
•  Null tree: height = -1 
•  Rationale: 
•  a subtree operation 

takes O(h) time


8 

2
10 

1 

6

1

14 

2 

3 

1 
0 

4 

0 

7 

0 

13 

0 

Node Height 


•  Leaves: height = 0 
•  Inner nodes: height = 
max(children height) +1 
•  Null tree: height = -1 
•  Rationale: 
•  a subtree operation 

takes O(h) time


3 

8 

2
10 

1 

6

1

14 

2 

3 

1 
0 

4 

0 

7 

0 

13 

0 

Balanced Trees


• Small tree height means fast operations 
• Pack many nodes in trees with low heights

• Perfectly balanced tree: 2h+1 - 1 nodes 
• We only care about asymptotic notation 
• Nodes = f(height) must be exponential


AVL Trees


•  Regular BST with extra 
invariants: 
•  absolute value(left 
child height - right 
child height) <= 1 
•  Each subtree is AVL 

3 

8 

2
10 

1 

6

1

14 

2 

3 

1 
0 

4 

0 

7 

0 

13 

0 

Least dense AVL


Least dense AVL


1 

Least dense AVL


2 

1 

Least dense AVL


3 

4 

2 

1 

Least dense AVL


6 

5 

7 

3 

4 

2 

1 

Least dense AVL


8 

11 

12 

10 

6 

9 

5 

7 

3 

4 

2 

1 

Least dense AVL


13 

18 

20 

16 

11 

8 

19 

17 

15 

12 

10 

6 

14 

9 

5 

7 

3 

4 

2 

1 

Least dense structure 

•  Nodes(-1) =0 
•  Nodes(0) = 1 
•  Nodes(h) = 1 + 
Nodes(h-1) + 
Nodes(h-2) 
•  Looks like Fibonacci, 
must be exponential 

h

h-2 

h-1 

Pwnage with AVLs 101


• Goals 
• Reuse the code we wrote before 
• Start with an AVL, end up with an AVL 
• Managerial Input (the ‘doh’ words) 
• Insert and delete like it’s a BST 
• Patch to make it an AVL again 

Key Observation


Key Observation 

Adding or removing a node only upsets the 

heights on a single path to the root.


Pwnage with AVLs 201


• Will obviously have to move nodes around 

• But must keep track of 
• Height 
• Augmented data 
• Invariants for AVL, BST 
• Need a tool that preserves most structure


Uberpoke (rotations)

p 

p 

x 

y 

A 

Left


Right


y 

x 

C 

B 

C 

A 

B 

Huh? Do that again ?

p 

x 

y 

A 

B 

C 

Huh? Do that again ?

p 

x 

y 

A 

B 

C 

Huh? Do that again ?

p 

x 

y 

A 

B 

C 

Huh? Do that again ?

p 

x 

y 

A 

B 

C 

Huh? Do that again ?

p 

x 

y 

A 

B 

C 

Huh? Do that again ?

p 

x 

y 

A 

B 

C 

Huh? Do that again ?

p 

x 

y 

A 

B 

C 

Huh? Do that again ?

p 

=


x 

y 

A 

B 

C 

Huh? Do that again ?

p 

p 

x 

y 

A 

= 

y 

x 

C 

B 

C 

A 

B 

Rebalancing 

• Rotations are quite teh uberpoke 
• Need a master plan for using them 
• Managerial Input: call it ‘rebalancing’ 
• Divide and conquer : start from the 
bottom, ﬁx up the tree level by level 

Rebalancing: easy


:( 

x 

k-1 

A 

B 

k-1 
or 
k


k+1 

y 

k

C 

Rebalancing: easy


:( 

x 

Rotate left 

k+1 

y 

C k 

k-1 

A 

B 

k-1 
or 
k 

Rebalancing: easy


:( 

x 

Rotate left 

k+1 

y

k

C 

k-1

A 

B 

k-1 
or 
k 

k 
or 
k+1 

x 

k-1 A 

y

k+1

k 

C 

B k-1
or 
k

Rebalancing: easy? 


:( 

x 

k-1 

A 

k+1 

y 

k 

B 

k-1

C 

Rebalancing: easy? 


:( 

x 

Rotate left

k-1 

A 

k+1 

y 

k 

B 

k-1


C 

Rebalancing: easy? 


:( 

x 

Rotate left

y 

:(

k-1 

A 

k+1 

y

k  B 

C  k-1 

k+1 x 

k-1

C

k-1 A 

B k

WTF? 


Rotate left

:( 

x 

k-1 

A 

k+1 

y

k  B 

C  k-1 

y 

:(

k+1 x 

k-1

C

k-1 A 

B k

WTF? 


Rotate left

:(

x 

k-1 

A 

k+1 

y

k  B 

C  k-1 

y 

:(

k+1 

x 

k-1
C 

k-1 

A 

B 

k

WTF? 


Rotate left

:(

x 

k-1 

A 

k+1 

y

k  B 

C  k-1 

y 

:(

k+1 

x 

k-1
C 

k-1 

A 

B 

k

B cannot be taller than C


Rebalancing: hack it up 


:( 

x 

k-1 

A 

k 

z 

k+1 

y 

k-1 
or 
k-2 

D 

E 

k-1

C 

k-1 
or 
k-2 

Rebalancing: hack it up 


:( 

x 

k-1 

A 

y 

k+1 
Rotate right 

k 

z 

k-1 
or 
k-2 

D 

E 

k-1 

C 

k-1 
or 
k-2 

Rebalancing: hack it up 

:( 
x 

k-1 
k+1 
Rotate right 

k+1 

z 

A 

k-1 
or 
k-2 

y 

k 

k-1 

C

D 

k-1  E 
or 

k-2 

:( 

x 

k-1 

A 

y 

k 

z 

k-1 
or 
k-2


D 

E 

k-1 

C 

k-1 
or 
k-2


and in the end it’s right


:( 

x 

k-1 

A 

k+1 

z 

k-1 
or 
k-2 

D 

E 

k-1 
or 
k-2 

y 

k 

k-1 

C 

and in the end it’s right

Rotate left


:( 

x 

k-1 

A 

k+1 

z 

k-1 
or 
k-2 

D 

E 

k-1 
or 
k-2 

y 

k 

k-1 

C 

and in the end it’s right

k+1 
Rotate left 

z 

:( 

x 

k-1 

A 

k+1 

z 

k  x 

y 

k 

k-1 
or 
k-2 

D 

E 

k-1 
or 
k-2 

y 

k 

k-1 

A 

k-1 
or 
k-2 

E 

D 

k-1 

C

k-1 

C 

Rebalancing one level 

• AVL violation at current node 
• Right is than left? 
• Right.left taller than right.right? 
• Rotate right to the right 
• Either way, rotate current to the left

• Left is heavier than right: symmetry 

Rebalancing wrap-up 


• Know how to ﬁx one level, use that to ﬁx 

everything along the path to the root

• Must recompute height on-the-go 
• If recomputing for all nodes along the 
path on each rotation, O(log2(h)) 
• Why is rebalancing O(log(h))? 

Python Code


‘cause you can’t live on bubbles and lines 


AVL Design


• BST 
• incorporate the deletion hack 
• AVL 
• inherited from BST, uses AVLnode 
• AVLnode 
• does all the heavy lifting 

Return values matter! 


• insert: returns the newly inserted node 
• delete: returns the deleted node (its parent

link still indicates where it was hanging)


BST, take 2
 1 class BST(object):

def __init__(self, NodeType=BSTnode):

 2 
3 
self.root = None

      
self.NodeType = NodeType 

 4 
      
5 
self.psroot = self.NodeType(None, None)

      
 6 

7 
 8 
9

10 
11 
12 
13 
14 
15 
16 

def insert(self, t):

if self.root is None:

          
self.psroot.left = self.NodeType(self.psroot, t) 

          
self.reroot()

return self.root

else:

return self.root.insert(t, self.NodeType)


def reroot(self): 

self.root = self.psroot.left 

      

AVL


 1 
class AVL(BST):

 2    
def __init__(self):

 3  
BST.__init__(self, AVLnode)

      
 4    
 5    
def insert(self, t):

 6  
node = BST.insert(self, t) 

      
 7  
node.rebalance()

      
 8  
self.reroot()

      
 9        
10    
def delete(self):

11  
      
node = BST.delete(self)

12  
      
node.parent.rebalance()

13  
      
self.reroot()


AVLnode: helpers 

 1 
def height(node): 
 2    
if node is None: 
 3        
return -1 
 4    
else: 
 5        
return node.height 
 6
 7 
class AVLnode(BSTnode): 
 8    
def update_stats(self):
 9  
self.height = max(height(self.left), height(self.right)) + 1 
      
10  
      
BSTnode.update_stats(self) 

AVLnode: rotation

 1 
class AVLnode(BSTnode):

 2    
def left_rotate(self): 

 3  
x = self; y = x.right

      
 4  
y.parent = x.parent

      
 5        
if y.parent.left is x:

 6  
          
y.parent.left = y

 7        
elif y.parent.right is x:

 8  
y.parent.right = y

          
 9  
      
x.right = y.left

10        
if x.right is not None:

11  
          
x.right.parent = x

12  
      
y.left = x

13  
      
x.parent = y

14  
      
x.update_stats()

15  
      
y.update_stats()

16        
return y


AVLnode: rebalancing 

 1 
class AVLnode(BSTnode):

 2    
def rebalance(self): 

if self.key is None: return

 3        
 4        
 5  
self.update_height()

      
 6        
if height(self.left) >= 2 + height(self.right): 

 7            
if height(self.left.left) < height(self.left.right): 

 8  
self.left.left_rotate()

              
 9  
self.right_rotate()

          
10        
elif height(self.right) >= 2 + height(self.left):

11            
if height(self.right.right) < height(self.right.left):

12  
self.right.right_rotate()

              
13  
self.left_rotate()

          
14  
self.parent.rebalance()

      

