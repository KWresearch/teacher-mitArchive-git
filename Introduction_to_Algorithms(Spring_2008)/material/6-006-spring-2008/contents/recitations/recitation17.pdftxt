MIT OpenCourseWare 
http://ocw.mit.edu 

6.006 Introduction to Algorithms 
Spring 2008 

For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms. 

6.006 Recitation

Build 2008.36


6.006 Proudly Presents


• PS 6 
• Super Mario Brothers 
• Points Back on Tests 
• DP vs. Minimum-Cost Paths


PS 6 Out


• The best way to gauge your understanding 
of Dynamic Programming 
• Do ﬁb (ﬁbonacci) over the weekend 
• Come get help if you can’t do it quickly! 
• Do the other problems as soon as you 
understand them 

Beating Super Mario:

The Vision 

1.  Abstract into 6.006 problem 

2.  Solve using DP 

3.  pwn 

Platforming I 

•  P platforms, at (xi, yi) 
•  Starting on platform 1, 
want to get to platform 
P 
•  Pure pwnage 
•  Always move right 
•  Minimum # moves 

5: (2, 7) 
6: (2, 6) 

2: (2, 3) 

7: (3, 2) 

4: (1,4) 

3: (1,1) 

1: (0,0) 

Platforming II 
•  Moves from (x, y) 
•  walk: (x+1, y) 
•  jump: (x+1, y+1) or (x 
+1, y+2) 
•  super-jump: (x+1, y+3) 
or (x+1, y+4) 
•  fall: (x+d, y-d-d’) as 
long as d+d’ < 5 

1: (0,0) 

4: (1,4) 

3: (1,1) 

5: (2, 7) 
6: (2, 6) 

2: (2, 3) 

7: (3, 2) 

Platforming: Solution I


• Problem: the minimum number of moves 
from platform 1 to platform P 
• Optimal sub-structure 
• assume the optimal solution stops at 

platform Q right before moving to P 

• then the optimal solution must get from 
platform 1 to Q w/ the min. no. of moves 

Platforming: Solution II


• d[p] = minimum # of moves to get to p 
• parent_p[p] = parent platform for p 
• parent_m[p] = parent move for p 
• bottom-up solution: sort the platforms by 
their x coordinate, then d[p] only depends 
on d[p’] where p’ < p 

Platforming:

Running Time 

• Subproblems 
• one per platform - P in total 
• Time per subproblem 
• looking back at previous platforms - O(P) 
• Total running time - O(P2) 

Points Back on Tests 

•  Multiple-choice test 
(think SATs) 
•  Each answer is an 
alphabet letter (for SAT, 
the alphabet is A-E) 
•  Single correct answer 
for each question 

Qtn.  Your Ans.  Correct 
A 
A 
1 
C 
B 
2 
B 
A 
3 
A 
C 
4 
5 
D 
C 
D 
A 
6 
A 
E 
7 
E 
E 
8 

Points Back on Tests II 

•  Step 1: Claim that you 
made an error when 
transcribing answers 
•  Step 2: Hire a damn 
good lawyer, claim that 
you did multiple 
mistakes 
•  Outcome: Longest 
Common Subsequence 

Qtn.  Your Ans.  Correct 
1 
A 
A 
C 
2 
B 
3 
B 
A 
4 
A 
C 
5 
C 
D 
6 
A 
D 
7 
A 
E 
E 
8 
E 

Points Back on Tests:

Towards a Solution

• x = [A, B, A, C , D, A, E] 
• y = [A, C , B, A, A, B, E] 
• Solution: a list of pairs (si, ti) s.t. 
• x[si] = y[ti] 
• si < sj and ti < tj for any i < j 

Points Back on Tests:

Solution I

• Want: the longest common sequence in x, y

• Optimal sub-structure: 
• assume answer (s1, t1) ... (sn-1,tn-1),(sn,tn)

• then (s1, t1) ... (sn-1,tn-1) must be the 
longest common sequence of x[1: sn-1] 
and x[1: tn-1] 

Points Back on Tests:

Solution II 

• d[i][j] = len. of max. common sequence of 
x[1:i] and y[1:j] 
• d[0][j] = 0, d[i][0] = 0 
• d[i][j] only depends on d[i-1][j-1], d[i-1][j], 
and d[i][j-1], so we can build d bottom-up 
for i from 0 to len(x) and for j from 0 to 
len(y) 

DP vs. Min-Cost Paths: 
Platforming I 
•  Each platform is a node 
•  A move between P and 
Q is a directed edge (P, 
Q) of cost 1 
•  Want: min-cost path 
between node 1 and P 
•  Parents in DP: same as 
the parents in single-
source min-cost paths 

5: (2, 7) 
6: (2, 6) 

2: (2, 3) 

7: (3, 2) 

4: (1,4) 

3: (1,1) 

1: (0,0) 

DP vs. Min-Cost Paths: 
Platforming II 
•  We only move right ⇒ 
all edges are from left to 
right ⇒ sorting by x 
computes a topologic 
ordering 
•  Bottom-up DP is the 
same as computing 
single-source min-cost 
paths in a DAG 

5: (2, 7) 
6: (2, 6) 

2: (2, 3) 

7: (3, 2) 

4: (1,4) 

3: (1,1) 

1: (0,0) 

DP vs. Min-Cost Paths: 
Points Back on Tests I 
•  subproblems: d[i][j] ⇒ a 
Qtn.  Your Ans.  Correct 
node is a tuple (i, j) 
A 
A 
1 
C 
B 
2 
•  0-weight edges from (i,j) 
B 
A 
3 
to (i,j+1) and to (i+1,j) 
A 
C 
4 
•  Edge (i,j) to (i+1,j+1) has 
5 
D 
C 
weight 1 if x[i] = y[j] 
D 
A 
6 
•  Want: max-cost path 
A 
E 
7 
E 
E 
8 
from (0, 0) to (|x|, |y|) 

DP vs. Min-Cost Paths: 
Points Back on Tests I 
•  Edges are (i,j) to (i+1, j), 
Qtn.  Your Ans.  Correct 
(i+1, j+1) and (i, j+1) ⇒ 
1 
A 
A 
C 
2 
B 
lexicographical ordering 
is a topological order 
3 
B 
A 
4 
A 
C 
•  So we can do min-cost 
5 
C 
D 
path in DAGs by 
multiplying edges by -1 
6 
A 
D 
7 
A 
E 
•  DP does exactly that! 
E 
8 
E 

