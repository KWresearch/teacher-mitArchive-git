MIT OpenCourseWare 
http://ocw.mit.edu 

6.006 Introduction to Algorithms 
Spring 2008 

For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms. 

6.006 Recitation

Build 2008.14


Coming up next... 


• Open addressing 
• Karp-Rabin 
• coming back from the dead to hunt us 

Open Addressing 

• Goal: use nothing but the table 
• Hoping for less code, better caching 
• Hashing ⇒ we must handle collisions

• Solution: try another location 

Easy Collision handling

•  h(x) = standard hash 
function 
•  if T[h(x)] is taken 
•  try T[h(x)+1] 
•  then T[h(x) + 2] 
•  then T[h(x) + 3] 
•  just like parking a car 

0 
1

2

3

h(29) ➙  4

h(29) + 1 ➙  5

))
h(29) + 2 ➙  6

))
h(29) + 3 ➙  7

8

9


taken 
taken 
taken 
here ☺ 

taken


taken


taken


Collision Handling:

Abstracting it Up

•  h(k) grows up to H(k, i) 
0

taken 
1  taken 
where i is the attempt 
number 
2  taken 
3  taken 
•  ﬁrst try T[H(k, 0)] 
4  taken 
5  taken 
6  taken 
7  taken 
8  taken 
9  taken


H(29, 0) ➙


Collision Handling:

Abstracting it Up

•  h(k) grows up to H(k, i) 
0

taken 
1  taken 
where i is the attempt 
number 
2  taken 
3  taken 
•  ﬁrst try T[H(k, 0)] 
4  taken 
5  taken 
•  then T[H(k, 1)] 
6  taken 
7  taken 
8  taken 
9  taken


H(29, 1) ➙ 

H(29, 0) ➙ 

Collision Handling:

Abstracting it Up

•  h(k) grows up to H(k, i) 
0

taken 
1  taken 
where i is the attempt 
number 
2  taken 
3  taken 
•  ﬁrst try T[H(k, 0)] 
4  taken 
5  taken 
•  then T[H(k, 1)] 
6  taken 
•  then T[H(k, 2)] 
7  taken 
8  taken 
9  taken


H(29, 1) ➙ 

H(29, 2) ➙


H(29, 0) ➙ 

Collision Handling:

Abstracting it Up

•  h(k) grows up to H(k, i) 
H(29, 3) ➙  0  taken 
H(29, 1) ➙  1  taken 
where i is the attempt 
number 
H(29, 4) ➙  2  taken 
H(29, 9) ➙  3  taken 
•  ﬁrst try T[H(k, 0)] 
H(29, 2) ➙  4  taken 
H(29, 5) ➙  5  taken 
•  then T[H(k, 1)] 
H(29, 6) ➙  6  taken 
•  then T[H(k, 2)] 
H(29, 7) ➙  7  taken 
H(29, 8) ➙  8  taken 
•  stop after trying all 
H(29, 0) ➙  9  taken 

Collision Handling:

Abstracting it Up

H(29, 3) ➙  0  taken 
•  H(k) = 
H(29, 1) ➙  1  taken 
<H(k, 0), H(k, 1), H(k, 
H(29, 4) ➙  2  taken 
2) ... > 
H(29, 9) ➙  3  taken 
•  Linear probing, h(29) = 
H(29, 2) ➙  4  taken 
4, Hlinear(29) = ? 
H(29, 5) ➙  5  taken 
H(29, 6) ➙  6  taken 
H(29, 7) ➙  7  taken 
H(29, 8) ➙  8  taken 
H(29, 0) ➙  9  taken 

<4, 5, 6, 7, 8, 9, 0, 1, 2, 3>

•  General properties? 

Collision Handling:

Abstracting it Up

• Any collision handling strategy comes to: 
• for key k, probe H(k,0), then H(k,1) etc.

• No point in trying the same place twice 
• Probes should cover the whole table 
(otherwise we raise ‘table full’ prematurely) 
• Conclusion: H(k, 0), H(k, 1) ... H(k, m-1) are 
a permutation of {1, 2, 3 ... m} 

Linear Probing and  

Permutations 
•  h(29) = 4; H(29) = 
<4, 5, 6, 7, 8, 9, 0, 1, 2, 3> 
•  h(k) = h0(mod m); H(k) = 
<h0 mod m, (h0 + 1) mod 
m, (h0 + 2) mod m,  ... 
(h0 + m - 1) mod m > 
•  m permutations (max m!) 

0

1

2

3

h(29) ➙  4

h(29) + 1 ➙  5

))
h(29) + 2 ➙  6

))
h(29) + 3 ➙  7

8

9


taken


taken


taken 
taken 
taken 
here ☺ 

taken


Ideal Collision Handling

• Simple Hashing (collision by chaining) 
• Ideal hashing function: uniformly 

distributes keys across hash values 

• Open Addressing 
• Ideal hashing function: uniformly 
distributes keys across permutations 
• a.k.a. uniform hashing 

Uniform Hashing: 
Achievable? 
•  Simple mapping between 
k mod 6 
permutations of m and 
numbers 1 ... m! 
•  Convert key to big 
number, then use 
permutation number 
(bignum mod m!) 
•  ... right? 

2 

0 

1 

Permutation 

<1, 2, 3> 

<1, 3, 2> 

<2, 1, 3> 

<2, 3, 1> 

<3, 1, 2> 

<3, 2, 1> 

3 

4 

5 

Uniform Hashing: 
Achievable? 
•  Number of digits in m! 
k mod 6 
•  O(log(m!)) 
•  O(m*log(m)) 
•  Working mod m! is slow 
•  check your Python 
cost model 

2 

0 

1 

3 

4 

<2, 1, 3> 

<2, 3, 1> 

<3, 1, 2> 

Permutation 

<1, 2, 3> 

<1, 3, 2> 

5 

<3, 2, 1> 

Working Compromise 


• Why does linear probing suck? 
• We jump in the table once, then walk

• Improvement 
• Keep jumping after the initial jump 
• Jumping distance: 2nd hash function 
• Name: double hashing 

Double Hashing: Math

•  h1(k) and h2(k) are 

hashing functions


0  taken 
1 
2  taken 
3 
4  taken 
5  taken 
6  taken 
7  taken 
8 
9  taken 

Double Hashing: Math

•  h1(k) and h2(k) are 
hashing functions 
•  H(k, 0) = h1(k) 

taken


taken


0

1

2

3

h1(29) ➙  4

5

6

7

8

9


taken 
taken 
taken 
taken 

taken


Double Hashing: Math

•  h1(k) and h2(k) are 
hashing functions 
•  H(k, 0) = h1(k) 
•  H(k, 1) = h1(k) + h2(k) 

taken


taken


0

1

2

3

h1(29) ➙  4

5

6

h1(29)+h2(29) ➙  7

8

9


taken 
taken 
taken 
taken 

taken


Double Hashing: Math

•  h1(k) and h2(k) are 
hashing functions 
•  H(k, 0) = h1(k) 
•  H(k, 1) = h1(k) + h2(k) 

taken


taken


h1(29)+2⋅h2(29) ➙  0

1

2

3

h1(29) ➙  4

5

6

h1(29)+h2(29) ➙  7

8

9


taken 
taken 
taken 
taken 

taken


Double Hashing: Math

•  h1(k) and h2(k) are 
hashing functions 
•  H(k, 0) = h1(k) 
•  H(k, 1) = h1(k) + h2(k) 

taken


h1(29)+2⋅h2(29) ➙  0 
1 
2 
h1(29)+3⋅h2(29) ➙  3 
h1(29) ➙  4 
5 
6 
h1(29)+h2(29) ➙  7 
8 
9 

taken

here ☺ 
taken 
taken 
taken 
taken 

taken


taken


Double Hashing: Math

•  h1(k) and h2(k) are 
hashing functions 
•  H(k, 0) = h1(k) 
•  H(k, 1) = h1(k) + h2(k) 
•  H(k, i) = h1(k) + i⋅h2(k) 
•  mod m 
•  you knew that, right? 

h1(29)+2⋅h2(29) ➙  0 
1 
2 
h1(29)+3⋅h2(29) ➙  3 
h1(29) ➙  4 
5 
6

h1(29)+h2(29) ➙  7 
8 
9 

taken

here ☺ 
taken 
taken 
taken 
taken 

taken


Double Hashing Trap

•  gcd(h2(k), m) must be 1 
•  solution 1 (easy to get) 
•  m prime, h2(k) = k 
mod q (where q < m) 
•  solution 2 (faster, better)

•  m = 2r (table can grow) 
•  h2(k) is odd (not even) 

h1(29)+2⋅h2(29) ➙  0  taken 
1
2
3
4
5
6
7
8
9

h1(29)+3⋅h2(29) ➙ 
h1(29) ➙ 

taken

here ☺ 
taken 
taken 
taken 
taken 

taken


h1(29)+h2(29) ➙ 

Open Addressing: 

Deleting Keys

h1(29)+2⋅h2(29) ➙  0  taken

•  Suppose we want to 
1

delete kd stored at 7

2

•  Can’t simply wipe the 
h1(29)+3⋅h2(29) ➙  3

h1(29) ➙  4

entry, because key 29 
wouldn’t be found 
5

anymore	
6

h1(29)+h2(29) ➙  7

•  rember H(29) =	
8

<4, 7, 0, 3 ...>	
9


taken

here ☺

taken

taken

taken

kd


taken


Open Addressing: 

Deleting Keys

h1(29)+2⋅h2(29) ➙

•  Entry meaning  ‘deleted’ 

•  Handling ‘deleted’ 
•  Search: Keep looking 
•  Insert: Stop, replace 
‘deleted’ with the new 
key/value 

h1(29)+3⋅h2(29) ➙ 
h1(29) ➙ 

h1(29)+h2(29) ➙ 

0  taken 
1 
2  taken 
3  here ☺ 
4  taken 
5  taken 
6  taken 
7  deleted 
8 
9  taken 

Open Addressing:Code


• Design: implementing a collection in Python

• __getitem__(self, key) 
• return key item or raise KeyError(key) 
• __setitem__(self, key, item) 
• insert / replace (key, item) 
• __delitem__(self, key) 

Open Addressing: Code 
•  Closures: not for n00bs 
•  def compute_modulo is 
local to the mod_m call 
•  the function created by 
def compute_modulo is 
returned like any object 
•  the object remembers 
the context around the 
def (the value of m)

 1 def mod_m(m):
def compute_modulo(n):
2 
3 
return (n % m)
return compute_modulo
4 
5 
6 >>> m5 = mod_m(5)
7 >>> m3 = mod_m(3)
8 >>> m5(9)
9 4 
10 >>> m3(9)
11 0 

Open Addressing:Code


 1 
def linear_probing(m = 1009):

 2    
def hf(key, attempt):

 3        
return (hash(key) + attempt) % m 

 4    
return hf

 5    
 6 
def double_hashing(hf2, m = 1009):

 7    
def hf(key, attempt):

 8        
return (hash(key) + attempt * hf2(key)) % m

 9    
return hf

10
11 
class DeletedEntry:

12    
pass

13
14 
class OpenAddressingTable:

15    
def __init__(self, hash_function, m = 1009):

16  
self.entries = [None for i in range(m)] 

      
17  
self.hash = hash_function

      
18  
self.deleted_entry = DeletedEntry()

      

Open Addressing: Code

14 class OpenAddressingTable:

def __init__(self, hash_function, m = 1009):

15 
16 
self.entries = [None for i in range(m)] 

      
self.hash = hash_function

17 
      
18 
self.deleted_entry = DeletedEntry()

      
19

20 
21 
22 
23 
24 
25 
26 
27 
28 

29 
30 
31 
32 
33 
34 

35 
36 

def get_entry(self, key):

for attempt in xrange(len(self.entries)): 

h = self.hash(key, attempt) 

          
if self.entries[h] is None:  

return None

if self.entries[h] is not self.deleted_entry and \

self.entries[h][0] == key:

             
return self.entries[h]


def __getitem__(self, key):

entry = self.get_entry(key) 

      
if entry is None:

raise KeyError(key)

return entry[1]


def __contains__(self, key): 

return self.get_entry(key) is not None


Open Addressing: Code


14 class OpenAddressingTable:

def __init__(self, hash_function, m = 1009):

15 
16 
self.entries = [None for i in range(m)] 

      
self.hash = hash_function

17 
      
18 
self.deleted_entry = DeletedEntry()

      
19

37 
38 
39 
40 
41 
42 
43 
44 
45 
46 

def __setitem__(self, key, value):

if value is None: raise 'Cannot set value to None' 

del self[key]

for attempt in xrange(len(self.entries)): 

h = self.hash(key, attempt) 

          
if self.entries[h] is None or \

self.entries[h] is self.deleted_entry:

             
self.entries[h] = (key, value) 

              
return

raise 'Table full'


Open Addressing: Code


14 class OpenAddressingTable:

def __init__(self, hash_function, m = 1009):

15 
16 
self.entries = [None for i in range(m)] 

      
self.hash = hash_function

17 
      
18 
self.deleted_entry = DeletedEntry()

      
19

47 
48 
49 
50 
51 
52 
53 
54 
55 
56 

def __delitem__(self, key): 

for attempt in xrange(len(self.entries)): 

h = self.hash(key, attempt) 

          
if self.entries[h] is None:  

return

if self.entries[h] is not self.deleted_entry and \

self.entries[h][0] == key:

             
self.entries[h] = self.deleted_entry 

              
return


return


Ghosts of Karp & Rabin

Getting Rolling Hashes Right


Modular Arithmetic 

• Foundation: 
• (a + b) mod m = ((a mod m) + (b mod m)) 
mod m 
• From that, it follows that: 
• (a ⋅ b) mod m = ((a mod m) ⋅ (b mod m)) 
mod m 
• induction: multiplication is repeated +


Modular Gotcha 

• Never give mod a negative number 
• want q = (a - b) mod m, but a - b < 0 
• q mod m = (a - (b mod m)) mod m

• but (b mod m) is < m 
• so (a + m - (b mod m)) > 0 
• q = (a + m - (b mod m)) mod m 

Modular Arithmetic-Fu

• Multiplicative inverses: assume p is prime 
• For every a and p, there is a-1 so that: 
• (a *  a-1) mod p = 1

• example: p = 23, a = 8 ⇒ a-1 = 3

• check: 8 * 23 = 24, 24 mod 23 = 1

• Multiplying by a-1 is like dividing by a 

Modular Arithmetic-Fu

• How do we compute a-1? 
• Fermat’s Little Theorem: 
• p prime ⇒ aa-1 mod p = 1 
• Huh? 
• aa-1 mod p = a * aa-2 mod p = 1

• so (for p) a-1 mod p = aa-2 mod p 

Back to Rolling Hashes  


• Data Structure (just like hash table) 
• start with empty list 
• append(val): appends val at the end of list 
• skip(): removes the ﬁrst list element 
• hash(): computes a hash of the list 

