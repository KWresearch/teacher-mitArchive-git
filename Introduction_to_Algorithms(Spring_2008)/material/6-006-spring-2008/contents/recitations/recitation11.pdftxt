MIT OpenCourseWare 
http://ocw.mit.edu 

6.006 Introduction to Algorithms 
Spring 2008 

For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms. 

6.006 Recitation

Build 2008.22


6.006 Proudly Presents


• Graph Traversal 
• BFS 
• DFS 

• Topological Sorting 

Breadth-First Search 
a.k.a. BFS (not BFG) 
•  Fix your source 
•  Visit all the neighbors 
•  Then visit all the 
neighbors’ neighbors 
•  Then all the neighbors’  

neighbors’ neighbors’

•  ... 

10 

11 

8 

9 

1 

2 

4 

5

6 

3 

7 

BFS in Python: Design 

•  Use the graph module 
shown before, and 
Python’s deque 
•  Encapsulate traversal 
data in a class, return at 
the end of the traversal 
•  Implement traversal as 
stand-alone function

 1 from graph import *
 2 from collections import deque
3 
4 class BFSResults:
def __init__(self):
 5 
       
 6 
self.level = dict()
       
self.parent = dict() 
7 

BFS in Python: Code


def bfs(g, s):

 1 
 2  
r = BFSResults()

   
actives = deque() 

 3  
   
 4  
actives.append(s)

   
r.parent[s] = None

 5  
   
 6  
r.level[s] = 0

   
 7    
 8     
while len(actives):

 9  
       
v = actives.popleft() 

10         
for n in g.neighbors(v):

11             
if n not in r.parent:

12  
               
r.parent[n] = v

13  
               
r.level[n] = r.level[v] + 1

14  
               
actives.append(n) 

15     
return r


Depth-First Search 
a.k.a. Backtracking 
•  Fix your source 
•  Move to its ﬁrst 
neighbor 
•  Then to that guy’s ﬁrst 
neighbor 
•  ... 
•  When stuck, backtrack 
and visit next neighbor 

3 

4 

8 

5 

7 

1 

2 

9 

11 

6

10 

DFS in Python: Design 

•  Use the graph module 
shown before 
•  Encapsulate traversal 
data in a class, return at 
the end of the traversal 
•  Implement traversal as 
stand-alone function

 1 from graph import *
 2
 3 class DFSResults:
def __init__(self):
 4 
       
5 
self.parent = dict()
       
self.time = dict()
 6 
       
7 
self.vertices = list()
       
self.t = 0 
 8 

DFS in Python: Code


 1 
def dfs(g):

results = DFSResults()

 2  
   
 3     
for vertex in g.itervertices(): 

if vertex not in results.parent:

 4         
 5  
dfs_visit(g, vertex, results)

           
return results

 6     
 7
 8 
def dfs_visit(g, v, results, parent = None):

 9  
results.vertices.append(v)

   
10  
results.parent[v] = parent

   
11     
12     
for n in g.neighbors(v): 

13         
if n not in results.parent: 

14  
dfs_visit(g, n, results, v) 

           
15     
16  
   
17  
   

results.t += 1

results.time[v] = results.t 


DFS and CLRS Colors 

Color 

White 
(not visited) 
Gray 
(visiting) 
Black 
(visited) 

Meaning 

vertex not in parents 

vertex in parents and 
vertex not in time 

vertex in time 

Application: 

Porting BFS and DFS to

a New Platform


Disclaimers

(Please Don’t Sue Me!) 

• You may close your eyes and cover your 

ears if you ﬁnd this material offensive

• If you are under 13 and your mommy 
doesn’t allow you on the Internet: please 
close your eyes 
• Under 18: please don’t use this knowledge 
to do something inappropriate for your age 

Stalking Hotties on  

Facebook

• Our Platform: Firefox 3.0b4 
• any browser with tabs would do

• Proﬁles + Friendship = Graph 
• Our mission: 
• apply DFS and BFS to the ﬁne art of 
stalking hot boys/babes on Facebook 

Hueihan’s Heuristic 

• “Hot boys have hot friends” 

• Heuristics are useful in huge graphs, with 
multiple solutions 
• Goal: avoid visiting most of the graph

• So we’ll only follow paths of hot* people


Facebook as Graph

• Traversal: go to ‘Friends’ to display all your 
friends (like g.neighbors) 
• BFS: the tabs are a queue - open all friends 
proﬁles in new tabs, then close current tab 
and go to the next one 
• DFS: the history is a stack - open the ﬁrst 
hot friend proﬁle in the same window; 
when hitting a dead end, use back button 

Topological Sorting

even your Course 15 friends know it


Topological Sorting


•  Do a DFS on the graph, 
record exiting times for 
the nodes 
•  Sort the nodes in the 
inverse order of the exit 
times (just draw it!) 
•  A node is never 
exited before a node 
it points to is exited

 1 def topological_sort(graph):

dfs_result = dfs(graph) 

 2 
   
   
top = [None for i in 

3 
dfs_result.vertices]

   
count = len(dfs_result.vertices) 

4 
 5 
for vertex in dfs_result.time:

 6 
top[count -

       
dfs_result.time[vertex]] = vertex 

7 
return top 


Topological Sorting


F 

N 

P 

E 

D 

‘W 

T 

W 

Topological Sorting


F 

N 

P 

E 

`W 

T 

W 

D 

D
F 
1 
6 
`W T

N 
3 
F 

P W `W T

E 
7 
8 
4 
5 
2 
D

E
P W N

Two-Way BFS

Discussion on Implementation


