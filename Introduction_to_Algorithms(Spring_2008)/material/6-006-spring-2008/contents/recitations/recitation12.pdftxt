MIT OpenCourseWare 
http://ocw.mit.edu 

6.006 Introduction to Algorithms 
Spring 2008 

For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms. 

6.006 Recitation

Build 2008.23


6.006 Proudly Presents


• Two-Way BFS 
• Stable Sorting 
• DRY 

Two-Way BFS 

Regular BFS 

Two-Way BFS 

Start: from source 

End: reached a goal 

Start: from both the source 
and the goal 
End: a node is reached both 
from source and from goal 

Works with multiple goals 

Requires single goal 

Poking Aftermath:

(gasp) Meeting Her


S 

E 

BFS


8  7  6  5  6  7  8  9  10 11 12 13 14 15 
7  6  5  4  5  6  7  8  9 10 11 12 13 14 
8
7 
3 
13  14  15 
5 
4
3
15  14  15 
2
8 
9
4 
3
2
1
10  9 
15 
5 
4
3
2
11  10 
14  15 
6 
5
4
3
12  11 
13  14  15 
7 
6
5
4
13  12 
12  13  14 
8 
7
6
14  13 
5
6  7  8  9  10 11 12 13

15  14 
15

7  8  9  10 11 12 13 14 
14  E 
8 
9  10 11 12 13 14 15 
10  11  12  13  14  15 

Two-Way BFS


8  7  6  5  6  7  8 
7  6  5  4  5  6  7  8 
3 
8  7 
8 
2  3  4  5 
1  2  3  4 
7 
2  3  4  5 
7  6 
3  4  5  6 
7  6  5 
4  5  6  7 
6  5  4 
5  6  7  8 
7 
6  7  8  7  6  5  4  3 
6  7 
7  8  7  6  5  4  3  2 
5  6 
2  1 
8 
7  6  5  4  3  2  3  4  5 
7  6  5  4  3  4  5  6  6 

Two-Way BFS

Implementation Talk


 1 def bfs(g, s):

 2 
r = BFSResults()

   
   
actives = deque() 

3 
   
4 
actives.append(s)

   
r.parent[s] = None

5 
   
 6 
r.level[s] = 0

 7 

8 
9 
10 
11 
12 
13 
14 
15 

while len(actives):

       
v = actives.popleft()  

for n in g.neighbors(v): 

if n not in r.parent:

               
r.parent[n] = v

               
r.level[n] = r.level[v] + 1

               
actives.append(n)

return r


Stable Sorting


• Property of sorting algorithms 
• It’s not Yet Another Sorting Algorithm

• Maintains the relative order of equal keys 

• Desirable in some grand scheme of things 
(like Radix Sort) 

Stable Sorting: Example 

3 

1 

4’ 

1’ 

5 

2 

7 

4 

6 

4’’ 

1 

1’ 

2 

3 

4’ 

4 

4’’ 

5 

6 

7 

1’ 

1 

2 

3 

4 

4’ 

4’’ 

5 

6 

7 

Don’t Repeat Yourself

(DRY) 

• Code one decision in one place 
• No magic constants all over the code 
• Easy to change your mind (once you 
found the code for that decision, you 
don’t have to dig deeper) 
• Useful every day, priceless in large systems

• Do use: functions, constants, local variables


 1 def detect_collisions(balls):

 2 
set_of_collisions = set()

   
x_cells = int((gas.world_max_x - gas.world_min_x) / 256) + 1

3 
   
 4 
y_cells = int((gas.world_max_y - gas.world_min_y) / 256) + 1

   
 5 
grid = [[[] for i in range(x_cells)] for i in range(y_cells)] 

   
 6 
for b in balls:

grid[int((b.x - gas.world_min_x) / 256)][int((b.y - gas.world_min_y) /  

 7 
       
256)].append(b)

8 

9 
10 
11 
12 
13 
14 
15 
16 
17 
18 
19 
20 
21 
22 

23 import gas

24 gas.detect_collisions = detect_collisions 

25 if __name__ == "__main__":

   
gas.main()

26 

for xc in range(x_cells):

for yc in range(y_cells):

for xp in [-1, 0, 1]:

for yp in [-1, 0, 1]:

if xc + xp < 0 or xc + xp >= x_cells:

continue

if yc + yp < 0 or yc + yp >= y_cells:

continue

for b1 in grid[xc][yc]:

for b2 in grid[xc + xp][yc + yp]: 

if b1.id < b2.id and gas.colliding(b1, b2): 

                               
set_of_collisions.add(gas.ball_pair(b1, b2)) 

return set_of_collisions


Questions

Better have some!


