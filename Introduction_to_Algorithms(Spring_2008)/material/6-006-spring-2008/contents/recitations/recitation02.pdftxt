MIT OpenCourseWare 
http://ocw.mit.edu 

6.006 Introduction to Algorithms 
Spring 2008 

For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms. 

6.006 Recitation

Build 2008.4


Outline 

• Asymptotic Notation 
• Merge-Sort 
• Python Cost Model 
• (maybe) docdist{5,6}.py 

Asymptotic Notation


F1 

F2 

F3 

f1: 1,000 * n0.635 

f2: n 

f3: 10,000 * n0.5 

500,000,000 

375,000,000 

250,000,000 

125,000,000 

0 

0  80mm  190mm  310mm 

Asymptotic Notation


f 

1.1 * g 

• f = O(g)


Asymptotic Notation


f 

0.9 * g 

• f = Ω(g) 


Asymptotic Notation 

f 

0.9 * g 

1.1 * g 

• f = Θ(g) 


Asymptotic Drowning

• lg(n100) = 100 * lg(n) = Θ(lg(n)) 
• lg(n0.1) = 0.1 * lg(n) = Θ(lg(n)) 

• lg5(n) = lg(n) / lg(5) = Θ(lg(n)) 

• nlg(5) = n2.3219... so n2 < nlg(5) < n3 

Asymptotic Headaches


•  1080 (atoms in the universe) 
•  lglog5(lglg100 n) 
•  (20n)7 
•  5lg3n3 + 1080n2 + (lg3)n3.1 + 6006 
•  lg(  N )N/2 
   

Stirling Banishes the Evil


• N! ~= sqrt(2πN) * ((N/e) ^ N)

• Substitute in lg(N/2) 
N

   
• Reduce terms, obtain O(N) 

Binary Search for 23


1 

1 

1 

1 

1 

3 

3 

3 

3 

3 

4 

4 

4 

4 

4 

9

9 

9

9 

9 

11  15  20  24  29  34  38


11  15  20  24  29  34  38 

11

15  20  24  29  34  38


11  15  20  24  29  34  38 

11

15

20

24

29

34

38


Divide and Conquer 

1. Divide 

Break into smaller subproblems 

2.  Conquer 

Really small subproblems are easy 

3.  Proﬁt 

Combine answers to sub-problems 

Merge-Sort


1. Divide 

Break into 2 equal-sized sublists 

2.  Conquer 

1-element lists are sorted 

3.  Proﬁt 

Merge sorted sublists 

Just Merge 

L1 = [2, 3, 5, 7] 

L = [] 

L2 = [2, 4, 8, 16] 

Just Merge 

L1 = [3, 5, 7] 

L = [2] 

L2 = [2, 4, 8, 16] 

Just Merge 

L1 = [3, 5, 7] 

L2 = [4, 8, 16] 

L = [2, 2] 

Just Merge 

L1 = [5, 7] 

L2 = [4, 8, 16] 

L = [2, 2, 3] 

Just Merge 

L = [2, 2, 3, 4] 

L1 = [5, 7] 

L2 = [8, 16] 

Just Merge 

L = [2, 2, 3, 4, 5] 

L1 = [7] 

L2 = [8, 16] 

Just Merge 

L = [2, 2, 3, 4, 5, 7] 

L1 = [] 

L2 = [8, 16] 

Just Merge 

L = [2, 2, 3, 4, 5, 7, 8, 16] 

L1 = [] 

L2 = [] 

Running Time Analysis 

Binary Search  Merge Sort 

Subproblems 

1 

2 

Subproblem size 

Time to Divide 

Time to Proﬁt 

T(N) 

N / 2 
N / 2 
Θ(1) 
Θ(1) 
Θ(N) 
Θ(1) 
T(N/2) + Θ(1)  2T(N/2) + Θ(N) 

Recursion Tree Analysis 

Binary Search  Merge Sort 
T(N/2) + Θ(1)  2T(N/2) + Θ(N) 

lg(N) 
Θ(1) 
Θ(lg(N)) 

lg(N) 
Θ(N) 
Θ(N*lg(N)) 

T(N) 

Tree depth 

Cost per level 

Total cost 

Python Cost Model 

• Motivation 
• change + to extend for 1000X speed 
• Approach 
• stand on the shoulders of giants (Ron) 
• focus on the asymptotic cost 

Timing.py

a.k.a. Ron’s Shoulders 


 1  print "Test List-11: Sort" 

 2  spec_string = "1000<=n<=100000"

 3  growth_factor = 2

 4  print "Spec_string: ",spec_string, "by factors of", growth_factor

 5  var_list, param_list = make_param_list(spec_string,growth_factor)

 6  # f_list = ("n","1")

 7  f_list = ("n*lg(n)",) 

 8  run_times = [] 

 9  trials = 200

 10  for D in param_list: 

 11 
t = timeit.Timer("L.sort()",

    
"import random;L=[random.random() for i in range(%(n)s)]"%D) 

run_times.append(t.timeit(trials)*1e6/float(trials))

 12 
    
 13  fit(var_list,param_list,run_times,f_list)


Pset Hint


“Good ar tists borrow, great ar tists steal” 

Steve Jobs, CEO Apple Inc. 

quoting Pablo Picasso 

Python Lists 

L, M have n items 

Creation 

Access 

Append 

Concatenate 

Pop 

Delete ﬁrst 

list() 

L[i] 

L.append(0) 

L + M 

L.pop() 

del L[0] 

Θ( 1 ) 
Θ( 1 ) 
Θ( 1 ) 
Θ( n ) 
Θ( 1 ) 
Θ( n ) 

Python Lists II 

L, M have n items 
P has n/2 items 

Slice extraction 

L[0:n/2] 

Slice assignment  L[0:n/2] = P 

Copy 

Reverse 

Sort 

L[:] 

L.reverse() 

L.sort() 

Θ( n ) 
Θ( n ) 
Θ( n ) 
Θ( n ) 
Θ( n * lg(n) ) 

Python Strings 

s, t have n characters 

Creation 

Extract a char 

Concatenate 

list() 

s[i] 

s + t 

Extract substring of 
n/2 characters 

s[0:n/2] 

Θ( 1 ) 
Θ( 1 ) 
Θ( n ) 
Θ( n ) 

Python Dictionaries 

D has n items 

Creation 

Access 

Copy 

List items 

dict() 

D[i] 

D.copy() 

D.items() 

Θ( 1 ) 
Θ( 1 ) 
Θ( n ) 
Θ( n ) 

Python Cost Exercise
 1
 def merge(L,R):
Θ(1) 
 2  
i = 0 
 
Θ(1) 
 3  
 
j = 0 
Θ(1) 
 4  
 
answer = []
Θ(1) 
 5   
while i<len(L) and j<len(R):
Θ(1) 
 6       
if L[i]<R[j]:
Θ(1) 
 7  
         
answer.append(L[i])
Θ(1) 
 8  
         
i += 1 
 9       
else: 
Θ(1) 
10  
         
answer.append(R[j])
Θ(1) 
11  
         
j += 1 
Θ(1) 
12   
if i<len(L):
Θ(N) 
13  
     
answer.extend(L[i:])
Θ(1) 
14   
if j<len(R):
Θ(N) 
15  
     
answer.extend(R[j:]) 
Θ(1) 
16   
return answer 

1 
1 
1 
Θ(N) 
Θ(N) 
)))
Θ(N) 
)))
Θ(N) 
)))
)))
Θ(N) 
Θ(N) 
)))
)))
1 
Θ(1) 
1 
Θ(1) 
1 

Python Cost Exercise II

1
 def merge_sort(A):
2  
n = len(A)
  
3    
if n==1: 
4        
return A 
5  
mid = n//2 
  
6  
  
L = merge_sort(A[:mid])
7  
  
R = merge_sort(A[mid:]) 
8    
return merge(L,R) 

Θ(1) Θ(1) Θ(1) Θ(1) Θ(N) Θ(N) Θ(N) 

1 
1 
Θ(1) 
1 
T(N/2) 
T(N/2) 
1 

Python Arithmetic 

x, y, z have n bits 

Addition 

Subtraction 

Multiplication 

Division 
Modular 
Exponentiation 
Power of 2 

x + y 

x - y 

x * y 

x / y 

powmod(x, y, z) 

2 ** n 

Θ( n ) 
Θ( n ) 
Θ( n1.585... ) 
Θ( n2 ) 
Θ( n3 ) 
Θ( 1 ) 

Python Arithmetic 

x, y, z have n digits 

Addition 

Subtraction 

Multiplication 

Division 
Modular 
Exponentiation 
Power of 2 

x + y 

x - y 

x * y 

x / y 

powmod(x, y, z) 

2 ** n 

Θ( n ) 
Θ( n ) 
Θ( n1.585... ) 
Θ( n2 ) 
Θ( n3 ) 
Θ( 1 ) 

