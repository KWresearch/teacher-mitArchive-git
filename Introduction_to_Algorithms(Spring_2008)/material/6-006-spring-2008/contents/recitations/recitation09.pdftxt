MIT OpenCourseWare 
http://ocw.mit.edu 

6.006 Introduction to Algorithms 
Spring 2008 

For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms. 

6.006 Recitation

Build 2008.17


Qu iz  Rev

iew  

Problems 

Interesting 

Get you  i r k h e  r ight min

dset 

We'll  run  ou t  of time, n o

t  problems 

No  Concepts =  if you don't
  know  them by 
now, ask   in o f f i ce  hours 

Problem 1: Poke


• A[1 ... n] sorted array of integers 
• can contain negative integers 
• no duplicates 
• Want: i s.t.  A[i] = i 
• if multiple possibilities, one will sufﬁce 
• if no such i exists, say so 

Poke: Intuition


•  Play with the examples 
on the right 
•  Build the intuition 
•  Figure it out 

1  2  3  4  5  6  7  8 
-3  -1  1  3  5  7  9  11 
1  2  3  4  5  6  7  8 
2  4  6  8  10  12  14  16 
1  2  3  4  5  6  7  8 
-1  0  1  2  4  5  6  8 
1  2  3  4  5  6  7  8 
1  3  4  6  9  10  11  13 

Poke: Solution


• Key: if A[i] > i, A[j] > j for any j > i 
• proof: A[i ... j] has j - i + 1 cells, must 
contain j - i + 1 values; integers only, no 
duplicates, so A[j] ≥ i + (j - i) + 1 > j 
• Solution: using key above, adapt binary 
search to ﬁnd i 
• Time: O(log(n)) 

Problem 2: Knapsack


• A[1 ... n] numbers (not necessary integers) 
• s also number (not necessary integer) 
i)  ﬁnd i1, i2 s.t.  A[i1]+A[i2] = s 

ii) ﬁnd i1, i2 ... ik s.t.  A[i1] + ... + A[ik] = s 
• Hint: do better than O(nk) 
Palantir phone interview, 2007 

Knapsack: Intuition


•  Play with the examples 
on the right

•  Build the intuition 
•  Figure it out


k = 2, S = 13

1  1  2  3  5 8  13 21
k  = 2, S = 2

1  1  2  3  5  8  13  21 
k = 4, S = 8

1  1  2  3  5  8  13  21 
k = 4, S = 18

1  1  2  3  5  8  13  21 

Knapsack: Solution I


• build a dictionary d = {A[i] : i for i in 1...n} 

(maps numbers in A to their positions)

• for j in 1 ... n 
• if d contains s’ = s - A[j], then we have a 
solution 
• obtain the solution as i1, i2 = j, d[s’] 

Knapsack: Solution II

• let h = ⎣k / 2⎦ (h stands for half) 
• build a dictionary d = {A[i1] + ... + A[ih] : [i1, 
i2 .. ih] for i1 ... ih in 1...n} (maps sums of h-
tuples in a to the positions of the numbers) 
• for j1, j2 ... jk-h in 1 ... n 
• if d contains s’ = s - (A[j1] + ... + A[jk]), 
solution i1, i2 ... ik = [j1, j2, ... jk-h] + d[s’] 

Problem 3: Segments 

• Given n 1-D line segments [si, ei] 
• all endpoints si, ei distinct real numbers 
• Want: 
i)  detect if there are any intersections 

ii) count the number of intersections 

iii) report the intersecting segments 

Segments: Intuition 

s1: 1.0 
s2: 0.8

s3: 0.6 
s4: 1.1 

e1: 3.2

e2: 3.0 
e3: 2.8 
e4: 2.0 
s6: 2.9 
• Yes: 7 intersections 
• (1, 2) (1, 3) (1, 4) (2, 3) (2, 4) (3, 4) (1, 6)


e6: 4.9 

s5: 6.0 

e5: 7.0 

Segments: Solution I

e3: 2.8 
e2: 3.0 
e1: 3.2 

s3: 0.6 
s2: 0.8 
s1: 1.0 
s4: 1.1 

e4: 2.0 
s6: 3.1 

e6: 4.9 
s5: 6.0 
• Sort segments by starting point: 
(0.6, 2.8) (0.8, 3.0) (1.0, 3.2) 
(1.1, 2.0) (2.9, 4.9) (6.0, 7.0) 
• Only check adjacent segments (si+1 < ei)


e5: 7.0 

Segments: Solution II 
0 → 1  +0 
s3 
0.6 
•  For each segment, 
1 → 2  +1 
s2 
0.8 
generate two events 
2 → 3  +2 
s1 
1.0 
3 → 4  +3 
•  start, end 
1.1 
s4 
4 → 3 
e4 
2.0 
•  Process events sorted by 
3 → 2 
e3 
2.8 
their coordinate 
3 → 2 
e2 
3.0 
•  start of segment: 
2 → 1 
3.1 
s6 
e1  1 → 2  +1 
inters += open_segs 
3.2 
open_segs += 1 
1 → 0 
e6 
4.9 
0 → 1  +0 
•  end of segment: 
s5 
6.0 
1 → 0 
open_segs -= 1 
e5 
7.0 

Segments: Solution III 
s3  0 → 1 
+0 
0.6 
{3} 
s3 
s2  1 → 2 
+1 
s2 
{2, 3} 
(2, 3) 
0.8 
s1  2 → 3 
+2 
1.0 
s1 
{1, 2, 3} 
(1, 2) (1, 3) 
s4  3 → 4 
+3 
1.1 
s4  {1, 2, 3, 4}  (4, 1) (4, 2) (4, 3) 
2.0  e4  4 → 3 
{1, 2, 3} 
e4 
2.8  e3  3 → 2 
{1, 2} 
e3 
3.0  e2  3 → 2 
{1} 
e2 
s6  2 → 1 
3.1 
{1, 6} 
s6 
3.2  e1  1 → 2 
{6} 
e1 
4.9  e6  1 → 0 
{ } 
e6 
s5  0 → 1 
6.0 
{5} 
s5 
7.0  e5  1 → 0 
{ } 
e5 

(6, 1) 

+1 

+0 

Bonus: AVL review


• Rotations 
• Using rotations to rebalance


Uberpoke (rotations)

p 

p 

x 

y 

A 

Left


Right


y 

x 

C 

B 

C 

A 

B 

Rebalancing: Easy


:( 

x 

Rotate left 

k+1 

y

k

C 

k-1

A 

B 

k-1 
or 
k 

k 
or 
k+1 

x 

k-1 A 

y

k+1

k 

C 

B k-1
or 
k

Rebalancing: Hard


:(

x 

Rotate left

y 

:(

k-1 

A 

k+1 

y

k  B 

C  k-1 

k+1  x 

k-1

C

k-1 

A

B 

k

B cannot be taller than C


Hard Rebalancing: 

Right, then Left

:( 
x 

k-1 
k+1 
Rotate right 

k+1 

z 

A 

k-1 
or 
k-2 

y 

k 

k-1 

C

D 

k-1  E 
or 

k-2 

:( 

x 

k-1 

A 

y 

k 

z 

k-1 
or 
k-2


D 

E 

k-1 

C 

k-1 
or 
k-2


Hard Rebalancing: 

Right, then Left

Rotate left 
z 

k+1 

k+1 

z 

k  x 

y 

k 

:( 

x 

k-1 

A 

k-1 
or 
k-2 

D 

E 

k-1 
or 
k-2 

y 

k 

k-1 

A 

k-1 
or 
k-2 

E 

D 

k-1 

C

k-1 

C 

Problem 4: BSTing it Up


• BST with n nodes 
• Obtaining keys in sorted order : 
• Call minimum: node w/ minimum key 
• Call successor n-1 times: obtain the 
other n-1 keys, in sorted order 
• Prove that method above takes O(n) time


BSTing it Up: Solution


• Amortized analysis: aggregate analysis 
• key observation: each edge visited twice 
• parent → child, then child → parent 
• n - 1 edges, O(n) edge and node visits


Problem 5: Bunker Hill


• Satellite imagery: rectangular arrays of 
pixels, 4 levels of gray / pixel, no noise 
• WxH image of hill, w x h image of bunker

• Want: locate all bunkers on the hill 
• no noise, perspective, lighting (no AI)

• pixel-by-pixel comparison works 

Bunker Hill: Intuition


The Bunker (3x3) 
1  2  1 
2  1  2 
1  2  1 

The Hill (10x10) 
1  2  1  2  3  0  0  2  1  3 
2  1  2  1  0  0  1  2  1  2 
1  2  1  2  1  3  2  1  2  3 
3  3  3  1  2  1  1  2  1  1 
0  0  0  2  1  2  0  1  0  3 
0  3  1  3  2  1  3  2  1  0 
0  1  2  1  3  3  2  1  2  3 
0  2  1  2  1  0  1  2  1  2 
3  1 2 1  2 3  2 1 2  1

1 3 2 1 1 0 3 0 1 0


Bunker Hill: Solution


• Known as 2-D Rabin Karp 
• Reduce bunker to HB[1...h], where HB[i] is 
the hash of B[1...w][i] 
• Create rolling hashes RH[1...H] (one for 
every row of pixels in the hill), roll in 
parallel so they hash a block of w pixels 
• 1-D Rabin Karp for HB[1...h] in RH[1...H] 

