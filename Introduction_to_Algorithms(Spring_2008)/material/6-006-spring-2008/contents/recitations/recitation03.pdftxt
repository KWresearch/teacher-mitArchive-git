MIT OpenCourseWare 
http://ocw.mit.edu 

6.006 Introduction to Algorithms 
Spring 2008 

For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms. 

6.006 Recitation

Build 2008.6


Outline 

• The Lame Speech (Where & Why)

• Binary Search Trees 
• Principles 
• Algorithms & Python Code 
• Augmenting Binary Search Trees 
• Rank computation 

Orientation


• Binary Search Trees (BSTs) 
• Time/op: O(lg(N)) avg, O(N) max 
• Balanced BSTs 
• Time/op: O(lg(N)) guaranteed 
• Hash Tables 
• Time/op: O(1) avg, O(N) worst


Motivation:Web Sites


•  Many millions of DAILY 
visitors, billions of 
queries (searches) 
•  Run on SQL databases

•  SQL indexes are mainly

•  Tree indexes 
•  Hash indexes 

BST Invariants


•  Binary rooted tree 
•  All left descendants have 
keys < node’s key 
•  All right descendants 
have keys > node’s key 

1 

3 

4 

8 

10 

6

14 

7 

13 

BST Conclusions


•  No key shows up twice

•  Each subtree contains all 
and only the keys with 
values in an interval 
•  left subtree:

upper bound

•  right subtree:

lower bound 


1 

3 

4 

8 

10 

6

14 

7 

13 

BST Subtree Intervals

< 8

> 3 

3 

8 

10 

1 

6

14 

4 

7 

13 

Invariants Rock!


Invariants Rock!


You can mess up a BST inﬁnitely; as long as 

you maintain the invariants, it works 


Algorithms & Python


‘cause you need to know how to build this 


BST Design


• BSTnode 
• attributes: key, children (left & right) 
• methods: insert, ﬁnd (subtree rooted at) 
• BST 
• attributes: root of the tree 
• methods: same as above 

BST Search

 1 class BSTnode(object):

def __init__(self, parent, t):

 2 
3 
self.key = t

      
self.parent = parent 

 3 
      
4 
self.left = None

      
 5 
self.right = None

      
 6

 7 
8 
 9 
10 
11 
12 
13 
14 
15 
16 
17 
18 
19 

def find(self, t):

if t == self.key:

return self

elif t < self.key:

if self.left is None:

return None 

else:

return self.left.find(t)


else:

if self.right is None:

return None 

else:

return self.right.find(t) 


Insert 16


3 

8 

10 

1 

6

14 

4 

7 

13 

Insert 16


3 

8 

10 

1 

6

14 

4 

7 

13 

16 

Insert 9


3 

8 

10 

1 

6

14 

4 

7 

13 

Insert 9


3 

1 

6

8 

9 

10 

14 

4 

7 

13 

Insert 6.1


3 

8 

10 

1 

6

14 

4 

7 

13 

Insert 6.1 

3 

8 

10 

1 

6

14 

4 

7 

13 

6.1 

BST Insertion

 1 class BSTnode(object):

 2 
def __init__(self, parent, t):

self.key = t

3 
      
 4 
self.parent = parent 

      
self.left = None

4 
      
 5 
self.right = None

      
 6

 7 
8 
 9 
10 
11 
12 
13 
14 
15 
16 
17 

def insert(self, t):

if t < self.key:

if self.left is None:

              
self.left = BSTnode(self, t) 

else:

              
self.left.insert(t)

else:

if self.right is None:

self.right = BSTnode(self, t)

              
else:

self.right.insert(t)

              

The BST Wrapper

 1
 class BST(object):

 2    
def __init__(self):

self.root = None

 3  
      
 4
 5    
def insert(self, t):

 6        
if self.root is None: 

 7  
self.root = BSTnode(None, t)

          
 8        
else:

 9  
self.root.insert(t)

          
10
11    
def find(self, t): 

12        
if self.root is None: 

13            
return None

14        
else:

15            
return self.root.find(t)


Successor of 8


3 

8 

10 

1 

6

14 

4 

7 

13 

Successor of 8


3 

8 

10 

1 

6

14 

4 

7 

13 

Successor of 10


3 

8 

10 

1 

6

14 

4 

7 

13 

12 

Successor of 10


3 

8 

10 

1 

6

14 

4 

7 

13 

12 

Successor of 10


3 

8 

10 

1 

6

14 

4 

7 

13 

12 

Successor of 10


3 

8 

10 

1 

6

14 

4 

7 

13 

12 

Successor of 7


3 

8 

10 

1 

6

14 

4 

7 

13 

Successor of 7


3 

8 

10 

1 

6

14 

4 

7 

13 

Successor of 7


3 

8 

10 

1 

6

14 

4 

7 

13 

Successor of 7


3 

8 

10 

1 

6

14 

4 

7 

13 

Successor of 14


3 

8 

10 

1 

6

14 

4 

7 

13 

Successor of 14


3 

8 

10 

1 

6

14 

4 

7 

13 

BST Successor

 1 class BSTnode(object):

def __init__(self, parent, t):

 2 
3 
self.key = t

      
self.parent = parent

 3 
      
4 
self.left = None

      
 5 
self.right = None

      
 6

 7 
8 
 9 
10 
11 
12

13 
14 
15 
16 
17 
18 
19 

def minimum(self):

current = self

      
while current.left is not None: 

          
current = current.left

return current


      

def successor(self):

if self.right is not None:

return self.right.minimum()

current = self 

while current.parent is not None and current.parent.right is current:

          
current = current.parent

return current.parent


Delete 4


3 

8 

10 

1 

6

14 

4 

7 

13

Delete 4


3 

8 

10 

1 

6

14 

7 

13 

Delete 10


3 

8 

10 

1 

6

14 

4 

7 

13 

Delete 10


3 

8 

10 

1 

6

14 

4 

7 

13 

Delete 10


8 

3 

1 

6

14 

4 

7 

13

Delete 3


3 

8 

10 

1 

6

14 

4 

7 

13

Delete 3


3
4 

8 

10 

1 

6

14 

4 

7 

13

Delete 3


3
4 

8 

10 

1 

6

14 

7 

13 

BST Deletion


 1 
class BSTnode(object):

 2    
def delete(self):

 3        
if self.left is None or self.right is None:

 4            
if self is self.parent.left:

 5  
self.parent.left = self.left or self.right 

              
 6                
if self.parent.left is not None: 

 7  
self.parent.left.parent = self.parent 

                  
 8            
else:

 9  
self.parent.right = self.left or self.right 

              
10                
if self.parent.right is not None: 

11  
self.parent.right.parent = self.parent 

                  
12            
return self

13        
else:

14  
s = self.successor()

          
15  
self.key, s.key = s.key, self.key 

          
16            
return s.delete() 


Delete 8


8 

3 

1 

6

4
4 

7 

Delete 8


3 

1 

6

4
4 

7

Delete 8

BST: Dude, where’s self.root ?! 


3 

1 

6

4
4 

7

Delete 8,Take 2


8 

3 

1 

6

4
4 

7 

Delete 8,Take 2

ψ 

8 

3 

1 

6

4
4 

7 

Delete 8,Take 2

ψ 

8 

3 

1 

6

4
4 

7 

Delete 8,Take 2

ψ 

8 

3 

1 

6

4
4 

7 

Delete 8,Take 2

ψ 

3 

1 

6

4
4 

7

Delete 8,Take 2

ψ 

3 

1 

6

4
4 

7

Delete 8,Take 2

ψ 
BST: Ah, there’s self.root! 


3 

1 

6

4
4 

7

Delete 8,Take 2

ψ 
BST: Ah, there’s self.root! 


3 

1 

6

4
4 

7

Delete 8,Take 2

BST: Ah, there’s self.root! 

3 

1 

6

4
4 

7

BST Deletion Hack


 1 
class BST(object):

 2    
def __init__(self):

self.root = None

 3  
      
 4
 5    
def delete(self, t):

 6  
node = self.find(t)

      
 7        
if node is self.root: 

 8  
pseudoroot = BSTnode(None, 0)

          
 9  
          
pseudoroot.left = self.root 

10  
self.root.parent = pseudoroot 

          
11  
          
deleted = self.root.delete()

12  
self.root = pseudoroot.left 

          
13  
          
self.root.parent = None 

14  
          
return deleted

15        
if node is not None:

16            
return node.delete()


Augmenting BSTs 

‘cause you don’t wanna reinvent the wheel 

for every new feature


Case Study: Rank


• Want to implement a data structure with 
the following operations 
• given a set S (initially empty) 
• insert(x): add x to S 
• delete(x): remove x from S 
• rank(x): # of y ∈ S such that y ≤ x 

Implementing Rank 


• Remember that BSTs will kick ass when we 
learn how to balance them 
• Remember that BSTs are good with order 
relationships 

Implementing Rank 


• Remember that BSTs will kick ass when we 
learn how to balance them 
• Remember that BSTs are good with order 
relationships 

(again) BST Search

 1 class BSTnode(object):

 2 
def __init__(self, parent, t):

      
self.key = t

3 
      
 3 
self.parent = parent 

      
self.left = None

4 
      
 5 
self.right = None

 6

 7 
8 
 9 
10 
11 
12 
13 
14 
15 
16 
17 
18 
19 

def find(self, t):

if t == self.key:

return self

elif t < self.key:

if self.left is None:

return None 

else:

return self.left.find(t)


else:

if self.right is None:

return None 

else:

return self.right.find(t) 


BST Search +Size

 1 class BSTnode(object):

def __init__(self, parent, t):

 2 
3 
self.key = t

      
self.parent = parent 

 3 
      
4 
self.left = None

      
self.right = None

 5 
      
      
+A 
self.size = 1

 6

 7 
 8 
9 
10 
11 
12 
13 
14 
15 
16 
17 
18 
19 

def find(self, t):

if t == self.key:

return self

elif t < self.key:

if self.left is None:

return None 

else:

return self.left.find(t)


else:

if self.right is None:

return None 

else:

return self.right.find(t) 


(again) BST Insertion

 1 class BSTnode(object):

 2 
def __init__(self, parent, t):

self.key = t

3 
      
 4 
self.parent = parent 

      
self.left = None

4 
      
 5 
self.right = None

      
 6

 7 
8 
 9 
10 
11 
12 
13 
14 
15 
16 
17 

def insert(self, t):

if t < self.key:

if self.left is None:

              
self.left = BSTnode(self, t) 

else:

              
self.left.insert(t)

else:

if self.right is None:

self.right = BSTnode(self, t)

              
else:

self.right.insert(t)

              

BST Insertion +Size

 1 class BSTnode(object):

 2 
def __init__(self, parent, t):

self.key = t

3 
      
 4 
self.parent = parent 

      
self.left = None

4 
      
 5 
self.right = None

      
      
+A 
self.size = 1

 6

 7 
+B 
 8 
 9 
10 
11 
12 
13 
14 
15 
16 
17 

def insert(self, t):

      
self.size += 1

if t < self.key:

if self.left is None: 

              
self.left = BSTnode(self, t) 

else:

              
self.left.insert(t)

else:

if self.right is None:

self.right = BSTnode(self, t)

              
else:

self.right.insert(t)

              

(again) BST Wrapper

 1
 class BST(object):

 2    
def __init__(self):

self.root = None

 3  
      
 4
 5    
def insert(self, t):

 6        
if self.root is None: 

 7  
self.root = BSTnode(None, t)

          
 8        
else:

 9  
self.root.insert(t)

          
10
11    
def find(self, t): 

12        
if self.root is None: 

13            
return None

14        
else:

15            
return self.root.find(t)


BST Wrapper +Size

 1
 class BST(object):

 2    
def __init__(self):

self.root = None

 3  
      
 4
 5    
def insert(self, t):

 6        
if self.root is None: 

 7  
self.root = BSTnode(None, t)

          
 8        
else:

 9  
self.root.insert(t)

          
10
11    
def find(self, t): 

12        
if self.root is None: 

13            
return None

14        
else:

15            
return self.root.find(t)


(again) BST Successor

 1 class BSTnode(object):

def __init__(self, parent, t):

 2 
3 
self.key = t

      
self.parent = parent

 3 
      
4 
self.left = None

      
 5 
self.right = None

      
 6

 7 
8 
 9 
10 
11 
12

13 
14 
15 
16 
17 
18 
19 

def successor(self):

if self.right is not None:

return self.right.minimum()

current = self 

while current.parent is not None and current.parent.right is current:

          
current = current.parent

return current.parent


def minimum(self):

current = self

      
while current.left is not None: 

          
current = current.left

return current


      

BST Successor +Size

 1 class BSTnode(object):

def __init__(self, parent, t):

 2 
3 
self.key = t

      
self.parent = parent

 3 
      
4 
self.left = None

      
self.right = None

 5 
      
      
+A 
self.size = 1

 6

 7 
 8 
 9 
10 
11 
12

13 
14 
15 
16 
17 
18 
19 

def successor(self):

if self.right is not None:

return self.right.minimum()

current = self

      
while current.parent is not None and current.parent.right is current:

current = current.parent 

          
return current.parent


def minimum(self):

      
current = self

while current.left is not None: 

          
current = current.left

return current


(again) BST Deletion


 1 
class BSTnode(object):

 2    
def delete(self):

 3        
if self.left is None or self.right is None:

 4            
if self is self.parent.left:

 5  
self.parent.left = self.left or self.right 

              
 6                
if self.parent.left is not None: 

 7  
self.parent.left.parent = self.parent 

                  
 8            
else:

 9  
self.parent.right = self.left or self.right 

              
10                
if self.parent.right is not None: 

11  
self.parent.right.parent = self.parent 

                  
12            
return self

13        
else:

14  
s = self.successor()

          
15  
self.key, s.key = s.key, self.key 

          
16            
return s.delete() 


BST Deletion +Size 


 1 class BSTnode(object):

def delete(self):

 2 
3 
if self.left is None or self.right is None:

if self is self.parent.left: 

 4 
5 
self.parent.left = self.left or self.right 

              
if self.parent.left is not None: 

 6 
 7 
self.parent.left.parent = self.parent

                  
else:

 8 
 9 
self.parent.right = self.left or self.right

              
10 
if self.parent.right is not None:

self.parent.right.parent = self.parent  

11 
                  
+A 
current = self.parent

          
+B 
while current is not None: 

+C 
current.size -= 1 

              
+D 
current = current.parent

              
15 
return self

16 
else:

17 
s = self.successor()

          
self.key, s.key = s.key, self.key 

18 
          
return s.delete() 

19 

(again) Deletion Hack


 1 
class BST(object):

 2    
def __init__(self):

self.root = None

 3  
      
 4
 5    
def delete(self, t):

 6  
node = self.find(t)

      
 7        
if node is self.root: 

 8  
pseudoroot = BSTnode(None, 0)

          
 9  
          
pseudoroot.left = self.root 

10  
self.root.parent = pseudoroot 

          
11  
          
deleted = self.root.delete()

12  
self.root = pseudoroot.left 

          
13  
          
self.root.parent = None 

14  
          
return deleted

15        
if node is not None:

16            
return node.delete()


Deletion Hack +Size 


 1 
class BST(object):

 2    
def __init__(self):

self.root = None

 3  
      
 4
 5    
def delete(self, t):

 6  
node = self.find(t)

      
 7        
if node is self.root: 

 8  
pseudoroot = BSTnode(None, 0)

          
 9  
          
pseudoroot.left = self.root 

10  
self.root.parent = pseudoroot 

          
11  
          
deleted = self.root.delete()

12  
self.root = pseudoroot.left 

          
13  
          
self.root.parent = None 

14  
          
return deleted

15        
if node is not None:

16            
return node.delete()


Rank of 7


3 

8 

10 

1 

6

14 

4 

7 

13 

Rank of 7


+2 

3 

8 

10 

1 

6

14 

4 

7 

13 

Rank of 7


+2 

3 

1 

+2 
6

8 

10 

14 

4 

7 

13 

Rank of 7


8 

10 

+2 

3 

1 

+2 
6

4 

+1 
7 

14 

13 

BST Search +Size
 1 class BSTnode(object):

def __init__(self, parent, t):

 2 
3 
self.key = t

      
 3 
self.parent = parent

      
4 
self.left = None

      
 5 
self.right = None

      
self.size = 1

 6 
      
 7

 8 
 9 
10 
11 
12 
13 
14 
15 
16 
17 
18 
19 
20 

def find(self, t):

if t == self.key:

return self

elif t < self.key:

if self.left is None:

return None

else:

return self.left.find(t)


else:

if self.right is None:

return None

else:

return self.right.find(t) 


Finally, Rank!
 1 class BSTnode(object):

def __init__(self, parent, t):

 2 
3 
self.key = t

      
 3 
self.parent = parent

      
4 
self.left = None

      
 5 
self.right = None

      
self.size = 1

 6 
      
 7

 8 
 9 
10 
11 
12 
13 
14 
15 
16 
17 
18 
19 
20 
21 

def rank(self, t):

left_size = 0 if self.left is None else self.left.size  

      
if t == self.key:

return left_size + 1

elif t < self.key:

if self.left is None:

return 0

else:

return self.left.rank(t)


else:

if self.right is None:

return left_size + 1

else:

return self.right.rank(t) + left_size + 1


