Generating Function Notes

18.310, Fall  2005, Prof. Peter  Shor


1  Counting  Change 

In  this  lecture,  I’m  going  to  talk  about  generating  functions.  We’ve  already  seen 
an  example  of  generating  functions.  Recall  when  we  had  n  independent  random 
variables,  each  of which was  0 with  probability  p,  and  1  with  probability  q = 1 − p. 
How did we  compute the probability of getting  exactly  k  1’s.  What we did was  look 
at  the  polynomial 

(p + qx)n  = 

 
 
 
 
 
 
 
 
�
�
�
�
�
�
�
�
n
n
n
n
p n−1 qx + 
p n  + 
p n−2 q 2 x 2  + . . . + 
q n x n 
n 
2 
1 
0
The coeﬃcient of xk  was the probability of getting k  1’s.  This is a simple generating 
function,  and we will generalize  this construction  in today’s  lecture.  There are a  lot 
more  things  you  can  do  with  generating  functions  that  aren’t  going  to  be  covered 
in  today’s  lecture,  but  it  will  give  you  a  ﬂavor  of  how  these  work.  It  will  also  show 
you  how  to  solve  linear  recurrence  equations,  which  can  be  very  useful. 
Let’s  look  at  a  related  question.  Suppose  we  have  4  pennies,  1  nickel,  and  1 
dime.  For  which  prices  can  we  give  exact  change?  The  answer  can  be  found  in 
a  way  that’s  a  lot  like  the  probability  computation  above  (in  fact,  you  may  have 
ﬁgured  out  the  answer  already,  but  this  is  an  easy  example  to  show  you  how  these 
generating  functions  work). 
We’ll  introduce  a  variable  x  so  that  xn  will  correspond  to  the ways  of making  n 
cents  in  change.  We  can  either  use  0,  1,  2,  3,  or  4  pennies,  and  0  or  1  nickels,  and 
0  or  1  dimes.  Thus, 

(1 + x 10 )(1 + x 5 )(1 + x + x 2  + x 3  + x 4 ) 

is  the  generating  function  which  gives  the  answer.  If  we  use  the  dime,  we  use  the 
x10  monomial  in  the  ﬁrst  term.  Otherwise,  we  use  the  x 0  =  1  monomial,  and  so 
forth.  Multiplying  this  out,  we  get 

(1 + x 10 )(1 + x 5 )(1 + x + x 2  + x 3  + x 4 ) = 1 + x + x 2  + x 3  + . . . + x 19 , 

showing  that  we  can  obtain  any  number  of  cents  between  0  and  19. 
A  little  thought  will  convince  you  that  the  coeﬃcient  on  the  x k  term  gives  the 
number  of  diﬀerent  ways  of  ﬁnding  coins  that  add  up  to  k  cents.  We  can  thus  use 
the  same  technique  to  answer  a  question  such  as:  How  many  ways  can  you  make 

1


21  cents  exact  change  if  you  have  two  dimes,  three  nickels,  and  seven  pennies?  For 
this  problem,  the  generating  function  is 

(1 + x 10  + x 20 )(1 + x 5  + x 10  + x 15 )(1 + x + x 2  + x 3  + x 4  + x 5  + x 6  + x 7 ). 

The ﬁrst term  is  the  contribution  from the dimes,  the  second  term  from the nickels, 
and  the  third  from  the  pennies.  The  coeﬃcient  on  the  x 21  term  gives  you  the 
number of way of making 21  cents  exact  change.  This coeﬃcient  is 4,  and the terms 
correspond  to  coins  as  follows 

x20  1  x
· 
·
10 
10
· 
x
x
x
·
5 
10 
6
· 
15  · 
x
x
x
x6 
1  x
· 
·
What  happens  if  you  have  an  arbitrary  number  of  dimes,  nickels,  and  pennies? 
Now,  we  want  to  multiply  by  (for  the  dimes) 

two  dimes  and  one  penny

one  dime,  two  nickels  and  one  penny

one  dime,  one  nickel  and  six  pennies

three  nickels  and  six  pennies


1 + x 10  + x 20  + x 30  + x 40  + x 50  + . . . 

where  we  can  have  any  non-negative  integer  for  the  number  of  dimes.  But  this 
inﬁnite  series  above  is  just  1/(1 − x10 ),  and  it  converges  as  long  as  |x|  <  1.  Thus, 
the  generating  function  that  corresponds  to  making  change  using  any  number  of 
dimes,  nickels,  and  pennies, would  be 

1 
. 
(1 − x)(1 − x5 )(1 − x10 ) 
The  corresponding  power  series  converges  if  |x| �  1.  The  essential  ingredient  we 
need  to  know  in  terms  of  using  it  is  that  it  converges  in  some  neighborhood around 
the  x = 0.  Power  series  that  don’t  necessarily  converge  anywhere  are  called  formal 
power  series;  these  can  still  be useful  for  some  purposes, but we won’t  discuss them 
any  further  in  this  class. 
Let’s  do one more  thing with change  before we move  on.  Suppose we are paying 
with dollar bills and dollar  coins.  If we  count  these  two  forms of money as diﬀerent, 
we  can  make  n  dollars  in  n + 1  diﬀerent  ways:  we  can  use  k  coins  and  n − k  bills 
for  any  value  of  k  between  0  and  n.  This  corresponds  to  the  identity 

1 
(1 − x100 )2 

= 1 + 2x 100  + 3x 200  + 4x 300  + . . . 

2 

2  Dots  and  Dashes 

Now,  let’s  think  about another  problem.  Suppose that  you  are  sending  information 
using a  sequence  of  two  symbols,  say  dots  and dashes,  and  suppose that  the  dash  is 
two  times  as  long  as  a  dot1 .  How  many  diﬀerent  messages  can  you  send  in  n  time 
units?  Let’s  call  this  number  fn . 
We’ll  ﬁgure  fn  out  for  the  ﬁrst  few  n.  We  have 

n 
fn 

1 
1 
. 

2 
2 
.. 

3 
3 
... 
. 
. 

4 
5 
.... 
.. 
. . 
.. 

5

8

.....

...

.  ..

..  . 
... 
. 
. 
. 

You may  already  recognize  the  pattern:  these  are  Fibonacci  numbers.  But  let’s  see 
what  we  can  ﬁnd  out  about  Fibonacci  numbers  using  generating  functions.  The 
recursion  for  the  Fibonacci  numbers  is 

fn  = fn−1  + fn−2 
It’s  not  too  diﬃcult  to  see  see  why  this  works.  The  last  symbol  must  be  either  a 
dot  or  a  dash.  If  the  last  symbol  is  a  dash,  removing  it  leaves  a  sequence  two  units 
shorter.  If  the  last  symbol  is  a  dot,  removing  it  leaves  a  sequence  one  unit  shorter. 
Now,  how  does  this  connect  to  generating  functions?  Let  us  deﬁne 

g(x) = 

�
 
j
�
fj x . 
j=0 
What is f0?  It has to be 1, in order to have f2  = f1+f0 .  This makes sense intuitively: 
there is one message, the empty message, using zero units of time (intuitively, setting 
f0  =  0  also  makes  sense,  but  it  doesn’t  satisfy  the  recurrence).  What  does  this 
recurrence  say  about  g(x)?  Let’s  look  at  the  following  equations 

g(x) = 1 +  x  + 2x2  + 3x3  + 5x4  + 8x5  +  13x6 
x  +  x2  + 2x3  + 3x4  + 5x5  + 8x6 
xg(x) = 
x2  +  x3  + 2x4  + 3x5  + 5x6 
x2 g(x) = 

We  can  see  that  by  multiplying  by  x  and  x2  we  have  shifted  the  terms  so  that 
instead  of  terms  fkxk ,  we  get  terms  fk−1xk  and  fk−2xk .  We  thus  get  that  the 
Real  Morse  code  is  a  bit more  complicated. 
1

3 

equation fk  = fk−1+fk−2  seems to correspond to the (slightly  incorrect) equation 
g(x) = xg(x) + x2g(x).  Is  this  the  right  equation  for  our  generating  function  g(x)? 
It  isn’t  quite  right.  All  the  terms  xk  for  k >  0  do  cancel  in  this  equation,  but  it 
doesn’t work  for  the  constant  term.  To make  the  constant  term  correct,  we  need  to 
add  1  to  the  right  side,  obtaining  the  correct  equation 

g(x) = xg(x) + x 2 g(x) + 1. 

Now,  this  can  be  rewritten  as 

g(x) = 

1 
. 
1 − x − x2 
When we have a polynomial  in the denominator of a  fraction  like  this, we can  factor 
the  polynomial  and  express  it  as  the  sum  of  two  simpler  fractions.  That  is, we  ﬁrst 
factor  the  denominator 
 
 
 
� 1 + �5 
 
�
�
�
�
�
1 − 
x 
1 − 
2
We  now  use  the  method  of  partial  fractions  to  rewrite  this  as 

 1 − �5 
 
�
�
x ,
2 

2 
1 − x − x 

= 

 

. 

+ 

g(x) = 

b 
a
1 − ( 1−�5 )x
1 − ( 1+�5 )x 
2 
2
Some  of  you may  have  seen  the method  of  partial  fractions  before  in  calculus  when 
you  learned  integration.  We  need  to  ﬁnd  a  and  b.  Elementary  algebra  gives 
 
 
1 + �5 
�
�
2 
 
1 − �5 
�
�
2 
Now,  we  need  to  remember  what  the  Taylor  series  for  1/(1 − �x)  is.  It  is 
1 
= 1 + �x + �2 x 2  + �3 x 3  + �4 x 4  + . . . 
1 − �x 
Even  those  of  you  who  haven’t  seen  Taylor  expansions  should  recognize  this  as  the 
formula  for  summing  a  geometric  series. 

1 
a  =  �5
1
− �5

b  = 

 

.

4 

=

fn  =

n

 

 

 
.

g(x) = 

Now,  since 
grows  as 

We  thus  have  that,  expanding  each  of  the  fractions  in  the  expression  for  g(x) 
above  by  a  Taylor  series, 
 
 
 
1+�5 
1+�5
1+�5
�2 
�
�
�3
�
�
�
�
2 
3
x + 
2  + 
a  1 + 
x + . . . 
2 
2 
 
 
 
 
 
 
1−�5 �3
1−�5 �2
1−�5
�
�
�
�
�
�
2 
3
x + . . . 
x + 
+ 
+b  1 + 
2 
2 
2
 
 
 
 
1  ��
1+�5 �4
1+�5 �3
1+�5 �2 
1+�5 �
�
2  �
�
�
3 
+ 
x + 
x + 
x + . . . 
�5 
2 
2
2
2
 
 
 
x2  +  1−�5 �4 
x +  1−�5 �3 
1−�5  +  1−�5 �2 
1
5 �
x3  + . . . �
�
�
�
�
�
− �
2 
2 
2
2
Now,  this  gives  us  a  nice  expression  for  fn ,  the  nth  Fibonacci  number.  We  equate 
the  coeﬃcients  of  xn  on  the  left- and  right-hand  sides  of  this  equation.  Since  the 
nth  Fibonacci  number  fn  is  the  coeﬃcient  on  xn  in  g(x),  we  get 
 
 
1  ��
− ( 1−�5 �n+1 �
1+�5 �n+1 
�5 
.
2
2
 
 
�5 
 1−2 
 
�
�
<  1,  we  can  see  that  the  second  term  above  is  neglible,  and  f n 
��
��
 
1+�5
�
�
C 
2 
for  some  C .  (And  in  fact,  it’s  really  easy  to  ﬁgure  out  C  from  this  formula.)  This 
means  that  we  have  found  the  asymptotic  growth  rate  for  the  number  of  messages 
that  can  be  encoded by  our  dots  and dashes,  and  that  number of  bits  sent  per  time 
unit  is 
1 + �5 
. 
log2 
2 
Now  let’s  generalize  this.  I’m  going  to  give  you  a  general  method  for  solving 
linear  recurrence  equations  (also  called  linear  diﬀerence  equations).  If  you’ve  taken 
18.03,  you’ll  notice  that  this  method  looks  a  lot  like  the  method  for  solving  linear 
diﬀerential  equations,  and  in  general,  it  turns  out  that  recurrence  equations  often 
behave  a  lot  like  diﬀerential  equations. 
Suppose we  have  a  recurrence  equation 
fn  = �fn−1  + � fn−2  + β fn−3 
I’m  only  writing  this  equation  down  with  three  terms,  but  the  generalization  to  k 
terms  is obvious,  and works  just  like  you’d  expect.  How  do we  solve  this?  What we 
do  is  we  write  down  the  generating  function 
�
 
fj xj . 
�
j=0 
5 

g(x) = 

We  then,  using  the  same  reasoning  we  had  before,  get  an  equation  for  g(x)  of  the 
following  form: 

g(x) = �xg(x) + �x2 g(x) + βx3 g(x) + p(x) 

where  p(x)  is  a  low-degree  polynomial  that  makes  this  equation  work  for  the  ﬁrst 
few  elements  of  the  sequence, where  the  recurrence  equation  doesn’t work  (because 
we  don’t  have  a  f−1  term).  For  the  Fibonacci  number  example  above,  we  have 
p(x)  =  1.  Note  that  if  we  don’t  have  a  p(x)  term,  we  get  the  solution  g(x) = 0 
which,  while  its  coeﬃcients  (all  0’s)  satisfy  the  linear  recurrence  equation,  doesn’t 
tell  us much  useful. 
We  then  obtain,  as  before 

g(x) = 

p(x) 
1 − �x − �x2  − βx3 
Let’s  suppose we  can  factor  the  denominator  as  follows: 
1 − �x − �x2  − βx3  = (1 − r1x)(1 − r2x)(1 − r3x). 
We  then  use  the  method  of  partial  fractions  (which  you  may  remember  from  Cal­
culus)  to  get 

g(x) = q(x) + 

c 
b
a
1 − r3x 
1 − r2x 
1 − r1x 
where a,  b and c are constants,  as before, and where q(x)  is a  low degree polynomial 
that takes care of any anomolies  in the ﬁrst few terms of the sequence (there usually 
won’t  be  any,  so  q(x)  usually  will  be  0).  We  can  then  see,  by  taking  a  Taylor 
expansion  for  this  generating  function,  that  a  generic  term  of  our  sequence  will  be 

+ 

+ 

n  + cr3 
n  + br2 
n . 
fn  = ar1 

How  did we  get  the  roots  r1 ,  r2  and  r3 ?  They  are  the  zeros  of  the  polynomial 
y 3  − �y2  − � y − β . 
1 ,  so 
We  can  see  this  by  taking  y =  x 
1 − �x − �x2  − βx3  =  x 3 (y 3  − �y2  − � y − β ) 
=  x 3 (y − r1 )(y − r2 )(y − r3 ) 
=  (1 − r1x)(1 − r2x)(1 − r3x) 
What  happens  if  we  have  a  double  root?  I  went  over  this  in  class,  but  I’m 
going  to  be  lazy  and  not  type  it  up.  This  case  would  make  a  good  homework 

6


problem  when  I  teach  the  class  again  in  the  future.  You  probably  did  the  case  of 
a  double  root  when  you  took  calculus  and  learned  the  partial  fractions  method  for 
integrating  fractions with polynomials.  If you remember what happened there,  or  if 
you  remember what happens when you have  a  double  root  in diﬀerential  equations, 
you  can  ﬁgure  out  what  happens  here.  When  you  get  r  as  a  double  root,  you  get  a 
term  with 

(�n + � )r n , 
in  the  expression  for  fn ,  and  if  r  appears  as  a  k -fold  root,  you  get  a  term  p(n)r n 
where  p(n)  is  a  polynomial  of  degree  at  most  k − 1. 

3 

A  Chord  Sequence 

Let’s  count  something  harder  now.  (This  is  the  start  of  Monday’s  lecture).  Let’s 
count  how  many  ways  there  are  of  putting  chords  in  a  k -gon  to  divide  it  into 
triangles.  We’ll  call  this  number Ck−2 .  This  sequence  starts  as  follows: 
7 
6 
k 
3 4 5
j  = k − 2 1 2 3
4 
5 
1  2  5  14  42 
Cj 

as you can  see  from the  following ﬁgure.  Here  I’ve  illustrated one of  each  essentially 
way  of  dividing  a  k -gon  into  triangles,  along  with  the  number  of  times  it  must  be 
counted  (because  of  symmetry),  for  k � 7. 

5x 

6x 

6x 

2x

7x 

7x 

14x 

14x 

How  can  we  ﬁnd  a  recurrence  for  this  number?  Well,  for  a  k -gon,  let’s  look  at 
the  triangle  through  the  edge  (k , 1).  There  must  be  a  third  point  in  this  triangle. 
Let’s  call  it  j .  Clearly,  we  must  have  2 �  j  � k − 1.  If  we  remove  this  triangle,  we 
now  have  two  smaller  polygons,  a  j -sided  one,  and  a  (k − j + 1)-sided  one.  We  now 
7


can  divide  these  polygons  up  into  triangles  independently.  (We  need  another  ﬁgure 
here.)  We  thus  get  that  the  number of ways  of  triangulating  a  k -gon,  given  that we 
have  a  triangle  with  vertices  1, j, k ,  is  C j−2Ck−j−1 . 
One  thing  we  notice  is  that  for  this  to  be  true  for  j  =  2  or  j  =  k − 1,  we  have 
to  set  C0  = 1.  This  takes  care  of  the  case  where  j  is  2  or  k − 1,  and  one  of  the  two 
smaller  polygons  isn’t  really  there  (or  is  just  an  edge). 
Now,  we  can  get  a  recurrence.  Summing  over  all  the  j  between  2  and  k − 1 
k−1 
 
�
Cj−2Ck−j−1 
j=2 
This formula can use some rethinking of the limits.  Let’s let k √  = k−2 and j √  = j −2. 
We  get 
k �−1 
 
�
Cj � Ck �−j �−1 
j �=0 
which  is  a  nicer-looking  recurrence  relation. 
The  next  question  is  how  we  evaluate  it  using  generating  functions.  Let’s  look 
at  the  generating  function  for  counting  these  triangulations  That  is, 

Ck−2 

Ck �  = 

=

�
�
i=0 
What  happens when we  square  g(x).  We  get 

g(x) = 

 
Cixi  = 1 + x + 2x 2  + 5x 3  + 14x 4  + . . . 

= 

g(x)2  =  1 + (1 + 1)x + (1  2 + 1  1 + 2  1)x 2  + (1  5 + 2  1 + 1  2 + 1  5)x 3  + . . . 
· 
· 
·
·
·
·
·
k 
 
 
x k 
�
�
Cj Ck−j

j=0

k
You  can  see  that  the  xk  term  in  the  expression  on  the  right  is  the  right-hand-side 
of  the  recurrence  relation  we  found  above  for  Ck√ (with  k = k √  − 1),  so  we  get 
�
 
g(x)2  = 
Ck+1x k . 
�
k=0 
Multiplying  this  by  x  gives  a  sum  with  the  x j  coeﬃcient  equal  to  Cj xj .  So  we 
now  have  a  expression  relating  xg(x)2  and  g(x).  We  need  to  make  sure  we  get  the 
smallest  terms  right.  We  can  check  the  the  constant  term  is  the  only  one  that’s 
wrong,  and we  can  ﬁx  that  by  adding  1  to  xg(x)2 ,  to  get  the  equation 

g(x) = 1 + xg(x)2 

8 

g(x) = 

g(x) = 

= 

(1)(−1)(−3)(−5)  y4 
4!  − 
24 

(1)(−1)(−3)(−5)(−7)  y5 
5!  + . . . 
25 

g(x) = 

= 

Now,  this  is  a  quadratic  equation  in  g(x),  so  we  can  use  the  quadratic  formula  to 
solve  for  it,  and  we  obtain 
1 ± �1 − 4x 
. 
2x 
Well,  we  now have  a  choice  here.  Which  of  the  two  roots of  this  equation  should we 
use?  We  can  ﬁgure  that  out  by  looking  at  the  ﬁrst  term.  We  should  have  g(0) = 1. 
Depending  on which  root  we  choose,  we  either  get  g(0) = 2/0  or  g(0) = 0/0.  Using 
l’Hopital’s  rule,  or  expanding  the  power  series, we  can  ﬁgure out  that  in  the  second 
case,  we  indeed  have  g(0) = 1,  so  we  get 
1 − �1 − 4x 
2x 
What  is  this  number?  Well,  to  ﬁgure  that  out,  we  have  to  expand  g(x)  in  a  power 
series.  We  can  use  the  expansion 
(1)(−1)  y2 
(1)(−1)(−3)  y3 
(1−y)1/2  = 1− 2 y + 
1 
3!  + 
2!  − 
22 
23 
Substituting  y = 4x,  this  gives 
1 − �1 − 4x 
2x 

� 1 
 
1

�
(2k − 3)(2k − 5)(2k − 7) . . . 1

2x 2k 
k=1 
where by (2k − 3)(2k − 5)(2k − 7) . . . 1 we mean the product of odd numbers between 
1  and 2k − 3,  and 1 if  k = 1.  All  the −  signs  cancel  out,  as  they  should:  since we’re 
counting  things,  we  have  to  get  a  positive  integer. 
How  do  we  simplify  this  expression?  Let’s  equate  coeﬃcients  on  the  left-hand­
and  right-hand-sides  of  this  equation.  The  coeﬃcient  of  x j  on  the  left-hand-side  is 
Cj .  On  the  right  hand  side,  we  have  xk−1 ,  so  we  need  to  take  k = j + 1.  Equating 
coeﬃcients,  we  get We  get  that 
1  1  (2j − 1)(2j − 3) . . . 1
2 2j+1 
j + 1! 
(2j − 1)(2j − 3) . . . 1
1
j + 1 
j ! 
We can now multiply the top and bottom of the above expression by j ! and simplify, 
to  get 
 
 
�
�
1 
(2j )! 
2j
1
j + 1 (j !)2 
j + 1 
j 
Here,  we  grouped  the  j !  in  the  numerator  with  the  2 j  and  the  product  of  odd 
numbers  to  get  (2j )!.  This  is  the  j ’th  Catalan  number  (in  class,  I  forgot  to  divide 
by  x,  and  told  you  the  wrong  result,  that  it  was  the  j − 1’th  Catalan  number). 
9 

(4x)k 
k ! 

Cj  = 

4j+1

2j 

Cj  =

= 

The Catalan numbers turn up in quite a  few places.  Prof. Richard Stanley has a 
section  in his  enumerative  combinatorics  book  (this  section  is also  on  his web page) 
giving  66  combinatorial  interpretations  of  the  Catalan  numbers. 

4 

Ups  and  Downs 

The  last  example  we  will  do  is  counting  the  number  of  alternating  permutations. 
These  are  permutations  that  alternate  up  steps with  down  steps.  For  example,  the 
permutation  3,6,1,8,4,7,2,5  is  one,  since 

3 < 6 > 1 < 8 > 4 < 7 > 2 < 5 

Let An  be the number of such permutations on the  letters 1, 2, . . . , n that start with 
an  up  step.  It’s  an  easy  observation  that  if  we  know  the  number  that  start  with 
an  up  step,  we  also  know  the  number  that  start  with  a  down  step,  because  these 
numbers are equal by symmetry.  If n > 1,  it’s also half the total  number, since each 
alternating  permutation  (except  when  n  =  1)  either  starts  by  going  up  or  going 
down. 
How  many  such  permutations  are  there?  We’ll  go  through  this  example  a  little 
more  quickly  than  the  last  ones,  since  hopefully  you  are  getting  used  to  this  kind 
of  reasoning  by  now.  We  can  easily  count  the  ﬁrst  few  terms  of  the  sequence.  This 
is  a  good  idea  in  any  case  in  working  out  this  type  of  problem.  You  might  notice 
a  pattern  in  these  numbers.  Even  if  you  don’t,  in  working  out  the  small  cases  you 
might  get  an  idea  of  how  to  ﬁnd  a  recurrence.  And  in  any  case,  you  can  use  these 
numbers  to  check  your  ﬁnal  results.  We  have 

k 
0 1 2 3 4  5 
Ak  1  1  1  2  5  16 

We  need  to  ﬁnd  a  recurrence  on  the  number  of  permutations.  This means  that  we 
somehow  need  to  build  each  such  permutation  out  of  smaller  ones.  How  can  we  do 
this? 
It’s  not  completely  obvious  how  to  ﬁnd  this  recurrence.  Here’s  how  we  do 
it.  What  we  will  do  is  remove  the  largest  number  in  the  permutation,  which  will 
break  it  into  two  pieces  (one  of  these  pieces  may  have  length  0).  Each  of  these 
pieces  will  alternate  up  and  down  steps,  starting  with  up.  And  the  ﬁrst  piece  will 
always  have  odd  length,  since  it  has  to  start  with  an  up  step  and  end  with  a  down 
step.  In  our  example  above,  we  remove  the  8  and  get  the  two  sequences  3,6,1  and 
4,7,2,5.  These aren’t examples of alternating permutations,  since they aren’t on the 
numbers 1, 2, . . . , k  for  any  k .  However,  we  can map  each  of  these  to  a  permutation 
on  1, 2, . . . , k  while  preserving  the  relative  order of  these  numbers.  For  our  example 

10 


above,  these  smaller permutations  (counted A 3  and A4  respectively) would  be 2,3,1 
and  2,4,1,3. 
Now,  however,  we’ve  lost  some  information  about  how  to  construct  the  original 
permutation.  We  need  to  know  which  numbers  were  on  the  right  and  which  were 
on  the  left.  That  is,  we  need  to  know  which  subset  of  1, 2, 3, . . . , n − 1  was  to  the 
left  of  n.  In  our  example  above,  this  subset  was  {1, 3, 6}.  If  we  know  this  subset, 
we  can  go  back  and  ﬁgure  out  what  our  original  sequence  was. 
Furthermore,  we  have  found  a  one-to-one  correspondence  between,  on  the  one 
hand,  alternating  permutations  of  size  n,  and,  on  the  other,  a  subset  of  some  odd 
size  k  of  {1, 2, . . . , n − 1}  together  with  a  pair  of  alternating  permutations  of  size  k 
and  n − k − 1.  This  is  because  if  we  start  with  an  subset  of  odd  size,  and  such  a 
pair  of  alternating  permutations,  the  reconstruction  will  always  give  us  a  length  n 
alternating  permutation.  This  gives  us  the  recurrence 
 
 
2∞n/2�−1 
  �
�
n − 1 
�
AkAn−k−1
k 
k=1 
k  odd 
since  n−1 
is  the  number  of  subsets  of  size  k .
�
�
k 
We  can  get  almost  the  same  recurrence  with  even  k ,  by  removing  the  smallest 
element,  1,  instead  of  the  largest.  The  second  alternating  permutation  (the  one  to 
the  right  of  the  1)  now  starts  going  down  instead  of  up,  but  this  doesn’t matter  for 
our  recurrence,  as  the  same  number  start  up  and  down.  This  gives  the  recurrence 
 
 
�
�
n − 1 
AkAn−k−1 . 
k 

2∞(n−1)/2� 
 
An  =  �
k=0

k  even

Adding  these  two  equations  together,  we  get  the  simpler  recurrence 
 
n−1 �
  n − 1 
�
2An  = �
AkAn−k−1 . 
k 
k=0 
We  now  need  to  ﬁnd  a  generating  function.  Our  generating  function  will  be 

An  = 

 

g(x) = 

�
 
�
Aj 
j=0 
Note  that  we  have  stuck  in  a  j !  which  we  didn’t  in  our  previous  examples.  This  is 
a  pretty  common  thing  to  do  in  making  generating  functions.  If  you  do  it,  what 
you  get  is  called  an  “exponential  generating  function,”  and  if  you  don’t  do  it,  the 
technical  term  for  what  you  get  is  an  “ordinary  generating  function.” 

xj 
. 
j ! 

11 

Why  did  we  choose  an  exponential  generating  function  here?  The  ﬁrst  reason 
is  the  this  j !  ensures  that  the  generating  function  converges,  whereas  if  we  tried  to 
write  down  an  ordinary  generating  function,  the  function  A j  grows  too  fast  for  it 
 
 
to  converge.  The  second  reason  is  that  the  j !  combines  with  the  n−1  term  in  the 
�
�
k 
recurrence  very  nicely  so  that  they  both  nearly  cancel.  We’ll  see  that  now. 
If  we  let  Bj  =  Aj /j !,  our  exponential  generating  function  for  A j  becomes  an 
 
 
ordinary  generating  function  for  Bj .  We  have,  expanding  the  term  n−1 
in  our 
�
�
k 
recurrence, 

n−1 
 
A
�
(n − 1)! 
k
k=0 
Now  replacing  Aj  with  Bj  above,  we  get 

2An  = 

A
k 
−1 
k
n−
. 
1)! 
− 
− 
k 
! (n

2n!Bn  =

n−1 
 
�
(n − 1)!BkBn−k−1 , 
k=0 

(1) 

or  simplifying, 

(2) 

2nBn  = 

n−1 
 
�
BkBn−k−1 . 
k=0 
We  know  how  to  handle  the  right  side  of  this  equation  using  generating  functions. 
We  saw  this  expression when we  were  looking  at  the Catalan  numbers.  This  is  just 
the  xn−1  term  of  g(x)2 .  How  do  we  get  the  left  side?  Let’s  remember  that 
 
g(x) =  Bj xj . 
�
j 
 
jBj xj−1 . 

�
j 
Thus,  the  left  side  of  (4)  above  is  the  xn−1  term  of  g √ (x).  So  we  now  have  an 
equation 

Diﬀerentiating,  we  get 

g √ (x) = 

2g √ (x) = g(x)2  + ? 
where  I’ve  left  a  ’ ?’  in  the  equation  we  haven’t  chekced  that  the  coeﬃcients  for 
small  powers  of  x  are  equal  in  this  equation,  so  we  may  have  to  add  some  small 
polynomial  in  x  to  ﬁx  any  problems.  In  fact,  this  equation  doesn’t  work  for  the 
constant  term.  This  is  because  our  recurrence  doesn’t  work  for  A 0  (this  is  easy  to 
check). 
It’s  easy  to  calculate  Bk .  The  sequence  is 

k 
0 1 2
1
Bk  1 1 
2 

3
1
3 

4 
5 
24 

5 
2 
15 

12 

and  from  these  numbers, we  can  substitute  into  the  diﬀerential  equation  and  ﬁgure 
out  what  the  “?”  has  to  be  to  get  it  to  work.  We  ﬁnd 

2g √ (x) = g(x)2  + 1 

What’s  the  solution  to  this?  I  don’t  know  how  to  ﬁgure  out  the  solution  to  this 
diﬀerential equation by hand, but you can always type it into Maple or Mathematica. 
If  you  use Maple,  it  tells  you  that  the  solutions  are 
x 
g(x) = tan(  + α)
2 

for  some  constant  α ,  and  it’s  easy  to  check  that  this  works  by  diﬀerentiating.  We 
need  to  choose  α  so  that  g(0) = 1.  It’s  easy  to  see  that  this means  α =  � 
4 ,  so  we  get 
 
 
� 
x
�
�
g(x) = tan 
. 
4 
2
We  can  use  trigonometric  identitites  to  get  the  equivalent  expression 

+ 

g(x) = tan x + sec x 

which  is  a  more  useful  expression  for  looking  at  A k .  This  is  because  tan  is  an  odd 
function,  while  sec  is  an  even  function,  so  the  odd  A k  come  from  the  expansion  of 
tan x while  the  even  ones  come  from  the  expansion  of  sec x.  These  are  well-studied 
power  series,  and  the  odd  Ak  are  called  tangent  numbers  while  the  even  Ak  are 
called  secant  numbers. 
The  generating  function  for  g(x)  can  tell  us  quite  a  bit  about  the  asymptotic 
growth  rate  of  the  numbers  Ak ,  and  I’ll  get  to  putting  that  in  these  notes  later. 
That  stuﬀ  isn’t  urgent,  since  it  won’t  help  you  with  the  homework. 

13 


