MIT OpenCourseWare
http://ocw.mit.edu 

18.034 Honors Differential Equations 
Spring 2009 

For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms. 

Numerical  Approximations  in  Diﬀerential  Equations

The  Runge-Kutta Method

by  Ernest  Ngaruiya

May  15  2007


Abstract 

In  this  paper,  I  will  discuss  the  Runge-Kutta  method  of  solving  simple 
linear  and  linearized non-linear diﬀerential  equations.  I  start by  stating why 
the  Runge-Kutta  method  is  ideal  for  solving  simple  linear  diﬀerential  equa­
tions  numerically  in  comparison  to  more  elementary  methods.  I  will  then 
proceed  to  explain what  steps  the method  actually  carries  out  in  solving  the 
diﬀerential  equation  along  with  the  matlab  code  I  used  to  write  a  simple 
Runge-Kutta  solver and  the output of  the code, given  some basic diﬀerential 
equations.  I  will  then  end  by  discussing  the  pitfalls  of  this  way  of  solving 
diﬀerential  equations. 
1 
Introduction 

Any  nth  order  linear  ordinary  diﬀerential  equation  can  be  expressed  in  the 
form of a system of ﬁrst order linear ODEs.  Numerical approximation can be 
applied  to  eﬀectively  analyse  diﬀerential  equations  that  may  not  be  easy  to 
solve  by  traditional methods.  Once  any ODE  has  been  expressed  as  a  linear 
system,  any  of  the  methods  of  linear  algebra  can  be  applied  on  the  system. 
The  Runge-Kutta  method  is  a  far  better  method  to  use  than  the  Euler  or 
Improved  Euler  method  in  terms  of  computational  resources  and  accuracy. 
All  these  methods  use  a  ﬁxed  step  size,  but  there  are  other  methods  that 
use a variable  step  size  (though not neccessarily better  in all circumstances). 
While essentially the Euler methods are simple Runge-Kutta methods, I, like 
has  now  become  common,  refer  to  the  fourth-order  Runge-Kutta method  as 
the  Runge-Kutta method. 

2  The  Euler  and  Improved  Euler  methods 

For  an  initial  value  problem 

dy/dx = f (x, y), y(a) = y0 

that  has  a  unique  solution  y(x)  on  the  closed  interval  [a, b]  and  given  that 
y(x)  has  a  continous  second  derivative  on  that  interval,  then  there  exists  a 
constant  C  such  that  for  the  approximations  yi  to  the  actual  values  y(xi ) 

1


computed  using  the  Euler’s method  with  step  size  h > 0, 
|yn  − y(xn )| ≤ C h 

For n  = 1,2,3, . .  .  ,k 

for  the  Euler method,  and 
|yn  − y(xn )| ≤ C h2 

for the improved Euler method.  Here, h is the step size.  This implies that 
the error is of order h in the Euler method and order h2  in the improved Euler 
method.  The  proof  can  be  found  in  the  book,  Ordinary  Diﬀerential  Equa­
tions  by  G.  Birkhoﬀ  and  G.C.  Rota.  On  the  other  hand,  the  Runge-Kutta 
method  is  a  fourth-order  method  (Runge-Kutta  methods  can  be  modiﬁed 
into  methods  of  other  orders  though).  The  Euler  methods  suﬀer  from  big 
local  and  cumulative  errors.  The  improved  Euler  method  and  the  Runge-
Kutta  method  are  predictor-corrector  methods  and  are  more  accurate  than 
the  simple  Euler method. 

3  The  Runge-Kutta  Method 

This method  uses  the  simple  fact  that,  for  a  given  actual  change  in  the  out­
put y, we can use  the  fundamental  theorem of calculus  to express  the change 
� 
� 
in  the  form  of  an  integral 
y(xn+1 ) − y(xn ) =  x
n+1  y � (x) dx =  x
n+h  y � (x) dx 
x
x
n
n
� 
� 
We  can  then  use  Simpson’s  rule  for  numerical  integration 
y(xn+1 ) − y(xn ) ≈  h  y � (xn ) + 4y � (xn  +  h 
2 ) + y � (xn+1 )
� 
� 
6 
yn+1  ≈ yn  +  h  y � (xn ) + 2y � (xn  +  h ) + 2y � (xn  +  h ) + y � (xn+1 )
6 
2 
2

I used matlab to write out some code that implements an algorithm that uses 
the Simpson’s rule to approximate solutions  for a given number of steps.  Us­
ing  the  code,  one  can  solve  any  nth  order  linear ODE  as  long  as  you  specify 
the  initial  conditions.  I  have  shown  that  by  attempting  to  approximate  the 
solutions  to  a  ﬁrst  order  ODE  and  a  second  order  ODE.  The  code  is  shown 

2


below: 

function  [T,X]  =  hrungekutta(t,x,t1,n,f)

T  =  t;

X  =  x’;

h  =  (t1  - t)/n;

for  i  =  1:n;

k1  =  f(t,x); 
k2  =  f(t  +  h/2,  x  +  k1*h/2); 
k3  =  f(t+h/2,  x  +  k2*h/2); 
k4  =  f(t+h,  x  +  k3*h); 
x  =  x  +  h*(k1  +  2*k2  +  2*k3  +  k4)/6; 
t  =  t+h; 
T  =  [T;t]; 
X  =  [X;x’]; 

end 

This  function  takes  the  form  f (tinitial , [x0 ; y0 ], tf inal , steps, @ode) 

I  implemented ODEs as  functions.  So  it  can  take  in any ODE as  long as you 
express  it  in  the  form  of  a  linear  system  and  you  specify  its  initial  values. 
Note  that  in  Matlab,  to  input  a  function  to  another  function,  you  must  use 
the @  sign  in  front  of  the  input  function’s  name. 
For  example,  the  function  ddxeqnegx  is  the  ode  x��  = −x  . 
In  this  case,  you  will  input  @ddxeqnegx  . 

Example:  [T,X]  =  hrungekutta(0,[0;1],5,10,@ddxeqnegx) 
This  solves  x��  =  −x  whose  general  solutions  are  of  the  form  [sin(t), cos(t)] 
for  t  running  from  0  to  5  where  the  initial  values  are  x = 0, y = 1,  since  you 
change  x��  = −x  to  the  system  of  ﬁrst  order ODEs  x�  = y , y �  = −x 

The  code  for  the  input ODE  is: 

function  X  =  ddxeqnegx(t,x)

X=x;

X(1)  =  x(2);

X(2)  =  -x(1);


3 

A  graph  of  the  solution  is  shown  in  the  next  page:


An  example  of  a  ﬁrst  order  ODE  is  [x,y]=hrungekutta(0,[0],1,10,@pidiﬀ ) 
which approximates the solution to  dy  = 
4 
, with the  initial value y0  = 0. 
(1+x2 ) 
dx 
4
Note  that  the  general  solution  to  this  diﬀerential  equation  is  y  =  arctan(x)  . 
Therefore,  y1  ≈ π  .  Outputs  for  a  ten  step  Runge-Kutta  method  are  shown 
below. 

x = 

0

0.1000

0.2000


4 

y = 

0.3000

0.4000

0.5000

0.6000

0.7000

0.8000

0.9000

1.0000


0

0.3987

0.7896

1.1658

1.5220

1.8546

2.1617

2.4429

2.6990

2.9313

3.1416


With  1000  steps,  I  got  π  =  3.141592653589791 

4	 Pitfalls  in  the  Runge-Kutta  method  and 
other  numerical  methods 

There are a number of problems  faced by  the Runge-Kutta method.  While  I 
will  not  go  into  the  details  here,  I  will  use  an  example  equation  to  illustrate 
a  problem  that  one  could  face. 

Consider  the  equation 
dy  = 5y − 6e−x , y(0) = 1 
dx 

Its  general  solution  is 

5 

y(x) = e−x  + C e5x 

With  the  initial  condition  y(0) = 1,  then  C  = 0 

A  small  error  in  the  evaluation  of  the  output  leads  to  a  non-zero  value  of 
C.  Since  the  exponent  is  big,  a  very  small  error  in  approximation  (which  is 
almost  inevitable)  leads  to  a  huge  error  in  the  output. 

Acknowledgement 

I  would  like  to  thank  my  instructor  Vera  Hur  for  great  suggestions  on  how 
to write  this paper and putting me  in  the  same group as Lisa Danz, Marcelo 
Alvisio,  Laura  Evans  and  Oleg  Golberg  who  are  all  interested  in  Numerical 
Methods  of  approximating  diﬀerential  equations.  I  would  also  like  to  thank 
Josh  Nichols-Barrer,  who  showed  us  some  really  neat  problems  in math. 

References 

[1] Birkhoﬀ, Garrett  and Rota, Gian-Carlo.  Ordinary  Diﬀerential  Equations 
4th  ed.  (John Wiley &  Sons,  New  Jersey,  1989) 

[2]  Edwards,  Henry  and  Penney,  David.  Elementary  Diﬀerential  Equations 
with  Boundary  Value  Problems 4th  ed.  (Prentice  Hall,  1999) 

[3]  http://en.wikipedia.org/wiki/Runge-kutta 

6


