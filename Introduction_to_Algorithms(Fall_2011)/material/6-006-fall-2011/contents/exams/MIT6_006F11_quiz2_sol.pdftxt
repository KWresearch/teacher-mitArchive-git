Introduction to Algorithms
Massachusetts Institute of Technology
Professors Erik Demaine and Srini Devadas

November 17, 2011
6.006 Fall 2011
Quiz 2 Solutions

Quiz 2 Solutions
Problem 1.
[1 points] Write your name on top of each page.
Problem 2. True/False [28 points] (14 parts)
Circle (T)rue or (F)alse. You don’t need to justify your choice.
√(cid:98) a(cid:99) for an n-bit positive integer a can be done in O(lg n)
(a) T F [2 points] Computing
iterations of Newton’s method.

Solution: True. This is the bound obtained by Newton’s Method’s quadratic
convergence.
(b) T F [2 points] Suppose we want to solve a polynomial equation f (x) = 0. While
our choice of initial approximation x0 will affect how quickly Newton’s method
converges, it will always converge eventually.

Solution: False. Take e.g. f (x) = x3 − 2x + 2 and x0 = 0. Then x2i+1 = 1 and
x2i = 0 for all i (that is, the approximations alternate between 0 and 1 without
ever converging).
(c) T F [2 points] Karatsuba’s integer multiplication algorithm always runs faster than
the grade-school integer multiplication algorithm.

Solution: False. Problem Set 5 has shown that the O(N 2 ) algorithm runs faster
for small numbers.
(d) T F [2 points] If we convert an n-digit base-256 number into base 2, the resulting
number of digits is Θ(n2 ).

Solution: False. log256 n = log2 n = log2 n
. By converting a base-256 number
log 256
8
to base 2, the number of digits is2 multiplied by 8. For all b1 , b2 = 1, converting
a base-b1 number to base-b2 results in a linear increase or decrease in the number
of digits.
(e) T F [2 points] In a weighted undirected graph G = (V , E , w), breadth-ﬁrst search
from a vertex s ﬁnds single-source shortest paths from s (via parent pointers) in
O(V + E ) time.

Solution: False. Only in unweighted graphs.
(f) T F [2 points]
In a weighted undirected tree G = (V , E , w), breadth-ﬁrst search
from a vertex s ﬁnds single-source shortest paths from s (via parent pointers) in
O(V + E ) time.

(cid:54)
6.006 Quiz 2 Solutions

Name

2

Solution: True.
In a tree, there is only one path between two vertices, and
breadth-ﬁrst search ﬁnds it.
(g) T F [2 points] In a weighted undirected tree G = (V , E , w), depth-ﬁrst search from
a vertex s ﬁnds single-source shortest paths from s (via parent pointers) in O(V +
E ) time.

Solution: True.
In a tree, there is only one path between two vertices, and
depth-ﬁrst search ﬁnds it.
(h) T F [2 points] If a graph represents tasks and their interdependencies (i.e., an edge
(u, v) indicates that u must happen before v happens), then the breadth-ﬁrst
search order of vertices is a valid order in which to tackle the tasks.

Solution: No, you’d prefer depth-ﬁrst search, which can easily be used to pro-
duce a topological sort of the graph, which would correspond to a valid task
order. BFS can produce incorrect results.
(i) T F [2 points] Dijkstra’s shortest-path algorithm may relax an edge more than once
in a graph with a cycle.

Solution: False. Dijkstra’s algorithm always visits each node at most once; this
is why it produces an incorrect result in the presence of negative-weight edges.
(j) T F [2 points] Given a weighted directed graph G = (V , E , w) and a source s ∈ V ,
if G has a negative-weight cycle somewhere, then the Bellman-Ford algorithm
will necessarily compute an incorrect result for some δ(s, v).

Solution: False. The negative-weight cycle has to be reachable from s.
(k) T F [2 points] In a weighted directed graph G = (V , E , w) containing no zero- or
positive-weight cycles, Bellman-Ford can ﬁnd a longest (maximum-weight) path
from vertex s to vertex t.

Solution: True. Negate the weights.
(l) T F [2 points] In a weighted directed graph G = (V , E , w) containing a negative-
weight cycle, running the Bellman-Ford algorithm from s will ﬁnd a shortest
acyclic path from s to a given destination vertex t.

Solution: False. Bellman-Ford will terminate, and can detect the presence of
that negative-weight cycle, but it can’t “route around it.” (You could always
remove an edge to break the cycle and try again, though.)
(m) T F [2 points] The bidirectional Dijkstra algorithm runs asymptotically faster than
the Dijkstra algorithm.

6.006 Quiz 2 Solutions

Name

3

Solution: False. The constant factor behind bidirectional Dijkstra is better, but
the worst-case running time is the same.
(n) T F [2 points] Given a weighted directed graph G = (V , E , w) and a shortest path p
from s to t, if we doubled the weight of every edge to produce G(cid:48) = (V , E , w (cid:48) ),
then p is also a shortest path in G(cid:48) .

Solution: True. Multiplying edge weights by any positive constant factor pre-
serves their relative order, as well as the relative order of any linear combination
of the weights. All path weights are linear combinations of edge weights, so the
relative order of path weights is preserved. This means that a shortest path in G
will still be a shortest path in G(cid:48) .

6.006 Quiz 2 Solutions

Name

4

Problem 3. MazeCraft [26 points] (5 parts)
You are playing SnowStorm’s new video game, MazeCraft. Realizing that you can convert a maze
into a graph with vertices representing cells and edges representing passages, you want to use your
newly learned graph-search algorithms to navigate the maze. Consider the following converted
graph.

D

B

F

A

C

E

G H

For the following questions, assume that the graph is represented using adjacency lists, and that all
adjacency lists are sorted, i.e., the vertices in an adjacency list are always sorted alphabetically.

(a) [4 points] Suppose that you want to ﬁnd a path from A to H . If you use breadth-ﬁrst
search, write down the resulting path as a sequence of vertices.

Solution: A, B , D, F, H

MAX(N ,N ) (cid:99),
Scoring: For Problem 3(a), 3(b), and 3(e), we computed the score as (cid:98)
P ·L
a
s
where P is the total points of the problem, L is the length of the longest common
subsequence between our solution and the student’s answer, Na is the length of the
student’s answer, and Ns is the length of our solution.

(b) [4 points] If you use depth-ﬁrst search to ﬁnd a path from A to H , write down the
resulting path as a sequence of vertices.

Solution: A, B , C, D, E , G, F, H if you use recursion, or A, C, D, F, H if you use
stack-based implemention. Essentially, the recursion-based implementation will visit
the neighbors in alphabetical order, while the stack-based implementation will visit
the neighbors in reverse alphabetical order.

6.006 Quiz 2 Solutions

Name

5

(c) [6 points] To determine whether the maze has cycles or multiple paths to the same
destination, you decide to use the edge classiﬁcation of depth-ﬁrst search. Run depth-
ﬁrst search on the graph reproduced below, starting from vertex A, and label every
edge with T if it’s a tree edge, B if it’s a back edge, F if it’s a forward edge, and C if
it’s a cross edge.
As a reminder, recall that an edge (u, v) is
• a tree edge (T) if v was ﬁrst discovered by exploring edge (u, v) (tree edges form
the depth-ﬁrst forest);
• a back edge (B) if v is u’s ancestor in a depth-ﬁrst tree;
• a forward edge (F) if v is u’s descendant in a depth-ﬁrst tree; and
• a cross edge (C) if none of the above apply.

Solution: Recursion-based implementation:

B

B

T

A

Stack-based implementation:

B

T

B

A

D

D

T

T

B

T

C

T

B

C

B

T

E

T

T

B

E

T

F

T

G

T

H

B

F

B

G

T

H

T

Scoring: For Problem 3(c) and 3(d), we computed the score as (cid:98)P − 1 Nw2
P is the total points of the problem and Nw is the number of wrong labels.

(cid:99), where

6.006 Quiz 2 Solutions

Name

6

(d) [6 points] Now suppose that the passages in the maze are directional. Rerun depth-
ﬁrst search in the directed graph below and label the edges accordingly.

Solution: Recursion-based implementation:

T

A

B

B

Stack-based implementation:

T

A

B

B

D

T

T

T

T

E

D

T

C

T

C

E

F

T

C

T

T

C

F

C

G

T

H

C

F

F

G

T

H

T

6.006 Quiz 2 Solutions

Name

7

(e) [6 points] Suppose each passage in the maze causes a different amount of damage to
you in game. You change the graph to use weights to represent the damage caused by
each edge. You then use Dijkstra’s algorithm to ﬁnd the path from A to H with the
lowest possible damage. Write down the order in which vertices get removed from the
priority queue when running Dijkstra’s algorithm.

2

3

C

1

A

B

1

D

2

1

3

1

E

F

4

G

3

H

1

Solution: A, B, D, C, F, E, G, H

6.006 Quiz 2 Solutions

Name

8

Problem 4. Malfunctioning Calculator [25 points] (5 parts)
Former 6.006 student Mallory Funke is at a math competition, but her calculator isn’t working. It
seems to work ﬁne for whole numbers, but the numbers after the decimal point always seem to
be the sequence
repeated over and over again, making those digits useless. For one of the
problems, she has been asked to compute (cid:98)A3/4(cid:99) for a few different integer values of A. Mal knows
that Newton’s Method can be used to compute the square root or the cube root of an integer A. So
as a ﬁrst step in computing (cid:98)A3/4(cid:99), Mal wants to use Newton’s Method to compute (cid:98)A1/4
(cid:99). She
then plans to use that information to compute (cid:98)A /4(cid:99).
3

−
(a) [5 points] Mal decides to use the function f (x) = x4 A, because it has a root
at x = A1/4
. Use Newton’s Method on f (x) to generate a formula for computing
increasingly accurate estimates of (cid:98)A1/4(cid:99).
In other words, give a formula for the
more accurate estimate xi+1 in terms of a less accurate estimate xi . The formula you
construct must use only addition, subtraction, multiplication, and division. (You do
not need to simplify the formula.)

If we take the derivative of f (x), we get f (cid:48) (x) = 4x3 . Hence, Newton’s
Solution:
Method says that we have

xi+1 = xi −

i − A
x4
4x3
i

−

= xi

i − A
· x
xi · xi · xi
4 · xi · xi · xi

.

6.006 Quiz 2 Solutions

Name

9

(b) [5 points] Mal decides to use the technique from part (a) to compute the value B =
(cid:98)A1/4(cid:99). She then plans to compute (cid:98)A3/4(cid:99) by calculating the value C = B 3 = B ·B ·B .
Provide an explanation of why this technique does not work.
Hint: Deﬁne α to be the fractional part of A1/4 , so that B = A1/4 − α. What happens
when you compute C = B 3?

Solution: When you expand out the formula for C , you get
C = B 3 = (A1/4 − α)3 = A3/4 − 3A2/4α + 3A1/4α2 − α3 .
If A is large, then γ = 3A2/4α − 3A1/4α2 + α3 will be signiﬁcantly greater than 1,
and so we’ll have C = A3/4 − γ with γ > 1. Hence, C will not be (cid:98)A3/4(cid:99).

(c) [5 points] Mal clearly needs a way to check her answer for (cid:98)A3/4(cid:99), using only integers.
Given a pair of positive integers A and C , explain how to check whether C ≤ A3/4
using O(1) additions, subtractions, multiplications, and comparisons.

Solution: The equation C ≤ A3/4 is equivalent to the equation C 4 ≤ A3 , which is
equivalent to C · C · C · C ≤ A · A · A.

(d) [5 points] Explain how to check whether C = (cid:98)A3/4(cid:99), again using only O(1) addi-
tions, subtractions, multiplications, and comparisons.
Hint: Recall how the ﬂoor function is deﬁned.

(cid:98)
(cid:99)
≤
Solution:
If C = A3/4 , then by the deﬁnition of the ﬂoor function, we have C
and C + 1 > A3/4 . We can check both of these using the technique from part
A3/4
(c).

6.006 Quiz 2 Solutions

Name

10

(e) [5 points] Give a brief description of an algorithm that takes as input a d-digit positive
integer A and computes (cid:98)A3/4(cid:99). The only arithmetic operations you can use are inte-
ger addition, integer subtraction, integer multiplication, integer division, and integer
comparison. Your algorithm should use Θ(lg d) arithmetic operations in total, but par-
tial credit will be awarded for using Θ(d) arithmetic operations. For this question, you
may assume that Newton’s Method has a quadratic rate of convergence for whatever
function you devise.

Solution:

Θ(lg d) Solution: The technique from part (b) didn’t work because we threw away
information (taking the ﬂoor) before performing another operation. Instead, we ﬁrst
calculate B = A3 , then compute C = (cid:98)B 1/4(cid:99) using the formula from part (a) to
continually improve our estimate. Because we have a quadratic rate of convergence,
we will improve our estimate Θ(log d) times, and each time we will perform a constant
number of arithmetic operations.
Note: This is equivalent to applying Newton’s Method to the function f (x) = x4 −A3 ,
but does not require you to rederive the equation for xi+1 in terms of xi .

Θ(d) Solution: Use the comparison method from part (c) to do binary search. This
requires us to do Θ(1) operations for each of the bits in the result, for a total of Θ(d)
operations.

6.006 Quiz 2 Solutions

Name

11

Problem 5. The Tourist [15 points]
Your new startup, Bird Tours, brings people around Boston in a new aviation car that can both drive
and ﬂy. You’ve constructed a weighted directed graph G = (V , E , w) representing the best time to
drive or ﬂy between various city sites (represented by vertices in V ). You’ve also written a history
of Boston, which would be best described by visiting sites v0 , v1 , . . . , vk in that order.
Your goal is to ﬁnd the shortest path in G that visits v0 , v1 , . . . , vk in order, possibly visiting other
vertices in between. (The path must have v0 , v1 , . . . , vk as a subsequence; the path is allowed to
visit a vertex more than once. For example, v0 , v2 , v1 , v2 , . . . , vk is legal.) To do the computation,
you’ve found an online service, Paths ’R Us, that will compute the shortest path from a given
source s to a given target t in a given weighted graph, for the bargain price of $1. You see how to
solve the problem by paying $k , calling Paths ’R Us with (v0 , v1 , G), (v1 , v2 , G), . . . , (vk 1 , vk , G)
−
and piecing together the paths. Describe how to solve the problem with only $1 by calling Paths
’R Us with (s, t, G(cid:48) ) for a newly constructed graph G(cid:48) = (V (cid:48) , E (cid:48) , w (cid:48) ), and converting the resulting
path into a path in G.

Solution: To form the graph G(cid:48) , we start from the disjoint union of k copies of the given graph G,
∈
using superscripts to denote the different copies G1 , G2 , . . . , Gk . That is, for each vertex v
in V (cid:48) ; and for each edge (u, v) ∈ E , we form the edges
V , we make k copies v 1 , v 2 , . . . , vk
(u1 , v 1 ), (u2 , v 2 ), . . . , (uk , vk ) in E (cid:48) , each of weight w(u, v). Then we add the edges (v 1
1 ),
1 , v 2
2 ), . . . , (vk−1
k 1 ), each of weight 0, to complete the graph G(cid:48) . Finally we set the start
2 , v 3
k 1 , vk
(v 2
−
−
k , and call Paths ’R Us with (s, t, G(cid:48) ).
0 and the target vertex t = vk
vertex s = v 1
Intuitively, the subgraph Gi represents a situation in which the path has visited the Boston sites
v0 , v1 , . . . , vi 1 , and is currently aiming to visit vi . Once the path visits v
i , it can take the zero-
−
weight edge (v i
), which represents the fact that vi has been visited. (A path may choose not
i , v i+1
i
to follow this edge, but it must do so eventually in order to reach the next copy Gi+1 and eventually
the target vertex t in Gk .)
Once we have a shortest path in G(cid:48) , we can convert it into the corresponding path in G by simply
replacing every vertex ui ∈ V (cid:48) with u ∈ V , and then removing any loop edges (vi , vi ) from the path
(resulting from the zero-weight edge (v i
)). Intuitively, we just need to ﬂatten the k copies of
i , v i+1
i
G down to the single copy.
Another solution to this problem, found by many students, is to replace the endpoints of the edges
instead of using zero-weight edges. For example, after making k copies of the graph G, we can
replace each edge (ui , v i ) with (ui , v i+1
). This has the same effect as the zero-weight edges, and
i
i
removes the need to remove loops at the end.

6.006 Quiz 2 Solutions

Name

12

Problem 6. Fill ’Er Up! [25 points]
You are traveling by car from one city to another city. Unfortunately, you have a hole in your
gas tank, and you have to reﬁll your gas tank to travel across more than two roads. In addition,
there is a toll booth on every road that charges you for using that road. Your goal is to ﬁnd the
least-expensive path from your start to your destination.
You represent the city network using a directed graph G = (V , E , w) with weights w deﬁned on
both edges and vertices. The vertices V represent the cities and the edges E represent the roads.
The weight w(e) of an edge e represents the toll amount on that road. The weight w(v) of a vertex
v is the price of ﬁlling your gas tank in that city (which is a ﬁxed price independent of how much
gas you have left, or ∞ if there is no gas available to purchase). You are allowed (but not obligated)
to end your journey with an empty tank, and you may assume that you always start your journey
with a full tank.
Below is an example graph that we will use to answer part (a). One seemingly cheap path from s
to t is (s, u1 , u2 , t) at a cost of $8. Unfortunately, this path is not valid, because our leaky gas tank
won’t permit moving across three edges without reﬁlling our gas tank.
One valid path is (s, u3 , u2 , t) at a cost of $22. (This is a valid path: we begin with a full tank,
travel across one edge to a gas station where we reﬁll our tank, and then travel two edges to the
destination, arriving with an empty gas tank. Notice that we are unable to continue the journey to
u5 if we wanted to, because even though there is a gas station there, we have to traverse a third
edge to get to it.)

There are some extra copies of this graph at the end of the exam (for your convenience).

Gas: FreeGas:$5Gas: $3NO GASNO GASToll: $5Toll: $7Toll: $2Toll: $1Toll: $2Toll: $10Toll: $3stNO GASToll: $1u1u2u3u4Toll: $4Gas: $1u5Toll: $9Toll: $16.006 Quiz 2 Solutions

Name

13

(a) [5 points] The valid path given in the description above is not the best path. Find a
least-expensive path from s to t in the graph above.

Solution:

(s, u1 , u3 , u2 , t)

(b) [5 points] Find the least-expensive path from s to u5 in the graph above.

Solution:

(s, u1 , u3 , u2 , u4 , t, u5 )

(c) [15 points] Give an O(V log V +E ) algorithm to ﬁnd, in a given graph G = (V , E , w),
a least-expensive valid path from a city s to a city t, or report that no such path exists.

Solution: We will solve this problem by transforming G = (V , E , w), the graph of
cities, roads, and toll/gas costs, into a new graph G(cid:48) = (V (cid:48) , E (cid:48) , w (cid:48) ). We will then use
Dijkstra’s algorithm to ﬁnd the desired path.
First construct the vertex set V (cid:48) . For each vertex v ∈ V , create three vertices in
V (cid:48) : vf , vh , and ve . These stand for a full tank, a half-full tank, and an empty tank,
respectively. This operation takes O(V ) time, since we iterate |V | times and create
three new vertices each time.
Next we will discuss the construction of E (cid:48) and w (cid:48) . For each edge (u, v) = e ∈ E ,
create edges in E (cid:48) as follows. Create edges (uf , vh ) and (uh , ve ) to represent the
emptying of half the tank during the move from u to v . The weights on both of these
edges will be the original weight w(u, v). This operation takes O(E ) time, since we
iterate |E | times and insert two new edges into E (cid:48) each time.
Finally, we will represent the cost of fueling up by creating additional edges as follows.
For every vertex v ∈ V , we check whether there is a gas station there. If there is a
gas station at this vertex, then we add the edges (ve , vf ) and (vh , vf ) to E (cid:48) . Since the
cost of fueling up is not dependent on the amount of gas that is already in the tank,
we assign both of these edges the cost of fueling up at that city. This procedure takes
O(V ) time, since we iterate over all of the vertices and create a constant number of
new edges.

6.006 Quiz 2 Solutions

Name

14

We can now run Dijkstra’s algorithm on this graph to ﬁnd paths from sf to tf , th , and
te , and we return the shortest of the three. The graph transformation took O(V + E )
time and, as the number of vertices and the number of edges increased by a constant
factor, running Dijkstra on this graph takes O(V log V + E ) time. Therefore, the total
running time is O(V log V + E ).

MIT OpenCourseWare
http://ocw.mit.edu

6.006 Introduction to Algorithms
Fall 2011
 
 
 
For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms .

