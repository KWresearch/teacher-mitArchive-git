Introduction to Algorithms
Massachusetts Institute of Technology
Professors Erik Demaine and Srini Devadas

October 18, 2011
6.006 Fall 2011
Quiz 1

Quiz 1
• Do not open this quiz booklet until directed to do so. Read all the instructions on this page.
• When the quiz begins, write your name on every page of this quiz booklet.
• You have 120 minutes to earn 120 points. Do not spend too much time on any one problem.
Read them all ﬁrst, and attack them in the order that allows you to make the most progress.
• This quiz is closed book. You may use one 8 1 (cid:48)(cid:48)
2 × (cid:48)(cid:48) or A4 crib sheet (both sides). No
11
calculators or programmable devices are permitted. No cell phones or other communications
devices are permitted.
• Write your solutions in the space provided. If you need more space, write on the back of the
sheet containing the problem. Pages may be separated for grading.
• Do not waste time and paper rederiving facts that we have studied. It is sufﬁcient to cite
known results.
• When writing an algorithm, a clear description in English will sufﬁce. Pseudo-code is not
required.
• When asked for an algorithm, your algorithm should have the time complexity speciﬁed in
the problem with a correct analysis. If you cannot ﬁnd such an algorithm, you will generally
receive partial credit for a slower algorithm if you analyze your algorithm correctly.
• Show your work, as partial credit will be given. You will be graded not only on the correct-
ness of your answer, but also on the clarity with which you express it. Be neat.
•
Good luck!

Problem Parts Points Grade Grader

1

2

3

4

5

6

7

2

3

9

2

2

3

2

2

20

18

20

20

20

20

Total

120

Name:
Wed/Fri
Recitation:

Ying
10, 11 AM

Kevin
11 AM

Sarah
12,
1 PM

Yaﬁm
12 PM

Victor
2, 3 PM

6.006 Quiz 1

Name

2

Problem 1.

[2 points] Write your name on top of each page.

Problem 2. Asymptotics & Recurrences [20 points] (3 parts)

(a) [10 points] Rank the following functions by increasing order of growth. That is, ﬁnd
any arrangement g1 , g2 , g3 , g4 , g5 , g6 , g7 , g8 of the functions satisfying g1 = O(g2 ),
g2 = O(g3 ), g3 = O(g4 ), g4 = O(g5 ), g5 = O(g6 ), g6 = O(g7 ), g7 = O(g8 ).
(cid:18)
(cid:19)
(cid:112)
(cid:19)
(cid:18)
(cid:18)
(cid:19)
√
n
π
2 n
f1 (n) = n
5
4 n
n
4
4

5(log n)2
f7 (n) = n

f8 (n) = n

f2 (n) = π

f

6 (n) = 2

f

4 (n) =

n

f3 (n) =

f5 (n) =

n
−

log4

n

(b) [5 points] Find a solution to the recurrence T (n) = T ( n ) + T ( 2n ) + Θ(n)
3
3

.

6.006 Quiz 1

Name

3

(c) [5 points] Find an asymptotic solution of the following recurrence. Express your
T (n) = log n + T (cid:0)√
n(cid:1)
answer using Θ-notation, and give a brief justiﬁcation.

6.006 Quiz 1

Name

4

Problem 3. True/False [18 points] (9 parts)
Circle (T)rue or (F)alse. You don’t need to justify your choice.

(a) T F [2 points] Binary insertion sorting (insertion sort that uses binary search to ﬁnd
each insertion point) requires O(n log n) total operations.

(b) T F [2 points] In the merge-sort execution tree, roughly the same amount of work is
done at each level of the tree.

(c) T F [2 points] In a BST, we can ﬁnd the next smallest element to a given element in
O(1) time.

(d) T F [2 points]
In an AVL tree, during the insert operation there are at most two
rotations needed.

(e) T F [2 points] Counting sort is a stable, in-place sorting algorithm.

(f) T F [2 points] In a min-heap, the next largest element of any element can be found
in O(log n) time.

(g) T F [2 points] The multiplication method satisﬁes the simple uniform hashing as-
sumption.

(h) T F [2 points] Double hashing satisﬁes the uniform hashing assumption.

(i) T F [2 points] Python generators can be used to iterate over potentially inﬁnite count-
able sets with O(1) memory.

6.006 Quiz 1

Name

5

Problem 4. Peak Finding (again!) [20 points] (2 parts)
When Alyssa P. Hacker did the ﬁrst 6.006 problem set this semester, she didn’t particularly like
any of the 2-D peak-ﬁnding algorithms. A peak is deﬁned as any location that has a value at least
as large as all four of its neighbors.
Alyssa is excited about the following algorithm:

1. Examine all of the values in the ﬁrst, middle, and last columns of the matrix to ﬁnd the
maximum location (cid:96).
2. If (cid:96) is a peak within the current subproblem, return it. Otherwise, it must have a neighbor p
that is strictly greater.
3. If p lies to the left of the central column, restrict the problem matrix to the left half of the ma-
trix, including the ﬁrst and middle columns. If p lies to the right of the central column, restrict
the problem matrix to the right half of the matrix, including the middle and last columns.
4. Repeat steps 1 through 3 looking at the ﬁrst, middle, and last rows.
5. Repeat steps 1 through 4 until a peak is found.
Consider the 5 × 5 example depicted below. On this example, the algorithm initially examines the
ﬁrst, third, and ﬁfth columns, and ﬁnds the maximum in all three. In this case, the maximum is the
number 4. The number 4 is not a peak, due to its neighbor 5.

The number 5 is to the left of the middle column, so we restrict our view to just the left half of the
matrix. (Note that we include both the ﬁrst and middle columns.) Because we examined columns
in the previous step, we now examine the ﬁrst, middle, and last rows of the submatrix. The largest
value still visible in those rows is 6, which is a peak within the subproblem. Hence, the algorithm
will ﬁnd the peak 6.

0000045000001200000006070000004500000120000000607000000450000012000000060700000045000001200000006070000004500000120000000607000000450000012000000060706.006 Quiz 1

Name

6

(a) [5 points] What is the worst-case runtime of Alyssa’s algorithm on an m × n matrix
(m rows, n columns), in big-Θ notation? Give a brief justiﬁcation for your answer.

(b) [15 points] Does Alyssa’s algorithm return a peak in all cases? If so, give a short
proof of correctness. Otherwise, provide a counterexample for the algorithm.

6.006 Quiz 1

Name

7

Problem 5. Who Let The Zombies Out? [20 points] (2 parts)
In an attempt to take over Earth, evil aliens have contaminated certain water supplies with a virus
that transforms humans into ﬂesh-craving zombies. To track down the aliens, the Center for Dis-
ease Control needs to determine the epicenters of the outbreak—which water supplies have been
contaminated. There are n potentially infected cities C = {c1 , c2 , . . . , cn}, but the FBI is certain
that only k cities have contaminated water supplies.
Unfortunately, the only known test to determine the contamination of a city’s water supply is to
serve some of that water to a human and see whether they turn ravenous. Several brave volunteers
have offered to undergo such an experiment, but they are only willing to try their luck once. Each
volunteer is willing to drink a single glass of water that mixes together samples of water from any
subset C (cid:48) ⊆ C of the n cities, which reveals whether at least one city in C (cid:48) had contaminated
water.
Your goal is to use the fewest possible experiments (volunteers) in order to determine, for each city
ci , whether its water was contaminated, under the assumption that exactly k cities have contami-
nated water. You can design each experiment based on the results of all preceding experiments.

(a) [10 points] You observe that, as in the comparison model, any algorithm can be
viewed as a decision tree where a node corresponds to an experiment with two out-
comes (contaminated or not) and thus two children. Prove a lower bound of Ω(k lg n )k
on the number of experiments that must be done to save the world. Assume that
lg x! ∼ x lg x and that lg(n − k) ∼ lg n (which is reasonable when k < 0.99n).

6.006 Quiz 1

Name

8

(b) [10 points] Save the world by designing an algorithm to determine which k of the n
cities have contaminated water supplies using O(k lg n) experiments. Describe and
analyze your algorithm.

6.006 Quiz 1

Name

9

Problem 6. Shopping Madness [20 points] (3 parts)
Ben Bitdiddle was peer-pressured into signing up for the tryouts in a shopping reality TV show,
and he needs your help to make it past the ﬁrst round. In order to qualify, Ben must browse a
store’s inventory, which has N items with different positive prices P [1], P [2], . . . , P [N ], and the
challenge is to spend exactly S dollars on exactly K items, where K is a small even integer. Ben
can buy the same item multiple times. For example, 3 brooms and 2 wizard hats add up to 5 items.
In your solutions below, you may use a subroutine MU LT I S ET S(k , T) which iterates over all the
k -element multisets (like subsets, except the same elements can show up multiple times) of a set
T, in time O(k · |T|k ), using O(k) total space. Note that if your code holds onto the results of
MU LT I S ET S, it may end up using more than O(k) space.

(a) [5 points] Write pseudo-code for a data structure that supports the following two
operations.
IN I T(N , K, P ) — preprocesses the P [1 . . . N ] array of prices, in O(K ·N K ) expected
time, using O(K · N K ) space, to be able to answer the query below.
2 , . . . , bK such that S = (cid:80)
BAG(S ) — in O(1) expected time, determines whether K of the items have prices
K
summing to S , and if so, returns K indices b1 , b
i=1 P [bi ].

6.006 Quiz 1
Name
2 , . . . , bK such that S = (cid:80)
(b) [10 points] Write pseudo-code for a function PWN -CONT E S T(N , S, K, P ) that deter-
mines whether K of the items have prices summing to S , and if so, returns K indices
K
i=1 P [bi ]. Unlike part (a), PWN -CONT E S T should run
b1 , b
in O(K · N K/2 ) and use O(K · N K/2 ) space.

10

6.006 Quiz 1

Name

11

(c) [5 points] Analyze the running time of your pseudo-code for the previous part.

6.006 Quiz 1

Name

12

Problem 7. When I Was Your Age. . . [20 points] (2 parts)
In order to design a new joke for your standup comedy routine, you’ve collected n distinct mea-
surements into an array A[1 . . . n], where A[i] represents a measurement at time i. Your goal is to
ﬁnd the longest timespan i . . . j , i.e., maximize j − i, such that A[i] < A[j ]. 1 Note that the values
in between A[i] and A[j ] do not matter. As an example, consider the following array A[1 . . . 7]:

A[1] = 14 A[2] = 6 A[3] = 8 A[4] = 1 A[5] = 12 A[6] = 7 A[7] = 5

Your algorithm should return a span of 4 since A[2] = 6 and A[6] = 7. The next biggest span is
A[4] = 1 to A[7] = 5.

(a) [5 points] Give an O(n)-time algorithm to compute the minimums of the preﬁx
A[1 . . . k ] for each k , and store in MA[k ]: MA[k ] = mink
i=1 A[i].

(b) [15 points] Using the MA[i] computed above, give an O(n log n)-time algorithm to
maximize j − i subject to A[i] < A[j ].
Hint: The M A is a sorted array.

1The joke could be along these lines: “You thought time j was bad with A[j ]? Back in time i, we only had A[i]!”

MIT OpenCourseWare
http://ocw.mit.edu

6.006 Introduction to Algorithms
Fall 2011
 
 
 
For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms .

