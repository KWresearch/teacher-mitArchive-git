Introduction to Algorithms
Massachusetts Institute of Technology
Professors Erik Demaine and Srini Devadas

December 16, 2011
6.006 Fall 2011
Final Exam

Final Exam
• Do not open this quiz booklet until directed to do so. Read all the instructions on this page.
• When the quiz begins, write your name on every page of this quiz booklet.
• You have 180 minutes to earn 180 points. Do not spend too much time on any one problem.
Read them all ﬁrst, and attack them in the order that allows you to make the most progress.
• This quiz is closed book. You may use three 8 1 (cid:48)(cid:48) × 11
(cid:48)(cid:48) or A4 or 6.006 cushions as crib
2
sheets (both sides). No calculators or programmable devices are permitted. No cell phones
or other communications devices are permitted.
• Write your solutions in the space provided. If you need more space, write on the back of the
sheet containing the problem. Pages may be separated for grading.
• Do not waste time and paper rederiving facts that we have studied. It is sufﬁcient to cite
known results.
• When writing an algorithm, a clear description in English will sufﬁce. Pseudo-code is
not required.
• When asked for an algorithm, your algorithm should have the time complexity speciﬁed in
the problem with a correct analysis. If you cannot ﬁnd such an algorithm, you will generally
receive partial credit for a slower algorithm if you analyze your algorithm correctly.
• Show your work, as partial credit will be given. You will be graded not only on the correct-
ness of your answer, but also on the clarity with which you express it. Be neat.
•
Good luck!

Problem Parts Points Grade Grader

Problem Parts Points Grade Grader

1

2

3

4

5

18

3

5

3

1

36

9

20

15

10

6

7

8

9

10

Total

2

5

6

1

5

20

15

20

15

20

180

Name:

Wed/Fri
Recitation:

Ying
10, 11 AM

Kevin
11 AM

Sarah
12,
1 PM

Yaﬁm
12 PM

Victor
2, 3 PM

6.006 Final Exam

Name

2

Problem 1. True/False [36 points] (18 parts)
Circle (T)rue or (F)alse. You don’t need to justify your choice.

(a) T F [2 points] Polynomial: good. Exponential: bad.

(b) T F [2 points] Radix sort runs correctly when using any correct sorting algorithm to
sort each digit.

(c) T F [2 points] Given an array A[1 . . n] of integers, the running time of Counting Sort
is polynomial in the input size n.

(d) T F [2 points] Given an array A[1 . . n] of integers, the running time of Heap Sort is
polynomial in the input size n.

(e) T F [2 points] Any n-node unbalanced tree can be balanced using O(log n) rotations.

(f) T F [2 points] If we augment an n-node AVL tree to store the size of every rooted
subtree, then in O(log n) we can solve a range query: given two keys x and y ,
how many keys are in the interval [x, y ]?

(g) T F [2 points] AVL trees can be used to implement an optimal comparison-based
sorting algorithm.

(h) T F [2 points] Given a connected graph G = (V , E ), if a vertex v ∈ V is visited
during level k of a breadth-ﬁrst search from source vertex s ∈ V , then every path
from s to v has length at most k .

(i) T F [2 points] Depth-ﬁrst search will take Θ(V 2 ) time on a graph G = (V , E ) repre-
sented as an adjacency matrix.

6.006 Final Exam

Name

3

(j) T F [2 points] Given an adjacency-list representation of a directed graph G = (V , E ),
it takes O(V ) time to compute the in-degree of every vertex.

(k) T F [2 points] For a dynamic programming algorithm, computing all values in a
bottom-up fashion is asymptotically faster than using recursion and memoization.

(l) T F [2 points] The running time of a dynamic programming algorithm is always
Θ(P ) where P is the number of subproblems.

(m) T F [2 points] When a recurrence relation has a cyclic dependency, it is impossible
to use that recurrence relation (unmodiﬁed) in a correct dynamic program.

(n) T F [2 points] For every dynamic program, we can assign weights to edges in the
directed acyclic graph of dependences among subproblems, such that ﬁnding a
shortest path in this DAG is equivalent to solving the dynamic program.

(o) T F [2 points] Every problem in NP can be solved in exponential time.

(p) T F [2 points] If a problem X can be reduced to a known NP-hard problem, then X
must be NP-hard.

(q) T F [2 points] If P equals NP, then NP equals NP-complete.

(r) T F [2 points] The following problem is in NP: given an integer n = p · q , where p
and q are N -bit prime numbers, ﬁnd p or q .

6.006 Final Exam

Name

4

Problem 2. Sorting Scenarios [9 points] (3 parts)
Circle the number next to the sorting algorithm covered in 6.006 that would be the best (i.e., most
efﬁcient) for each scenario in order to reduce the expected running time. You do not need to justify
your answer.

(a) [3 points] You are running a library catalog. You know that the books in your col-
lection are almost in sorted ascending order by title, with the exception of one book
which is in the wrong place. You want the catalog to be completely sorted in ascending
order.
1. Insertion Sort
2. Merge Sort
3. Radix Sort
4. Heap Sort
5. Counting Sort

(b) [3 points] You are working on an embedded device (an ATM) that only has 4KB
(4,096 bytes) of free memory, and you wish to sort the 2,000,000 transactions with-
drawal history by the amount of money withdrawn (discarding the original order of
transactions).
1. Insertion Sort
2. Merge Sort
3. Radix Sort
4. Heap Sort
5. Counting Sort

(c) [3 points] To determine which of your Facebook friends were early adopters, you
decide to sort them by their Facebook account ids, which are 64-bit integers. (Recall
that you are super popular, so you have very many Facebook friends.)
1. Insertion Sort
2. Merge Sort
3. Radix Sort
4. Heap Sort
5. Counting Sort

6.006 Final Exam

Name

5

Problem 3. Hotel California [20 points] (5 parts)
You have decided to run off to Los Angeles for the summer and start a new life as a rockstar.
However, things aren’t going great, so you’re consulting for a hotel on the side. This hotel has N
one-bed rooms, and guests check in and out throughout the day. When a guest checks in, they ask
for a room whose number is in the range [l, h].1
You want to implement a data structure that supports the following data operations as efﬁciently as
possible.

1. IN I T(N ): Initialize the data structure for N empty rooms numbered 1, 2, . . . , N , in polyno-
mial time.
2. COUN T(l, h): Return the number of available rooms in [l, h], in O(log N ) time.
3. CH ECK IN(l, h): In O(log N ) time, return the ﬁrst empty room in [l, h] and mark it occupied,
or return N I L if all the rooms in [l, h] are occupied.
4. CH ECKOU T(x): Mark room x as not occupied, in O(log N ) time.

(a) [6 points] Describe the data structure that you will use, and any invariants that your
algorithms need to maintain. You may use any data structure that was described in a
6.006 lecture, recitation, or problem set. Don’t give algorithms for the operations of
your data structure here; write them in parts (b)–(e) below.

1Conferences often reserve a contiguous block of rooms, and attendees want to stay next to people with similar
interests.

6.006 Final Exam

Name

6

(b) [3 points] Give an algorithm that implements IN I T(N ). The running time should be
polynomial in N .

(c) [3 points] Give an algorithm that implements COUN T(l, h) in O(log N ) time.

6.006 Final Exam

Name

7

(d) [5 points] Give an algorithm that implements CH ECK IN(l, h) in O(log N ) time.

(e) [3 points] Give an algorithm that implements CH ECKOU T(x) in O(log N ) time.

6.006 Final Exam

Name

8

Problem 4. Hashing [15 points] (3 parts)
Suppose you combine open addressing with a limited form of chaining. You build an array with m
slots that can store two keys in each slot. Suppose that you have already inserted n keys using the
following algorithm:

1. Hash (key, probe number) to one of the m slots.
2. If the slot has less than two keys, insert it there.
3. Otherwise, increment the probe number and go to step 1.

Given the resulting table of n keys, we want to insert another key. We wish to compute the prob-
ability that the ﬁrst probe will successfully insert this key, i.e., the probability that the ﬁrst probe
hits a slot that is either completely empty (no keys stored in it) or half-empty (one key stored in it).
You can make the uniform hashing assumption for all the parts of this question.

(a) [5 points] Assume that there are exactly k slots in the table that are completely full.
What is the probability s(k) that the ﬁrst probe is successful, given that there are
exactly k full slots?

(b) [5 points] Assume that p(k) is the probability that there are exactly k slots in the table
that are completely full, given that there are already n keys in the table. What is the
probability that the ﬁrst probe is successful in terms of p(k)?

(c) [5 points] Give a formula for p(0) in terms of m and n.

6.006 Final Exam

Name

9

Problem 5. The Quadratic Method [10 points] (1 parts)
Describe how you can use Newton’s method to ﬁnd a root of x2 + 4x + 1 = 0 to d digits of
precision. Either reduce the problem to a problem you have already seen how to solve in lecture or
recitation, or give the formula for one step of Newton’s method.

6.006 Final Exam

Name

10

Problem 6. The Wedding Planner [20 points] (2 parts)
You are planning the seating arrangement for a wedding given a list of guests, V .
(a) [10 points] Suppose you are also given a lookup table T where T [u] for u ∈ V is
a list of guests that u knows. If u knows v , then v knows u. You are required to
arrange the seating such that any guest at a table knows every other guest sitting at the
same table either directly or through some other guests sitting at the same table. For
example, if x knows y , and y knows z , then x, y , z can sit at the same table. Describe
an efﬁcient algorithm that, given V and T , returns the minimum number of tables
needed to achieve this requirement. Analyze the running time of your algorithm.

6.006 Final Exam

Name

11

(b) [10 points] Now suppose that there are only two tables, and you are given a different
lookup table S where S [u] for u ∈ V is a list of guests who are on bad terms with u.
If v is on bad terms with u, then u is on bad terms with v . Your goal is to arrange the
seating such that no pair of guests sitting at the same table are on bad terms with each
other. Figure 1 below shows two graphs in which we present each guest as a vertex
and an edge between two vertices means these two guests are on bad terms with each
other. Figure 1(a) is an example where we can achieve the goal by having A, C sitting
at one table and B , E , D sitting at another table. Figure 1(b) is an example where we
cannot achieve the goal. Describe an efﬁcient algorithm that, given V and S , returns
TRU E if you can achieve the goal or FA L S E otherwise. Analyze the running time of
your algorithm.

A

D

B

(a)

C

E

A

D

C

E

B

(b)

Figure 1: Examples of guest relationships presented as graphs.

6.006 Final Exam

Name

12

Problem 7. How Fast Is Your Dynamic Program? [15 points] (5 parts)
In the dynamic programs below, assume the input consists of an integer S and a sequence x0 , x1 , . . . , xn−1
of integers between 0 and S . Assume that each dynamic program uses subproblems (i, X ) for
0 ≤ i < n and 0 ≤ X ≤ S (just like Knapsack). Assume that the goal is to compute DP (0, S ),
and that the base case is DP (n, X ) = 0 for all X . Assume that the dynamic program is a mem-
oized recursive algorithm, so that only needed subproblems get computed. Circle the number
next to the correct running time for each dynamic program.
(cid:27)
(cid:26) DP (i + 1, X ) + x
i ,
DP (i + 1, X − x ) + x2
i
i

(a) DP (i, X ) = max

if X ≥ xi

1. Exponential
2. Polynomial
3. Pseudo-polynomial
(cid:26) DP (i + 1, S ) + x
4. Inﬁnite
i ,
DP (0, X − x
2
i ) + xi

(b) DP (i, X ) = max

(cid:27)

if X ≥ xi

1. Exponential
2. Polynomial
3. Pseudo-polynomial
4. Inﬁnite

6.006 Final Exam

(c) DP (i, X ) = max

Name
(cid:26) DP (i + 1, 0) + x
i ,
DP (0, X − xi ) + x2
i

(cid:27)

if X ≥ xi

13

1. Exponential
2. Polynomial
3. Pseudo-polynomial
(cid:26)
4. Inﬁnite

(d) DP (i, X ) = max

DP (i + 1, X ) + x ,
i
DP (i + 1, 0) + x2
i

(cid:27)

1. Exponential
2. Polynomial
3. Pseudo-polynomial
(cid:26) DP (i + 1, X − (cid:80) S ) + (
4. Inﬁnite
for every subset S ⊆ {x0 ,

(e) DP (i, X ) = max

(cid:80)
S )2
x1 , . . . , xn−1}

(cid:27)

1. Exponential
2. Polynomial
3. Pseudo-polynomial
4. Inﬁnite

6.006 Final Exam

Name

14

Problem 8. Longest Alternating Subsequence [20 points] (6 parts)
Call a sequence y1 , y2 , . . . , yn alternating if every adjacent triple yi , yi+1 , yi+2 has either yi <
yi+1 > yi+2 , or yi > yi+1 < yi+2 . In other words, if the sequence increased between yi and yi+1 ,
then it should then decrease between yi+1 and yi+2 , and vice versa.
Our goal is to design a dynamic program that, given a sequence x1 , x2 , . . . , xn , computes the length
of the longest alternating subsequence of x1 , x2 , . . . , xn . The subproblems we will use are preﬁxes,
augmented with extra information about whether the longest subsequence ends on a descending
pair or an ascending pair. In other words, the value DP (i, b) should be the length of the longest
alternating subsequence that ends with xi , and ends in an ascending pair if and only if b is TRUE.
For the purposes of this problem, we deﬁne a length-one subsequence to be both increasing and
decreasing at the end.
For example, suppose that we have the following sequence:

x1 = 13

x2 = 93

x3 = 86

x4 = 50

x5 = 63

x6 = 4

Then DP (5, TRUE) = 4, because the longest possible alternating sequence ending in x5 with an
increase at the end is is x1 , x2 , x4 , x5 or x1 , x3 , x4 , x5 . However, DP (5, FA L S E) = 3, because if the
sequence has to decrease at the end, then x4 cannot be used.

(a) [4 points] Compute all values of DP (i, b) for the above sequence. Place your answers
in the following table:

i = 1

i = 2

i = 3

i = 4

i = 5

i = 6

b = TRUE

b = FA L S E

6.006 Final Exam

Name

15

(b) [4 points] Give a recurrence relation to compute DP (i, b).

(c) [4 points] Give the base cases of your recurrence relation.

(d) [3 points] Give a valid ordering of subproblems for a bottom-up computation.

6.006 Final Exam

Name

16

If you were given the values of DP (i, b) for all 1 ≤ i ≤ n and all b ∈
(e) [3 points]
{TRUE, FA L S E}, how could you use those values to compute the length of the longest
alternating subsequence of x1 , x2 , . . . , xn?

(f) [2 points] When combined, parts (b) through (e) can be used to write an algorithm
such as the following:

LONG E STA LT ERNAT INGSUB S EQU ENC E(x1 , . . . , xn )
1 initialize table T
for each subproblem (i, b), in the order given by part (d)
2
if (i, b) is a base case
3
use part (c) to compute DP (i, b)
4
5
6
7
8
9
10 use part (e) to ﬁnd the length of the overall longest subsequence

store the computed value of DP (i, b) in the table T

else

use part (b) to compute DP (i, b)

Analyze the running time of this algorithm, given your answers to the questions above.

6.006 Final Exam

Name

17

Problem 9. Paren Puzzle [15 points]
Your local school newspaper, The TEX, has started publishing puzzles of the following form:
Parenthesize 0.1 · 0.1 + 0.1
Parenthesize 6 + 0 · 6
to maximize the outcome.
to maximize the outcome.
Wrong answer: 6 + (0 · 6) = 6 + 0 = 6. Wrong answer: 0.1 · (0.1 + 0.1) = 0.1 · 0.2 = 0.02.
Right answer: (6 + 0) · 6 = 6 · 6 = 36.
Right answer: (0.1 · 0.1) + 0.1 = 0.01 + 0.1 = 0.11.
To save yourself from tedium, but still impress your friends, you decide to implement an algorithm
to solve these puzzles. The input to your algorithm is a sequence x0 , o0 , x1 , o1 , . . . , xn−1 , on−1 , xn
. Each operator o is either
of n + 1 real numbers x0 , x1 , . . . , xn and n operators o0 , o1 , . . . , on
−1
i
addition (+) or multiplication (·). Give a polynomial-time dynamic program for ﬁnding the optimal
(maximum-outcome) parenthesization of the given expression, and analyze the running time.

6.006 Final Exam

Name

18

Problem 10. Sorting Fluff [20 points] (5 parts)
In your latest dream, you ﬁnd yourself in a prison in the sky. In order to be released, you must
order N balls of ﬂuff according to their weights. Fluff is really light, so weighing the balls requires
great care. Your prison cell has the following instruments:
• A magic balance scale with 3 pans. When given 3 balls of ﬂuff, the scale will point out the
ball with the median weight. The scale only works reliably when each pan has exactly 1 ball
of ﬂuff in it. Let M ED IAN(x, y , z ) be the result of weighing balls x, y and z , which is the
ball with the median weight. If M ED IAN(x, y , z ) = y , that means that either x < y < z or
z < y < x.
• A high-precision classical balance scale. This scale takes 2 balls of ﬂuff, and points out which
ball is lighter; however, because ﬂuff is very light, the scale can only distinguish between the
overall lightest and the overall heaviest balls of ﬂuff. Comparing any other balls will not
yield reliable results. Let L IGHT E S T(a, b) be the result of weighing balls a and b. If a is the
lightest ball and b is the heaviest ball, L IGH TE S T(a, b) = a. Conversely, if a is the heaviest
ball and b is the lightest ball, L IGHT E S T(a, b) = b. Otherwise, L IGHT E S T(a, b)’s return value
is unreliable.

On the bright side, you can assume that all N balls have different weights. Naturally, you want to
sort the balls using as few weighings as possible, so you can escape your dream quickly and wake
up before 4:30pm!
To ponder this challenge, you take a nap and enter a second dream within your ﬁrst dream. In the
second dream, a fairy shows you the lightest and the heaviest balls of ﬂuff, but she doesn’t tell you
which is which.

(a) [2 points] Give a quick example to argue that you cannot use M ED IAN alone to
distinguish between the lightest and the heaviest ball, but that L IGHT E S T can let you
distinguish.

6.006 Final Exam

Name

19

(b) [4 points] Given l, the lightest ball l pointed out by the fairy, use O(1) calls to
M ED IAN to implement L IGHT ER(a, b), which returns TRU E if ball a is lighter than
ball b, and FA L S E otherwise.

After waking up from your second dream and returning to the ﬁrst dream, you realize that there is
no fairy. Solve the problem parts below without the information that the fairy would have given
you.

(c) [6 points] Give an algorithm that uses O(N ) calls to M ED IAN to ﬁnd the heaviest
and lightest balls of ﬂuff, without identifying which is the heaviest and which is the
lightest.

6.006 Final Exam

Name

20

(d) [2 points] Explain how the previous parts should be put together to sort the N balls
of ﬂuff using O(N log N ) calls to M ED IAN and O(1) calls to L IGH TE S T.

(e) [6 points] Argue that you need at least Ω(N log N ) calls to M ED IAN to sort the N
ﬂuff balls.

MIT OpenCourseWare
http://ocw.mit.edu

6.006 Introduction to Algorithms
Fall 2011
 
 
 
For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms .

