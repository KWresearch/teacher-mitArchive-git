Introduction to Algorithms: 6.006
Massachusetts Institute of Technology
Professors Erik Demaine and Srini Devadas

September 16, 2011
Problem Set 1 Solutions

Problem Set 1 Solutions

[15 points] Asymptotic Practice
Problem 1-1.
For each group of functions, sort the functions in increasing order of asymptotic (big-O) complex-
ity:

(a) [5 points] Group 1:

f1 (n) = n0.999999 log n
f2 (n) = 10000000n
f3 (n) = 1.000001n
f4 (n) = n2

Solution: The correct order of these functions is f1 (n), f2 (n), f4 (n), f3 (n). To see
why f1 (n) grows asymptotically slower than f2 (n), recall that for any c > 0, log n is
O(nc ). Therefore we have:
log n = O(n .999999 · n0.000001 ) = O(n) = O(f2 (n))
0

f (n) = n0.999999
1

The function f2 (n) is linear, while the function f4 (n) is quadratic, so f2 (n) is O(f4 (n)).
Finally, we know that f3 (n) is exponential, which grows much faster than quadratic,
so f4 (n) is O(f3 (n)).
(b) [5 points] Group 2:

(cid:18)
(cid:19)
f1 (n) = 221000000
f2 (n) = 2100000n
n
√
2
n
n

f3 (n) =

f4 (n) =

Solution: The correct order of these functions is f1 (n), f4 (n), f3 (n), f2 (n). The vari-
able n never appears in the formula for f1 (n), so despite the multiple exponentials,
with n. We may (cid:0)rewrite
(cid:1)
√
f1 (n) is constant. Hence, it is asymptotically smaller than f4 (n), which does grow
the formula for f4 (n) to be f4 (n) = n n = n1.5 . The
is given by the formula n(n − 1)/2, which is Θ(n2 ). Hence,
value of f3 (n) = n
2
4 (n) = n = O(n ) = O(f3 (n)). Finally, f2 (n) is exponential, while f3 (n) is
1.5
2
f
quadratic, meaning that f3 (n) is O(f2 (n)).

1(c) [5 points] Group 3:

Problem Set 1 Solutions

√
f (n) = n n
1
f2 (n) = 2n
(cid:88)
· 2n/2
f3 (n) = n10
n
i=1
Solution: The correct ordering of these functions is f4 (n), f1 (n), f3 (n), f2 (n). To see
(cid:88)
why, we ﬁrst use the rules of arithmetic series to derive a simpler formula for f4 (n):
n
(i + 1) =
i=1

n((n + 1) + 2)
2

n(n + 3)
2

= Θ(n2 )

f4 (n) =

(i + 1)

f4 (n) =

=

√
This is clearly asymptotically smaller than f (n) = n n
. Next, we want to compare
1
f1 (n), f2 (n), and f3 (n). To do so, we transform both f1 (n) and f3 (n) so that they
look more like f3 (n):

√
√
√
= 2 n·lg n
f1 (n) = n n = (2lg n
) n
= 2lg(n ) · 2n/2 = 2n/2+10 lg n
f3 (n) = n10 · 2n/2
10
The exponent of the 2 in f1 (n) is a function that grows more slowly than linear time;
the exponent of the 2 in f3 (n) is a function that grows linearly with n. Therefore,
f1 (n) = O(f3 (n)). Finally, we wish to compare f3 (n) with f2 (n). Both have a
linear function of n in their exponent, so it’s tempting to say that they behave the
same asymptotically, but they do not. If c is any constant and g(x) is a function, then
2cg(x) = (2c )g(x) . Hence, changing the constant of the function in the exponent is the
same as changing the base of the exponent, which does affect the asymptotic running
time. Hence, f3 (n) is O(f2 (n)), but f2 (n) is not O(f3 (n)).

[15 points] Recurrence Relation Resolution
Problem 1-2.
For each of the following recurrence relations, pick the correct asymptotic runtime:

(a) [5 points] Select the correct asymptotic complexity of an algorithm with runtime
T (n, n) where

T (x, c) = Θ(x)
T (c, y) = Θ(y)
T (x, y) = Θ(x + y) + T (x/2, y/2).

for c ≤ 2,
for c ≤ 2, and

1. Θ(log n).
2. Θ(n).
3. Θ(n log n).

2Problem Set 1 Solutions

4. Θ(n log2 n).
5. Θ(n2 ).
6. Θ(2n ).
Solution: The correct answer is Θ(n). To see why, we rewrite the recurrence relation
to avoid Θ notation as follows:

T (x, y) = c(x + y) + T (x/2, y/2).
(cid:18)
(cid:19)
(cid:18)
(cid:19)
(cid:18)
(cid:19)
We may then begin to replace T (x/2, y/2) with the recursive formula containing it:

+ c

x + y
8

+ . . .

T (x, y) = c (x + y) + c

x + y
2

+ c

x + y
4

This geometric sequence is bounded from above by 2c(x + y), and is obviously
bounded from below by c(x + y). Therefore, T (x, y) is Θ(x + y), and so T (n, n)
is Θ(n).
(b) [5 points] Select the correct asymptotic complexity of an algorithm with runtime
T (n, n) where

T (x, c) = Θ(x)
T (c, y) = Θ(y)
T (x, y) = Θ(x) + T (x, y/2).

for c ≤ 2,
for c ≤ 2, and

1. Θ(log n).
2. Θ(n).
3. Θ(n log n).
4. Θ(n log2 n).
5. Θ(n2 ).
6. Θ(2n ).
Solution: The correct answer is Θ(n log n). To see why, we rewrite the recurrence
relation to avoid Θ notation as follows:

T (x, y) = cx + T (x, y/2).
We may then begin to replace T (x, y/2) with the recursive formula containing it:
(cid:123)(cid:122)
(cid:125)
T (x, y) = cx(cid:124) + cx + cx + . . . + cx .
Θ(log y) times
As a result, T (x, y) is Θ(x log y). When we
for x and y , we get that
substitute n
T (n, n) is Θ(n log n).

3Problem Set 1 Solutions

(c) [5 points] Select the correct asymptotic complexity of an algorithm with runtime
T (n, n) where

T (x, c) = Θ(x)
T (x, y) = Θ(x) + S (x, y/2),
S (c, y) = Θ(y)
S (x, y) = Θ(y) + T (x/2, y).

for c ≤ 2,
for c ≤ 2, and

1. Θ(log n).
2. Θ(n).
3. Θ(n log n).
4. Θ(n log2 n).
5. Θ(n2 ).
6. Θ(2n ).
Solution: The correct answer here is Θ(n). To see why, we want to ﬁrst eliminate the
mutually recursive recurrence relations. To do so, we will replace all references to the
function S (x, y) with the deﬁnition of S (x, y). This yields the following recurrence
relation for T (x, y):

T (x, y) = Θ(x) + Θ(y/2) + T (x/2, y/2).

We can rewrite this to eliminate the constants and get the recurrence T (x, y) = Θ(x +
y) + T (x/2, y/2). This is precisely the same recurrence relation as seen in part (a) of
this problem, so it must have the same complexity.

Peak-Finding

In Lecture 1, you saw the peak-ﬁnding problem. As a reminder, a peak in a matrix is a location
with the property that its four neighbors (north, south, east, and west) have value less than or equal
to the value of the peak. We have posted Python code for solving this problem to the website in
a ﬁle called ps1.zip. In the ﬁle algorithms.py, there are four different algorithms which
have been written to solve the peak-ﬁnding problem, only some of which are correct. Your goal is
to ﬁgure out which of these algorithms are correct and which are efﬁcient.

Problem 1-3.

[16 points] Peak-Finding Correctness

(a) [4 points] Is algorithm1 correct?
1. Yes.
2. No.
Solution: Yes. This is the Θ(n log n) algorithm whose proof was sketched in Lecture
1. A more rigorous version of the proof of correctness was included in this homework.

4Problem Set 1 Solutions

(b) [4 points] Is algorithm2 correct?
1. Yes.
2. No.
Solution: Yes. This is the same as the greedy ascent algorithm presented in Lecture 1.
The algorithm will always eventually return a location, because the value of location
that it stores strictly increases with each recursive call, and there are only a ﬁnite
number of values in the grid. Hence, it will eventually return a value, which is always
a peak.
(c) [4 points] Is algorithm3 correct?
1. Yes.
2. No.
Solution: No. To see that this is true, try running the algorithm on the counterexample
given in the solutions to Problem 1-6.
(d) [4 points] Is algorithm4 correct?
1. Yes.
2. No.
Solution: Yes. See Problem 1-5 for a proof of correctness.

Problem 1-4.

[16 points] Peak-Finding Efﬁciency

(a) [4 points] What is the worst-case runtime of algorithm1 on a problem of size
n × n?
1. Θ(log n).
2. Θ(n).
3. Θ(n log n).
4. Θ(n log2 n).
5. Θ(n2 ).
6. Θ(2n ).
Solution: The worst-case runtime of algorithm1 is Θ(n log n), as explained in
Lecture 1.
(b) [4 points] What is the worst-case runtime of algorithm2 on a problem of size
n × n?
1. Θ(log n).
2. Θ(n).
3. Θ(n log n).
4. Θ(n log2 n).
5. Θ(n2 ).

5Problem Set 1 Solutions

6. Θ(2n ).
Solution: The worst-case runtime of algorithm2 is Θ(n2 ), as explained in Lecture
1.
(c) [4 points] What is the worst-case runtime of algorithm3 on a problem of size
n × n?
1. Θ(log n).
2. Θ(n).
3. Θ(n log n).
4. Θ(n log2 n).
5. Θ(n2 ).
6. Θ(2n ).
Solution: The worst-case runtime of algorithm3 is Θ(n). To see why, note that a
single call of the function (not counting the cost of the recursive call) does work pro-
portional m + n, where m is the number of rows and n is the number of columns. The
recursive subproblem examined involves roughly half the number of rows and half the
number of columns. Hence, the recurrence relation for this algorithm is approximately
T (m, n) = Θ(m + n) + T (m/2, n/2). This is precisely the recurrence relation we
solved in Problem 1-2(a).
(d) [4 points] What is the worst-case runtime of algorithm4 on a problem of size
n × n?
1. Θ(log n).
2. Θ(n).
3. Θ(n log n).
4. Θ(n log2 n).
5. Θ(n2 ).
6. Θ(2n ).
Solution: The total runtime of the algorithm in the worst case is Θ(n). The algorithm
alternates between splitting

Problem 1-5.
[19 points] Peak-Finding Proof
Please modify the proof below to construct a proof of correctness for the most efﬁcient correct
algorithm among algorithm2, algorithm3, and algorithm4.
The following is the proof of correctness for algorithm1, which was sketched in Lecture 1.

We wish to show that algorithm1 will always return a peak, as long as the problem
is not empty. To that end, we wish to prove the following two statements:
1. If the peak problem is not empty, then algorithm1 will always return a lo-
cation. Say that we start with a problem of size m × n. The recursive subproblem

6Problem Set 1 Solutions

examined by algorithm1 will have dimensions m × (cid:98)n/2(cid:99) or m × (n − (cid:98)n/2(cid:99) − 1).
Therefore, the number of columns in the problem strictly decreases with each recursive
call as long as n > 0. So algorithm1 either returns a location at some point, or even-
tually examines a subproblem with a non-positive number of columns. The only way for
the number of columns to become strictly negative, according to the formulas that de-
termine the size of the subproblem, is to have n = 0 at some point. So if algorithm1
doesn’t return a location, it must eventually examine an empty subproblem.
We wish to show that there is no way that this can occur. Assume, to the contrary, that
algorithm1 does examine an empty subproblem. Just prior to this, it must examine
a subproblem of size m × 1 or m × 2. If the problem is of size m × 1, then calculating
the maximum of the central column is equivalent to calculating the maximum of the
entire problem. Hence, the maximum that the algorithm ﬁnds must be a peak, and it
will halt and return the location. If the problem has dimensions m × 2, then there are
two possibilities: either the maximum of the central column is a peak (in which case
the algorithm will halt and return the location), or it has a strictly better neighbor in the
other column (in which case the algorithm will recurse on the non-empty subproblem
with dimensions m × 1, thus reducing to the previous case). So algorithm1 can
never recurse into an empty subproblem, and therefore algorithm1 must eventually
return a location.
2. If algorithm1 returns a location, it will be a peak in the original problem. If
algorithm1 returns a location (r1 , c1 ), then that location must have the best value
in column c1 , and must have been a peak within some recursive subproblem. Assume,
for the sake of contradiction, that (r1 , c1 ) is not also a peak within the original problem.
Then as the location (r1 , c1 ) is passed up the chain of recursive calls, it must eventually
reach a level where it stops being a peak. At that level, the location (r1 , c1 ) must be
adjacent to the dividing column c2 (where |c1 − c2 | = 1), and the values must satisfy the
inequality val(r1 , c1 ) < val(r1 , c2 ).
Let (r2 , c2 ) be the location of the maximum value found by algorithm1 in the divid-
ing column. As a result, it must be that val(r1 , c2 ) ≤ val(r2 , c2 ). Because the algorithm
chose to recurse on the half containing (r1 , c1 ), we know that val(r2 , c2 ) < val(r2 , c1 ).
Hence, we have the following chain of inequalities:
val(r1 , c1 ) < val(r1 , c2 ) ≤ val(r2 , c2 ) < val(r2 , c1 )
But in order for algorithm1 to return (r1 , c1 ) as a peak, the value at (r1 , c1 ) must
have been the greatest in its column, making val(r1 , c1 ) ≥ val(r2 , c1 ). Hence, we have
a contradiction.

Solution: To prove that algorithm4 is correct, we make the following modiﬁcations to the
proof of correctness for algorithm1:

1. There is more variation in the sizes of the recursive subproblems, because we can split by
rows as well as by columns.

7Problem Set 1 Solutions

2. Because we can split by rows or columns, it is no longer true that the number of columns
is always strictly decreasing. With every step, either the number of rows or the number of
columns strictly decreases, as long as both are greater than zero. However, this does still
mean that the algorithm must either return a location, or examine an empty subproblem.
3. It is no longer true that the size of the problem just prior to examining an empty subproblem
is m × 1 or m × 2. If the algorithm splits on rows instead of columns just prior to examining
an empty subproblem, then the size of the problem must be 1 × n or 2 × n. Even so, the
analyses of the two cases (splitting on rows versus splitting on columns) are nearly identical.
4. The second part of the proof diverges more from the proof given for algorithm1. We no
longer know that the value returned by the algorithm is the maximum in some row or column
of the original problem. Instead, we base our argument about the correctness of the algorithm
on the use of the bestSeen variable, which contains the location of the best value seen so
far in the matrix. This lets us know that we will never choose to return a location that looks
like a peak within the current subproblem, but is adjacent to some greater value just outside
the subproblem.

The result of these changes, written more rigorously, is the following proof:

We wish to show that the algorithm will always return a peak. To that end, we wish to
prove the following two statements:
1. If the peak problem is not empty, then the algorithm will always return a lo-
cation. Say that we start with a problem of size m × n. Depending on whether the
algorithm is splitting the rows or the columns, the recursive subproblem examined by
the algorithm will have dimensions (cid:98)m/2(cid:99) × n, (m − (cid:98)m/2(cid:99) − 1) × n, m × (cid:98)n/2(cid:99), or
m × (n − (cid:98)n/2(cid:99) − 1). Therefore, with each recursive call, either the number of rows or
the number of columns strictly decreases, as long as both are greater than zero. So the
algorithm either halts and returns at some point, or eventually examines a subproblem
with a non-positive number of rows or columns. The only way for the number of rows
or columns to become strictly negative, according to the formulas that determine the
size of the subproblem, is to have m = 0 or n = 0 at some point. So if the algorithm
does not returns a location, it must eventually examine an empty subproblem.
We wish to show that there is no way that this can occur. Assume, to the contrary, that
the algorithm does examine an empty subproblem. Without loss of generality, say that
the algorithm split the columns just prior to this. Then at that point in the algorithm it
must have examined a subproblem of size m × 1 or m × 2. If the problem is of size
m × 1, then calculating the maximum of the central column is equivalent to calculating
the maximum of the entire problem. Hence, the maximum that the algorithm ﬁnds must
be a peak, and it will halt and return the location. If the problem has dimensions m × 2,
then there are two possibilities: either the maximum of the central column is a peak (in
which case the algorithm will return the location), or it has a strictly better neighbor
in the other column (in which case the algorithm will recurse on the subproblem with

8Problem Set 1 Solutions

dimensions m × 1, thereby ensuring that the algorithm will always recurse into the non-
empty subproblem). So the algorithm can never recurse into an empty subproblem, and
therefore the algorithm must return a location.
2. If the algorithm returns a location, it will be a peak in the original problem. If
the algorithm returns a location (r1 , c1 ), then that location must have been a peak within
some recursive subproblem. In addition, if (r2 , c2 ) is the location of the best location
seen during the execution of the algorithm (that is, the location stored in the variable
bestSeen), it must be that val(r1 , c1 ) ≥ val(r2 , c2 ).
Assume, for the sake of contradiction, that (r1 , c1 ) is not a peak within the original
problem. Then as the location (r1 , c1 ) is passed up the chain of recursive calls, it must
eventually reach a level where it stops being a peak. Hence, it must be that the sub-
problem considered at that level includes some neighbor (r3 , c3 ) of (r1 , c1 ) with value
val(r1 , c1 ) < val(r3 , c3 ). In order for (r3 , c3 ) to be adjacent to the recursive subproblem,
but not included, it has to have been in the dividing row or dividing column. Therefore,
(r3 , c3 ) must have been examined during the progression of the algorithm. As a re-
sult, it must be that val(r3 , c3 ) ≤ val(r2 , c2 ). Hence, we have the following chain of
inequalities:
val(r1 , c1 ) < val(r3 , c3 ) ≤ val(r2 , c2 ) ≤ val(r1 , c1 ).
This results in a contradiction.

Problem 1-6.
[19 points] Peak-Finding Counterexamples
For each incorrect algorithm, upload a Python ﬁle giving a counterexample (i.e. a matrix for which
the algorithm returns a location that is not a peak).
Solution: The following is a counterexample for algorithm3:

problemMatrix = [
9,
0,
[ 0,
[ 0,
0,
0,
0,
1,
[ 0,
0,
2,
[ 0,
0,
0,
[ 0,
[ 0,
0,
0,
0,
0,
[ 0,

8,
0,
0,
0,
0,
0,
0,

]

0,
0,
0,
0,
0,
0,
0,

0,
0,
0,
0,
0,
0,
0,

0],
0],
0],
0],
0],
0],
0]

9MIT OpenCourseWare
http://ocw.mit.edu

6.006  Introduction to Algorithms
 
Fall 2011
 
 
 
 
For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms .

