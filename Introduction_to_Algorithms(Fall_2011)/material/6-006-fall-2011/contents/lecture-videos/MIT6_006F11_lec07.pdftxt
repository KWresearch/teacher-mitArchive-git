Lecture 7

Linear-Time Sorting

6.006 Fall 2011

Lecture 7: Linear-Time Sorting

Lecture Overview
• Comparison model
• Lower bounds

– searching: Ω(lg n)

– sorting: Ω(n lg n)
• O(n) sorting algorithms for small integers

– counting sort

– radix sort

Lower Bounds

Claim
• searching among n preprocessed items requires Ω(lg n) time
=⇒ binary search, AVL tree search optimal
• sorting n items requires Ω(n lg n)
=⇒ mergesort, heap sort, AVL sort optimal

. . . in the comparison model

Comparison Model of Computation
• input items are black boxes (ADTs)
• only support comparisons (<, >, ≤, etc.)
• time cost = # comparisons

Decision Tree

Any comparison algorithm can be viewed/speciﬁed as a tree of all possible comparison
outcomes & resulting output, for a particular n:
• example, binary search for n = 3:

1

theoremproofcounterexampleLecture 7

Linear-Time Sorting

6.006 Fall 2011

• internal node = binary decision
• leaf = output (algorithm is done)
• root-to-leaf path = algorithm execution
• path length (depth) = running time
• height of tree = worst-case running time

In fact, binary decision tree model is more powerful than comparison model, and lower
bounds extend to it

Search Lower Bound
• # leaves ≥ # possible answers ≥ n
• decision tree is binary
• =⇒ height ≥ lg Θ(n) = lg n ±(cid:124) Θ(1)
(cid:123)(cid:122)
(cid:125)
lg
Θ(1)

(at least 1 per A[i])

Sorting Lower Bound
• leaf speciﬁes answer as permutation: A[3] ≤ A[1] ≤ A[9] ≤ . . .
• all n! are possible answers

2

   A[1] < x?    A[0] < x?    A[2] < x? NOYESNONOYESYES   x ≤A[0]    A[2] < x    A[0] < x ≤ A[1]    A[1] < x ≤ A[2] Lecture 7

Linear-Time Sorting

6.006 Fall 2011

• # leaves ≥ n!

=⇒ height ≥ lg n!
= lg(1 · 2 · · · (n − 1) · n)
(cid:88)
= lg 1 + lg 2 + · · · + lg(n − 1) + lg n
n
lg i
(cid:88)
i=1
n
lg
i
(cid:88) n
i=
n/2
(cid:124)(cid:123)(cid:122)(cid:125)
n
lg
2
n/2
i=
n−1
=lg
− = Ω(n lg n)
n
n
2
2
• in fact lg n! = n lg n − O(n) via Sterling’s Formula:
(cid:16) (cid:17)
√
2 (cid:123)(cid:122)
(cid:124)
(cid:125)
=⇒ lg n! ∼ n lg n − (lg e)n + 1
n ∼ 2πn
n
n
lg n + 1 lg(2π)
!
2
e
O(n)

lg n

≥

=

≥

=

Linear-time Sorting
If n keys are integers (ﬁtting in a word) ∈ 0, 1, . . . , k − 1, can do more than compare them
• =⇒ lower bounds don’t apply
• if k = nO(1) , can sort in O(n) time
OPEN: O(n) time possible for all k?

Counting Sort

L = array of k empty lists
— linked or Python
lists
L[k(cid:124) ey(A[j])
(cid:125)].append(A[j]) → O(1)
(cid:123)(cid:122)
for j in range n:
random access using integer key
output = [ ]
for i in range k :
output.extend(L[i])

(cid:41)

O(k)

 O((cid:80)
O(n)
i (1 + |L[i]|)) = O(k + n)


3

Lecture 7

Linear-Time Sorting

6.006 Fall 2011

Time: Θ(n + k) — also Θ(n + k) space

Intuition: Count key occurrences using RAM output <count> copies of each key in order
. . . but item is more than just a key

CLRS has cooler implementation of counting sort with counters, no lists — but time bound
is the same

Radix Sort
• imagine each integer in base b
=⇒ d = logb k digits ∈ {0, 1, . . . , b − 1}
• sort (all n items) by least signiﬁcant digit → can extract in O(1) time
• · · ·
• sort by most signiﬁcant digit → can extract in O(1) time
sort must be stable: preserve relative order of items with the same key
=⇒ don’t mess up previous sorting
For example:

• use counting sort for digit sort
– =⇒ Θ(n + b) per digit
– =⇒ Θ((n + b)d) = Θ((n + b) logb k) total time
– minimized when b = n
– =⇒ Θ(n logn k)
– = O(nc) if k ≤ nc

4

346847325533259779605734463825355230567799734834622335550969577334467825355239567709sortsortedsortedsortedMIT OpenCourseWare
http://ocw.mit.edu

6.006  Introduction to Algorithms
 
Fall 2011
 
 
 
 
For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms .

