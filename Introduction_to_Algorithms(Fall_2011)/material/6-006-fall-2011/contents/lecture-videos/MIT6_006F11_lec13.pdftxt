Lecture 13

Graphs I: BFS

6.006 Fall 2011

Lecture 13: Graphs I: Breadth First Search

Lecture Overview
• Applications of Graph Search
• Graph Representations
• Breadth-First Search

Recall:

Graph G = (V , E )
• V = set of vertices (arbitrary labels)
• E = set of edges i.e. vertex pairs (v , w)
– ordered pair =⇒ directed edge of graph
– unordered pair =⇒ undirected

Figure 1: Example to illustrate graph terminology

Graph Search

“Explore a graph”, e.g.:
• ﬁnd a path from start vertex s to a desired vertex
• visit all vertices or edges of graph, or only those reachable from s

1

abcdabcUNDIRECTEDDIRECTEDe.g.V = {a,b,c,d}E = {{a,b},{a,c},         {b,c},{b,d},         {c,d}}V = {a,b,c}E = {(a,c),(b,c),         (c,b),(b,a)}Lecture 13

Graphs I: BFS

6.006 Fall 2011

Applications:

There are many.
• web crawling
(how Google ﬁnds pages)
• social networking
(Facebook friend ﬁnder)
• network broadcast routing
• garbage collection
• model checking (ﬁnite state machine)
• checking mathematical conjectures
• solving puzzles and games

Pocket Cube:
× ×
2

Consider a 2

2 Rubik’s cube

Conﬁguration Graph:
• vertex for each possible state
• edge for each basic move (e.g., 90 degree turn) from one state to another
• undirected: moves are reversible

Diameter (“God’s Number”)
11 for 2 × 2 × 2, 20 for 3 × 3 × 3, Θ(n2/ lg n) for n × n × n [Demaine, Demaine, Eisenstat
Lubiw Winslow 2011]

2

. . .“breadth-firsttree”possible first movesreachable in two steps but not one“hardest configs”solvedLecture 13

Graphs I: BFS

6.006 Fall 2011

# vertices = 8! · 38 = 264, 539, 520 where 8! comes from having 8 cubelets in arbitrary
positions and 38 comes as each cubelet has 3 possible twists.

This can be divided by 24 if we remove cube symmetries and further divided by 3 to account
for actually reachable conﬁgurations (there are 3 connected components).

Graph Representations: (data structures)

Adjacency lists:
Array Adj of |V | linked lists
• for each vertex u ∈ V , Adj [u] stores u’s neighbors, i.e., {v ∈ V | (u, v) ∈ E }.
are just outgoing edges if directed. (See Fig. 2 for an example.)

(u, v)

Figure 2: Adjacency List Representation: Space Θ(V + E )

• in Python: Adj = dictionary of list/set values; vertex = any hashable ob ject (e.g.,
int, tuple)
• advantage: multiple graphs on same vertices

Implicit Graphs:

Adj(u) is a function — compute local structure on the ﬂy (e.g., Rubik’s Cube). This requires
“Zero” Space.

3

abcabcccbaAdjLecture 13

Graphs I: BFS

6.006 Fall 2011

Ob ject-oriented Variations:
• ob ject for each vertex u
• u.neighbors = list of neighbors i.e. Adj [u]

In other words, this is method for implicit graphs

Incidence Lists:
• can also make edges ob jects

• u.edges = list of (outgoing) edges from u.
• advantage: store edge data without hashing

Breadth-First Search

Explore graph level by level from s
• level 0 = {s}
•

level i = vertices reachable by path of i edges but not fewer

Figure 3: Illustrating Breadth-First Search

4

e.ae.be. . .level0slevel1level2lastlevelLecture 13

Graphs I: BFS

6.006 Fall 2011

• build level i > 0 from level i − 1 by trying all outgoing edges, but ignoring vertices
from previous levels

Breadth-First-Search Algorithm

See CLRS for queue-based implementation

# previous level, i − 1

# next level, i

# not yet seen
(cid:93) = level[u] + 1

BFS (V,Adj,s):
level = { s: 0 }
parent = {s : None }
i = 1
frontier = [s]
while frontier:
next = [ ]
for u in frontier:
for v in Adj [u]:
if v not in level:
level[v ] = i
parent[v ] = u
next.append(v)
frontier = next
i + =1

Example

Figure 4: Breadth-First Search Frontier

Analysis:
• vertex V enters next (& then frontier)
only once (because level[v ] then set)

base case: v = s

5

asdfvcxz10233221level 0level 1level 2level 3frontier0  = {s}frontier1  = {a, x}frontier2  = {z, d, c}frontier3  = {f, v}(not x, c, d)Lecture 13

6.006 Fall 2011

Graphs I: BFS
(cid:40)

|
|
E for directed graphs
2|E | for undirected graphs

• =⇒ Adj[v ] looped through only once
(cid:88)
v∈V

|Adj [V ]| =

time =

• =⇒ O(E ) time

• O(V + E ) (“LINEAR TIME”) to also list vertices unreachable from v (those still not
assigned level)

Shortest Paths:

cf. L15-18
(cid:40)
• for every vertex v , fewest edges to get from s to v is

level[v ] if v assigned level
∞ else (no path)

• parent pointers form shortest-path tree = union of such a shortest path for each v
=⇒ to ﬁnd shortest path, take v , parent[v ], parent[parent[v ]], etc., until s (or None)

6

MIT OpenCourseWare
http://ocw.mit.edu

6.006  Introduction to Algorithms
 
Fall  2011
 
 
 
For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms .

