Lecture 14

Graphs II: DFS

6.006 Fall 2011

Lecture 14: Graphs II: Depth-First Search

Lecture Overview
• Depth-First Search
• Edge Classiﬁcation
• Cycle Testing
• Topological Sort

Recall:
• graph search: explore a graph
e.g., ﬁnd a path from start vertex s to a desired vertex
• adjacency lists: array Adj of |V | linked lists
– for each vertex u ∈ V , Adj[u] stores u’s neighbors, i.e., {v ∈ V | (u, v) ∈ E }
(just outgoing edges if directed)

For example:

Figure 1: Adjacency Lists

Breadth-ﬁrst Search (BFS):

Explore level-by-level from s — ﬁnd shortest paths

1

abcabcccbaAdjLecture 14

Graphs II: DFS

6.006 Fall 2011

Depth-First Search (DFS)

This is like exploring a maze.

Figure 2: Depth-First Search Frontier

Depth First Search Algorithm
• follow path until you get stuck
• backtrack along breadcrumbs until reach unexplored neighbor
• recursively explore
• careful not to repeat a vertex

Figure 3: Depth-First Search Algorithm

2

sparent  = {s: None}DFS-visit (V, Adj, s): for v in Adj [s]:  if v not in parent:    parent [v] = s   DFS-visit (V, Adj, v) DFS (V, Adj) parent = { } for s in V:  if s not in parent:    parent [s] = None    DFS-visit (V, Adj, s)}}search from start vertex s(only see stuff reachable from s)explore entire graph(could do same to extend BFS)start v(cid:31)nish vLecture 14

Graphs II: DFS

6.006 Fall 2011

Example

Figure 4: Depth-First Traversal

Edge Classiﬁcation

Figure 5: Edge Classiﬁcation

• to compute this classiﬁcation (back or not), mark nodes for duration they are “on the
stack”
• only tree and back edges in undirected graph
Analysis
(cid:88)a vertex s only once (because then parent[s] set)
• DFS-visit gets called with
=⇒ time in DFS-visit =
|Adj[s]| = O(E )
∈V
s
• DFS outer loop adds just O(V )
=⇒ O(V + E ) time (linear time)

3

1326back edge7548back edgeforward edgecross edgeabcdefS1S2back edge: to ancestorforward edge: to descendantcross edge (to another subtree)tree edges (formed by parent)nontree edgesLecture 14

Graphs II: DFS

6.006 Fall 2011

Cycle Detection
Graph G has a cycle ⇔ DFS has a back edge

Proof

• before visit to vi ﬁnishes,
will visit vi+1 (& ﬁnish):
will consider edge (vi , vi+1 )
=⇒ visit vi+1 now or already did
• =⇒ before visit to v0 ﬁnishes,
will visit vk (& didn’t before)

• =⇒ before visit to vk (or v0 ) ﬁnishes,
will see (vk , v0 ) as back edge

Job scheduling

Given Directed Acylic Graph (DAG), where vertices represent tasks & edges represent
dependencies, order tasks without violating dependencies

4

tree edgesis a cycleback edge: to tree ancestor(<=)(=>)consider (cid:31)rst visit to cycle:FIRST!v2v3vkv1v0Lecture 14

Graphs II: DFS

6.006 Fall 2011

Figure 6: Dependence Graph: DFS Finishing Times

Source = vertex with no incoming edges
= schedulable at beginning (A,G,I)

Source:

Attempt:

BFS from each source:
• from A ﬁnds A, BH, C, F
• from D ﬁnds D, BE, CF ← slow . . . and wrong!
• from G ﬁnds G, H
• from I ﬁnds I

Topological Sort

Reverse of DFS ﬁnishing times (time at which DFS-Visit(v) ﬁnishes)

5





DFS-Visit(v)
. . .
order.append(v)

order.reverse()

GAHBCFDE I123478956Lecture 14

Graphs II: DFS

6.006 Fall 2011

Correctness

For any edge (u, v) — u ordered before v , i.e., v ﬁnished before u

• if u visited before v :

– before visit to u ﬁnishes, will visit v (via (u, v) or otherwise)
– =⇒ v ﬁnishes before u
• if v visited before u:

– graph is acyclic
– =⇒ u cannot be reached from v
– =⇒ visit to v ﬁnishes before visiting u

6

uvMIT OpenCourseWare
http://ocw.mit.edu

6.006  Introduction to Algorithms
 
Fall  2011
 
 
 
For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms .

