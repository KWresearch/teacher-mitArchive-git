Lecture 23

Computational Complexity

6.006 Fall 2011

Lecture 23: Computational Complexity

Lecture Overview
• P, EXP, R
• Most problems are uncomputable
• NP
• Hardness & completeness
• Reductions

Deﬁnitions:
• P = {problems solvable in polynomial (nc ) time}
(what this class is all about)
• EXP = {problems solvable in exponential (2nc ) time}
• R = {problems solvable in ﬁnite time} “recursive” [Turing 1936; Church 1941]

Examples
• negative-weight cycle detection ∈ P
• n × n Chess ∈ EXP but ∈/ P
Who wins from given board conﬁguration?
• Tetris ∈ EXP but don’t know whether ∈ P
Survive given pieces from given board.

1

computational di(cid:31)culty}}}REXPPuncomputable/undecidableP C  EXP C R==Lecture 23

Computational Complexity

6.006 Fall 2011

Halting Problem:

Given a computer program, does it ever halt (stop)?
• uncomputable (∈/ R): no algorithm solves it (correctly in ﬁnite time on all inputs)
• decision problem: answer is YES or NO

Most Decision Problems are Uncomputable
• program ≈ binary string ≈ nonneg. integer ∈ N
• decision problem = a function from binary strings (≈ nonneg. integers) to {YES (1),
NO (0)}
• ≈ inﬁnite sequence of bits ≈ real number ∈ R
|N| (cid:28) |R|: no assignment of unique nonneg. integers to real numbers (R uncountable)
• =⇒ not nearly enough programs for all problems
• each program solves only one problem
• =⇒ almost all problems cannot be solved

NP
NP = {Decision problems solvable in polynomial time via a “lucky” algorithm}. The “lucky”
algorithm can make lucky guesses, always “right” without trying all options.
• nondeterministic model: algorithm makes guesses & then says YES or NO
• guesses guaranteed to lead to YES outcome if possible (no otherwise)
In other words, NP = {decision problems with solutions that can be “checked” in polynomial
time}. This means that when answer = YES, can “prove” it & polynomial-time algorithm
can check proof

Example
Tetris ∈ NP
• nondeterministic algorithm: guess each move, did I survive?
• proof of YES: list what moves to make (rules of Tetris are easy)

2

Lecture 23

Computational Complexity

6.006 Fall 2011

P = NP

Big conjecture (worth $1,000,000)
• ≈ cannot engineer luck
• ≈ generating (proofs of ) solutions can be harder than checking them

Hardness and Completeness

Claim:
If P = NP, then Tetris ∈ NP - P
[Breukelaar, Demaine, Hohenberger, Hoogeboom, Kosters, Liben-Nowell 2004]

Why:
Tetris is NP-hard = “as hard as” every problem ∈ NP. In fact NP-complete = NP ∩ NP-
hard.

3

computational di(cid:31)culty}}}REXPPuncomputable/undecidable}NPcomputational di(cid:31)culty}}}REXPPuncomputable/undecidable}NPTetrisChess}}EXP-hardNP-hardEXP-completeNP-complete(cid:54)
(cid:54)
Lecture 23

Computational Complexity

6.006 Fall 2011

Similarly
Chess is EXP-complete = EXP ∩ EXP-hard. EXP-hard is as hard as every problem in
EXP. If NP = EXP, then Chess ∈/ EXP \ NP. Whether NP = EXP is also an open problem
but less famous/“important”.

Reductions

Convert your problem into a problem you already know how to solve (instead of solving
from scratch)
• most common algorithm design technique
• unweighted shortest path → weighted (set weights = 1)
• min-product path → shortest path (take logs) [PS6-1]
• longest path → shortest path (negate weights) [Quiz 2, P1k]
• shortest ordered tour → shortest path (k copies of the graph) [Quiz 2, P5]
• cheapest leaky-tank path → shortest path (graph reduction) [Quiz 2, P6]
All the above are One-call reductions: A problem → B problem → B solution → A solution
Multicall reductions: solve A using free calls to B — in this sense, every algorithm reduces
problem → model of computation
NP-complete problems are all interreducible using polynomial-time reductions (same dif-
ﬁculty). This implies that we can use reductions to prove NP-hardness — such as in
3-Partition → Tetris

Examples of NP-Complete Problems
• Knapsack (pseudopoly, not poly)
• 3-Partition: given n integers, can you divide them into triples of equal sum?
• Traveling Salesman Problem: shortest path that visits all vertices of a given graph
— decision version: is minimum weight ≤ x?
• longest common subsequence of k strings
• Minesweeper, Sudoku, and most puzzles
• SAT: given a Boolean formula (and, or, not), is it ever true? x and not x → NO
• shortest paths amidst obstacles in 3D

4

(cid:54)
(cid:54)
Lecture 23

Computational Complexity

6.006 Fall 2011

• 3-coloring a given graph
• ﬁnd largest clique in a given graph

5

MIT OpenCourseWare
http://ocw.mit.edu

6.006  Introduction to Algorithms
 
Fall  2011
 
 
 
For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms .

