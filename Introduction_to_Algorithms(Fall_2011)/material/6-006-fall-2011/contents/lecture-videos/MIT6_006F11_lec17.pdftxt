Lecture 17

Shortest Paths III: Bellman-Ford

6.006 Fall 2011

Lecture 17: Shortest Paths III:
Bellman-Ford

Lecture Overview
• Review: Notation
• Generic S.P. Algorithm
• Bellman-Ford Algorithm

– Analysis

– Correctness

Recall:

path p = < v0 , v1 , . . . , vk >
(cid:88)
(v1 , vi+1 ) ∈ E 0
≤ i < k
−
k 1
i−0
Shortest path weight from u to v is δ(u, v). δ(u, v) is ∞ if v is unreachable from u,
undeﬁned if there is a negative cycle on some path from u to v .

w(vi , vi+1 )

w(p) =

Figure 1: Negative Cycle.

1

uv-veLecture 17

Shortest Paths III: Bellman-Ford

6.006 Fall 2011

Generic S.P. Algorithm

Initialize:

← ∞
for v ∈ V :
d [v ]
Π [v ] ← NIL
d[S ] ← 0
select edge (u, v)
repeat
Main:
[somehow]
“Relax” edge (u, v)  d[v ] ← d[u] + w(u, v)
if d[v ] > d[u] + w(u, v) :
π [v ] ← u
until you can’t relax any more edges or you’re tired or . . .

Complexity:

Termination: Algorithm will continually relax edges when there are negative cycles
present.

Figure 2: Algorithm may not terminate due to negative cycles.

Complexity could be exponential time with poor choice of edges.

2

0v134-1ud[u]1211-40-1-2210etcLecture 17

Shortest Paths III: Bellman-Ford

6.006 Fall 2011

Figure 3: Algorithm could take exponential time. The outgoing edges from v0 and v1
have weight 4, the outgoing edges from v2 and v3 have weight 2, the outgoing edges
from v4 and v5 have weight 1.

5-Minute 6.006

Figure 4 is what I want you to remember from 6.006 ﬁve years after you graduate!

Bellman-Ford(G,W,s)

Initialize ()
for i = 1 to |V | − 1
for each edge (u, v) ∈ E :
Relax(u, v)
for each edge (u, v) ∈ E
do if d[v ] > d[u] + w(u, v)
then report a negative-weight cycle exists

At the end, d[v ] = δ(s, v), if no negative-weight cycles.

Theorem:
If G = (V , E ) contains no negative weight cycles, then after Bellman-Ford executes
d[v ] = δ(s, v) for all v ∈ V .

3

v0v1v2v3v4v5v648101213141310111246891011   (v0, v1)    (v1, v2)all of v2, vn    (v0, v2) all of v2, vnT(n) = θ(2n/2)  T(n) = 3 + 2T(n-2)  ORDERLecture 17

Shortest Paths III: Bellman-Ford

6.006 Fall 2011

Figure 4: Exponential vs. Polynomial.

Proof:
Let v ∈ V be any vertex. Consider path p = (cid:104)v0 , v1 , . . . , vk (cid:105) from v0 = s to vk = v
that is a shortest path with minimum number of edges. No negative weight cycles
=⇒ p is simple =⇒ k ≤ |V | − 1.

Consider Figure 6. Initially d[v0 ] = 0 = δ(s, v0 ) and is unchanged since no negative
cycles.
After 1 pass through E , we have d[v1 ] = δ(s, v1 ), because we will relax the edge
(v0 , v1 ) in the pass, and we can’t ﬁnd a shorter path than this shortest path. (Note
that we are invoking optimal substructure and the safeness lemma from Lecture 16
here.)
After 2 passes through E , we have d[v2 ] = δ(s, v2 ), because in the second pass we will
relax the edge (v1 , v2 ).
After i passes through E , we have d[vi ] = δ(s, vi ).
After k ≤ |V | − 1 passes through E , we have d[vk ] = d[v ] = δ(s, v).

(cid:3)

Corollary
If a value d[v ] fails to converge after |V | − 1 passes, there exists a negative-weight
cycle reachable from s.
Proof:
After |V | − 1 passes, if we ﬁnd an edge that can be relaxed, it means that the current
shortest path from s to some vertex is not simple and vertices are repeated. Since this
cyclic path has less weight than any simple path the cycle has to be a negative-weight
(cid:3)
cycle.

4

T(n)  =  C1 + C2T(n - C3)T(n)  =  C1 + C2T(n / C3)Exponential BadPolynomial Goodif  C2 > 1, trouble! Divide & Explode         C2 > 1 okay provided C3 > 1     if C3 > 1Divide & ConquerLecture 17

Shortest Paths III: Bellman-Ford

6.006 Fall 2011

Figure 5: The numbers in circles indicate the order in which the δ values are computed.

Figure 6: Illustration for proof.

Longest Simple Path and Shortest Simple Path

Finding the longest simple path in a graph with non-negative edge weights is an NP-
hard problem, for which no known polynomial-time algorithm exists. Suppose one
simply negates each of the edge weights and runs Bellman-Ford to compute shortest
paths. Bellman-Ford will not necessarily compute the longest paths in the original
graph, since there might be a negative-weight cycle reachable from the source, and
the algorithm will abort.
Similarly, if we have a graph with negative cycles, and we wish to ﬁnd the longest
simple path from the source s to a vertex v , we cannot use Bellman-Ford. The shortest
simple path problem is also NP-hard.

5

B5AECD4-3-12213∞-1∞∞∞01138265474    223End of pass 1B5AECD4-3-12213-11∞∞201138265471    -223End of pass 2 (and 3 and 4)p:Sv0v1v2vkvδ (s, vi) = δ (s, vi-1) + w (vi-1,vi) MIT OpenCourseWare
http://ocw.mit.edu

6.006  Introduction to Algorithms
 
Fall  2011
 
 
 
For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms .

