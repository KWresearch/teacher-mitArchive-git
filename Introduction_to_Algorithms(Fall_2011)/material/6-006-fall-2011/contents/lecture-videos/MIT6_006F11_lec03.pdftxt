6.006- Introduction to 

Algorithms
 
 

Courtesy of MIT Press. Used with permission.
Lecture 3 


1Menu 

•  Sorting! 
 
–  Insertion Sort 
 
– Merge Sort 
 
•  Solving Recurrences 

 

2The problem of sorting 

Input: array A[1…n] of numbers. 

Output: permutation B[1…n] of A  such 
  
that  B[1] ≤ B[2] ≤ … ≤ B[n] . 
 
 
e.g. A = [7, 2, 5, 5, 9.6] → B = [2, 5, 5, 7, 9.6] 

How can we do it efficiently ? 
 

3Why Sorting? 
•  Obvious applications 
 
–  Organize an MP3 library 
 
–  Maintain a telephone directory 
 
•  Problems that become easy once items are 
 
in sorted order 
–  Find a median, or find closest pairs 
 
–  Binary search, identify statistical outliers 
 
•  Non-obvious applications 
 
–  Data compression: sorting finds duplicates 
 
–  Computer graphics: rendering scenes front to back 

 

4Insertion sort 

 
INSERTION-SORT (A, n)  [ A[1 . . n] 
 
 
for j ← 2 to n 
  
 
   
 
insert key A[j] into the (already sorted) sub-array A[1 .. j-1]. 
 
 
by pairwise key-swaps down to its right position 

  

Illustration of iteration j 
i 
1 

A: 

j 

n 

key

sorted 
new location of key 

5Example of insertion sort 

6 
3 
9 
4 

2 
8 




6Example of insertion sort 

2 
8 
6

3 
9 
4 

7Example of insertion sort 

6 
4 
2 
8 
3

9 


3 
9 
4 
8 
2 
6 

8Example of insertion sort 

6 
4 
2 
8 
3

9 


3 
9 
4 
8 
2 
6 

9Example of insertion sort 

6 
3 
9 
4 

2 
8 


3 
9 

4 
8 
2 
6 
6 
3 

9 
8 
4 
2 







10Example of insertion sort 

6 
3 
9 
4 

2 
8 


3 
9 

4 
8 
2 
6 
6 
3 

9 
8 
4 
2 







11Example of insertion sort 

6 
3 
9 
4 

2 
8 


3 
9 

4 
8 
2 
6 
6 
3 

9 
8 
4 
2 

3 
9 
8 
4 
2 
6 







12Example of insertion sort 

6 
3 
9 
4 

2 
8 


3 
9 

4 
8 
2 
6 
6 
3 

9 
8 
4 
2 

3 
9 
8 
4 
2 
6 







13Example of insertion sort 

6 
3 
9 
4 

2 
8 


3 
9 

4 
8 
2 
6 
6 
3 

9 
8 
4 
2 

3 
9 
8 
4 
2 
6 

6 
9 
8 
4 
3 
2 







14Example of insertion sort 

6 
3 
9 
4 

2 
8 


3 
9 

4 
8 
2 
6 
6 
3 

9 
8 
4 
2 

3 
9 
8 
4 
2 
6 

6 
9 
8 
4 
3 
2 







15Example of insertion sort 

6
3 
9 
4 


8 
2 
6
3 
9 


8 
2 
4 


6
3 
8 
4 
2 
9 


6
9 
8 
4 
2 
3 

6 
9 
8 
4 
3 
2 
9  done 

2 
3 
4 
6 
8 
Running time? Θ(n2) because Θ(n2) compares and Θ(n2) swaps 

e.g. when input is A = [n, n − 1, n − 2, . . . , 2, 1] 

16Binary Insertion sort 

 

  

 
[ A[1 . . n] 

BINARY-INSERTION-SORT (A, n) 
 
for j ← 2 to n 
 
   
 
  
insert key A[j] into the (already sorted) sub-array A[1 .. j-1]. 
 
 
Use binary search to find the right position 
Binary search with take Θ(log n) time. 

However, shifting the elements after insertion will 

still take Θ(n) time. 

 
Complexity: Θ(n log n) comparisons 

(n2) swaps
 
 

Θ

17Meet Merge Sort 

divide and 
conquer 

MERGE-SORT  A[1 . . n] 
  
1.  If n = 1, done (nothing to sort).
 
2.  Otherwise, recursively sort A[ 1 . . n/2 ]
 
and A[ n/2+1 . . n ] . 
3.  “Merge” the two sorted sub-arrays. 
 

 

Key subroutine: MERGE
 
 
 

18Merging two sorted arrays 

20  12 

13  11
 
 
7 
9 

2 
1 

19Merging two sorted arrays 

20  12 

13  11
 
 
7 
9 

2 
1 

1 


20Merging two sorted arrays 


20  12 
13  11 
 
7 
9 
2 

20  12 
13  11 
 
7 
9 
2 
1 

1 


21Merging two sorted arrays 


20  12 
13  11 
 
7 
9 
2 
1 

20  12 
13  11 
 
7 
9 
2 

1 

2 


22Merging two sorted arrays 


20  12 

13  11
 
 
7 
9 

20  12 
13  11 
 
7 
9 
2 
1 

20  12 
13  11 
 
7 
9 
2 

1 

2 


23Merging two sorted arrays 


20  12 
13  11 
 
7 
9 
2 
1 

20  12 
13  11 
 
7 
9 
2 

20  12 

13  11
 
 
7 
9 

1 

2 

7 


24Merging two sorted arrays 


20  12 
13  11 
 
7 
9 
2 
1 

20  12 
13  11 
 
7 
9 
2 

20  12 

13  11
 
 
7 
9 

20  12 
 
13 
11
9 

1 

2 

7 


25Merging two sorted arrays 


20  12 
13  11 
 
7 
9 
2 
1 

20  12 
13  11 
 
7 
9 
2 

20  12 
13  11 
 
7 
9 

20  12 
 
13  11 
9 

1 

2 

7 

9 


26Merging two sorted arrays 


20  12 
13  11 
 
7 
9 
2 
1 

20  12 
13  11 
 
7 
9 
2 

20  12 
13  11 
 
7 
9 

20  12 

 
13  11
 
9 

20  12 
 
13  11 

1 

2 

7 

9 


27Merging two sorted arrays 


20  12 
13  11 
 
7 
9 
2 
1 

20  12 
13  11 
 
7 
9 
2 

20  12 
13  11 
 
7 
9 

20  12 

 
13  11
 
9 

20  12 
 
13  11 

1 

2 

7 

9 

11
 
 

28Merging two sorted arrays 


20  12 
13  11 
 
7 
9 
2 
1 

20  12 
13  11 
 
7 
9 
2 

20  12 
13  11 
 
7 
9 

20  12 
 
13  11 
9 

20  12 
 
13  11 

12 

20 
13

1 

2 

7 

9 

11
 
 

29Merging two sorted arrays 


20  12 
13  11 
 
7 
9 
2 
1 

20  12 
13  11 
 
7 
9 
2 

20  12 
13  11 
 
7 
9 

20  12 
 
13  11 
9 

20  12 
 
13  11 

12 

20 
13

1 

2 

7 

9 

11
 

12 


30Merging two sorted arrays 


20  12 

13  11
 
 
7 
9 

2 
1 

1 


20  12 
13  11 
 
7 
9 

20  12 
 
13  11 
9 

20  12 
 
13  11 

12 

20 
13

20  12 
13  11 
 
7 
9 
2 

11
 
9 
2 

7 
Time = Θ(n) to merge a total 

of n elements (linear time). 


12 


31Analyzing merge sort 

MERGE-SORT A[1 . . n] 
 
1.  If n = 1, done. 
 
2.  Recursively sort A[ 1 . . ⎡n/2⎤ ]
 
and A[ ⎡n/2⎤+1 . . n ] . 
3.  “Merge” the two sorted lists 


 

T(n) 
Θ(1) 
2T(n/2) 
Θ(n) 

Θ(1) if n = 1;
 
2T(n/2) + Θ(n) if n > 1. 
 

T(n) = 
T(n) = ? 

32Recurrence solving 
Solve T(n) = 2T(n/2) + cn, where c > 0 is constant. 


33Recursion tree 
Solve T(n) = 2T(n/2) + cn, where c > 0 is constant. 

T(n) 


34Recursion tree 
Solve T(n) = 2T(n/2) + cn, where c > 0 is constant. 

cn 
 

T(n/2) 

T(n/2) 


35Recursion tree 
olve T(n) = 2T(n/2) + cn, where c > 0 is constant. 

cn 
 

S

cn/2 
cn/2 
T(n/4) 
T(n/4)  T(n/4) 
T(n/4) 

36Recursion tree 
Solve T(n) = 2T(n/2) + cn, where c > 0 is constant. 

cn 
 

cn/2 

cn/4 

cn/4 

cn/4 

cn/2 
cn/4 

Θ(1) 

37Recursion tree 
Solve T(n) = 2T(n/2) + cn, where c > 0 is constant. 

cn 
 

cn/2 

h = 1 + lg n 
cn/4 

cn/4 

cn/4 

cn/2 
cn/4 

Θ(1) 

38Recursion tree 
Solve T(n) = 2T(n/2) + cn, where c > 0 is constant. 

cn 
cn 
 
 

cn/2 

h = 1 + lg n 
cn/4 

cn/4 

cn/4 

cn/2 
cn/4 

Θ(1) 

39Recursion tree 
Solve T(n) = 2T(n/2) + cn, where c > 0 is constant. 

cn 
cn 
 
 
cn
 

cn/2 

cn/2 
cn/4 

cn/4 

cn/4 

h = 1 + lg n 
cn/4 

Θ(1) 

40Recursion tree 
Solve T(n) = 2T(n/2) + cn, where c > 0 is constant. 
cn 
cn 
 
 
cn
 
cn 
 


 
…

cn/2 
cn/4 

h = 1 + lg n 
cn/4 

cn/2 

cn/4 

cn/4 

Θ(1) 

41Recursion tree 
Solve T(n) = 2T(n/2) + cn, where c > 0 is constant. 

cn 
cn 
 
 
cn 
 
cn 
 

cn/2 
cn/4 

h = 1 + lg n 
cn/4 

cn/2 

cn/4 

cn/4 

Θ(1) 

#leaves = n 

 
…
Θ(n) 

42Recursion tree 
Solve T(n) = 2T(n/2) + cn, where c > 0 is constant. 

cn 
cn 
 
 
cn 
 
cn 
 

cn/2 
cn/4 

h = 1 + lg n 
cn/4 

cn/2 

cn/4 

cn/4 

Θ(1) 

#leaves = n 

 
…
Θ(n) 

 
Total ? 

43Recursion tree 
Solve T(n) = 2T(n/2) + cn, where c > 0 is constant. 

cn 
cn 
 
 
cn 
 
cn 
 

cn/2 
cn/4 

 = 1 + lg n 
h
cn/4 

cn/2 

cn/4 

cn/4 

Θ(1) 

 
…
Θ(n) 
Total = Θ(n lg n) 
Equal amount of work done at each level 

#leaves = n 

44h = 1 + lg n 
c 
 

Tree for different recurrence 

Solve T(n) = 2T(n/2) + c, where c > 0 is constant. 

c 
c 
 
 
2c 
 
4c 
 
 
…
n/2 c 
 
Θ(n) 
(n) 

 = Θ
Total

#leaves = n 
Θ(1) 
Note that 1 + ½ + ¼ + … < 2 
All the work done at the leaves 

c 

 

c 

 

c 
 

c 
 

c 
 

45Tree for yet another recurrence 

Solve T(n) = 2T(n/2) + cn2, c > 0 is constant. 
cn2 
cn2 
 
 
cn2/2
cn2/4 
 
…
Θ(n) 
Total = Θ(n2) 

cn2/4 
cn2/16 
cn2/16 
 
 

cn2/4 
h = 1 + lg n 
cn2/16 
cn2/16 
 

#leaves = n 
Θ(1) 
Note that 1 + ½ + ¼ + … < 2 
All the work done at the root 


46MIT OpenCourseWare
http://ocw.mit.edu

6.006 
 Introduction to Algorithms
Fall  2011
 
 
 
For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms .

