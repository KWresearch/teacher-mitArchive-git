6.006- Introduction to 
Algorithms 

Courtesy of MIT Press. Used with permission.

Lecture 4 

1Menu 

• Priority Queues 
• Heaps 
• Heapsort 
 
 

2Priority Queue 
A data structure implementing a set S of elements, each 
associated with a key, supporting the following operations: 

insert(S, x) : 
max(S) : 
extract_max(S) :  

increase_key(S, x, k) : 

insert element x into set S  
return element of  S with largest key 
return element of  S  with largest key and 
remove it from S 
increase the value of element x’ s key to 
new value k 
(assumed to be as large as current value) 

3Heap 

• Implementation of a priority queue 
• An array, visualized as a nearly complete binary tree 
• Max Heap Property: The key of a node is  ≥  than the keys of 
its children 
  (Min Heap defined analogously) 
 

2 
14 

8 

9  10 
2  4 
1 

4 

8 

5 
7 

3 
10 

1 

16 

6 

9 

7 
3 

1  2  3  4  5  6  7  8  9  10 

16 14 10  8  7  9  3  2  4  1 

All my arrays start at index 1 

4Heap as a Tree 

root of tree:    first element in the array, corresponding to i = 1 
parent(i) =i/2: returns index of node's parent 
left(i)=2i:        returns index of node's left child 
right(i)=2i+1: returns index of node's right child 

2 
14 

3 
10 

1 

16 

6 

9 

7 
3 

1  2  3  4  5  6  7  8  9  10 

16 14 10  8  7  9  3  2  4  1 

5 
7 

4 

8 

8 

9  10 
2  4 
1 

No pointers required!  Height of a binary heap is O(lg n) 

5Operations with Heaps 
Heap Operations 

build_max_heap : 

produce a max-heap from an unordered 
array 

max_heapify : 

correct a single violation of the heap 
property in a subtree at its root 

insert, extract_max, heapsort  

6Max_heapify 

• Assume that the trees rooted at left(i) and right(i) 
are max-heaps 

• If element A[i] violates the max-heap property, correct 
violation by “trickling” element A[i] down the tree, 
making the subtree rooted at index i a max-heap 

7Max_heapify (Example) 

Node 10 is the left child of node 5 but is drawn to the right for convenience 

8Max_heapify (Example) 

9Max_heapify (Example) 

Time=?  O(log n) 

10Max_Heapify Pseudocode 

l = left(i) 
r = right(i) 
if (l <= heap-size(A) and A[l] > A[i]) 
     then largest = l     else largest = i 
if (r <= heap-size(A) and A[r] > A[largest]) 
     then largest = r 
if largest = i 
     then exchange A[i] and A[largest] 
             Max_Heapify(A, largest) 

11Build_Max_Heap(A) 

Converts  A[1…n] to a max heap 

Build_Max_Heap(A):  
for i=n/2 downto 1 
 
 
 
do Max_Heapify(A, i) 

Why start at n/2?   
 
Because elements A[n/2 + 1 … n] are all leaves of the tree 
2i > n, for i > n/2 + 1 

Time=?  O(n log n)  via simple analysis 

12