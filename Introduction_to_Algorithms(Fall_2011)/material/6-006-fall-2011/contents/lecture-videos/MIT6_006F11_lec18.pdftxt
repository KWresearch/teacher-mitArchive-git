Lecture  18 

Shortest  Paths  IV:  Speeding  Up  Dijkstra 

6.006  Fall  2011  

Lecture  18:  Shortest  Paths  IV  - Speeding  
up  Dijkstra  

Lecture  Overview 
•  Single-source  single-target  Dijkstra 
•  Bidirectional  search 
•  Goal  directed  search  - potentials  and  landmarks 

Readings 
Wagner,  Dorothea,  and  Thomas Willhalm.  ”Speed-up  Techniques  for  Shortest-Path 
Computations.”  Proceedings  of  the  24th  International  Symposium  on  Theoretical 
Aspects  of  Computer  Science  (STACS  2007):  23-36.  Read  up  to  Section  3.2. 

DIJKSTRA  single-source,  single-target 

Initialize() 
Q ← V [G] 
while Q =  φ 
do  u ←  EXTRACT  MIN(Q)  (stop  if  u = t!) 
for  each  vertex  v t Adj[u] 
do  RELAX(u, v , w) 

Observation:  If  only  shortest  path  from  s  to  t  is  required,  stop  when  t  is  removed 
from Q,  i.e.,  when  u = t

1  

Lecture  18 

Shortest  Paths  IV:  Speeding  Up  Dijkstra 

6.006  Fall  2011  

Figure  1:  Bi-directional  Search  Idea.  

Bi-Directional  Search 
Note:  Speedup techniques covered here do not change worst-case behavior, but reduce 
the  number  of  visited  vertices  in  practice. 

Bi-D  Search 

Alternate  forward  search  from  s 
backward  search  from  t 
(follow  edges  backward) 
df (u)  distances  for  forward  search 
db (u)  distances  for  backward  search 

Algorithm  terminates  when  some  vertex  w  has  been  processed,  i.e.,  deleted  from  the  
queue  of  both  searches, Qf  and Qb  
Subtlety:  After  search  terminates,  ﬁnd  node  x  with minimum  value  of  df (x) + db (x).  
x may  not  be  the  vertex  w  that  caused  termination  as  in  example  to  the  left!  
Find  shortest  path  from  s  to  x  using  Πf  and  shortest  path  backwards  from  t  to  x  
using  Πb .  Note:  x  will  have  been  deleted  from  either Qf  or Qb  or  both.  

2  

Stforward searchbackward searchLecture  18 

Shortest  Paths  IV:  Speeding  Up  Dijkstra 

6.006  Fall  2011  

Figure  2:  Bi-D  Search  Example. 

Minimum value  for df (x) + db (x) over all vertices that have been processed  in at  least 
one  search  (see  Figure  3): 

df (u) + db (u) = 3 + 6 = 9 
df (u' ) + db (u' ) = 6 + 3 = 9 
df (w) + db (w) = 5 + 5 = 10 

3  

s3uu’t3355wLecture  18 

Shortest  Paths  IV:  Speeding  Up  Dijkstra 

6.006  Fall  2011  

Goal-Directed  Search  or  A∗ 
Modify  edge  weights  with  potential  function  over  vertices. 
w  (u, v) = w  (u, v) − λ(u) + λ(v) 

Search  toward  target  as  shown  in  Figure  4: 

Correctness 

w(p) = w(p) − λt (s) + λt (t) 
So  shortest  paths  are maintained  in modiﬁed  graph  with  w  weights  (see  Figure  5). 
To  apply  Dijkstra,  we  need  w(u, v) ≥ 0  for  all  (u, v). 
Choose  potential  function  appropriately,  to  be  feasible. 

Landmarks 
Small  set  of  landmarks  LC V .  For  all  u ∈ V , l ∈ L,  pre-compute  δ(u, l). 
l) (u) = δ(u, l) − δ(t, l)  for  each  l. 
Potential  λ(
t
(l)
CLAIM:  λt 
is  feasible. 

Feasibility 

w(u, v) =  w(u, v) − λt  (u) + λt  (v) 
(l)
(l)
=  w(u, v) − δ(u, l) + δ(t, l) + δ(v , l) − δ(t, l) 
=  w(u, v) − δ(u, l) + δ(v , l) ≥ 0  by  the Δ  -inequality 
(l)
λt (u)  =  max λt  (u)  is  also  feasible 
l E L 

4  

Lecture  18 

Shortest  Paths  IV:  Speeding  Up  Dijkstra 

6.006  Fall  2011  

Figure  3:  Forward  and  Backward  Search  and  Termination.  

5  

3u3355df (s) = 0df (u) = 3df (w) = 5Forward33355db(t) = 0db(u’) = 3db (w) = 5Backward33355df (s) = 0df (u’) = 6df (t) = 10Forward33355db(t) = 0db(u) = 6db (w) = 5Backwarddf (u) = 3df (w) = 5df (s) = 0db (s) = 10df (w) = 5df (u) = 3db(u’) = 3df (u’) = 6df (t) = 10uuuu’u’u’u’sssswwwwtttt33355df (s) = 0df (u’) = 6Forward33355db(t) = 0db(u) = 6db (w) = 5Backwarddf (u) = 3df (w) = 5db(u’) = 3uuu’u’sswwttdeleted from both queues        so terminate!Lecture  18 

Shortest  Paths  IV:  Speeding  Up  Dijkstra 

6.006  Fall  2011  

Figure  4:  Targeted  Search  

Figure  5:  Modifying  Edge Weights.  

6  

vv’55increasego uphilldecreasego downhillpp’stMIT OpenCourseWare
http://ocw.mit.edu

6.006  Introduction to Algorithms
 
Fall  2011
 
 
 
For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms .

