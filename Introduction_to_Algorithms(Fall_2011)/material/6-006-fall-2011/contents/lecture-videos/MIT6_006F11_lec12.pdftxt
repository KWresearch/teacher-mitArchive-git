Lecture 12

Numerics II

6.006 Fall 2011

Lecture 12: Numerics II
Lecture Overview
• Review:
– high precision arithmetic
– multiplication
• Division
– Algorithm
– Error Analysis
• Termination

Review:
Want millionth digit of

√
2:

Compute

d = 106

√
(cid:98) 2 · 102d(cid:99)
√(cid:98) a(cid:99) via Newton’s Method
(initial guess)
χ0 = 1
← division!
χi + a/χi
2

χi+1 =

Error Analysis of Newton’s Method
√
a · (1 + n )
Suppose Xn =
n may be + or -
Then,

(cid:17)

Xn + a/Xn
Xn+1 = √ 2
(cid:16)
a(1 + n ) + √ a
a(1+
n )
(cid:112) (1 + n ) + 1
=
2
(cid:112) (cid:18) 2 + 2n +  2
(cid:19)
(1+ )
n
(a)
=
2
(cid:19)
(cid:18)
= (cid:112)
n
=
(a)
2(1 + n )
2
n
(a
) 1 +
2(1 + n )

1

Lecture 12

Numerics II

6.006 Fall 2011

Therefore,

 2
n
2(1 + n )
Quadratic convergence, as (cid:93) correct digits doubles each step.
Newton’s method requires high-precision division. We covered multiplication in
Lecture 12.

n+1 =

Multiplication Algorithms:
1. Naive Divide & Conquer method: Θ(d2 ) time

2. Karatsuba: Θ(dlog2 3 ) = Θ(d1.584... )
(cid:0)
(cid:1)
(cid:0)
3. Toom-Cook generalizes Karatsuba (break into k ≥ 2 parts )
T (d) = 5T (d/3) + Θ(d) = Θ dlog3 5 = Θ d1.465...

(cid:1)

4. Schönhage-Strassen - almost linear! Θ(d lg d
(cid:0)
(cid:1)
in gmpy package
5. Furer (2007): Θ n log n 2O(log∗ n) where log∗ n is iterated logarithm. (cid:93) times
log needs to be appl
ied to get a n
umber that is less than or equal to 1.

All of these are

) using

FFT.

lg lg d

We want high precision rep of

High Precision Division
a
b
• Compute high-precision rep of

• High-precision rep of means
1
b
divide by R
Ex: R = 2k for binary representations

R
b

(cid:99) where R is large value s.t.

it is easy to

ﬁrst

1
b
(cid:98)

2

Lecture 12

Division

Newton’s Method for computing

b
R

f (x) =

f (cid:48) (x) =

−
1
x
−1
x2
χi+1 = χ −
i

R
b

(cid:19)

R
(cid:18)
b
zero at x =
(cid:16)
(cid:17)
− R
1
b
χ
i
−1/χi
2
−

= 2χi

Numerics II

6.006 Fall 2011

b (cid:19)
(χ(cid:18) 1
−
f (χi )
= χ
f (cid:48)
i
i )
χi+1 = χi + χ 2
i
R
χi

−

→
multiply
bχ 2
i
R → easy div

Example
216
R
5
b
Try initial guess

Want

=

=

= 13107.2

65536
5
216
4

= 214

χ0 = 214 = 16384
χ1 = 2 · (16384) − 5(16384)2/65536 = 12288
χ2 = 2 · (12288) − 5(12288)2/65536 = 13056
χ3 = 2 · (13056) − 5(13056)2/65536 = 13107

Error Analysis

= 2

(cid:18) R (cid:19)
bχ 2
χi+1 = 2χi − i
R
Assume χi = (1 + i )
b
R
2
(1 + i ) −
b
R
(cid:1)
(cid:0)(2 + 2i ) − (1 + 2i +  2
(1 + i )2
b
R b
(cid:1) R
(cid:0)1 −  2
R
i )
b
R
i+1 ) where
= (1 + 
i
b
b
Quadratic convergence; (cid:93) digits doubles at each step

=

=

i+1 =

−i

2

One might think that the complexity of division is lg d times the complexity of
multiplication given that we will have lg d multiplications in the lg d iterations required

3

Lecture 12

Numerics II

6.006 Fall 2011

to reach precision d. However, the complexity of division equals the complexity of
multiplication.
To understand this, assume that the complexity of multiplication is Θ(nα ) for n-
digit numbers, with α ≥ 1. Division requires multiplication of diﬀerent-sized numbers
at each iteration. Initially the numbers are small, and then they grow to d digits.
(cid:18) (cid:19)
(cid:18) (cid:19)
The number of operations in division are:
α
α
d
d
2
4

· 1 + c · 2α + c · 4α + · · · + c ·
α

· dα < 2

+ c ·

· dα

c

+ c

c

Complexity of Computing Square Roots
We apply a ﬁrst level of Newton’s method to solve f (x) = x2 − a. Each iteration
of this ﬁrst level1 requires a division. If we set the precision to d digits right from
the beginning, then convergence at the ﬁrst level will require lg d iterations. This
means the complexity of computing a square root will be Θ(dα lg d) if the complexity
of multiplication is Θ(dα ), given that we have shown that the complexity of division
is the same as the complexity of multiplication.
However, we can do better, if we recognize that the number of digits of precision
we need at beginning of the ﬁrst level of Newton’s method starts out small and then
grows. If the complexity of a d-digit division is Θ(dα ), then a similar summation to
the one above tells us that the complexity of computing square roots is Θ(dα ).

Termination
Iteration: χi+1 = (cid:98) i + (cid:98)a/χi(cid:99)
(cid:99)
χ
2
Do ﬂoors hurt? Does program terminate? (α and β are the fractional parts below.)
Iteration is

− α

χi+1 =

χi + a
− β
χ
i
2
a
i + χ
i − γ where γ = + β and 0 ≤ γ < 1
α
2
2
√
√
χi + a
≥ a, so subtracting γ always leaves us
≥
a + b
Since
χ
i
ab,
2
2
won’t stay stuck above if i < 1
(good initial guess).

=

χ

√
≥ (cid:98) a(cid:99). This

1We are calling this the ﬁrst level, since Newton’s method is used within division, which would
be the second level of applying it when we are computing square roots.

4

MIT OpenCourseWare
http://ocw.mit.edu

6.006  Introduction to Algorithms
 
Fall 2011
 
 
 
 
For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms .

