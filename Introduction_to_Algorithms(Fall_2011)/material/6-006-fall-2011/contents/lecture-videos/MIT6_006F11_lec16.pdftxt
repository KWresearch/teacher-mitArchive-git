Lecture 16

Shortest Paths II: Dijkstra

6.006 Fall 2011

Lecture 16: Shortest Paths II - Dijkstra

Lecture Overview
• Review
• Shortest paths in DAGs
• Shortest paths in graphs without negative edges
• Dijkstra’s Algorithm

Readings

CLRS, Sections 24.2-24.3

Review

d[v ] is the length of the current shortest path from starting vertex s. Through a
process of relaxation, d[v ] should eventually become δ(s, v), which is the length of the
shortest pathfrom s to v . Π[v ] is the predecessor of v in the shortest path from s to
v .

Basic operation in shortest path computation is the relaxation operation

RELAX(u, v , w)
if d[v ] > d[u] + w(u, v)
then d[v ] ← d[u] + w(u, v)
Π[v ] ← u

Relaxation is Safe
Lemma: The relaxation algorithm maintains the invariant that d[v ] ≥ δ(s, v) for all
v ∈ V .
Proof: By induction on the number of steps.
Consider RELAX (u, v , w). By induction d[u] ≥ δ(s, u). By the triangle in-
equality, δ(s, v) ≤ δ(s, u) + δ(u, v). This means that δ(s, v) ≤ d[u] + w(u, v), since
d[u] ≥ δ(s, u) and w(u, v) ≥ δ(u, v). So setting d[v ] = d[u] + w(u, v) is safe.
(cid:3)

1

Lecture 16

Shortest Paths II: Dijkstra

6.006 Fall 2011

DAGs:

Can’t have negative cycles because there are no cycles!

1. Topologically sort the DAG. Path from u to v implies that u is before v in the
linear ordering.

2. One pass over vertices in topologically sorted order relaxing each edge that
leaves each vertex.
Θ(V + E ) time

Example:

Figure 1: Shortest Path using Topological Sort.

Vertices sorted left to right in topological order
Process r: stays ∞. All vertices to the left of s will be ∞ by deﬁnition
Process s: t : ∞ → 2
x : ∞ → 6 (see top of Figure 2)

2

rstxyz∞0∞∞∞∞3527-1641-22Lecture 16

Shortest Paths II: Dijkstra

6.006 Fall 2011

Figure 2: Preview of Dynamic Programming

DIJKSTRA Demo

3

rstxyz∞026∞∞3527-1641-22rstxyz∞026533527-1641-22process t, x, yLecture 16

Shortest Paths II: Dijkstra

6.006 Fall 2011

Figure 3: Dijkstra Demonstration with Balls and String.

Dijkstra’s Algorithm
For each edge (u, v)  E , assume w(u, v) ≥ 0, maintain a set S of vertices whose
ﬁnal shortest path weights have been determined. Repeatedly select u  V − S with
minimum shortest path estimate, add u to S , relax all edges out of u.

Pseudo-code

Dijkstra (G, W, s)
//uses priority queue Q
Initialize (G, s)
S ← φ
Q ← V [G]
while Q = φ
do u ← EXTRACT-MIN(Q)
S = S ∪ {u}
for each vertex v  Adj[u]
do RELAX (u, v , w) ← this is an implicit DECREASE KEY operation

//deletes u from Q

//Insert into Q

4

BCADE51911715413A   C    E    B     D      7   12  18   22 D   B    E    C     A      4   13  15   22 E   C    A    D     B      5   12  13   16 (cid:54)
Lecture 16

Shortest Paths II: Dijkstra

6.006 Fall 2011

Example

Figure 4: Dijkstra Execution

Strategy: Dijkstra is a greedy algorithm: choose closest vertex in V − S to add to
set S .

Correctness: We know relaxation is safe. The key observation is that each time a
vertex u is added to set S , we have d[u] = δ(s, u).

5

BC∞A0DE2210138497∞∞∞S = {   }     {  A   B    C     D    E  }   =   QS = { A }        0   ∞   ∞   ∞   ∞     S = { A, C }        0   10   3    ∞    ∞       after relaxing       edges from AS = { A, C }        0    7   3     11    5       after relaxing       edges from C S = { A, C, E }        0    7    3    11    5       S = { A, C , E, B}       0   7   3      9     5       after relaxing       edges from B Lecture 16

Shortest Paths II: Dijkstra

6.006 Fall 2011

Dijkstra Complexity

Θ(v) inserts into priority queue
Θ(v) EXTRACT MIN operations
Θ(E ) DECREASE KEY operations

Array impl:

Θ(v) time for extra min
Θ(1) for decrease key
Total: Θ(V .V + E .1) = Θ(V 2 + E ) = Θ(V 2 )

Binary min-heap:

Θ(lg V ) for extract min
Θ(lg V ) for decrease key
Total: Θ(V lg V + E lg V )

Fibonacci heap (not covered in 6.006):

Θ(lg V ) for extract min
Θ(1) for decrease key
amortized cost
Total: Θ(V lg V + E )

6

MIT OpenCourseWare
http://ocw.mit.edu

6.006  Introduction to Algorithms
 
Fall  2011
 
 
 
For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms .

