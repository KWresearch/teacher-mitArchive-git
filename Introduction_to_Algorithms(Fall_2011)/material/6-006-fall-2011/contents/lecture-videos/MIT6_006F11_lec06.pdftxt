Lecture 6

Balanced Binary Search Trees

6.006 Fall 2011

Lecture 6: Balanced Binary Search Trees

Lecture Overview
• The importance of being balanced
• AVL trees

– Deﬁnition and balance

– Rotations

– Insert
• Other balanced trees
• Data structures in general
• Lower bounds

Recall: Binary Search Trees (BSTs)
• rooted binary tree
• each node has

– key

– left pointer

– right pointer

– parent pointer

See Fig. 1

Figure 1: Heights of nodes in a BST

1

654120115029263211000Lecture 6

Balanced Binary Search Trees

6.006 Fall 2011

Figure 2: BST property

• BST property (see Fig. 2).
• height of node = length (# edges) of longest downward path to a leaf (see CLRS B.5
for details).

The Importance of Being Balanced:
• BSTs support insert, delete, min, max, next-larger, next-smaller, etc. in O(h) time,
where h = height of tree (= height of root).
• h is between lg n and n: Fig. 3.

Figure 3: Balancing BSTs

• balanced BST maintains h = O(lg n) ⇒ all operations run in O(lg n) time.

2

x≤x≥xvs.Perfectly BalancedPathLecture 6

Balanced Binary Search Trees

6.006 Fall 2011

AVL Trees: Adel’son-Vel’skii & Landis 1962
For every node, require heights of left & right children to diﬀer by at most ±1.
• treat nil tree as height -1
• each node stores its height (DATA STRUCTURE AUGMENTATION) (like subtree
size) (alternatively, can just store diﬀerence in heights)

This is illustrated in Fig. 4

Figure 4: AVL Tree Concept

Balance:

Worst when every node diﬀers by 1 — let Nh = (min.) # nodes in height-h AVL tree
=⇒ Nh = Nh−1 + Nh−2 + 1
> 2Nh−2
=⇒ Nh > 2h/2
=⇒ h < 2 lg Nh

Alternatively:
Nh > Fh (nth Fibonacci number)
• In fact Nh = Fn+1 − 1 (simple induction)
Fh = √ rounded to nearest integer where ϕ =
•
ϕ
h
5
• =⇒ max. h ≈ logϕ n ≈ 1.440 lg n

√

1 +
2

5

≈ 1.618 (golden ratio)

3

kk-1Lecture 6

Balanced Binary Search Trees

6.006 Fall 2011

AVL Insert:

1. insert as in simple BST

2. work your way up tree, restoring AVL property (and updating heights as you go).

Each Step:

• suppose x is lowest node violating AVL
• assume x is right-heavy (left case symmetric)
• if x’s right child is right-heavy or balanced: follow steps in Fig. 5

Figure 5: AVL Insert Balancing

• else: follow steps in Fig. 6

Figure 6: AVL Insert Balancing

• then continue up to x’s grandparent, greatgrandparent . . .

4

xyABCk+1kk-1k-1xzABCk+1k-1Left-Rotate(x)kkyxCABk+1kkk-1yxCABkkk-1k-1Left-Rotate(x)xzADk+1k-1Left-Rotate(x)k-1yxABkk-1yBCkk-1  ork-2Right-Rotate(z)zCDkk-1k+1k-1  ork-2Lecture 6

Balanced Binary Search Trees

6.006 Fall 2011

Example: An example implementation of the AVL Insert process is illustrated in Fig. 7

Figure 7: Illustration of AVL Tree Insert Process

Comment 1. In general, process may need several rotations before done with an Insert.

Comment 2. Delete(-min) is similar — harder but possible.

5

6541201150292632110006541201150292621000123Insert(23)x = 29: left-left case6541201150262332110006541201150100DoneInsert(55)2903226231290065412011502002262312900x=65: left-right case551554120115010φ0226231290065Done30Lecture 6

Balanced Binary Search Trees

6.006 Fall 2011

AVL sort:
• insert each item into AVL tree
• in-order traversal

Balanced Search Trees:

There are many balanced search trees.

Θ(n lg n)

Θ(n)
Θ(n lg n)

Adel’son-Velsii and Landis 1962
AVL Trees
Bayer and McCreight 1972 (see CLRS 18)
B-Trees/2-3-4 Trees
Nievergelt and Reingold 1973
BB[α] Trees
CLRS Chapter 13
Red-black Trees
Sleator and Tarjan 1985
(A) — Splay-Trees
(R) — Skip Lists
Pugh 1989
(A) — Scapegoat Trees Galperin and Rivest 1993
(R) — Treaps
Seidel and Aragon 1996

(R) = use random numbers to make decisions fast with high probability
(A) = “amortized”: adding up costs for several operations =⇒ fast on average
For example, Splay Trees are a current research topic — see 6.854 (Advanced Algorithms)
and 6.851 (Advanced Data Structures)

Big Picture:

Abstract Data Type(ADT): interface spec.
vs.

Data Structure (DS): algorithm for each op.

There are many possible DSs for one ADT. One example that we will discuss much later in
the course is the “heap” priority queue.

Priority Queue ADT
Q = new-empty-queue()
Q.insert(x)
x = Q.deletemin()
x = Q.ﬁndmin()

heap
Θ(1)
Θ(lg n)
Θ(lg n)
Θ(1)

AVL tree
Θ(1)
Θ(lg n)
Θ(lg n)
Θ(lg n) → Θ(1)

6

Lecture 6

Balanced Binary Search Trees

6.006 Fall 2011

Predecessor/Successor ADT
S = new-empty()
S.insert(x)
S.delete(x)
y = S.predecessor(x) → next-
smaller
y = S.successor(x) → next-larger

heap AVL tree
Θ(1)
Θ(1)
Θ(lg n)
Θ(lg n)
Θ(lg n)
Θ(lg n)
Θ(n)
Θ(lg n)

Θ(n)

Θ(lg n)

7

MIT OpenCourseWare
http://ocw.mit.edu

6.006  Introduction to Algorithms
 
Fall 2011
 
 
 
 
For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms .

