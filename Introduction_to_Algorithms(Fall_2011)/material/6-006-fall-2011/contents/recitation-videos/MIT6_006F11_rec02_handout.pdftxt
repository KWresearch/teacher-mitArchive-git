6.006 Intro to Algorithms
docdist1

Recitation 2

September 14, 2011

1 def main():
if len(sys.argv) != 3:
2
print "Usage: docdist1.py filename_1 filename_2"
3
else:
4
5
filename_1 = sys.argv[1]
6
filename_2 = sys.argv[2]
7
sorted_word_list_1 = word_frequencies_for_file(filename_1)
8
sorted_word_list_2 = word_frequencies_for_file(filename_2)
9
distance = vector_angle(sorted_word_list_1,sorted_word_list_2)
print "The distance between the documents is: %0.6f (radians)" %
10
distance

1 def word_frequencies_for_file(filename):
2
line_list = read_file(filename)
3
word_list = get_words_from_line_list(line_list)
4
freq_mapping = count_frequency(word_list)
return freq_mapping
5

1 def get_words_from_line_list(L):
2
word_list = []
for line in L:
3
4
words_in_line = get_words_from_string(line)
5
word_list = word_list + words_in_line
return word_list
6
7
8 def get_words_from_string(line):
9
word_list = []
10
character_list = []
for c in line:
11
if c.isalnum():
12
13
character_list.append(c)
elif len(character_list)>0:
14
15
word = "".join(character_list)
16
word = word.lower()
17
word_list.append(word)
18
character_list = []
if len(character_list)>0:
19
20
word = "".join(character_list)
21
word = word.lower()
22
word_list.append(word)
return word_list
23

16.006 Intro to Algorithms

Recitation 2

September 14, 2011

1 def count_frequency(word_list):
2
L = []
for new_word in word_list:
3
for entry in L:
4
if new_word == entry[0]:
5
6
entry[1] = entry[1] + 1
break
7
else:
8
9
L.append([new_word,1])
return L
10

1 def vector_angle(L1,L2):
2
numerator = inner_product(L1,L2)
3
denominator = math.sqrt(inner_product(L1,L1)*inner_product(L2,L2))
return math.acos(numerator/denominator)
4

1 def inner_product(L1,L2):
2
sum = 0.0
for word1, count1 in L1:
3
for word2, count2 in L2:
4
if word1 == word2:
5
6
sum += count1 * count2
return sum
7

docdist2

1 if __name__ == "__main__":
import cProfile
2
3
cProfile.run("main()")

1 def get_words_from_line_list(L):
2
word_list = []
for line in L:
3
4
words_in_line = get_words_from_string(line)
5
word_list.extend(words_in_line)
return word_list
6

docdist3

1 def word_frequencies_for_file(filename):
2
line_list = read_file(filename)
3
word_list = get_words_from_line_list(line_list)
4
freq_mapping = count_frequency(word_list)
5
insertion_sort(freq_mapping)
return freq_mapping
6

26.006 Intro to Algorithms

Recitation 2

September 14, 2011

1 def insertion_sort(A):
for j in range(len(A)):
2
3
key = A[j]
4
i = j-1
while i>-1 and A[i]>key:
5
6
A[i+1] = A[i]
7
i = i-1
8
A[i+1] = key
return A
9

1 def inner_product(L1,L2):
2
sum = 0.0
3
i = 0
4
j = 0
while i<len(L1) and j<len(L2):
5
6
# L1[i:] and L2[j:] yet to be processed
if L1[i][0] == L2[j][0]:
7
8
# both vectors have this word
9
sum += L1[i][1] * L2[j][1]
10
i += 1
11
j += 1
elif L1[i][0] < L2[j][0]:
12
13
# word L1[i][0] is in L1 but not L2
14
i += 1
else:
15
16
# word L2[j][0] is in L2 but not L1
17
j += 1
return sum
18

docdist4

1 def count_frequency(word_list):
2
D = {}
for new_word in word_list:
3
if new_word in D:
4
5
D[new_word] = D[new_word]+1
else:
6
7
D[new_word] = 1
return D.items()
8

36.006 Intro to Algorithms
docdist5

Recitation 2

September 14, 2011

1 translation_table = string.maketrans(string.punctuation+string.
uppercase,

" "*len(string.punctuation)+string.lowercase)

2
3
4 def get_words_from_string(line):
5
line = line.translate(translation_table)
6
word_list = line.split()
return word_list
7

docdist6

1 def word_frequencies_for_file(filename):
2
line_list = read_file(filename)
3
word_list = get_words_from_line_list(line_list)
4
freq_mapping = count_frequency(word_list)
5
freq_mapping = merge_sort(freq_mapping)
return freq_mapping
6

1 def merge_sort(A):
2
n = len(A)
if n==1:
3
return A
4
5
mid = n//2
6
L = merge_sort(A[:mid])
7
R = merge_sort(A[mid:])
return merge(L,R)
8
9
10 def merge(L,R):
11
i = 0
12
j = 0
13
answer = []
while i<len(L) and j<len(R):
14
if L[i]<R[j]:
15
16
answer.append(L[i])
17
i += 1
else:
18
19
answer.append(R[j])
20
j += 1
if i<len(L):
21
22
answer.extend(L[i:])
if j<len(R):
23
24
answer.extend(R[j:])
return answer
25

46.006 Intro to Algorithms
docdist7

Recitation 2

September 14, 2011

1 def count_frequency(word_list):
2
D = {}
for new_word in word_list:
3
if new_word in D:
4
5
D[new_word] = D[new_word]+1
else:
6
7
D[new_word] = 1
return D
8

1 def word_frequencies_for_file(filename):
2
line_list = read_file(filename)
3
word_list = get_words_from_line_list(line_list)
4
freq_mapping = count_frequency(word_list)
return freq_mapping
5

1 def inner_product(D1,D2):
2
sum = 0.0
for key in D1:
3
if key in D2:
4
5
sum += D1[key] * D2[key]
return sum
6

docdist8

1 def get_words_from_text(text):
2
text = text.translate(translation_table)
3
word_list = text.split()
return word_list
4
5
6 def word_frequencies_for_file(filename):
7
text = read_file(filename)
8
word_list = get_words_from_text(text)
9
freq_mapping = count_frequency(word_list)
return freq_mapping
10

5MIT OpenCourseWare
http://ocw.mit.edu

6.006 Introduction to Algorithms
Fall 2011
 
 
 
For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms .

