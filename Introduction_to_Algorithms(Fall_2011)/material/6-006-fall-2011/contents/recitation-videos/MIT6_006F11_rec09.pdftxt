6.006 Introduction to Algorithms
Rolling Hash

Recitation 9

October 7, 2011

Rolling hash is an abstract data type that maintains a list and supports the following operations:
• hash(): computes a hash of the list.
• append(val): adds val to the end of the list.
• skip(val): removes the front element from the list, assuming it is val.
In the case of strings, the list is a list of characters.

Data Structure - Algorithms for Each Operations
Characters can be interpreted as integers, with their exact values depending on what type of encod-
ing is being used (e.g. ASCII, Unicode). For example the ASCII code for ‘A’ is 65 and ‘B’ is 66.
This means we can treat strings as lists of integers.
Key idea: treat a list of items as a multidigit number u in base a (‘concatenate’ list items into a
big number). For example, we can choose a = 256, the alphabet size for ASCII code.
• hash(): u mod p for prime p (division method).
• append(val): ((u · a) + val) mod p = [(u mod p) · a + val] mod p
• skip(val): [u − val · (a|u|−1 mod p)] mod p = [(u mod p) − val · (a|u|−1 mod p)] mod p

Hashing intuition: choose a = 100 for easy illustration purpose, and p = 23. hash([61, 8, 19,
91, 37]) = (6108199137 mod 23) = 12. In general, hash([d , d , d , d ]) = d · a3
+ d2 · a + d1 ·
2
3
2
1
0
3
a1 + d0 · a0 ) mod p.
Sliding intuition:
• list: [3, 14, 15, 92, 65, 35, 89, 79, 31]
• from [3, 14, 15, 92, 65] to [14, 15, 92, 65, 35], we get hash values from 11 to 6.
• from [14, 15, 92, 65, 35] to [15, 92, 65, 35, 89], we get hash values from 6 to 5.
Fast rolling hash:
• Cache the result u mod p.
• Need to avoid exponentiation in skip: cache a|u|−1 mod p (skip multiplier).
– append: multiply it by base
– skip: divide it by base (division is expensive, can use multicative inverse).

16.006 Introduction to Algorithms
Amortized Analysis

Recitation 9

October 7, 2011

Prove that in-order traversal in a BST using SUCC E S SOR (a.k.a. N EX T-LARG E ST) is O(1) per
node, amortized.
Mention that L I ST in the problem set can also be implemented using SUCE S SOR, with a similar
analysis.

Pre-Hash Functions
Python
Pre-hashing is done by calling the
you should also override
eq

hash
hash

instance method on an object. When overriding
, so that objects can be used as keys in a dictionary.

Good Functions
There are four main characteristics of a good hash function:

1. The hash value is fully determined by the data being hashed.

2. The hash function uses all the input data.

3. The hash function “uniformly” distributes the data across the entire set of possible hash
values.

4. The hash function generates very different hash values for similar strings.

Let’s examine why each of these is important.
• Rule 1: If something else besides the input data is used to determine the hash, then the hash
value is not as dependent upon the input data, thus allowing for a worse distribution of the
hash values.
• Rule 2: If the hash function doesn’t use all the input data, then slight variations to the in-
put data would cause an inappropriate number of similar hash values resulting in too many
collisions.
• Rule 3: If the hash function does not uniformly distribute the data across the entire set of
possible hash values, a large number of collisions will result, cutting down on the efﬁciency
of the hash table.
• Rule 4: In real world applications, many data sets contain very similar data elements. We
would like these data elements to still be distributable over a hash table.

26.006 Introduction to Algorithms

Recitation 9

October 7, 2011

Bad Functions
Credit card numbers

Credit card numbers have structure. The ﬁrst 4 digits in the 16-digit number are the bank number,
so using them in a hash function can yield collisions – for example, MIT students most likely have
cards issued by the few banks in the area (MITFCU, Bank of America MA, etc.). Also, the last
digit is a checksum digit, designed so that most typos can be corrected ofﬂine, without querying a
bank server, so a hash function that uses the last digit wastes time without gaining any additional
randomness.

XORhash
Let key be a list of integers.
1 def xorhash(key)
2
h = 0
for k in key:
3
4
h ˆ= k
return h
5
Why is this bad?

3MIT OpenCourseWare
http://ocw.mit.edu

6.006 Introduction to Algorithms
Fall 2011
 
 
 
For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms .

