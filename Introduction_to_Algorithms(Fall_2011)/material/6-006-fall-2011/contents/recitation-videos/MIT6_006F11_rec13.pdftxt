Recitation 13

October 28, 2011

6.006 Introduction to Algorithms
Review on Graphs
Handshaking Lemma
hands must be even. This(cid:80)can be proven by proving the handshaking lemma: if G = (V , E ) is an
In a party, people shook hands with each other. The sum of the number of times each person shook
|E |.
undirected graph, then
degree(v) = 2
v∈V
Proof. The degree of a vertex in an undirected graph is the number of edges incident on it. For
example, in Figure 1, The degree of node 1 is 2 and the degree of node 2 is 3. Consider a
particular, but arbitrarily chosen edge ek = (vi , vj ) ∈ E ; it contributes a count of 1 each to deg(vi )
and deg(vj ) and hence a count of 2 to the total degree. Hence, |E | edges contribute 2|E | to the total
degree. Each vertex represents a person and an edge (ui , uj ) represents ui and uj shook hands. The
sum of hand-shakes is the sum of the vertex-degrees which is even.

Path
A path of length k from a vertex u to a vertex u(cid:48) in a graph G = (V , E ) is a sequence (cid:104)v0 , v1 , v2 , . . . , vk (cid:105)
of vertices such that u = v0 , u(cid:48) = vk , and (vi 1 , vi ) ∈ E for i = 1, 2, . . . , k . There is always a
−
0-length path from u to u. If there is a path p from u to u(cid:48) , we say that u(cid:48) is reachable from u via
p. If there is no path from u to u(cid:48) , the distance from u to u(cid:48) is inﬁnity.

Graph Representation

In addition to the representations shown during the lecture: adjacency lists, object-oriented vari-
ations and implicit representations, there is another way to represent a graph, called adjacency
matrix.

Adjacency Matrix
For a graph G = (V , E ), we assume that the vertices are numbered 1, 2, . . . |V | in some arbitrary
order. Then the adjacency matrix representation of G consists of a |V | × |V | matrix A = (aij ) such
(cid:26) 1,
that
if (i, j ) ∈ E ,
0, otherwise .
This matrix can be stored as an array of arrays, and it requires Θ(V 2 ) memory, independent of the
number of the edges in the graph. Figure 1 shows the adjacency matrix of an undirected graph.
Observe the symmetry along the main diagonal of the matrix. In some applications, it pays to store
only the entries on and above the diagonal of the adjacency matrix, thereby cutting the memory
needed to store the graph almost in half.

aij =

16.006 Introduction to Algorithms

Recitation 13

October 28, 2011

1

5

2

4

3

1 2 3 4 5
0 1 0 0 1
1 0 1 1 1
0 1 0 1 0
0 1 1 0 1
1 1 0 1 0

1
2
3
4
5

Figure 1: Adjacency matrix representation of an undirected graph.

Representation Tradeoffs
Space:
• Adjacency lists uses one node per edge, and two machine words per node. So space is
Θ(Ew) bits (w = word size).
• Adjacency matrix uses V 2 entries, but each entry can be just one bit. So space can be Θ(V 2 )
bits.

Time:
• Add an edge: both data structures are O(1).
• Find if there is an edge from u to v : matrix is O(1), and adjacency list must be scanned.
• Visit all neighbors of v (very common): matrix is Θ(V ), and adjacency list is O(neighbors).
This means BFS will take O(V 2 ) time if we use adjacency matrix representation.
• Remove an edge: similar to ﬁnd and add.
The adjacency list representation provides a compact way to represent sparse graphs – those for
which |E | is much less than |V 2 | – it is usually the method of choice. We may prefer an adjacency
matrix representation, however, when the graph is dense – |E | is close to |V 2 | – or when we need
to be able to tell quickly if there is an edge connecting two given vertices.

Breadth First Search
Breadth ﬁrst search (BFS) uses a queue to perform the search. A queue is a FIFO (ﬁrst-in ﬁrst-
out) data structure. When we visit a node and add all the neighbors into the queue, then pop the
next thing off of the queue, we will get the neighbors of the ﬁrst node as the ﬁrst elements in the
queue. This comes about naturally from the FIFO property of the queue and ends up being an
extremely useful property. Even thougth the implementation shown in the lecture does not use a
queue explicitly, it still maintains the FIFO order of visiting the nodes.
The following is the Python implementation of a queue-based BFS.

26.006 Introduction to Algorithms

Recitation 13

October 28, 2011

def add_edge(self, u, v):
if self.adj[u] is None:
self.adj[u] = []
self.adj[u].append(v)

1 from collections import deque
2
3 class BFSResult:
def __init__(self):
4
5
self.level = {}
6
self.parent = {}
7
8 class Graph:
def __init__(self):
9
10
self.adj = {}
11
12
13
14
15
16
17 def bfs(g, s):
18
’’’Queue-based implementation of BFS.
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39

while queue:
u = queue.popleft()
for n in g.adj[u]:
if n not in level:
r.parent[n] = u
r.level[n] = r.level[u] + 1
queue.append(n)

Args:
g: a graph with adjacency list adj such that g.adj[u] is a list of u’s
neighbors.
s: source.

’’’
r = BFSResult()
r.parent = {s: None}
r.level = {s: 0}

queue = deque()
queue.append(s)

return r

3MIT OpenCourseWare
http://ocw.mit.edu

6.006 Introduction to Algorithms
Fall 2011
 
 
 
For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms .

