6.006 Introduction to Algorithms Recitation 9b

October 12, 2011

dnaseq.py

1 # Maps integer keys to a set of arbitrary values.
2 class Multidict:
3
# Initializes a new multi-value dictionary, and adds any key-value
4
# 2-tuples in the iterable sequence pairs to the data structure.
def __init__(self, pairs=[]):
5
raise Exception("Not implemented!")
6
7
# Associates the value v with the key k.
def put(self, k, v):
8
raise Exception("Not implemented!")
9
10
# Gets any values that have been associated with the key k; or, if
11
# none have been, returns an empty sequence.
def get(self, k):
12
raise Exception("Not implemented!")
13
14
15 # Given a sequence of nucleotides, return all k-length subsequences
16 # and their hashes.
(What else do you need to know about each
17 # subsequence?)
18 def subsequenceHashes(seq, k):
raise Exception("Not implemented!")
19
20
21 # Similar to subsequenceHashes(), but returns one k-length
subsequence
22 # every m nucleotides.
23 # whole data files.)
24 def intervalSubsequenceHashes(seq, k, m):
raise Exception("Not implemented!")
25
26
27 # Searches for commonalities between sequences a and b by comparing
28 # subsequences of length k.
The sequences a and b should be
iterators
29 # that return nucleotides.
The table is built by computing one hash
30 # every m nucleotides (for m >= k).
31 def getExactSubmatches(a, b, k, m):
raise Exception("Not implemented!")
32
33
34 if __name__ == ’__main__’:
if len(sys.argv) != 4:
35
print ’Usage: {0} [file_a.fa] [file_b.fa] [output.png]’.format(
36
sys.argv[0])
sys.exit(1)

(This will be useful when you try to use two

37
38
39
40
41
42
43
44
45

# The arguments are, in order: 1) Your getExactSubmatches
# function, 2) the filename to which the image should be written,
# 3) a tuple giving the width and height of the image, 4) the
# filename of sequence A, 5) the filename of sequence B, 6) k, the
# subsequence size, and 7) m, the sampling interval for sequence
# A.
compareSequences(getExactSubmatches, sys.argv[3], (500,500), sys.
argv[1], sys.argv[2], 8, 100)

16.006 Introduction to Algorithms Recitation 9b

October 12, 2011

dnaseqlib.py

1 # Produces hash values for a rolling sequence.
2 class RollingHash:
def __init__(self, s):
3
4
self.HASH_BASE = 7
5
self.seqlen = len(s)
6
n = self.seqlen - 1
7
h = 0
for c in s:
8
9
h += ord(c) * (self.HASH_BASE ** n)
10
n -= 1
11
self.curhash = h
12
13
14
15
16
17

# Returns the current hash value.
def current_hash(self):
return self.curhash

# Updates the hash by removing previtm and adding nextitm.
Returns the updated
# hash value.
def slide(self, previtm, nextitm):
self.curhash = (self.curhash * self.HASH_BASE) + ord(nextitm
)
self.curhash -= ord(previtm) * (self.HASH_BASE ** self.
seqlen)
return self.curhash

18
19
20

21

22

1 def compareSequences(getExactSubmatches, imgfile, imgsize, afile,
bfile, k, m):
a = kfasta.FastaSequence(afile)
b = kfasta.FastaSequence(bfile)
matches = getExactSubmatches(a, b, k, m)
buildComparisonImage(imgfile, imgsize[0], imgsize[1],
kfasta.getSequenceLength(afile),
kfasta.getSequenceLength(bfile), matches)

2
3
4
5
6
7

26.006 Introduction to Algorithms Recitation 9b

October 12, 2011

kfasta.py

1 # An iterator that returns the nucleotide sequence stored in the
given FASTA file.
2 class FastaSequence:
def __init__(self, filename):
3
4
self.f = open(filename, ’r’)
5
self.buf = ’’
6
self.info = self.f.readline()
7
self.pos = 0
def __iter__(self):
8
return self
9
def next(self):
10
while ’’ == self.buf:
11
12
self.buf = self.f.readline()
if ’’ == self.buf:
13
14
self.f.close()
raise StopIteration
15
16
self.buf = self.buf.strip()
17
nextchar = self.buf[0]
18
self.buf = self.buf[1:]
19
self.pos += 1
return nextchar
20

36.006 Introduction to Algorithms Recitation 9b

October 12, 2011

Iterators vs Generators

1 class Reverse:
2
"""Iterator for looping over a sequence backwards."""
def __init__(self, data):
3
4
self.data = data
5
self.index = len(data)
def __iter__(self):
6
return self
7
def next(self):
8
if self.index == 0:
9
raise StopIteration
10
11
self.index = self.index - 1
return self.data[self.index]
12
13
14 # >>> rev = Reverse(’spam’)
15 # >>> iter(rev)
16 # <__main__.Reverse object at 0x00A1DB50>
17 # >>> for char in rev:
18 # ...
print char
19 # ...
20 # m
21 # a
22 # p
23 # s

1 def reverse(data):
for index in range(len(data)-1, -1, -1):
2
3
yield data[index]
4
5 # >>> for char in reverse(’golf’):
6 # ...
print char
7 # ...
8 # f
9 # l
10 # o
11 # g

1 >>> data = ’golf’
2 >>> list(data[i] for i in range(len(data)-1,-1,-1))
3 [’f’, ’l’, ’o’, ’g’]
4
5 >>> sum(i*i for i in range(10))
6 285
7
8 >>> xvec = [10, 20, 30]
9 >>> yvec = [7, 5, 3]
10 >>> sum(x*y for x,y in zip(xvec, yvec))
11 260

# sum of squares

# dot product

4MIT OpenCourseWare
http://ocw.mit.edu

6.006 Introduction to Algorithms
Fall 2011
 
 
 
For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms .

