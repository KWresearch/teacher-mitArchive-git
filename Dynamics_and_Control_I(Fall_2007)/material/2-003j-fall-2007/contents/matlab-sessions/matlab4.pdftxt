Algorithms and ODE

Cite as: Peter So, course materials for 2.003J / 1.053J Dynamics and Control I, Fall 2007. MIT OpenCourseWare 
(http://ocw.mit.edu), Massachusetts Institute of Technology. Downloaded on [DD Month YYYY]. 

How to we solve problems with a computer?

We need an algorithm!

Algorithm language – “An arithmetic language 
presenting numerical procedures to a 
computer…” American Heritage Dictionary

Cite as: Peter So, course materials for 2.003J / 1.053J Dynamics and Control I, Fall 2007. MIT OpenCourseWare 
(http://ocw.mit.edu), Massachusetts Institute of Technology. Downloaded on [DD Month YYYY]. 

Revisit the task of recovering the motion of a 
dynamical system from its equation of motion

Consider the simplest 1st order system:

xb (cid:5)

+ kx

0=

What does this system corresponds to?

The solution of this system can of course be
obtained analytically but also simply numerically
by a single integration

Cite as: Peter So, course materials for 2.003J / 1.053J Dynamics and Control I, Fall 2007. MIT OpenCourseWare 
(http://ocw.mit.edu), Massachusetts Institute of Technology. Downloaded on [DD Month YYYY]. 

Simple integration -- Quad

quad(func, a, b)

y

b
∫=
a

dxxf
)(

As an example:

Now we are ready to use quad:

Define m-file:

>> quad(@fun1, 0, 1)

function y=fun1(x)
y=x.*x;

ans =
0.3333

Cite as: Peter So, course materials for 2.003J / 1.053J Dynamics and Control I, Fall 2007. MIT OpenCourseWare 
(http://ocw.mit.edu), Massachusetts Institute of Technology. Downloaded on [DD Month YYYY]. 

Limitation of Simple Integration: Quad

Simple integration is very limited and does not solve
a large class of dynamic problems.  As examples:

by’

mg

θ1

θ2

Falling ball –
2nd order

Coupled multiple degree 
of freedom system

Cite as: Peter So, course materials for 2.003J / 1.053J Dynamics and Control I, Fall 2007. MIT OpenCourseWare 
(http://ocw.mit.edu), Massachusetts Institute of Technology. Downloaded on [DD Month YYYY]. 

How did we solve this class of problems?
We use a very simple straight forward approach of
doing numerical integration:
Projec t ile  trajec tory  with x0=0,  y0=0,  vx0=5,  vy0=5
1.4
start

1.2

1

0.8

X=0; y=0; vx=5;vy=5;t=0;dt=0.1

)
t
(
y

0.6

0.4

0.2

0

yes

Y=<0
no

y=vx*dt;y=vy*dt;vy=vy-9.8*dt;t=t+dt;

output x, t

end

5

6

-0.2

0

2

1

4

3
x (t)
Actually, this simple approach
Has a name – it is called 
Euler Method
In general, you should NEVER 
ever use Euler Method.
People uses it only if 
they don’t know any better.

Cite as: Peter So, course materials for 2.003J / 1.053J Dynamics and Control I, Fall 2007. MIT OpenCourseWare 
(http://ocw.mit.edu), Massachusetts Institute of Technology. Downloaded on [DD Month YYYY]. 

The General Numerical Problem of Solving
Ordinary Differential Equations (ODEs)

n
)(

y

=

yf
(

(

n

(cid:34)−
,
)1

,

tyy
,'
),

Note that y does not have to be a scaler
but can be a vector as in the case for
multiple degrees of freedom systems

y

=

(

yy
,
1

2

,

(cid:34)

my

)

Cite as: Peter So, course materials for 2.003J / 1.053J Dynamics and Control I, Fall 2007. MIT OpenCourseWare 
(http://ocw.mit.edu), Massachusetts Institute of Technology. Downloaded on [DD Month YYYY]. 

Converting higher order differential equation to 
a system of first order differential equation
Consider probably the most important case:

y

''

=

f

thytgyt
')(
)(
)(
+
+

This can be readily converted to a system
of first order differential equations

y

2

=

y

'

y
1

=

y

y
1
y

2

'
=
'
=

y
2
f
yt
)(

+

ytg
)(
1

2

+

th
)(

Cite as: Peter So, course materials for 2.003J / 1.053J Dynamics and Control I, Fall 2007. MIT OpenCourseWare 
(http://ocw.mit.edu), Massachusetts Institute of Technology. Downloaded on [DD Month YYYY]. 

General equivalence between higher order differential
equation and a system of first order equations

n
)(

y

=

yf
(

(

n

)1
−

,

(cid:34)

,

tyy
,'
),

y
1
y

n

=
'
=

yy
;
2
yf
(

n

(cid:34)
y
y
;'
,
=
n
1
−
(cid:34)
tyy
),
,
,
,
2
1

(

n

−

)2

=

y

;

y

n

=

y

(

n

)1
−

The problem of solving all higher order ordinary 
differential equation is thus reduced to solving a system
of linear differential equations
Cite as: Peter So, course materials for 2.003J / 1.053J Dynamics and Control I, Fall 2007. MIT OpenCourseWare 
(http://ocw.mit.edu), Massachusetts Institute of Technology. Downloaded on [DD Month YYYY]. 

Solving linear first order differential equation 
by Euler Method
In general, the system of equations look like:
(cid:34)
(cid:34)
y
yyf
t
ty
i
n
,
,
1
)('
(
,
),
=
=
i
n
1

2

i

Euler Method says:

t
jy
y
(
)
=Δ
i
(cid:34)
i
n
1
=

i

((

j

t
)1
)
+Δ−

yf
(
i
1

((

j

t
)1
Δ−

),

(cid:34)

,

y

n

((

j

t
)1
Δ−

(),

j

t
t
)1
)
ΔΔ−

This equation can be solved if we have the 
initial conditions:
y
)0(
1

)0(

)0(

y
10

=

=

=

,

(cid:34)

,

y

y

,

y

2

y

20

n

n

0

Cite as: Peter So, course materials for 2.003J / 1.053J Dynamics and Control I, Fall 2007. MIT OpenCourseWare 
(http://ocw.mit.edu), Massachusetts Institute of Technology. Downloaded on [DD Month YYYY]. 

What is the accuracy of the Euler Method?

Euler method is equivalent to taking the
1st order Taylor series expansion for yi(t);
it is unsymmetric and uses only the derivative
information at the start of the time step

t
jy
y
(
)
=Δ
i
(cid:34)
i
n
1
=

i

((

j

t
)1
)
+Δ−

yf
(
i
1

((

j

t
)1
Δ−

),

(cid:34)

,

y

n

((

j

t
)1
Δ−

(),

j

tOt
t
)1
)
(
+ΔΔ−
Δ

2

)

Correction is only one less order then the correction term.
How do we get better accuracy?  We call the differences
between Reimann sum and Simpson Rule ….

Cite as: Peter So, course materials for 2.003J / 1.053J Dynamics and Control I, Fall 2007. MIT OpenCourseWare 
(http://ocw.mit.edu), Massachusetts Institute of Technology. Downloaded on [DD Month YYYY]. 

A working ODE solver – Runge-Kutta Method

Estimate where the mid-point for yi is first.  Then,
Evaluate the slope at the mid-point to estimate 
the next value of yi.

i

i

n

t
t
j
)1
)
ΔΔ−
k
t
)1
(),2/1
+Δ−
n

(cid:34)
t
j
y
t
)1
,
),
(),
((
)1
Δ−
Δ−
n
(cid:34)
t
k
y
j
)1
,2/1
((
,
)
+Δ−
1
j
t
k
)1
2
)
+Δ−

j
yf
k
(
((
1
=
i
i
1
yf
j
k
((
(
2
=
i
i
1
jy
t
y
((
)
(
=Δ
i
(cid:34)
n
i
1
=
Because of symmetry, this method is good to
O(Δt3)
This is called the 2nd order Runge-Kutta method.

j

−

)2/1

t
t
)
ΔΔ

Cite as: Peter So, course materials for 2.003J / 1.053J Dynamics and Control I, Fall 2007. MIT OpenCourseWare 
(http://ocw.mit.edu), Massachusetts Institute of Technology. Downloaded on [DD Month YYYY]. 

Schematically, the differences between 
Euler and 2nd order Runge-Kutta are fairly clear

Euler Method

2nd order 
Runge-Kutta

From Numerical Recipe in C
Cite as: Peter So, course materials for 2.003J / 1.053J Dynamics and Control I, Fall 2007. MIT OpenCourseWare 
(http://ocw.mit.edu), Massachusetts Institute of Technology. Downloaded on [DD Month YYYY]. 

Higher Order Runge-Kutta Method
Just like Simpson method can be extended to higher
order estimate, Runge-Kutta also has straightforward
Higher order analog.  The most commonly used
one is the 4th order Runge-Kutta method

i

t
t
)2/1
)
ΔΔ
−
j
t
t
)2/1
)
−
ΔΔ

(cid:34)
t
t
y
j
j
t
t
)1
,
),
)1
)
(),
((
)1
Δ−
Δ−
ΔΔ−
n
(cid:34)
t
k
y
k
j
t
j
)1
)1
,2/1
((
,
(),2/1
)
+Δ−
+Δ−
n
n
1
(cid:34)
t
k
y
k
j
t
)1
,2/2
)1
)
((
(),2/2
,
+Δ−
+Δ−
n
n
1
(cid:34)
t
t
t
y
j
k
j
t
k
3
)1
)
((
),3
)1
)
,
+Δ−
+Δ−
ΔΔ
n
n
1
j
t
k
k
k
k
3/2
)1
6/1
6/4
)
3/3
+
+
+
+
+Δ−
i
i
i
i

j
yf
k
1
(
((
=
i
i
1
yf
k
j
((
2
(
=
i
1
yf
j
k
3
((
(
=
i
i
1
yf
j
k
4
((
(
=
i
i
1
jy
t
y
((
(
)
=Δ
i
(cid:34)
n
i
1
=
Runge-Kutta methods are implemented in MATLAB
as ODE23 and ODE45 functions
Cite as: Peter So, course materials for 2.003J / 1.053J Dynamics and Control I, Fall 2007. MIT OpenCourseWare 
(http://ocw.mit.edu), Massachusetts Institute of Technology. Downloaded on [DD Month YYYY]. 

i

tO
(
Δ

5

)

Using MATLAB to solve a system of differential equations

Consider solving the following system of ODE:

Cite as: Peter So, course materials for 2.003J / 1.053J Dynamics and Control I, Fall 2007. MIT OpenCourseWare 
(http://ocw.mit.edu), Massachusetts Institute of Technology. Downloaded on [DD Month YYYY]. 

Using MATLAB to solve a system of differential equations
(1) First define the system of ODEs as a function:
function dy = system(t,y)
dy = zeros(3,1);    % a column vector
dy(1) = y(2) * y(3);
dy(2) = -y(1) * y(3);
dy(3) = -0.51 * y(1) * y(2);

(2) Call ODE45 or ODE23 using the function handle
[T,Y] = ode45(@system,[0 12],[0 1 1]);
(3) Plot result
plot(T,Y(:,1),'-',T,Y(:,2),'-.',T,Y(:,3),'.')

Cite as: Peter So, course materials for 2.003J / 1.053J Dynamics and Control I, Fall 2007. MIT OpenCourseWare 
(http://ocw.mit.edu), Massachusetts Institute of Technology. Downloaded on [DD Month YYYY]. 

How should we choose the time step for Rugge-Kutta?
Consider implementing 4th order RK with
taking a single step of 2 Δt (solution y1)
or two steps of Δt (solution y2)
y
xy
t
t
)2(
(
)2
5
φ
=Δ+
Δ+
+
1
xy
y
t
t
)2
(
(2
)
5
+
=Δ+
Δ+
φ

tO
(
Δ
tO
(
Δ

)
)

6

6

2
y

Where 

∝φ

x
)()5(
!5

from Taylor expansion

Cite as: Peter So, course materials for 2.003J / 1.053J Dynamics and Control I, Fall 2007. MIT OpenCourseWare 
(http://ocw.mit.edu), Massachusetts Institute of Technology. Downloaded on [DD Month YYYY]. 

Numerical error and step size choice
Numerical error associated with step doubling is:
y
y −
=δ
1
2
So if we evaluate 4th order RK at each point twice,
once by taking a full step and once by taking a half
step, we have an estimate of the error associated with
step size choice.
If we know δ can we choose step size?  Yes.
If we measure error δ0 associated with step size Δt0,
we can estimate Δt if the target error is δ:
2.0
⎛
δt
t
⎜⎜
Δ=Δ
0
δ
⎝
0

⎞
⎟⎟
⎠

Cite as: Peter So, course materials for 2.003J / 1.053J Dynamics and Control I, Fall 2007. MIT OpenCourseWare 
(http://ocw.mit.edu), Massachusetts Institute of Technology. Downloaded on [DD Month YYYY]. 

Accuracy control in MATLAB
How to control step size and accuracy of Runge-
Kutta.  MATLAB handles step size control for you 
mostly but sometimes you do need to set the desired 
accuracy (to make sure that step is small enough) 
so that the ODE45 or ODE23 outputs are stable 
and correct.
Use odeset:
>> options = odeset('RelTol',1e-4,'AbsTol',[1e-7 1e-7]);
RelTol is fractional tolerance (default: 1e-3)
AbsTol is absolute tolerance (default: 1e-6)

Both criteria must be met.
Cite as: Peter So, course materials for 2.003J / 1.053J Dynamics and Control I, Fall 2007. MIT OpenCourseWare 
(http://ocw.mit.edu), Massachusetts Institute of Technology. Downloaded on [DD Month YYYY]. 

Consider a simple case of a driven pendulum

g
+(cid:5)(cid:5)
θθ
l

=

F

cos( t
)
ω

The corresponding m-file:
function dy = driven_pend(t,y)
dy = zeros(2,1);    % a column vector
g=10;
l=10;
f=1.5;
w=2*pi*100;
dy(1) = y(2);
dy(2) = -g/l*y(1) + f*cos(w*t);

Cite as: Peter So, course materials for 2.003J / 1.053J Dynamics and Control I, Fall 2007. MIT OpenCourseWare 
(http://ocw.mit.edu), Massachusetts Institute of Technology. Downloaded on [DD Month YYYY]. 

Default Output of ODE23 for f=500
>>[T,Y] = ode45(@driven_pend,[0 30],[1 0]);
>> plot(T,Y(:,1),'-',T,Y(:,2),'-.')
>>options = odeset('RelTol',1e-5,'AbsTol',[1e-7 1e-7]);
>>[T,Y] = ode45(@driven_pend,[0 30],[1 0], options);
>> plot(T,Y(:,1),'-',T,Y(:,2),'-.')

1.5

1

0.5

0

-0.5

-1

-1.5

0

5

10

15

20

25

30

1.5

1

0.5

0

-0.5

-1

-1.5

0

5

10

15

20

25

30

Cite as: Peter So, course materials for 2.003J / 1.053J Dynamics and Control I, Fall 2007. MIT OpenCourseWare 
(http://ocw.mit.edu), Massachusetts Institute of Technology. Downloaded on [DD Month YYYY]. 

Artifacts in velocity profile without precision control

-1

-1.05

-1.1

-1.15

-1.2

-1.25

-1.3

-1.35

-1.4

19

20

21

22

23

24

25

26

27

28

29

-0.75

-0.8

-0.85

-0.9

-0.95

-1

-1.05

-1.1

-1.15

-1.2

-1.25
18

20

22

24

26

28

Cite as: Peter So, course materials for 2.003J / 1.053J Dynamics and Control I, Fall 2007. MIT OpenCourseWare 
(http://ocw.mit.edu), Massachusetts Institute of Technology. Downloaded on [DD Month YYYY]. 

