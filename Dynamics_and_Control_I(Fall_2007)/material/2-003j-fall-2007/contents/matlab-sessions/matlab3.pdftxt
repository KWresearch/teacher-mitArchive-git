MATLAB Programming II – Functions

Cite as: Peter So, course materials for 2.003J / 1.053J Dynamics and Control I, Fall 2007. MIT OpenCourseWare 
(http://ocw.mit.edu), Massachusetts Institute of Technology. Downloaded on [DD Month YYYY]. 

What are Functions?

Functions are reusable building blocks for
more complex programs

MATLAB support functions of different types but
two are particularly important:
Named functions defined via m-files
Anonymous function defined via function handles

Cite as: Peter So, course materials for 2.003J / 1.053J Dynamics and Control I, Fall 2007. MIT OpenCourseWare 
(http://ocw.mit.edu), Massachusetts Institute of Technology. Downloaded on [DD Month YYYY]. 

Defining a named function via m-file

Consider a very simple function

function c=add(a,b)
c=a+b;
This function is save as an m-file, add.m,
in the working directory

Calling this function from workspace:
add(2,3)

ans = 5
Cite as: Peter So, course materials for 2.003J / 1.053J Dynamics and Control I, Fall 2007. MIT OpenCourseWare 
(http://ocw.mit.edu), Massachusetts Institute of Technology. Downloaded on [DD Month YYYY]. 

General structure of a function
filename

keyword
output parameter 
array

input parameter 
list

function [m, n, o, ….] = name (a, b, c, ….)
expression(a,b,c,…);
expression(a,b,c,…);
…
m=expression(a, b, c, …);
…

output assignment 
statements

Cite as: Peter So, course materials for 2.003J / 1.053J Dynamics and Control I, Fall 2007. MIT OpenCourseWare 
(http://ocw.mit.edu), Massachusetts Institute of Technology. Downloaded on [DD Month YYYY]. 

A slightly more complex example
A basic statistics function that sums two input
Arrays and gets its mean, standard dev, and
number of elements:
function [avg, stdev, num] = sum_stat (X, Y)
Z=X+Y;
avg = mean(Z);
stdev = std(Z);
num = length(Z);

If we run:
>> sum_stat(1..3, 2..4)

ans = 5
Cite as: Peter So, course materials for 2.003J / 1.053J Dynamics and Control I, Fall 2007. MIT OpenCourseWare 
(http://ocw.mit.edu), Massachusetts Institute of Technology. Downloaded on [DD Month YYYY]. 

What happened?

Functions: Assigning output parameters

Ok, try this:
>> [avg stdev num]=sum_stat(1:3, 2:4)

avg =
5
stdev =
2
num =
3
If you don’t define output parameters, function just
returns the first one!  MATLAB automatically create
these variables as you run the function.
Cite as: Peter So, course materials for 2.003J / 1.053J Dynamics and Control I, Fall 2007. MIT OpenCourseWare 
(http://ocw.mit.edu), Massachusetts Institute of Technology. Downloaded on [DD Month YYYY]. 

Functions: significance of names of parameters
>> [a b c]=sum_stat(1:3, 2:4)

a =
5
b =
2

c =

3
The original output parameter names defined in
the function is of NO significance.  New variable
names are defined as the function is called!
The ORDER of the parameters is key!!!!

Cite as: Peter So, course materials for 2.003J / 1.053J Dynamics and Control I, Fall 2007. MIT OpenCourseWare 
(http://ocw.mit.edu), Massachusetts Institute of Technology. Downloaded on [DD Month YYYY]. 

Functions: Input parameters

Some input parameters can of course be variables

>> X=1:3;
>> Y=2:4;
>> [avg stdev num]=sum_stat(X,Y)

avg =
5
stdev =
2
num =
3

Cite as: Peter So, course materials for 2.003J / 1.053J Dynamics and Control I, Fall 2007. MIT OpenCourseWare 
(http://ocw.mit.edu), Massachusetts Institute of Technology. Downloaded on [DD Month YYYY]. 

Functions: Name of input parameter list
The names for the variables in a function’s input 
parameter list are also dummys
>> M=1:3;
>> N=2:4;
>> [avg stdev num]=sum_stat(M,N)

avg =
5
stdev =
2
num =
3
Cite as: Peter So, course materials for 2.003J / 1.053J Dynamics and Control I, Fall 2007. MIT OpenCourseWare 
(http://ocw.mit.edu), Massachusetts Institute of Technology. Downloaded on [DD Month YYYY]. 

What is scope?
What is scope?  Scope is the range of validity
function [a b]=testscope(c, d)
x=1;
c=c+x;
a=c;
d=d+x+1;
b=d;
If we run:
>> [a b]=testscope(1, 2)
a =
2
b =
4
Cite as: Peter So, course materials for 2.003J / 1.053J Dynamics and Control I, Fall 2007. MIT OpenCourseWare 
(http://ocw.mit.edu), Massachusetts Institute of Technology. Downloaded on [DD Month YYYY]. 

Scope of function & main window
What if we run:

>> x=10;
>> [a b]=testscope(1, 2)

a =
2
b =
4
Note that output for a, b is not 11 and 13 but 2 and 4.
That is because the variable, x, in the main window
which is equal to 10 is different from the x in the 
function which is 1.

Cite as: Peter So, course materials for 2.003J / 1.053J Dynamics and Control I, Fall 2007. MIT OpenCourseWare 
(http://ocw.mit.edu), Massachusetts Institute of Technology. Downloaded on [DD Month YYYY]. 

Scope Rule
(1) Variables defined locally in each 
section of the program are independent 
even if they have the same name!

(2) The variables in a functions input and
output parameter lists are considered to 
be local variables defined ONLY inside the
function.

(3) Values are “passed” into the variables in the 
input parameter list at the start of a function and
the values are passed from the parameters in the
output parameter list

Cite as: Peter So, course materials for 2.003J / 1.053J Dynamics and Control I, Fall 2007. MIT OpenCourseWare 
(http://ocw.mit.edu), Massachusetts Institute of Technology. Downloaded on [DD Month YYYY]. 

Understanding scope further

>> c=1;
>> d=2;
>> [a b]=testscope(c, d)

a =
2
b =
4
>> c
c =

1
>> d
d =
2

Note that c and d
inside the function
are changed but 
the c and d in the 
main program are
unaffected by the 
function’s operation.

Cite as: Peter So, course materials for 2.003J / 1.053J Dynamics and Control I, Fall 2007. MIT OpenCourseWare 
(http://ocw.mit.edu), Massachusetts Institute of Technology. Downloaded on [DD Month YYYY]. 

What if we want a function to change the value of 
its input parameters?

>> c=1;
>> d=1;
>> [c b]=testscope(c, d)

c =

2
b =
3
>> c
c =

2

To accomplish this,
all you have to do
is to put the same
variable in the 
input AND output 
parameter lists

Cite as: Peter So, course materials for 2.003J / 1.053J Dynamics and Control I, Fall 2007. MIT OpenCourseWare 
(http://ocw.mit.edu), Massachusetts Institute of Technology. Downloaded on [DD Month YYYY]. 

Anonymous Functions?
Function handle constructor
Name of function handle

Parameter list

>> cubeit = @(x) x*x*x

Function body

cubeit = 
@(x) x*x*x

>> cubeit(3)

ans =
27
Handles are special kind of variable that identify
the start of a chuck of code in memory
Cite as: Peter So, course materials for 2.003J / 1.053J Dynamics and Control I, Fall 2007. MIT OpenCourseWare 
(http://ocw.mit.edu), Massachusetts Institute of Technology. Downloaded on [DD Month YYYY]. 

 

More complex anonymous functions

>> sum_and_sqr = @(x,y) (x+y)*(x+y)

sum_and_sqr = 
@(x,y) (x+y)*(x+y)

>> sum_and_sqr(2,3)

ans =
25

Cite as: Peter So, course materials for 2.003J / 1.053J Dynamics and Control I, Fall 2007. MIT OpenCourseWare 
(http://ocw.mit.edu), Massachusetts Institute of Technology. Downloaded on [DD Month YYYY]. 

Communication with anonymous function
>> a = 3;
>> a_times_it = @(x) a*x;
>> a_times_it(2)

Note that:

ans =
6

>> a = 2;
>> a_times_it(2)

ans =
6

1. Anonymous function definition 
can see variables defined on the 
desktop

2. Once the value of the variable is 
captured in the function definition 
future changes of the variable 
are ignored 
3. Avoid using too much 
anonymous functions

Cite as: Peter So, course materials for 2.003J / 1.053J Dynamics and Control I, Fall 2007. MIT OpenCourseWare 
(http://ocw.mit.edu), Massachusetts Institute of Technology. Downloaded on [DD Month YYYY]. 

Why do I tell you about anonymous functions?

Consider the MATLAB function “quad” which does this:

quad(func, a, b)

y

b
∫=
a

dxxf
)(

What is func?  Func is a function handle that we 
have talked about.

We can create func by either through m-file function
or anonymous function

Cite as: Peter So, course materials for 2.003J / 1.053J Dynamics and Control I, Fall 2007. MIT OpenCourseWare 
(http://ocw.mit.edu), Massachusetts Institute of Technology. Downloaded on [DD Month YYYY]. 

Using function handle to pass functions I

Define m-file:

function y=fun1(x)
y=x.*x;
Now we are ready to use quad:

>> quad(@fun1, 0, 1)

ans =
0.3333
@ associate the name of a function to a function handle

Cite as: Peter So, course materials for 2.003J / 1.053J Dynamics and Control I, Fall 2007. MIT OpenCourseWare 
(http://ocw.mit.edu), Massachusetts Institute of Technology. Downloaded on [DD Month YYYY]. 

Using function handle to pass functions II

>> fun2 = @(x) x;
>> quad(fun2, 0, 1)

ans =

0.5000

This is a quicker way.  Note that fun2 is
already a function handle, i.e. no @ in quad

Cite as: Peter So, course materials for 2.003J / 1.053J Dynamics and Control I, Fall 2007. MIT OpenCourseWare 
(http://ocw.mit.edu), Massachusetts Institute of Technology. Downloaded on [DD Month YYYY]. 

What happen if 
we want to change the parameters of a function?

y

=

(

ax

+

dxb
)

1
∫
0
What happen if we want to change a & b at will
without defining a new function handle every time?
>> g = @(a,b) quad(@(x) a*x+b, 0, 1);
>> g(1, 0)
ans =
0.5000
>> g(0, 1)
ans =
1
Cite as: Peter So, course materials for 2.003J / 1.053J Dynamics and Control I, Fall 2007. MIT OpenCourseWare 
(http://ocw.mit.edu), Massachusetts Institute of Technology. Downloaded on [DD Month YYYY]. 

Sub-Functions
function y=subfunctions(x,n)
switch n
case 1
y=square(x);
case 2
y=cube(x);
otherwise
y=x;

end
end
function y=square(x)
y=x.*x;
end

function y=cube(x)
y=x.*x;
y=y.*x;
end

Note: 
1. The first function
is the main function
2. The scope of the
variables in the main
and subfunctions
are all local

Cite as: Peter So, course materials for 2.003J / 1.053J Dynamics and Control I, Fall 2007. MIT OpenCourseWare 
(http://ocw.mit.edu), Massachusetts Institute of Technology. Downloaded on [DD Month YYYY]. 

Global Variables
function y=subfunctions3(x,n)
>> global a;
switch n
>> a=1
case 1
a =
y=square(x);
1
otherwise
>> subfunctions3(3,1)
y=x;
ans =
9
>> a=2
a =
2
>> subfunctions3(3,1)
ans =
18

function y=square(x)
global a;
y=x.*x;
y=a*y;
end

end
end

Cite as: Peter So, course materials for 2.003J / 1.053J Dynamics and Control I, Fall 2007. MIT OpenCourseWare 
(http://ocw.mit.edu), Massachusetts Institute of Technology. Downloaded on [DD Month YYYY]. 

