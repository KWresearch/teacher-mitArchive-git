Massachusetts  Institute  of  Technology 
6.854J/18.415J: Advanced  Algorithms 
David  Karger 

Handout  10 
Wednesday,  October  5,  2005 

Problem   Set   4   Solutions  

Problem  1. 

(a)  False.  Consider  graph  with 
V  = {s, 1, 2, 3, t}, 

and


E  = {(s, 1), (1, 2), (1, 3), (2, t), (3, t)}.

The  capacities  are  u(s, 1)  =  1,  u(1, 2)  =  5,  u(1, 3)  =  6,  u(2, t) =  7,  u(3, t) = 8. 
There  are  at  least  2  possible  maximal  ﬂows:  1)  f (s, 1)  =  f (1, 2)  =  f (2, t) =  1 
and  0  in  the  rest;  2)  f (s, 1) = f (1, 3) = f (3, t) = 1 and  0 in  the  rest. 
(b)   False.  Consider  graph  with  V  =  {s, t}  and  E  =  {(t, s)},  the  edge  having  a 
capacity  of  1.  Then,  the  initial  graph  has  a  max  ﬂow  of  0,  while  the  modiﬁed 
graph  has  a  max  ﬂow  of  1. 
(c)   False.  Consider  graph with 

V  = {s, 1, 2, 3, t}, 

and


E  = {(s, 1), (1, 2), (1, 3), (2, t), (3, t)}.

The  capacities  are  u(s, 1)  =  3,  u(1, 2)  =  1,  u(1, 3)  =  1,  u(2, t) =  1,  u(3, t) = 1. 
For  this  graph  a min  cut  is S  = {s, 1}.  However,  if we  add  a  value  of  λ = 100  to 
the  capacity  of  each  edge,  then  the min  cut  becomes  S  = {s} 

Problem  2. 

Let G  be  the  graph  under  consideration. 

(a)   We  assume  that  the  array  creation  takes  constant  time.  There  are  n  insert,  m 
decrease-key and n delete-min operations.  The insert and decrease-key operations 
take O(1) time.  Delete-min  takes O(1 + d) time, where d  is the number  of empty 
buckets  skipped  during  the delete-min  operation.  The  bucket  number  of  the  last 
element  deleted  is D .  Thus  the  total  cost  of  delete-min  is  O(m + D). 
(b)   Given  the  shortest  path  P  from  s  to  v  of  length  dv ,  the  path  P  + vw  is  known 
to  have  length  dv  + lvw .  Therefore 
dw  ≤ dv  + lvw 
and  the  reduced  edge  length  lvw  is  non-negative. 

(1) 

2 

Handout  10:  Problem  Set  4  Solutions 

+ dvk−1 

(c)   For  any  path  P  = (sv2 , v2v3 , . . . , vk−1vk ),  the  total  reduced  edge  length  is 
= (lsv2  + ds  − dv2 ) + . . . + (l
− dvk )
ld  + . . . + ld 
vk−1 vk 
vk−1 vk 
sv2 
=  ds  + (lsv2  + . . . + lvk−1 vk  ) − dvk 
Therefore  all  paths  to  a  vertex  v  have  reduced  length  as  the  length  minus  (con-
stant)  dvk .  So  the  shortest  path  to  v  is  the same and  has length  dv  − dv  = 0. 
(d)   The  scaling  algorithm  works  as  follows.  We  initially  start  with  edge  lengths  0,

and distance  function d1(v ) = 0  for all v . In  step k , we shift a bit of the  length  in

each  edge,  and  compute  distances  dk+1   with  reduced  edge  lengths  based  on  dk .

0

= dk + dk+1   for  the reduced  costs  in  the next  step. 
We use distance  function dk+1  
After  (cid:2)log C (cid:3)  steps  the  exact  distance  will  be  computed.  We  will  now  prove  the 
0

correctness  of  this  algorithm  and  analyze  its  running  time. 
(cid:1)  = (V , E ) constructed  from the original graph G = (V , E ) with 
Consider  graph G
(cid:1)  =  (cid:4)lvw /2(cid:5).  In  a  scaling  step,  the  distances  in  G
(cid:1)  are  used  to 
edge  length  l
vw 
compute  reduced  edge  length  in G.  Notice  that  part  (b)  and  (c)  of  this  problem 
work for any distance function satisfying (1).  So if we deﬁne the distance function 
(cid:1)
(cid:1)
as distance  in G
, we  still  have  the  same  shortest  paths  in G  and G
. This  proves 
the  correctness  of  the  algorithm. 
(cid:1) .  This means that in the 
The  length of shortest paths is 0 in the reduced graph G
original graph G the  length of the shortest path  is at most n.  So Dial’s algorithm 
takes  O(m + n) =  O(m)  time.  The  total  time  complexity  for  (cid:2)log C (cid:3)  steps  is 
therefore  O(m log C ). 
(e)   If a base b representation  is used,  there are (cid:2)logb C (cid:3)  scaling steps.  The maximum

distance  D  in  each  shortest  path  computation  is  bounded  tightly  by  n(b − 1).

Thus  the  time  complexity  of  our  scaling  algorithm  is  O((m + n(b − 1)) · logb C ).

If  we  set  b = 2 + m/n  we  achieve  O(m log2+m/n C )  running  time.


(a)  We  give  an  algorithm  to  decide  if  all  people  can  be moved  out  in 
Problem  3. 
t steps.  Now, we can  increment  t to ﬁnd the shortest time  in which all the people 
can move  out. 
The  algorithm  is  as  follows:  given  G,  construct  Gt  as  follows.  For  each  v  ∈  V , 
make  t  copies  of  v :  v1  . . . vt .  Construct  an  edge  from  vi  to  vi+1   at  time  t  with 
inﬁnite  capacity  (people  can  just  stay  in  rooms  at  a  time  step).  Construct  an 
edge  from  vi  to  wi+1   with  capacity  C  if  there  exists  an  edge  from  v  to  w  with 
capacity  C  in  G. 
To  test  if  all  the  people  can  get  from  the  source  to  the  sink  in  t  timesteps,  we 
check if the max ﬂow in Gt  is equal to the number of people initially at the source. 
If  so,  we  can move  all  the  people  across  this  graph  in  t  timesteps. 
Note  that  the  size  of  the  graph  is  polynomially  large,  so  the  algorithm  runs  in 
polynomial  time. 

Handout  10:  Problem  Set  4  Solutions 

3 

(b)   We  can  use  the  same  overall  idea:  construct  a  graph  Gt ,  and  compute  its  max

ﬂow.  If its max ﬂow is equal to the total number of people we are trying to move,

then  t  time  units  suﬃce  to move  all  the  people  across  the  graph.


The  construction  of  Gt  is  the  same,  except  for  the  following.  We  create  a  sink 
s  and  source  t. Let  S  be  the  start  vertices,  and  let  T  be  the  sink  vertices.  We 
create a  link  from s to each x1 , for each x ∈ S  with capacity equal  to the number 
of  people  starting  at  x.  Similarly,  we  create  a  link  from  each  xt  (for  each  x ∈ T ) 
to  t  with  inﬁnite  capacities. 

(c)	 Again,  the  overall  idea  is  the  same.  But  when  we  construct  Gt  now,  we  create

edges  between  the  layers  in  a diﬀerent way:  construct  the  edge  linking  vi  to wi+δ

with  capacity  C  if  there  is  an  edge  between  v  and w  with  transit  time  δ .


Problem  4. 
1.  As  suggested  by  the  hint,  we  ﬁrst  construct  some  feasible  ﬂow  on  the 
graph G,  and  then  construct  a minimum  ﬂow  using  the  feasible  ﬂow. 

We  ﬁnd  a  feasible  as  follows.  Note  that  just  ﬁnding  a max  ﬂow  from  s  to  t  is  not  suﬃ-
cient  as  that  does  not  guarantee  that  the  ﬂow  ﬂows  along  the  correct  edges  (to  satisfy 
(cid:1)  as  follows. 
the minimums).  Instead,  we  modify  the  original  graph G  to  get  a  graph G
(cid:1)  =  uij  − lij .  Then  we  drop  the 
For  each  edge  (i, j ) in  G,  we  change  the  capacity  uij 
minimum  capacities  on  all  edges.  Thus,  in  essence,  we  are  forcing  a  ﬂow  of  lij  across 
each  of  the  edges,  but we  have  a  surplus  and  deﬁcit  of  lij  at  i and  j  respectively.  What 
ways  could  we  get  rid  of  this  deﬁcit?  Well,  we  could  ﬁnd  a  path  from  a  surplus  to  a 
(cid:1) .  Or,  we  could  ﬁnd  a  path  from  a  surplus  node  j  to  the  sink  t  and 
deﬁcit  node  in  G
the  source  s  to  the  surplus  node  i.  We want  to  solve  this problem  using max  ﬂows.  So, 
(cid:1) 
(cid:1)  a  new  source  s and  a  new  sink  t
(cid:1)
(cid:1)
(cid:1)
we  add  to  G
. We  add  edges  (i, t
) and  (s
, j ) with 
(cid:1) 
(cid:1) 
1  .  Finally,  we  add  an  edge  (t, s)  (between  the  original  source 
it(cid:1)  = us(cid:1)j  =  lij 
capacities  u
(cid:1)  = ∞.  If  we  start  with  the  graph: 
and  sink)  with  unbounded  capacity  u
ts 

s 

i 

lij ;  uij 

j 

t 

We  would  end  with  the  graph 

1We  may add  more  than  one  edge  (i,   t� )   for   example,   or   we   can   add a   single   edge   with the   sums   of   the  
�
�
�	
� 
relevant   capacities. More   formally,   we   could   say   that   u = 
j  lij  and   us� j  = 
i  lij .
it� 

4 

Handout  10:  Problem  Set  4  Solutions 

s 

i 

lij 

t 

s' 

-uij 

l

ij 

lij 

j 

t' 

∞ 

(cid:1) .  We  saturate  all  the  edges  (s
(cid:1)  to  t
(cid:1)
Then  all we  need  to do  is  ﬁnd  a max  ﬂow  from  s
, j ) 
if  and  only  if  for  every  node  j  with  a  surplus,  there  are  path(s)  to  t  and/or  some  other 
deﬁcit node(s) with enough capacity.  Thus, we just check, are all these edges saturated? 
(cid:1) .  If  yes,  then  there  is  a  feasible  ﬂow, 
If  no,  there  is  no  feasible  ﬂow  on  the  graph  G
AND  we  know  what  it  is.  All  we  need  to  do  is  drop  all  the  extra  edges  we  added, 
(cid:1)  we  found  on G
(cid:1)
look at  the  ﬂow  f
,  and  add  the  original  edge minimums.  For example, 
(cid:1)  across  an  edge  (i, j ),  then  the  ﬂow  in  the  original  graph  is  just 
if  we  ﬁnd  ﬂow  of  f
ij 
(cid:1)  to t
(cid:1) 
(cid:1)  in  the graph 
ij + lij .  Another way of thinking  about this  is that going  from s
f  = f
(cid:1)  is  equivalent  to  going  from  s  to  t  in  the  original  graph,  because  we  move  the  ﬂow 
G
(cid:1)
(cid:1)
, j ) and  (i, t
) to  the  edge  (i, j ). 
from  (s
Next,  we  convert  the  feasbile  ﬂow  into  a  minimum  ﬂow.  Let  our  feasible  ﬂow  on  any 
edge  from  i  to  j  be  fij  (in  gross  ﬂow  formulation).  We  construct  a  “reverse  residual 
graph”  by  taking  every  edge  from  i  to  j  in  the  original  graph  G,  and  replacing  it  with 
:  one  edge  from  i  to  j  with  capacity  uij  − fij ,  and  one  edge  from  j  to 
(cid:1)
two  edges  in  G
i  with  capacity  fij  − lij .  We  might  get  two  edges  by  this  construction  going  from  i  to 
j ,  so  we  combine  the  edges  by  adding  the  capacities.  So  the  reverse  residual  graph  has 
an  edge  from  i  to  j  with  capacity  uij  − fij  + fj i  − lj i . 
(cid:1)
Then  we  compute  a  normal  maximum  ﬂow  gij  from  t  to  s  in  G
,  and  add  the  result 
(cid:1) .  When  we  add  the  ﬂow  back,  we  decompose 
back  into  the  ﬂow  in  G  to  get  a  ﬂow  f
g  into  gij  =  gij  + hij , where  0  ≤  gij 
≤  uij  − fij  and  0  ≤  hij  ≤  fj i  − lj i . We  add  the 
(cid:1) 
(cid:1) 
(cid:1)  in the  forward direction and subtracting out hj i  in  the backward 
ﬂow back by adding g
direction.  So  the  new  ﬂow  from  i  to  j  in  our  original  graph G  is 
− hj i . 

(cid:1) 
(cid:1) 
fij  = fij  + gij 
The  inequality  relationships  we  have  are 
lij  ≤ fij  ≤ uij 
0 ≤ gij 
≤ uij  − fij 
(cid:1) 
0 ≤ hij  ≤ fj i  − lj i 

Handout  10:  Problem  Set  4  Solutions 

5 

≤  uij  and  using  the  fact  that  hj i  ≥  0  tells  us  that 
(cid:1) 
Adding  fij  to  both  sides  of  gij 
≤  uij .  Adding  fij  to  the  inequality  −hj i  ≥  lij  − fij  and  using  the  fact  that  gij  ≥  0 
(cid:1) 
f
≥ lij .  Therefore,  when  we  add  our  ﬂow  back,  we  still  get  a  feasible  ﬂow. 
ij 
(cid:1) 
gives  us  f
ij 
(cid:1)  we  compute  must  be  a  minimum  ﬂow.  Otherwise,  we  could  reduce  the 
This  ﬂow  f
ﬂow  further  by  ﬁnding  some  path  from  t  to  s  in  G.  This  corresponds  to  ﬁnding  some 
(cid:1)  from  t  to  s,  suggesting  that  the  ﬂow  we  computed  in  wasn’t  a 
augmenting  path  in  G
(cid:1) .  This  is  a  contradiction,  so  f
(cid:1)  must  be  a  minimum  ﬂow. 
maximum  ﬂow  for G
2.	 Claim  0.1  Let   the   lower   bound   on   the   cut   capacity   of   an   s-t cut  S  be   deﬁned as   L(S ) = 
�
�
(i,j )∈S×T  lij  − 
Then   the   minimum   value   of   al l   feasible   ﬂows   from   node  
(i,j )∈T ×S  uij . 
s  to  t  equals  the  maxS  L(S ).

Proof.   We  show  that  for  any  ﬂow,  f >= maxS  L(S ) and  that  min ﬂow  f  (cid:9)

> 
maxS  L(S ),  which  implies  that  minimum  value  of  all  feasible  ﬂows  from  s  to  t  equals 
maxS  L(S ). 
Suppose  we  have  a  ﬂow  f .  Then  we  want  to  show  that  f  ≥  max L(S ).  Instead, 
we  show  that  f  ≥  L(S )  for  any  S . Consider  any  cut  S .  Since  the  ﬂow  is  fea-
sible,  we  satisfy  all  the  minimum  capacities.  So,  the  ﬂow  from  S  to  T  is  at  least 
�
(i,j )∈S×T  lij .  Since  the  ﬂow  is  feasible,  the  most  that  can  be  ﬂowing  from  T  to  S  is 
�
(i,j )∈T ×S  uij .  Thus,  the  net  ﬂow  across  the  cut 
bounded  by  the  maximum  capacities 
�
�
is ≥ 
(i,j )∈S×T  lij  − 
(i,j )∈T ×S  uij .  Therefore  f  ≥ L(S ). 
Suppose  that  we  have  a  min  ﬂow  f .  Assume  for  the  sake  of  contradiction  that 
�
�
(i,j )∈S×T  lij  − 
(i,j )∈T ×S  uij  implies 
f > max L(S ).  Then  for  all  cuts  f > L(S ).  f > 
that  either  we  are  sending  more  ﬂow  than  the  minimum  from  S  to  T , or  we  are  not 
sending  the  maximum  amount  back  from  T  to  S .  Consider  the  ﬁrst  case.  Then  our 
(cid:1)  from  part  (a)  has  extra  capacity  available  from  T  to  S  on
modiﬁed  residual  graph  G
f 
the  residual  (reverse)  edges.  In  the  second  case, we  also have  capacity  available  from T 
to  S .  Since  there  is  capacity  available  across  ALL  CUTS  going  from  T  to  S , there  is 
(cid:1)  from  t  to  s, 2  and  we  don’t  have  a min  ﬂow. 
an  augmenting  path  in G
f 

3.	 For  lecture  i,  we  create  two  vertices  in  our  graph:  Ai  to  represent  the  start  of  the  lec-
ture  and  Bi  to  represent  the  end.  We  draw  and  edge  (Ai , Bi )  for  every  lecture  i, with 
a  minimum  ﬂow  l(Ai , Bi ) = 1 and  a max  ﬂow  f (Ai , Bi ) =  ∞.  We create a source  s 
and  a  sink  t.  We create edges  (s, Ai )  from  the  source  to  the  start  of  every  class,  with 
unconstrained  capacities  l(s, Ai ) = 0  and  f (s, Ai) = ∞.  Similarly,  we  add  edges  (Bi , t) 
from  the  end  of  every  lecture  to  the  sink,  with  unconstrained  capacities  l(Bi , t) = 0 
and  f (Bi , t) = ∞.  Finally,  we  introduce  edges  from  the  end  of  lecture  i  to  the  start  of 
lecture  j  if  it  is possible  to  commute  from  lecture  i  to  lecture  j . That  is,  (Bi , Aj ) exists 
if  bi  + rij  ≤ aj .  Again,  these  edges  have  unconstrained  capacity.  The  graph  looks  like: 

2The   max-ﬂow   min-cut   theorem   tells   us   that   |f | (cid:9)=  u(S )   for   any   S  implies   that   there   is   an   augmenting  
path  in  the  residual  graph. 

6 

Handout  10:  Problem  Set  4  Solutions 

Now we just solve for the min ﬂow.  We claim that the min ﬂow is the minimum number 
of  students  necessary  to  attend  all  the  lectures.  Basically,  each  unit  of  ﬂow  represents 
a  student.  We  argue  correctness  by  showing  that  our  graph  has  the  same  constraints 
as  the  students.  In  particular,  a  student  can  only  attend  two  lectures  i  and  j  if  the 
commute  time  allows  it.  Similarly,  we  only  have  an  edge  in  the  graph  allowing  ﬂow 
between  lectures  i  and  j  if  the  commute  times  allow  it.  A  student  can  choose  any 
lecture  to  be  the  ﬁrst  one  he  goes  to  (modeled  by  edges  from  s  to  all  lecture  starts), 
and  he  can  choose  any  lecture  to  be  his  last  (modeled  by  edges  from  lecture  ends  to 
t).  Finally,  the  only  other  constraint  we  have  is  that  at  least  one  student  must  be  in 
attendance at each lecture.  By creating two vertices for each lecture and having an edge 
with  min  capacity  of  1  between  lecture  start  and  end,  we  guarantee  at  least  one  unit 
of  ﬂow  across  the  lecture—that  is,  we  guarantee  that  at  least  one  student  sits  through 
the  entire  lecture. 

