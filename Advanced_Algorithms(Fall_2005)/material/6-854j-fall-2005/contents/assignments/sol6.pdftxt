Massachusetts  Institute  of  Technology 
6.854J/18.415J: Advanced  Algorithms 
David  Karger 

Handout  14 
Wednesday,  Obtober  19,  2005 

Problem   Set   6   Solutions  

Problem  1. 
(a)   We  will  reduce  the  problem  to  a  min-cost  max  ﬂow  in  a  negligibly  larger  network.  In 
the  beginning  we  determine  the  value  of  a maximum  ﬂow  in  an  original  network G. Denote 
this  value  by  η . 
�
Let  s  and  t  be,  respectively,  a  source  and  a  sink  in  G.  We create a new  node  s
, which  is 
�  to  s  of  capacity  η , and 
a  new  source,  and  add  two  directed  arcs  of  cost  0  each,  one  from  s
the  other  from  s  to  t  of  capacity  10% · η .  The  ﬁrst  edge  bounds  the  value  of  a  ﬂow  in  the 
�
,  and  the  second  allows  up  to  10%  of  a  ﬂow  to  be  sent  at  no  cost  right 
modiﬁed  network  G
to  the  sink. 
�
We  run  any  min-cost  ﬂow  algorithm  on  G
,  and  cutting  a  resulting  ﬂow  function  to  the  old 
network  G,  we  achieve  a  ﬂow  in  G  of  the  required  properties.  Clearly,  the  value  of  the  ﬂow 
is greater  than or equal  to 90% · η , and each value of ﬂow  from 90% · η  to 100% · η  is possible. 
The  running  time  of  a  min-cost  ﬂow  algorithm  dominates  the  running  time  of  the  whole 
algorithm,  so  the asymptotic  complexity  of  the whole  algorithm  equals  the  asymptotic  com-
� . 
plexity  of  the min-cost  ﬂow  algorithm  on  G

(b)   A  slight  modiﬁcation  of  the  solution  to  part  (a)  works.  This  time,  the  additional  arc 
from  s  to  t  has  capacity  ∞  and  cost  K .  The  ﬂow  that  is  not  sent  through  G  must  be  sent 
�
,  and  therefore,  costs  K  times  its  value. 
along  the  additional  arc  in G

Problem  2. 
(a)   All  reduced  costs  of  arcs  in  a  residual  network  are  nonnegative,  and  if  we  modify  the 
cost  of  an  arc  (v , w)  by  one,  at  most  one  of  arcs,  (v , w) or  (w , v ),  will  have  a  negative  cost 
of  −1  in  the  residual  network.  Assume  w.l.o.g.  that  an  arc  (v , w)  of  a  capacity  u  in  the 
residual  network  has  cost  −1.  Since  all  other  arcs  have  nonnegative  costs,  if  there  is  a  cycle 
of negative  cost,  it  goes  through  this  arc and  all  its  other  arcs  have  cost  0.  Therefore,  in  the 
residual  network,  we  try  to  push  as much  ﬂow  as  we  can,  but  no more  than  u  units,  from  v 
to  w  over  arcs  of  cost  0,  and  we  send  the  same  amount  of  ﬂow  from  v  to  w .  Assuming  we 
get  a  ﬂow  of  value  f ,  then  the  cost  of  the  total  ﬂow  decreases  by −uf . 
If  arc  (v , w)  becomes  saturated,  there  is  no  arc  of  negative  cost  in  the  modiﬁed  residual 
network,  and  we  are  done.  Otherwise,  we  increase  by  1  the  potential  of  each  vertex  x  from 
which  there  is  a path  along  arcs  of  cost  0  to  v  in  the  new  residual  network.  The  potential  of 
w  will  not  increase,  because  this  would  mean  that  the  ﬂow  from  w  to  v  over  arcs  of  cost  0 

2 

Handout  14:  Problem  Set  6  Solutions 

has not been maximal,  and this will make  the reduced  cost of the arc from v  to w  increase to 
0.  Only  the  reduced  cost  of an  arc  incoming  to  a  vertex whose  potential have  increased may 
decrease,  and  this  will  happen  only  if  the  arc  comes  from  the  vertex  whose  potential  have 
not  increased.  In  such  case  the  reduced  cost  of  the  arc was  positive  before  the modiﬁcation, 
and  if  decreases  by  1  it  stays  nonnegative. 
We can modify the potential  function,  to get a  feasible potential,  so the cost of the ﬂow after 
the modiﬁcation  is  for  sure  optimal. 

(b)   We  start  with  some  maximum  ﬂow,  zero  costs,  and  a  potential  function  equal  to  0  for 
each  vertex.  There  are  O(log C )  turns,  in  each  we  shift  in  consecutive  bits  of  costs.  At  the 
beginning  of  a  turn  we  double  costs  of  each  arc,  and  potential  of  each  vertex.  It  does  not 
aﬀect  the  optimality  of  a  current  ﬂow,  and  both  the  potential  function  and  reduced  costs 
modiﬁed  in  this  way  keep  their  properties.  Next,  for  each  arc  (p, q ) we  add  the  next  bit  of 
cost  cpq   of  (p, q ),  if  it  is  set.  This  increases  or decreases  the  cost  of arc  (p, q ) by  1, depending 
on  the  sign  of  cpq .  If  there  appears  an  arc  of  reduced  cost  −1  in  the  residual  network,  we 
call  the  algorithm  in  part  (a)  to  repair  the  current  ﬂow. 
The  total  number  of  calls  to  the  algorithm  in  part  (a)  is  upper-bounded  by  O(m log C ). 

Problem  3. 
Focus  on  a  single  inequality 

a1x1  + a2x2  + · · · + anxn  ≥ b, 

describing  a half-space S .  We  can assume  that  at  least  one  ai  is non-zero.  A ball  of  radius  r 
ﬁts  inside  the  half-space  if  and  only  if  its  center  belongs  to  the  half-space,  and  is  at distance 
at  least  r  from  the  boundary  hyperplane  P  described  by  the  equation 
a1x1  + a2x2  + · · · + anxn  = b. 

The vector (cid:2)v = [a1 , a2 , . . . , an ]  is perpendicular  to hyperplane P , and oriented  into the  inside 
�  which  is 
of  S .  Centers  of  balls  of  radius  r  that  ﬁt  inside  S  are  points  of  the  halfspace  S
the  translation  of  P  by  r  into  the  direction  pointed  by  (cid:2)v . Let  (cid:2)w  = [b1 , b2 , . . . , bn ] be  the 
�  is  the  translation  of  S  by  r (cid:2)w, and 
normalized  vector  of  v .  S
a1 (x1  − rb1 ) + a2 (x2  − rb2 ) + · · · + an (xn  − rbn ) ≥ b 
� .  The  equation  is  a  linear  equation  in  x1 ,  x2 ,  . . . ,  xn , and  r . 
is  an  equation  that  describes  S
Come  back  to  the  problem  that  we  need  to  solve,  introduce  an  additional  variable  r , and 
modify  all  equations  in  the  way  that  we  have  just  presented.  We  achieve  a  linear  program 
of  n + 1  variables,  and maximizing  value  of  r , we  ﬁnd  the  center  (x1 , x2 , . . . , xn ) of a ball  of 
the  greatest  radius. 

Handout  14:  Problem  Set  6  Solutions 

3 

Problem  4. 
(a)   We  create  the  following ﬂow  network.  The  set  of  vertices  consists  of  a  source  s, a sink  t, 
a  vertex  sg  for  each  graduate  student  g ,  and  a  vertex  oi  for  each  oﬃce  i.  We  add  a  directed 
arc of unit capacity and cost 0 from s to each sg .  For each oﬃce i we add a directed arc from 
i  to  t  of  cost  0  and  capacity  ni .  These  arcs  designate  that  a  student  wants  to  be  assigned 
o
to  one  desk,  and  bound  the  number  of  students  in  an  oﬃce.  Now,  for  each  student  g  and 
each  oﬃce  i  we  create  an  arc  from  sg  to  oi  of  capacity  1  and  cost  −pig—the  arc  describes 
that  g  wants  to  pay  pig  for  assignment  to  i. 
For  each  assignment  of  students  to  desks  there  is  a  corresponding  ﬂow.  A  solution  to  the 
problem does not exist  if the value of a maximum ﬂow in the network is less than the number 
of students.  Conversely,  if the value of a maximum ﬂow equals the number of students,  there 
is  an  integral  ﬂow  (see  part  (b)),  and  a  ﬂow  of  unit  value  along  some  arc  from  sg  to  oi 
says  that  student  g  is  assigned  to  oﬃce  i.  Minimizing  the  value  of  the  maximum  ﬂow,  we 
maximize the amount of money that we get, and see part (b) that the minimum  is achievable 
by  some  integral  ﬂow. 

(b)   Since  the  capacities  of  all  the  arcs  are  integral,  using  arbitrary  algorithm  presented  in 
class  we  get  an  integral  ﬂow,  in  which  students  are  assigned  a  single  desk,  and  they  do  not 
have  to  share  it. 

(c)   We  create  a  nonnegative  variable  xig  for  each  oﬃce  i  and  each  student  g . Next,  for 
� 
each  oﬃce  i  we  add  a  constraint 
xig  ≤ ni , 

and  for  each  student  g 

Maximizing  the  value  of 

g 
� 
xig  = 1. 

i 
� 
� 
pig xig , 

g 
i 
we  achieve  a  linear  program  that  expresses  the  problem  of  ﬁnding  a  ﬂow  of  the  minimum 
cost  and  of  the  value  equal  to  the  number  of  students  in  part  (a),  where  xig  represents  the 
value  of  ﬂow  from  sg  to  oi . 

Problem  5. 
(a)   We  can  think  of  our  situation  almost  as  of  a  ﬂow,  where  nodes  are  currencies,  and  arcs 
are  pending  orders  going  from  a  currency  a  client  wants  to  take  to  a  currency  they  want  to 
give  us  instead.  The  only  diﬀerence  from  the  standard  ﬂow  problem  is  that  the  value  of  a 
ﬂow  entering  an  arc  not  necessarily  equals  the  value  of  the  same  ﬂow  leaving  the  arc—it  is 
multiplied  by  ri  for  an  order  of  a  client  i. 

4 

Handout  14:  Problem  Set  6  Solutions 

Let  us  express  this  situation  as  a  linear  program.  We  create  a  variable  xi  for  each  order  i. 
The  variable  describes  the  amount  that  is  being  converted,  or  the  value  of  ﬂow  entering  an 
arc  corresponding  to  this  order.  In  the  beginning  we  bound  a  ﬂow  along  this  arc: 
0 ≤ xi  ≤ ui . 
Next,  we  bound  amounts  that  we  can  spend—ﬁrst  the  amount  of  dollars: 
� 
� 
xi  ≤ 
rixi  + D , 

ai=$  

bi=$  

and  then  the  amount  of  every  other  currency  c: 
� 
� 
xi  ≤ 
rixi . 

ai=c

bi=c 

We maximize  the  amount  of  yens  that  we  get,  that  is  the  value  of  sum 
� 
� 
rixi  − 
ai=�

xi . 

 

bi=�

 

Now  we  will  discuss  features  of  solutions  to  this  linear  program.  First  of  all,  it  solves  a 
problem  under  the  assumption  that  we  can  exchange  money  with  a  client  arbitrary  number 
of  times  (even  ℵ0  times).  We  can  decompose  a  ﬂow  it  describes  into  a  set  of  (at  most  m 
where m is the number of orders) simple paths and paths ending with an inﬁnite cycle (those 
cycles  resemble  black  holes,  since  money  get  in,  circulate,  and  never  get  out).  Furthermore, 
all  the  paths  start  at  dollars.  Why  this  is  true?  This  can  be  proven  by  induction.  Assume 
that we want to decompose a ﬂow containing non-zero ﬂow along m arcs.  We start at dollars, 
and  randomly  traverse  a  network  along  arcs  over  which  ﬂow  is  non-zero.  Eventually,  we  get 
either  to  a  node  from  which  there  is  no  way  out,  or  to  a  node  which  is  on  some  cycle.  In 
the  latter  case we  loop  on  this  cycle,  and  the  value  of ﬂow  on  each  arc  of  the  cycle  decreases 
by  some  ﬁxed  factor  less  then  1  in  each  visit,  and  the  total  value  of  ﬂow  over  each  arc  on 
the  cycle  is  a  limit  of  some  geometric  sequence.  In  both  cases,  when  we  ﬁnish  in  a  cycle  or 
in  some  vertex,  we  can  set  the  initial  amount  of  dollars  so  the  ﬂow  over  our  path  equals  the 
ﬂow  over  some  arc  e,  and  if  we  subtract  ﬂow  over  our  path  from  the  ﬂow  in  the  network, 
e  will  “disappear”,  and  there  will  be  at  most  m − 1  arcs  of  non-zero  ﬂow.  Moreover,  there 
� 
are  is  no  ﬂow  that  is  separate  from  the  source,  consisting  simply  of  cycles,  this would  violet 
either  the assumption  that 
ri  < 1  for cycles,  or  the  constraint  that we  cannot  spend more 
than  we  get  in  some  currency. 

(b)   Note that  it does not pay  to have  cycles  in a ﬂow.  They  constitute  just mentioned  black 
holes,  that  simply  consume  our money.  Actually,  we  can  get  rid  of  cycles  in  the  ﬂow.  It will 
be  shown  in  part  (c)  how  to  do  it.  Suppose  then  that  there  are  no  cycles  in  the  ﬂow.  If 
there  are  no  cycles,  then  there  is  an  ordering  of  edges,  and we  can  respond  to  each  pending 

Handout  14:  Problem  Set  6  Solutions 

5 

order  at  most  once,  never  having  to  borrow  money.  This  can  be  done  by  consideration  of 
currencies  in  some  topological  order  determined  by  the  ﬂow. 

(c)   We  will  get  rid  of  inﬁnite  paths  and  ﬁnite  paths  that  do  not  end  at  yens  (these  money 
are  “lost”),  and  possibly  ﬁnd  a  ﬂow  that  consumes  even  less  dollars. 
First, we  need  to  determine  the maximum  amount C  of  yens  that we  can  get.  Then we  add 
additional  constraint  that  an  amount  we  get  is  optimal: 
� 
� 
rixi  − 
ai=�

xi  = C, 

 

=�

 

bi

and minimize  the  amount  of  dollars  that  is  spent: 
xi  − � 
�

rixi . 
b =$i

ai=$  

In  a  decomposition  of  a  resulting  ﬂow  there  will  be  no  ﬁnite  paths  ending  in  a  currency 
diﬀerent  than yens,  and  there will  be  no paths  ending with  cycles,  since  getting  rid  of  them, 
we  would  get  a  better  solution  to  our  linear  optimization  program,  spending  less  dollars. 
This  implies  as  well  that  the  modiﬁed  linear  program  produces  a  solution  in  which  we  end 
day  only  with  dollars  and  yens,  and  the  amount  of  yens  is  optimal. 

