Massachusetts  Institute  of  Technology 
6.854J/18.415J:  Advanced  Algorithms  
David   Karger 

Handout  7 
Wednesday,   September  28,  2005 

Problem  Set  4 

Due:  Friday,  October   7  2005. 

Notice  that  one  problem   is  marked  noncollaborative.  As  you  might   expect,  this  prob­
lem  should  be  done   without  any  collaboration. 

NONCOLLABORATIVE  Problem  1.  Which  of  the  following  statements  about  ﬂows 
are  true   and  which  are  false?  Justify  your  answer  with   a  (short)   proof  or   counterexample. 

(a)  If  all  directed  edges  in  a   network  have  distinct  capacities,  then  there  is   a   unique

maximum  ﬂow. 

(b) 	 If  we   replace  each  directed  edge  in  a   network  with  two  directed  edges   in  opposite 

directions  with  the   same   capacity  and   connecting  the  same  vertices,  then  the 

value   of  the  maximum  ﬂow   remains  unchanged.

(c)  If  we  add  the  same  positive   number  λ  to  the  capacity  of  every  directed   edge,  then 

the   minimum  cut  (but  not  its  value)   remains  unchanged.


Problem  2. 
In  this  problem   we  develop  a  scaling   algorithm  for   shortest  paths  that   achieves 
running  time  O(m  log  C )  with  no  data  structure  more  complicated  than   an  array.  Recall  
that  when   we  discussed   shortest  paths  with   positive  integer  edge  lengths,  we  showed  how  
Dial’s  algorithm  uses  a  single  array  of   buckets  to  ﬁnd  shortest   paths  in  O(m   +  nC )  time  for 
maximum  edge  length  C . 

Consider  a  solution  to  a   shortest  path   problem  with  edge  lengths  lvw  from  v  to  w  in   which 
the   (shortest  path)  distance  of  vertex  w  from  the  source  s  is   dv .  Deﬁne   the  reduced  edge 
vw  by  the  rule  ld  =  lvw  +  dv  − dw .
lengths  ld 
vw 

(a)  Argue  that  in  fact  the  running  time  of  Dial’s  algorithm  is  O(m   +  D),   where  D

is  the  maximum  distance,   and  that   the  algorithm  still  works   if  some  edges  have

length  0. 


(b)  Show  that  the  reduced  edge   lengths  deﬁned  above  are  all  nonnegative  integers. 

(c)  Show  that  the  shortest  paths   under   the  reduced   length  function  are  the  same   as 

those  under  the  original  length   function.  What  is  the  length  of  shortest   paths 

under  ld?

(d)	 Devise  a  scaling   algorithm   for   shortest   paths.  Use  the  reduced  edge  lengths   and

Dial’s  bucketing  algorithm   to   keep  the  task  of  shifting  in   a  new   bit  simple.


2 

Handout  7:  Problem  Set   4 

(e) 	 Is  base­2  scaling   the  best  possible,   or   can  you   achieve  a  (slightly)   better  running

time  by  scaling   with  a  diﬀerent  base?


At  lunchtime  it  is  crucial  for  people  to  get   to  the  food   trucks  as  quickly  as 
Problem  3. 
possible. We  will   show  how  to   use   maximum  ﬂow   to  solve  this  problem. Consider   the  follow­
ing  model.  The  building  is  represented   by  a  graph   G  = (V , E ),   where  each  room,  landing, 
or  other  location  is  represented  by  a  vertex  and  each  corridor  or  stairway  is   represented  by 
an  edge.  Each  corridor  has  an  associated  capacity  c,  meaning  that  at  most  c  people  can 
pass  through  the  corridor  at  once. Traversing  a  corridor  from  one  end   to  the   other   takes  one  
timestep.  (Traversing  a  room  takes  zero  time.) 

(a)  Suppose  all  people  are   initially  in  a  single  room  s,  and  that  the  building  has

a  single  exit  t.   Show   how  to  use  maximum  ﬂow  to  ﬁnd   a  fastest   way  to  get 

everyone  out  of  the  building.   Hint:  create  an  auxiliary  graph  G�  that  has   vertices

to  represent   each  room  at  each  time  step.

(b)	 Show  that  the  same  technique   can   be  used   when   people  are  initially  in   multiple

locations  and  there  are  multiple  exits.

(c)  Generalize  the  approach   to   where  diﬀerent   corridors  have  diﬀerent  (integral)

transit  times. 

OPTIONAL   (d)  Suppose  transit   times   are  not   integral.  Is  there  still  a  way  to  solve

the   problem?

OPTIONAL   (e)	 The  above  algorithm  is   polynomial   in  the  number   of  people.  Can 

you  improve  it   to   be   polynomial  (in   the  graph   size)  regardless  of  the  number  of

people?


The  minimum  ﬂow   problem  is   a  close  relative  of  the  max  ﬂow   problem  with 
Problem  4. 
nonnegative  lower  bounds  on  edge  ﬂows   (if   an  edge  (i, j )  has  a  lower   bound  lij  ≥  0,  then 
fij  must  satisfy   lij  ≤ fij  ≤ uij ).  In  the  minimum  ﬂow  problem  we  wish   to  send   a  minimum 
amount  of  ﬂow   from  the  source  s  to  the  destination   t  while  satisfying  given   lower   and  upper 
bounds  on  edge  ﬂows  fij . 

(a)  Show  how  to  solve  the   minimum  ﬂow   problem  by  using  two  applications  of  any

maximum   ﬂow   algorithm   that   applies  to  problems  with  zero  lower  bounds   on

edge  ﬂows  (e.g.,  the   algorithms   described   in  the  lecture).  Hint:  ﬁrst  construct 

any  feasible  ﬂow  and  then  convert  it  into  a  minimum  ﬂow.

� 
� 
(b) 	 Prove  the  following   min­ﬂow­max­cut  theorem.  Let  the  lower   bound   on  the   cut 
capacity  of  an  s­t   cut  (S, T  =  V  \ S )  be   deﬁned  as  
(i,j )∈S×T  lij  − 
(i,j )∈T ×S  uij . 
Show  that  the  minimum  value  of  all   feasible  ﬂows  from  node  s  to  node  t  equals 
to  the  maximum  lower  bound  on   cut   capacity  of  all  s­t  cuts. 

Handout  7:   Problem  Set  4  

3 

(c)  A  group  of  students  wants   to   minimize  their   lecture  attendance  by  sending  only

one   of  the  group   to   each  of  n  lectures  to  take  notes.  Lecture  i  begins  at   time  ai

and   ends  at  time  bi .  It  requires   rij  time  to  commute  from  lecture  i  to  lecture  j .

Develop  a   ﬂow­based  algorithm  for   identifying  the  minimum  number   of  students 

needed  to   cover  all  the  lectures.  Hint:  reduce  to  minimum  ﬂow.


OPTIONAL  Problem   5. 
Augmenting  paths   are  guaranteed  to   terminate  in  ﬁnite  time 
with   a  maximum   ﬂow  only  if  the  edge  weights   are  rational. 

(a)  Give  a   graph   on  which  some  augmenting  path   algorithm  fails   to  terminate  it 

ﬁnite   time. 

(b)	 (Harder)  Give  a  graph  on  which   some  augmenting  path   algorithm  fails  to  termi­

nate   it  ﬁnite  time,   and  whose  limiting  ﬂow  is   not   maximum.


