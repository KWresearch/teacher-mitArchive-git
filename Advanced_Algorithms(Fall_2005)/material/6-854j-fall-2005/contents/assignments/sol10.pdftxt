Massachusetts  Institute  of  Technology 
6.854J/18.415J: Advanced  Algorithms 
David  Karger 

Handout  23 
Wednesday,  November  16,  2005 

Problem   Set   10   Solutions  

Problem  1. 
(a)   We  create  an  integer  variable  f k 
ij  for  each  edge  from  i  to  j  and  for  each  pair  k , and  we 
state  the  following  constraints.  First  we  bound  the  range  of  each  variable 
0 ≤ f k  ≤ 1,
∀k  ∀(i, j ) ∈ E 
ij 
(cid:2) 1, 
then  for  each  demand  pair  (vk , wk )  we  model  the  ﬂow  of  unit  value  from  the  one  of  vertices 
(cid:1) 
to  the  other 
j i ) =  −1, 
ij  − f k 
(f k 
0, 
j 
(cid:1) 
and  eventually,  bound  the  ﬂow  along  each  edge  by  w : 
j i) ≤ w .
∀(i, j ) ∈ E 
(f k 
ij  + f k 
k 

if  i = vk , 
if  i = wk , 
otherwise, 

∀k∀i 

Obviously,  for  each  k  the  ﬂow  from  vk  to  wk  of  unit  value  corresponds  to  the  path  between 
them,  and  any  feasible  solution  to  the  integer  linear  program  is  a  solution  to  our  original 
problem,  and  the  goal  function  is  0. 

(b)   In  the  relaxation  we  can  get  many  fractional  paths  between  each  demand  pair  of  total 
unit  value.  These  paths  can  be  read  out  of  the  solution  in  polynomial  time  in  the  following 
way.  We  ﬁnd  an  edge  e  of  the  smallest  positive  ﬂow  value  c,  and  subtract  ﬂow  of  this 
value  from  a  cycle  or  a  path  going  through  e  over  edges  of  positive  ﬂow  value.  Repeating 
this  procedure  we  will  decompose  the  ﬂow  into  at  most m  cycles  and  paths,  where m  is  the 
number of edges.  Furthermore, we can assume that all paths are simple paths, and no vertex 
appears  twice  on  a  path. 

(c)   For  each  demand  pair  we  take  paths  into  which  we  decomposed  ﬂow.  Since  the  sum  of 
the  capacities  of  the  paths  equals  1,  we  randomly  choose  one  of  them  with  the  probability 
that  equals  the  capacity  of  the  path. 
Let  (i, j )  be  an  arbitrary  edge.  Let  Xk  be  the  Bernoulli  variable  equal  to  1,  if  the  path 
(cid:1)  (cid:1) 
connecting  the  k th  demand  pair  goes  over  (i, j ),  and  0,  otherwise.  We  know  that 
P[Xk  = 1] ≤ w = 1. 
E[  Xk ] = 
k 
k

2 

Handout   23:   Problem   Set   10   Solutions  

(cid:1) 
By  the  Chernoﬀ  bound,  for  n  large  enough,  it  holds  that 
P[  Xk  ≥ 1 + 2 log n] ≤ 2
−(1+2 log n)  =
k 

1 
2n
2 

,

= 

and  by  the  union  bound,  the  probability  that  over  some  edge  goes  at  least  1 + 2 log n  paths 
can  be  upper  bounded  by 
2 n  · 
1
1
,
2n2 
2 
and  after  an  expected  constant  number  of  attempts  we  get  a O(log n)-approximation. 
(cid:1)  (cid:1) 
(d)   Once  again we  will make  use  of  the  Chernoﬀ  bound.  As  before,  for  a  single  edge 
P[Xk  = 1] ≤ w . 
E[  Xk ] = 
(cid:3) 
k 
k
(cid:3) 
We  can  assume  without  loss  of  generality  that  E[  Xk ]  equals  exactly  w ,  since  it  is  in  our 
k 
Xk  is  as  small  as  possible,  and  we  can  always  add  some  virtual  Bernoulli 
interest  that 
(cid:5) 
k 
(cid:1)
(cid:1) 
(cid:4) 
variables  increasing  the  expectation.  Slightly modifying, 
P[  Xk  ≥ w + 3  w log n] = P[  Xk  ≥ w(1 + 3 
log n 
)], 
(cid:4) 
w 
k
k 
log n/w < 2e − 1,  we  get 
(cid:1) 
(cid:4) 
and  under  the  assumption  that w >  log n, which  yields  3 
√ 
”2 
“
P[  Xk  ≥ w + 3 
w log n] ≤ e 
−
−9 log n/4  . 
w/4  = e 
log n/w
3 
k 

√ 
The  probability  that  some  edges  carries at  least w + 3  w log n paths  can be upper-bounded 
by 
√ 4 2

√ 4 
≤ 
n  · e 
− log n/4 
−9 log n/4 
1
1
= e 
< 1,
2 
=  n 
for  n ≥ 2,  and  after  an  expected  constant  number  of  attempts  we  get  a  4-approximation. 


Problem  2. 
(a)   The  number  of  sets  in C  is  not  greater  than  2k ,  since  there  are  only  2k  diﬀerent  subsets 
of B  and  therefore,  at most  2k  diﬀerent  unions  of  subsets  of B . 

(b)   This  is  true.  Suppose  that  there  exists  a  set  B  for  C  of  the  required  property.  If  in 
some  set  D  ∈  B  exactly  one  of  x  and  y  belongs  to  D ,  we  can  add  to  D  the  other  element, 
not  changing  the  union  of  each  subset  of B  that  equals  some  set  in C .  Therefore, we  do  not 
have  to  distinguish  x  and  y ,  and we  can  safely  remove  one  of  them. 

Handout   23:   Problem   Set   10   Solutions  

3 

Such  a  simpliﬁcation  of  the  problem  for  all  pairs  x  and  y  can  be  done  in  polynomial  time. 
(c)   If  |C | > 2k ,  the  answer  is  simply  “no”.  We  simplify  the  sets  as  in  part  (b),  and  we  only 
need  to  show  that  the  number  of  items  that  can  appear  in  sets  after  the  simpliﬁcation  is 
bounded  by  a  function  of  k .  It  turns  out  that  there  can  be  at  most  22k  − 1  of  them,  since 
each  two  have  to  diﬀer  on  belonging  to  at  least  one  set.  For  ﬁxed  k  we  ﬁnd  a  solution  in 
constant  time,  for  example  checking  all  possible  sets  B . 

Problem  3. 

We will  remove  vertices  from a given  graph G  of  treewidth  k  in  a good elimination  ordering, 
and  we  can  assume  w.l.o.g.  that  G  is  connected.  Some  cliques  in  a  current  graph  will  be 
active   cliques.  For each active clique C  and for each assignment of values to variables that are 
represented by vertices that belong to C , we store some speciﬁc assignment to some variables 
that  have  been  already  removed.  Note  that  the  size  of  any  clique  during  the  elimination  is 
bounded  by  k + 1  (actually  active  cliques  are  always  of  size  at most  k). 
The  algorithm  is  following.  In  the  beginning  there  is  no  active  clique.  When  we  remove 
a  vertex  v  from  the  graph,  we  connect  all  its  neighbors,  and  make  them  an  active  clique 
C . Note  that  if  v  is  a  member  of  some  active  clique  K ,  K  disappears  from  the  graph,  and 
all  the  other  members  of  K  become  members  of  C .  For  each  assignment  φ  of  values  to 
variables  in  C ,  we  consider  two  possible  assignments  to  the  variable  represented  by  v , and 
joining  assignments  from  active  cliques  Ki  (Ki  is  the  i-th  active  clique  to  which  v  belongs) 
that  are  consistent  on  vertices  in  C  and  v ,  we  choose  the  one  that  satisﬁes  more  clauses. 
This  assignment  becomes  an  assignment  associated  with  φ  in  C .  Note  that  the  joining  of 
assignments is possible, since no variable except v and these in C , appears in two assignments 
we  are  joining.  This  is  a  consequence  of  the  fact  that  a  variable  that  is  already  removed  is 
set  in  exactly  one  active  clique. 
Eventually,  we  have  only  one  vertex  left,  which  constitutes  an  active  clique  on  its  own,  and 
we  simply  choose  a  better  of  two  assignments. 
To  show  that  the  runtime  of  the  algorithm  is  polynomial,  it  is  enough  to  say  that  the  single 
removal of a vertex  takes polynomial  time.  This  is true,  since  the number  of active  cliques  is 
less  than  the  number  of  variables,  and  we  consider  only  a  constant  number  of  assignments. 
The algorithm  returns an optimal  solution,  since  it  can be proven  by  induction,  that  for any 
assignment  φ  to  variables  of  an  active  clique  C ,  we  compute  an  assignment  of  some  set  of 
variables that in the original graph was separated from the rest of the graph by vertices  in C , 
and therefore we maximize the number of satisﬁed clauses, that contained only these removed 
variables  and  the  variables  in  C ,  for  a  given  assignment  of  the  variables  in  C .  Eventually, 
we  have  two  possibilities  for  the  last  variable,  and  one  of  them must  be  optimal. 

Problem  4. 

4 

Handout   23:   Problem   Set   10   Solutions  

The  optimum  load  OPT  is  always  greater  than  the  optimal  maximum  load  at  any  given 
time.  It  suﬃces  to  show  that  scheduling  a  job  according  to  Graham’s  rule  we  never  exceed 
(2 − 1/m) · OPT.  Let  p  be  the  value  of  the  job  we  are  adding.  We  know  that  p  ≤  OPT, 
and  that the average  load can never  exceed OPT. By the  latter the average  load right before 
the  scheduling  of  the  job  has  to  be  at  most  OPT − p/m,  otherwise  we  would  exceed  the 
maximum  possible  average.  The  job  is  placed  on  the  least  loaded  machine,  and  the  load  of 
this machine is not greater than OPT− p/m, so it will not be greater than OPT + (1 − 1/m)p, 
what  can  be  in  turn  bounded  by  the  required  (2 − 1/m)OPT. 

Problem  5. 
(a)   In  any  deterministic  strategy  we  choose  a  next  possible  partner  to  date  based  only  on 
ordering  of  the  ones  dated  so  far  and  k ,  the  number  of  potential  partners.  We  build  a 
malicious  set  of  partners  in  the  following  way.  We  observe  a  behavior  of  the  strategy,  when 
it  is  given  worse  and  worse  partners,  until  it  eventually  accepts  one  of  them,  and  we  make 
all  partners  that  have  not  been  dated  the  best  ones  (in  any  order).  The  strategy  chooses  on 
this  set  of  partners  the  worst  one. 

(b)   We  split  all  possible  partners  into  two  sets:  a  sample  set  S , and  a  set  T , from which  we 
will choose a companion.  Each possible partner goes to each of sets with the same probability, 
i.e.  1/2.  We  observe  ﬁrst  all  partners  in  S ,  by  dating  them,  and  then  date  partners  in  T , 
until  we  ﬁnd  a  one  better  than  the  best  in  S .  If  one  of  sets  is  empty,  or  we  do  not  ﬁnd  a 
required  partner  in  T , we  take  as  a  companion  the  ﬁrst  or  the  last  partner,  respectively. 
The  probability  that  the  best  possible  partner  is  in  T  and  the  second  best  in  S  equals  by 
independence  1/2 · 1/2 = 1/4,  and with  probability  at  least  1/4 we will  choose  the  best  one. 

(c)   As before we split possible partners,  and dating these  in S  we  enquire  information about 
the  population  at  MIT.  Then  we  date  potential  partners  in  T ,  until  we  ﬁnd  a  one  that  is 
better  than  the  2 log k -th  in  S . 
We  consider  3  possible  cases  for  k  large  enough.  Suppose  ﬁrst  that  in  S  there  is  no  person 
better  than  2 log k -th  best  in  S ,  and  we  need  to  take  the  last  person.  This  implies  that  the 
(cid:6) 
(cid:7)
best  2 log k  persons  are  in  set  S ,  and  the  probability  that  it  happens  equals 
2 log k 
1 
2 
The  second  case  that we  consider  occurs when  the 2 log k -th best  in S  has  rank greater  than 
12 log k ,  what  can  happen  only  if  among  the  best  12 log k  elements  in  the  whole  set,  there 
is  at  most  2 log k  that  belong  to  S ,  and  we  can  bound  the  probability  of  this  event,  making 
(cid:1) 
use  of  independence  of  indicators Xi  whether  the  i-th  best  belongs  to  S . Taking 
12  log k 
i=1  

Y  = 

Xi , 

= 

1 
k2 

. 

Handout 23: Problem Set 10 Solutions
(cid:6)
(cid:7)
1 − 2
3

by the Chernoﬀ bound, we get
P[Y ≤ 2 log k ] = P [Y ≤

6 log k ] ≤ e− 1
2

· 4
9

3 log k ≤ e− ln k =
·6 log k = e− 4

1
k

.

5

The third and last case is when we ﬁnd in T a companion better than the 2 log k -th best in
S , and the 2 log k -th best in S has a rank smaller than 12 log k .
Let R be a random variable equal to the rank of a companion that we choose. Eventually,
3(cid:1)
i=1

P[case i] · E[R|case i] ≤ 1
k2

· k + 1 · 12 log k = O(log k).

E[R] =

· k +

1
k

(d) If someone wants to maximize their chances, sometimes, it may be diﬃcult to believe
that a potential partner they are dating should be only a sample, and therefore they can fall
into a trauma caused by the conﬂict between the belief that one should stick to the strategy
and volcanic feelings that arise to this potential partner.

