Massachusetts  Institute  of  Technology 
6.854J/18.415J: Advanced  Algorithms 
David  Karger 

Handout  16 
Wednesday,  Obtober  26,  2005 

Problem   Set   7   Solutions  

Its  dual 

Problem  1. 
(a)   If  P  and Q  have  empty  intersection,  then  the  following  linear  program  is  infeasible: 
�  � 
�  � 
α  = max 0 · x, 
x  ≤ 
b 
A 
. 
D 
e 
�  � 
b 
�  � 
β  = min t
, 
e 
A 
t 
D 

= 0,
t  ≥  0 
is  always  feasible  (t = 0  is  a  feasible  solution),  and  after  substitution  t = (y z)  becomes 

β  = min(y b + ze), 
yA + zD  = 0, 
y , z  ≥  0. 
Since  the  dual  is  feasible,  it  must  be  unbounded,  otherwise  the  primal  would  have  to  be 
feasible.  Therefore,  there  exist  y ≥ 0 and  z ≥ 0  such  that  y b + ze < 0,  and  yA + zD = 0. 
(b)   We  consider  c = yA = −zD  from  part  (a).  We  will  make  extensive  use  of  the  fact  that 
y , z ≥ 0.  Let  x ∈ P , and w ∈ Q. Then 
cx = yAx ≤ y b < −ze ≤ −zDw = yAw = cw . 

(c)   If  the  two  polyhedra  have  a  point  in  common,  then  a  point  that  belongs  both  to  P  and 
Q  is  a  quickly  veriﬁable  answer. 
�  � 
Otherwise,  it  is  enough  to  show  a  feasible  solution  t  to  the  dual  such  that 
b 
t
e 

< 0. 

If such t exists the primal must be infeasible, and on the other hand, if the primal is infeasible, 

we  already  know  by  part  (a)  that  such  t  exists.  This  answer  can  be  quickly  veriﬁed  as well.


2 

Problem  2. 

Handout  16:  Problem  Set  7  Solutions 

The  dual  is 

� 
� 
uede , 
y  = min 
(∀P ), 
de  ≥  1
e∈P 
(∀e), 
de  ≥  0
where  y  is  the  value  that  we  optimize,  and  de ’s  are  variables. 
For  each  edge  e,  de  describes  its  length.  The  ﬁrst  constraint  says  that  the  distance  from  s 
to  t  is  at  least  1,  and  the  second  that  the  length  of  each  edge  is  nonnegative. 
The ob jective  of  the goal  function  is an assignment  of  lengths  to  edges of the minimum  cost. 
By  strong  duality  the  optimal  value  of  y  equals  the  minimum  s-t-cut  value  in  the  network, 
and  actually,  for  a  given  s-t-cut  (S, T )  there  exists  an  assignment  of  the  same  value.  We 
assign  to  each  edge  going  from  S  to  T  length  1,  and  to  all  other  length  0.  Obviously,  the 
length of each path from s to t  is greater than or equal  to 1, and y  for this assignment  equals 
the  value  of  the  s-t-cut. 

Problem  3. 
(a)   Let  us  take  a  linear  program P  in  the  standard  form: 

α  = min c T  x, 
Ax  =  b, 
x  ≥  0. 

Its  dual  is 

β  = max bT  y , 
AT  y  ≥  c. 
If  P  is  feasible  and  bounded,  then,  by  strong  duality,  α  =  β ,  and  it  is  enough  to  check 
whether  the  following  linear  program  is  feasible: 

bT  y  =  c  x, 
T
Ax  =  b, 
x  ≥  0, 
β  = max bT  y , 
AT  y  ≥  c. 
If P  is  unbounded  or  infeasible,  the above  program does  not have  a  solution.  The  feasibility 
of  this program  is  equivalent  to minimization of 0,  and  this program can be  expressed  in  the 

Handout  16:  Problem  Set  7  Solutions 

3 

form  in  the  problem  statement.  For  each  unbounded  variable  t  we  substitute  t+  − t−  where 
+  and  t−  are new  nonnegative  variables,  and  for  each  inequality  of  the  form L ≥ R, we  add 
t
an  additional  nonnegative  variable  t,  and  replace  the  inequality  with L + t = R.  Finally, we 
achieve  a  linear  program Q. 

(b)   The  dual  R  to  this  program  is 

γ  = max bT  y , 
T  y  ≤  0. 
A

(c)   When  the  primal  is  feasible,  it  has  a  solution  of  value  0.  The  dual  is  always  feasible, 
since  y  =  0  meets  all  the  constraints.  By  strong  duality  the  dual  has  maximum  of  value  0, 
and  y = 0  is  an  obvious  optimum  solution. 

(d)   First, we  assume  that  the  algorithm  that we  are  given  stops  if  it  is  given  a nonoptimum 
solution  to  the dual when  the  dual  is unbounded.  The  running  time of  the algorithm  can be 
bounded by c(m + n)k , where  c  is a constant.  Knowing  that,  in  the worst case we can always 
stop  the  algorithm  after  c(m + n)k  steps,  and  say  that  it  has  looped.  Denote  this  algorithm 
by A. 
In  the  beginning we  check whether  P  is  feasible.  This  can  be done  by  substitution  0  instead 
of  the  goal  function  of  P .  The  dual  to  the  modiﬁed  P  is  almost  the  same  as  the  dual  R, 
and,  if  P  is  feasible,  has  optimum  solution  0.  We  run  A  on  modiﬁed  P  with  dual  solution 
0.  Algorithm A  returns  a  correct  solution  if  and  only  if  P  is  feasible. 
Now, we know that P  is feasible.  If it is bounded, A ran on Q and 0, the optimum solution to 
the dual,  returns a correct solution to Q (easily transformable to a solution to P ); otherwise, 
P  is  unbounded. 
We have  shown how  to  solve  in O((m + n)k )  time a  linear program, making use of algorithm 
A. 

Problem  4. 

(a)   Take  an  optimal  circulation  described  by  the  linear  program,  and  decompose  it  into 
cycles.  Suppose  there  is  a  circulation  cycle,  that  does  not  go  over  a  minimum  mean  cycle, 
but  over  a  cycle  of  length  k1  and  the  sum  of  cij ’s  is  c1 . Let  f  be  the  sum  of  values  of 
circulation  over  this  cycle  (f /k1  per  edge).  This  implies  that  this  cycle  contributes  c1f /k1 
to  the  value  of  w .  In  the  network  there  is  a  cycle  of  the  optimal  mean  value.  It  has  some 
length  k2 ,  and  the  sum  of  cij ’s  c2 .  Obviously,  c2/k2  < c1/k1 . If  we  took  ﬂow  f , and  let  it 
circulate  over  the  minimum  mean  cycle,  it  would  contribute  c2f /k2  to  w , and  w  would  be 
smaller.  Therefore,  in  the  optimum  solution  all  circulation  goes  over minimum mean  cycles. 

4 

Handout  16:  Problem  Set  7  Solutions 

(b)   The  dual  is  following: 

max λ, 
λ + pi  − pj  ≤  cij 
(∀i, j ), 
pi ,  λ  unbounded. 

(c)   We  can  transform  the  constraint  to 
0 ≤ (cij  − λ) + pj  − pi . 
This  implies  that  the  dual  has  a  feasible  solution  as  long  as  all  edges  (of  lengths  cij  − λ) 
have  positive  reduced  costs  under  some  potential  p.  It  has  been  shown  in  class  that  this  is 
true  as  long  as  there  is  no  cycle  of negative  length,  and  obviously,  this  cannot  be done when 
there  is  a  cycle  of  negative  cost,  since  lengths  of  cycles  do  not  change  under  reduction.  For 
optimal  λ  at  least  one  cycle  has  zero  length,  otherwise  we  would  be  able  to  subtract  a  very 
small  positive  value  from  length  of  each  edge  that  would  not  make  any  cycle  have  negative 
length,  and  we  would  have  greater  λ. 
Furthermore,  the  length  of  a  cycle  C  equals  0  if  and  only  if  λ  equals  the  mean  of  costs  of 
� 
edges,  since 
(cij  − λ) = 0 
(i,j )∈C 
� 
1 
k  (i,j )∈C 

is  equivalent  to 

cij  = λ,

where  k  is  the  length  of  the  cycle.

In  total,  this means  that  the  optimal  λ  equals  the minimum  mean  of  all  cycles.


(d) We want to determine λ (or, as we will see, almost λ) for which all cycles have nonnegative

lengths, and there exists a cycle of length 0.  For sure, λ as a mean of costs of edges is greater

than  or  equal  to  the  minimum  cost  of  an  edge,  and  less  than  or  equal  to  the  maximum 

cost  of  an  edge.  We  will  use  binary  search  to  ﬁnd  good  approximation  of  λ.  Suppose  that

λ ∈ [a, b].  We  take  λ∗  = (a + b)/2,  and  check,  using  Bellman-Ford  algorithm,  whether  there

∗
is  a  cycle  of negative  cost  in  a  network  if we  subtract  λ from  the  cost  of  each  edge.  If  there 
is,  λ ∈ [a, λ∗
(=: b)];  otherwise,  λ ∈ [λ (=: a), b].

∗
When  can  we  stop  the  binary  search?  It  turns  out  that  when

b − a <  2 
1 
, n
where  n  is  the  number  of  vertices.  For  any  two  distinct  means  of  cycles  in  the  network  the 
diﬀerence  between  them  is  at  least  1/n2  .  Suppose  that  one  of  them  is  the mean  of  the  cycle 

Handout  16:  Problem  Set  7  Solutions 

5 

of  k1  vertices,  and  the  other  of  k2 .  If  we  multiply  both  means  by  k1k2 ,  they  both  will  be 
integers,  and  they  need  to  diﬀer  at  least  by  1,  so  in  the  beginning  they  had  to diﬀer  at  least 
by  1/(k1k2) ≥  1/n2  .  If  we  ﬁnd  a  range  of  length  less  than  1/n2  in  which  λ  is,  then  there  is 
no  other  mean  in  this  range.  This  means  that  if  we  take  b,  the  right  end  of  the  range,  and 
subtract  it  from  the  cost  of  each  edge,  the  only  cycles  of  nonpositive  cost  in  the  graph  will 
we  be  cycles  of mean  λ.  This  ends  the  description  of  the  algorithm. 

