Makeup  3:30–5  on  10/15 

1  Min-Cost  Flow 

Many  diﬀerent max-ﬂows  in  a  graph.  How  compare? 
•	 cost  c(e) to send a unit of ﬂow  on  edge  e 
� 
•	 ﬁnd  max-ﬂow minimizing 
c(e)f (e) 
•	 costs may  be  positive  or  negative! 
•	 note:  pushing  ﬂow  on  cost  c  edge  create  residual  cost −c  edge. 
•	 also  easy  to  ﬁnd min-cost ﬂow  of given value  v  less  than max  (add  bottle-
neck  source  edge  of  capacity  v) 

Clearly,  generalizes max-ﬂow.  Also  shortest  path: 
•	 How  send  ﬂow  1  unit  of  ﬂow? 
•	 just  use  shortest  path 
•	 more  generally,  ﬂow  decompose  into  paths  and  cycles 
•	 cost  of  ﬂow  is  sum  of  costs  of  paths  and  cycles. 
•	 each  path  costs  at most  nC  (C  = max  cost) 
•  cost  of  ﬂow  at most mU C 
Min-cost  circulation: 
•	 no  source  or  sink 
•	 just  ﬁnd  ﬂow  satisfying  balance  everywhere, min-cost 
•	 if  satisfy  balance  everywhere,  all  ﬂow must  be  going  in  circles! 
•	 more  formally:  circulation  can  be  decomposed  into  just  cycles. 
•	 hard  to  deﬁne  in max-ﬂow  perspective,  but  makes  sense  once  allow  nega-
tive  cost  arcs. 
•	 reduction  to min-cost  ﬂow:  add  disconnected  s,  t. 
•	 reduction  from min-cost  ﬂow: 
–  add  s-t  arc  of  “inﬁnite”  capacity,  “inﬁnite”  negative  cost 
–  of  course,  circulation  will  push  max  possible  through  this  edge 
–	 how much  can  it?  max  s-t  ﬂow 
–	 so  of  course,  suﬀ  to  assign  capacity  equal  to  max-ﬂow  value 

1 

–  see  later,  suﬃcient  to  assign  cost −nU  (good  for  scaling) 
•	 another  reduction  from min-cost  ﬂow: 
–	 ﬁnd  any  old max-ﬂow  f 
∗ 
–	 consider min-cost  ﬂow  f 
–	 diﬀerence  f  − f  is  a  circulation  (note:  diﬀ  of  two  equal  capacity 
∗ 
ﬂows  is  a  circulation) 
–	 so  ﬁnd  circulation  q  in  Gf  . 
–	 q + f  is  a  ﬂow  in  G  (note:  ﬂow+circulation=ﬂow  of  same  capacity) 
–	 cost  is  c(q) + c(f ) 
–  so  adding min-cost  q  in  Gf  yields min-cost  ﬂow 

Deciding  optimality: 
•	 given  a max-ﬂow.  How  decide  optimal? 
•	 by  above,  optimal  if min-cost  residual  circulation  is  0 
•	 suppose  not.  so  have  negative  cost  circulation 
•  decomposes  into  cycles  of  ﬂow

•  one must  have  negative  cost. 

•	 so,  if  f  nonoptimal,  negative  cost  cycles  in  Gf 
•	 converse  too:  if  negative  cost  cycle,  have  negative  cost  circulation.  So 
min-cost< 0. 

half  a  lecture 

2  Min-Cost  Flows 

2.1  Optimality  Criteria 
Recall:  ﬂow/circulation  optimal  iﬀ  no  residual  negative  cost  cycle. 
Reduced-Cost  optimality. 
•	 another  way  to  decide  optimal 
•	 based  on  LP  duality  (see  next week) 
•  given min-cost  ﬂow  problem

•  one  way  to  solve:  compute  opt  ﬂow  (command  economy) 

•	 alternative:  market  economy! 
•	 inﬁnite  widget  supply  at  source  s,  inﬁnite  demand  for  widgets  at  source  t 

2 

•	 let  seller  at  s,  buyer  at  t  set  prices  for  stuﬀ 
•	 creates  “market” where  prices  get  set  at  all  vertices 
•	 price  p(v)  for  widget  at  vertex  v 
•  costs  reﬂect  shipping  charges 
When  is  a  set  of  prices  “stable”? 
•	 suppose  have  p(v), p(w), c(vw)  such  that  p(w) ≥ p(v) + c(vw) 
•	 then  shipper  can make money  by  buying  at  v ,  shipping  to  w,  and  selling. 
•	 reduced  cost  cp (vw) = c(vw) + p(v) − p(w) 
•	 reduced  costs  reﬂect  “true  cost”  of  shipping  on  edge 
•	 merchant  will  want  to  ship  if  reduced  cost  negative. 
•	 this  will  increase  demand  at  v ,  raise  price:  so  prices  wrong! 
•	 what  stops  him?  no  residual  capacity! 
•	 a  price  function  is  feasible  for  a  (residual)  graph  if  no  (residual)  arc  has 
negative  reduced  cost 

Important  observation:  prices  don’t  aﬀect  overall  cost: 
•	 reduced  cycle  cost  same  as  original  cycle  cost 
•	 cost  of  every  v , w  path  changes  by  p(v) − p(w) 
•	 negative  cost  cycles  still  negative 
Claim:   A  circulation/ﬂow  is  optimal  if  there  exists  a  feasible price  function  on 
its  residual  graph. 
•	 ﬁrst:  price  function  implies  feasible 
•	 recall:  optimal  iﬀ  no  negative  cost  cycles  in  residual  graph 
•	 suppose  have  feasible  price  function 
•	 so  no  negative  reduced-cost  edges 
•	 so  no  negative  cost  cycles  under  reduced  costs 
•	 thus  no  negative  cost  cycles  under  original  costs! 
•	 key:  cost  of  cycle  unchanged  under  reduced  costs  (prices  telescope)! 
•	 converse:  suppose  have  optimal  ﬂow 
•	 then  residual  graph  has  no  negative  cycles.  How  ﬁnd  prices? 

3 

(cid:2)  with  0-cost  edges  to  everywhere 
–	 attach  vertex  s
–	 compute  shortest  residual  paths  from  s 
–	 well  deﬁned  because  no  negative  cycles 
–	 0-edges  guaranteed  ﬁnite  price  at  all  vertices  (this  why  didn’t  do 
paths  from  s) 
•	 deﬁne  p(v) = d(s , v) 
(cid:2)
•	 (note:  yields  residual  cost  of  shipping  a  unit  from  s
•	 note  p(w) ≤ p(v) + c(vw) 
•	 thus  cp (vw) ≥ 0  everywhere, as  desired. 
•	 note:   given  min-cost  ﬂow,  can  verify  optimality  via  one  shortest  path 
computation! 
•	 note:   Using  this  computation,  all  edges  on  shortest  paths  from  s have 
(cid:2) 
reduced  cost  exactly  0  (useful  for  later). 

(cid:2) ) 

Complementary  Slackness: 
•	 what  do merchants  do?  think  about  reduced  costs. 
•	 if  reduced  cost  positive,  noone  will  ship:  ﬂow  0  on  edge 
•	 if  negative,  will  ship:  ﬂow  equals  capacity  on  edge 
•	 if  0,  don’t  care:  ﬂow  arbitrary  on  edge. 
•	 ﬂow with these properties has complementary slackness:, another optimal-
ity  condition. 
•	 complementary  slackness  implies  optimal,  since  no  residual  negative  re-
duced  cost  arcs 
•	 suppose  optimal.  assign  prices  so  no  residual  negative  cost  arcs.  implies 
any  negative  reduced  cost  original  arc  is  saturated,  any  positive  reduced 
cost  arc  empty  (since  reverse would  have  neg  cost) 

Complementary slackness  is  on original   graph,  corresponds to  feasible pricing 
on  residual  graph 
Given  feasible  price  function,  can  ﬁnd  opt  ﬂow  easy: 
•	 delete  positive  redued  cost  arcs  (no  ﬂow  in  optimum) 
•	 saturate  negative  arcs 
•	 creates  excesses/deﬁcits  at  nodes 
•	 ship  excesses  to  deﬁcits  on  0-cost  arcs 

4 

•	 know  this  can  be  done,  since  optimum  does 
•	 do by creating supersource for excesses, supersink for deﬁcits, ﬁnding max-
ﬂow  on  0  arcs 

saw converse:  given ﬂow, need to compute optimum distances.  So min-cost ﬂow 
really  is  max-ﬂow  plus  shortest  paths! 
•  some  ﬂow  algs  use  prices  implicitly,  to  prove  correctness

•  others  use  explicitly,  to  guide  solution.


3  Algorithms 

3.1  Cycle  Canceling  Algorithm 
(Klein)

Cycle  canceling  algorithm:

•	 start with  any max-ﬂow  (or min-cost  circulation  problem) 
•	 ﬁnd  a  negative  cost  cycle 
•	 push  ﬂow  around  it 
•	 analogue  of  generic  augmenting  paths  under  circulation  reduction 
•	 how many  times? 
–	 cost  decreases  by  2  each  push 
–	 initial  cost  (in  residual  graph)  0 
–	 ﬁnal  cost  at  least −mCU  (why?) 
–  so mCU  iterations. 

How  ﬁnd  negative-cost  cycle? 
•	 think  back  to  shortest  paths 
•	 dijkstra  only  works  for  positive  edges 
•	 but  Floyd,  Bellman-Ford work  for  negative  edges  too 
•	 Unless  have  negative  cost  cycle 
•	 then,  of  course,  shortest  paths  undeﬁned 
•	 however,  Floyd/BF  will  indentify  one  negative  cycle  that  is  wrecking 
things. 
•	 Floyd O(n3 ),  BF  O(nm). 

5 

√ 
•	 fancy  scaling  algorithm  running  in  O(m n log C ) also  known.

√

So:  time  bound  of  O(m2 nCU  log C ) or  O(nm2CU ) time.

Slow,  and  not  even  weakly  polynomial!  Let’s  do  better. 

Later,  we’ll  see  that  cycle  canceling  is  a  good  idea.  But  for  now,  lets  take  a

diﬀerent  approach.

Point  A:  Timing  to  here  is  1:20


3.2  Shortest  Augmenting  Path 
Special  case  algorithm: 
•	 unit  capacity  edges, 
•	 no  negative  cost  cycles. 
•	 so mincost  circ  0,  but  min-cost  ﬂow maybe  not 
•  note  capacity  of  ﬂow  at most  n. 
Idea:  augmenting  paths 
•	 natural  greedy  strategy:  what  augmenting  path  to  use? 
•	 Repeatedly  augment  shortest  (min-cost)  path 
Time  analysis:  O(mv log n)  for  ﬂow  of  value  v , so  O(mn log n) 
Correctness:  uses  price  function. 
•	 key:  price function changes value  of paths, but not which is shortest (proof: 
telescoping) 
•	 claim:  at  no  time  does  residual  graph  have  negative  cost  cycle 
•	 proof  by  induction 
•	 if  currently  true,  can  compute  shortest  paths  from  s  to  deﬁne  prices 
•	 result:  all  edges  on  shortest  paths  have  cost  0 
•	 so  augmentation  is  along  cost  0  edges 
•	 create  residual  arcs,  but  only  cost  0 
•	 so,  no  negative  reduced  cost  arcs 
•	 so,  no  negative  cost  cycles.  induction  proved. 
•  so  after  v  iterations,  have  ﬂow  value  v  of minimum  cost. 
Note:  don’t  need  explicit  prices  to  run 
•	 prices  don’t  change which  paths  are  shortest 

6 

•  but  with  good  prices,  can  use  Dijkstra’s  fast  algorithm. 
Limitations: 
•  unit  capacity 
•  no  negative  cycles 
•  (so  can’t  do  standard mincost  circulation  reduction) 
Devoted  substantial  time  to  review  of  reduced  cost  optimality,  complementary 
slackness,  and  shortest  augmenting  path. 

4  Scaling  Min-Cost  ﬂow 

4.1  Capacity  Scaling 
notice:  above  algorithm  has  running  time  depending  on  value  of  ﬂow.  Doesn’t

actually  care  about  unit  capacity.

Scale  in  capacity  bits  one  at  a  time.

•  in  scaling  step,  double  capacities,  possibly  add  1 
•  double  ﬂow  values 
•  changes  residual  capacities  by  at most  1 
•  so  some  negative  cost  arcs might  get  capacity  1 
•  how  ﬁx? 
•  saturate  all  negative  capacity  arcs  (creates  excess,  deﬁcits) 
•  ﬁnd  min-cost  ﬂow  to  ship  excesses  to  deﬁcits  (know  one  exists) 
•  total  excess O(m) 
•  so  O(m)  shortest  augmenting  paths  solve 
•  time  O(m2  log n) 
•  O(log U )  phases 
•  total  O(m2  log n log U ). 

7 

4.2  Cost  Scaling 

skip   this.   takes   15   minutes   to   survey. just   mention   exists.  
Idea: 
•	 Recall  goal:  ﬂow/price  function  such  that  all  residual  arcs  have  nonnega-
tive  cost 
•	 On  cost  scaling,  allow  negative  arcs  that  are  almost  nonresidual 
•	 now,  allow  residual  arcs  that  are  almost  nonnegative. 
•  a  ﬂow/price-function  is  -optimal  if  every  residual arc has  cost at  least − 
Outer  loop: 
•	 scaling  phase  reduces    to  /2 
•	 Any  ﬂow  is  C -optimal  (gives  starting  point) 
•	 problem:  may  get  nonintegral  prices.  when  can  we  stop? 
•	 (note  with  ﬂow,  knew  stayed  integral  so  1/2-optimal was  optimal. 
•	 claim:  an  1/n-optimal  ﬂow  is  optimal 
•	 proof:  no  negative  cycle.  cycle  cost  unchanged,  was  originally  an  integer. 
Scaling  phase.  Many  diﬀerent  approaches,  we’ll  start  with  one  based  on  push 
relabel. 
•	 start  by  saturating  all  negative  cost  arcs.  Creates  excesses,  deﬁcits. 
•	 preserve  /2-optimality  (by  juggling  ﬂow,  prices) 
•	 uses  pushes  to  send  excesses  to  deﬁcits 
•	 need  notion  of  “downhill” 
•	 An  arc  is  admissible  if  negative  reduced  cost 
•	 pushes  are  only  on  admissible  arcs 
•	 if  an  active  vertex  has  no  admissible  arc,  relabel  it. 
•	 reduce  its  price  by  /2 
•	 decreases  cost  of  outgoing  arcs,  increases  incoming 
•	 since  no  outgoing  arc  started  negative,  all  outgoing  arcs  > /2,  so  still 
/2-optimal. 
•	 no  incoming  admissible  arcs! 
•	 clearly,  so  long  as  have  excess,  can  push  or  relabel 

8 

Claim:  no  vertex  relabeled more  than  3n  times. 
•  Initially,  had  pushed  ﬂow  from  supersink  t  to  supersource  s 
•  then  did  some  push  of  active  ﬂow 
•  so  can  think  of  current  situation  as  a  preﬂow  with  source  t 
•  decompose  into  paths  from  t  ending  at  current  excesses. 
•  consider  path  P  from  t  to  v 
•  since  started  -optimal,  cost  of  path  at  least  −n 
•  so  reverse  path  originally  had  cost  at  most  n 
•  this  is  a  residual  path  in  current  graph 
•  so  (by  /2-optimality)  has  cost  at  least  −/2n 
•  each  relabel  of  v  decreased  path  cost  by  /2 
•  so  only  3n  relabels. 
Claim:  O(nm)  saturating  pushes 
Claim:  admissible  network  acyclic 
Claim:  O(n2m)  nonsaturating 
•  let  g (v)  be  number  of  nodes  admissibly  reachable  from  v 
� 
•  φ = 
g (v) over  active  v 
•  saturating  push  increases  by  n  (makes  dest  active) 
•  relabel  increases  by  n  (v  can  reach more  stuﬀ,  but  noone  can  reach  v) 
•  nonsaturating  push  (v , w)  decreases  by  1  (g (w) < g (v)) 
Cleverer methods  give O(n3 ).

Other  approaches  (eg  double-scaling)  gives O(nm)  per  scaling  phase. 

Finish  remarks  on min-cost  ﬂow.

•  Strongly  polynomial  algorithms  exist. 
–  Tardos  1985 
–  minimum  mean-cost  cycle 
–  reducing  -optimality 
–  “ﬁxing”  arcs  of  very  high  reduced  cost 
–  best  running  running  time  roughly O(m2 ) 
–  best  scaling  time  (double  scaling) O(mn log log U  log C ). 

bf  Point B.  From  point  A  is  1:00 

9 

