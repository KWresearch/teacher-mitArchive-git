Review Session #2 Sample Problem 
Ben Wang and Mark Styczynski 

 
Again, please forgive any typos.  This is slightly modified from what was presented in 
the review session so that there would be only one root (I glossed over the fact that the 
square root implied there were two roots, positive and negative).  As a result, things may 
be off by a factor of m or g here and there, but the important things to take away from 
this sample problem are what we are asking you to do and how you would go about doing 
it. 
 
 
 
We imagine we have a spring, suspended from the ceiling, and at the end of it is attached 
a block with mass m.  This is a special spring, so instead of the normal spring force 
equation, its force is defined proportional to the cube of its extension. 
 
So, the force balance equation that we have is 
 
F mg kx
=
−
 
Where g is acceleration due to gravity, k is the spring constant, f is the frictional constant, 
and v is the velocity of the block. 
 
We start the block and spring completely at rest (meaning the spring is neither extended 
nor compressed) and would like to analyze the steady state of our system.  The system 
above can be stated as: 
 
m
 
The first question is: how would we pose this as a problem that could be easily solved 
numerically by Matlab? 
 
We need to make this second-order ODE into a system of first-order ODEs that Matlab 
can handle easily.  We do this by defining the intermediate variable y, where 
 

f dx
m dt

or just   

d x
2
dt
2

mg kx
−

3

d x
2
dt
2

g
= −

dx
dt

3

x

−

3

−

fv

 

k
m

−

f

=

 

 

 
So we now have the equation we need to give to Matlab. 
 
The second question is: what is the steady state of the system? 
 

y

=

y
1
y

2

⎡
⎢
⎣

⎤
⎥
⎦

=

x
dx
dt

⎡
⎢
⎢
⎣

⎤
⎥
⎥
⎦

  

and thus  

dy
dt

=

⎡
⎢
⎢
⎣

y

2

g

−

y
3
1

−

k
m

 

⎤
⎥
⎥
⎦

f
m

y

2

We do that by setting the time derivative of y to zero.  This makes sense, because at our 
steady state, we would see not only that the block is not moving (so dy1/dt = 0), but also 
that there is no net force on the block (so dy2/dt = 0).  This gives us: 
 

y

2

 

=

0
f
k
g
y
y
0
3
−
−
=
1
2
m
m
Plugging the equation for y2 into the second equation, we immediately see that 
gm
k

y
1

=

 

3

 

So our steady state in y is 

y

ss

⎡
⎢
= ⎢
⎢
⎣

3

gm
k
0

⎤
⎥
⎥
⎥
⎦

. 

 
The next question is: is this steady state stable? 
 
To find this out, we need to evaluate the Jacobian at the steady state and find the 
eigenvalues of the resulting matrix.  The Jacobian defined by the equations in y is: 
 

J

0
⎡
⎢
= −
k y
3
⎢
2
1
m
⎣

1
f
−
m

⎤
⎥
⎥
⎦

   so 

J

y

ss

=

0
k
3
−
m

⎡
⎢
⎢
⎣

y
2
1

1
f
−
m

⎤
⎥
⎥
⎦

=

y

ss

⎡
⎢
⎢
⎢
⎣

0

k gm
3
−
⎛
⎜
m
k
⎝

⎞
⎟
⎠

2
3

f
−
m

1

 

⎤
⎥
⎥
⎥
⎦

 
To find the eigenvalues of that steady state, we need to solve the equation 
 

J

Iλ−

= , 
0

 so  

−
λ

1

k gm
3
−
⎛
⎜
m
k
⎝

⎞
⎟
⎠

0
= =

2
λ

+

2
3

f
−
m

−

λ

f
m

+
λ

k gm
3
⎛
⎜
m k
⎝

⎞
⎟
⎠

2
3

 

 
This is a simple quadratic, where the solution is 
 

−

f
m

±

2

2

f
m

−

k gm
12
⎛
⎜
m
k
⎝

⎞
⎟
⎠

2
3

1
5
k m g
3
3

2
3

f
− ±

2

f

12
−
m
2

2

=

=
λ
 
If we assume that the frictional constant f is small, and less than 1, and we set k = 1 and 
m = 1, then we realize that the radicand is negative, meaning that our solutions can be 
expressed more simply as 
 

 

f
m

±

λ= −
 
Where a is some agglomeration of constants.  Since f is positive and m is positive, our 
eigenvalues will have strictly negative real portions, and thus we can say that our steady 
state is indeed stable.  This is to be expected, as if we were to slightly perturb a spring 
from its steady state, we wouldn’t expect the block to fly into the ground or through the 
ceiling, but to slowly (and with some oscillation) go back to its steady state. 
 
So here we showed how we would make a higher-order ODE solvable by Matlab, how 
we’d find a steady state, and how we’d find the stability of the steady state by evaluating 
the Jacobian of the system at the steady state and finding the eigenvalues of the resulting 
matrix. 

ai

 

 

