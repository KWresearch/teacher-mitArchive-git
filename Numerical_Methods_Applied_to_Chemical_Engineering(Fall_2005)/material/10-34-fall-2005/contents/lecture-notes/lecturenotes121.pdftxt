1.2.1 Reduction of A x = b  to triangular form by Gaussian Elimination 
 

 
We now with to develop an automatic procedure, an algorith, for obtaining a solution 
to the set of N linear algebraic equations: 
 
 
 

 

a11x1 + a12x2 + … + a1nxn = b1 
  a21x1 + a22x2 + … + a2nxn = b2 
:
:                            
: 
:
                                                an1x1 +an2x2 + … + annxn = bn          (1.2.1-1) 
 
Note that we can select any two rows, say #j and #k, and add the two equations to 
obtain another one that is equally valid. 
 

 

j2

k2

jN

=

kN

N

k1

1

(a

j1

+

j

+

a

(b

)x

)b
k

aj1x1 + aj2x2 + … + ajNxN = bN 
+ (ak1x1 + ak2x2 + … + akNxN = bk) 
)x
(a
a
(a
...
)x
a
+
+
++
+
2
(1.2.1-2) 
 
If the equation for row #j is satisfied, and the equation obtained by summing rows j 
and k (1.2.1-2) is satisfied, then it automatically follows that the equation of row k 
must be satisfied. 
 
We are therefore free to replace in our system of equations the equation  
ak1x1 + ak2x2 + … + akNxN = bk by  
(aj1 + ak1)x1 + (aj2 + ak2)x2 + … + (ajN + akN)xN = (bj + bk) with no effect on the 
solution  x . 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

 

1

Similarly, we can take any row, say #j, multiply it by a non-zero scalar c, to obtain an 
equation 

caj1x1 + caj2x2 + … + cajNxN = cbj     (1.2.1-3) 
 
 
that we can substitute for the original without effecting the solution. 
 
In general, for the linear system 
 

a11x1 + a12x2 + … + a1NxN = b1 
: 
: 
                aj1x1 + aj2x2 + … + ajNxN = bj   (cid:197) row #j 
:  
: 
                  ak1x1 + ak2x2 + … + akNxN = bk  (cid:197) row #k 
: 
: 
  aN1x1 + aN2x2 + … + aNNxN = bN 
 
We can choose any j∈ [1,N], k∈ [1,N] and any scalar c ≠ 0 to form the following 
linear system with exactly the same solution as (1.2.1-4). 
 
 

a11x1 + … + a1NxN = b1 
: 
: 
              aj1x1 + … + ajNxN = bj   (cid:197) row #j 
: 
: 
                     (caj1 + ak1)x1 + … + (cajN + akN)xN = (cbj + bk)  (cid:197) row #k 
: 
: 
  aN1x1 + … + aNNxN = bN     (1.2.1-5) 
 
 
 
 
 
 
 
 
 
 
 
 

 

2

The process of converting (1.2.1-4) into the equivalent system (1.2.1-5) is known as 
an elementary row operation. 
 
We develop in this section an algorithm for solving a system of linear equations by 
performing a sequence of these elementary row operations until the system is of a 
form that is easy to solve. 
 
We will wish to use matrix/vector notation A x = b , so we write the system as 
 

1N

jN

     
a
...

     
a
...
     
a
     
a

11
12

          
      
:
:

a
      
a

j1
     
j2

          
      
:
:


a
     
a

     
k2
k1
          
      
:
:


a
     
a
     
     
a
...


     
a
...

N2

N1

kN

NN













1

j

k

N

=

b


:

b


:


b

:


b


1

j

k

N













     (1.2.1-6) 













x


:

x


:


x

:


x

 

 
After a row operation, we have the equivalent system A’ x = b ’ 
 
 












x


:

x


:


x

:


x


1

j

k

N













=

b     
      
:
b     
      
:
(cb
j
      
:
b     













1

j

+

)b
k

N













     (1.2.1-7) 

         
a  
          
...
1N
...
          
a 

        

jN

11

12

a
       
          
          
a


a
          
          
a
       

j1
          
j2

          
          
:   
          
:

(ca
)a 
     
(ca
+
+

j2
 j1
k1

          
          
          
:   
:

          
          
a    
a



N1

N2

...
     
(ca
    
)a
k2

          
          
...

+

a

)

kN

jN

a   

NN

 
 
 
 
 
 
 
 
 
 
 
 
 

3

 

Since we must change both A and  b  for every elementary row operation, it is 
common to perform these operations on the augmented matrix (A,  b ) 
 

j

1

j1

jN

11

1N

b    
 

b     

...
     
a
     

...
     
a
     

(A,  b ) = 

a




:


a




:




a


:




a
b    
a
     
...
    
 NN
 N1


N
1
4444 3
4444 2
 1)
Matrix
(N x N
+
 
After our elementary row operation, the system is written as 
 

   
...
     
a
  k1

b   
  

kN

k

     (1.2.1-8) 

(A’,  b ’) = 

1N

jN

11

j1

1

j

b   

a    

a    

b    

          

          

          

          
 

...
          
      

...
          
      

a




:


a




:




(ca


:




a
          
a    
b   
          
          
...
     


 NN
 N1
N
1
3
44444444
44444444
2
(N x N
Matrix
 1)
+

   
...
     
(ca
  )k1

   
(cb
  )

)k

+

+

+

b

a

kN

a

j1

jN

j

     (1.2.1-9) 

 
By applying the elementary row operation to the augmented matrix, we automatically 
change both the left and right hand sides of A x = b  as needed to ensure that the 
solution  x  does not change 
 
We will now build a systematic approach to solving  A x = b  based opon a sequence 
of these row operations. 
 
 
 
 
 
 
 
 
 
 

 

4

We now present the standard approach to solving A x = b  , the  
Method of Gaussian Elimination. 
 
First, we start with the original augmented matrix (A,  b )  of the system, 
 

j

1













(A,  b ) =   

b     
a
     
...
      
a
     
a    
a
11
12
13
1N
:   
        
        
:
        
        
:
        
:
:
:
     
     
a
b    
...
a
     
a
     
a
 
22
23
jN
j1
:   
        
:
:
        
        
:
        
  :
:
        
a
...
a
b   
a   
     
     
     
a
  k1
  
k
kN
33
32
:   
        
         
:
        
        
:
   :
        
:
:
a    
a
     
     
a
b    
a
     
...
 N1
 NN
 
As long as a11  ≠ 0 (in section 1.2.3 we show how we can ensure that this is the case 
for systems with a unique solution), we can define the finite scalar  
a
 (1.2.1-11) 
λ =
21
21
a

     (1.2.1-10) 













N2

N3

N

11

 
We now perform a row operation where we replace the 2nd row by the equation 
 

−

(a

aλ
21

- λ (a21
11x1 + a12x2 + … + a1NxN = b1) 
+     (a21x1 + a22x2 + … + a2NxN = b2) 
...
aλ
aλ
(a
)x
(a
)x
−
−
++
21
21
 
(1.2.1-12) 
We see that the coefficient multiplying x1 in this equation is 
 

)x

+

1N

2N

21

12

22

11

1

2

=

(b

2

−

)bλ
1
21

 

N

(a

21 −

)aλ
11
21

 = a21 - 





a
a

21

11





a

11

=

a

21

−

a

21

=

0

     (1.2.1-13) 

 
 
 
 
 
 
 
 
 
 
 
 

 

5

N1

N2

N3

NN

If we write the augmented matrix obtained from this row operation to place a zero in 
the (2,1) position – row #2 column #1 – as  
 
(A(2,1),  b
(2,1)) = 
a   
b
          
a
a
          
a
     
          
          
...
    
          
          
          

1
1N
13
12
11

0
)aλ
(a
     
...
(a
     
aλ
)aλ
          
(a
)
(b
     
     
−
−
−
−

21
13
21
23
2N
1N
2
21
12
22

b 
a
          
          
     
          
          
          
a  
...
          
a
          
a    
32
3N
33
31

:  
         
:
        
          
          
          
:
:
       
:
          
      
          
:
        
          


a
          
          
         
a
          
     
          
a    
          
          
b
...
a   

 
 
Again, the important point is that the linear system A(2,1)  x  =  b  has the same solution 
x  as the original system  A x = b . 
 
As we develop this method, let us consider a particular system; for example, the set of 
equations 
 

)bλ
21
1










3

N

(1.2.1-14)  

x1 + x2 + x3 = 4 
2x1 + x2 + 3x3 = 7 
                     3x1 + x2 + 6x3 = 2     (1.2.1-15) 
 
The original augmented matrix for this system is 
 

4     1     1     1


7    3     1     2

2    6     1     3









     (1.2.1-16) 

(A,  b ) = 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

 

6

Since a11 ≠ 0, we can define 

λ =
21

a
a

2
1

=      (1.2.1-17) 
2

21

 = 

11

 
We now perform the row operation (1.2.1-10) (cid:198) (1.2.1-14) to obtain 
 

          
      
          
1
2
(2)(1)
        
1
−
−
      
          
          
3

1 
          
4
         
          
          
1 
(2)(1)
(2)(1)
7
        
        
3
−
−
          
          
          
         
1 
6
2







(2)(4)

 







(A(2,1),  b  (2,1)) = 

 

 

               =

       
4
1     1
        
1


     0
     1     1
1
−
−

        
2
       
6     1
3









     (1.2.1-18) 

2j

=

b

2

−

bλ
21

1

(2,1)
2

 (1.2.1-19) 

 
We now wish to continue this process to place a zero in the (3,1) position of the 
augmented matrix. 
If 
b ,aλ
a
a
(2,1)
=
−
21
1j
2j
 
We write the augmented matrix following the first row operation as 
 
 
(A(2,1),  b
(2,1)) = 
          
          
          
a
a
     
b
          
a   
          
...
    
          
a
          

1N
12
11
1
13

a
  
          
a   
        
b
a
          
        
          
...
          
       
          
0
(2,1)
(2,1)
(2,1)
(2,1)

22
2N
2
23

a
          
a    
          
a
     
...
          
a  
          
b 
          
          
          
31
32
33
3N

:  
:
      
         
:
          
       
        
          
:
:
          
          
          
:
        
          


          
         
a
     
          
a    
          
          
b
          
          
...
a
a   

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 










NN

3

N

N1

N2

N3

     (1.2.1-20) 

 

7

If a11 ≠ 0, we now define the finite scalar 

a
a
11
And perform the following row operation, noting 
a




a



λ =
31

aλ
31

a31-

=

−

=

−

31

11

a

11

a

31

a

31

11

 
 

31

   (1.2.1-21) 

a

=

0

     (1.2.1-22) 

31

 
 
(A(3,1),  b
(3,1)) = 
          
          
          
          
a
a
     
b
          
a   
          
...
    
a
          

12
1
1N
13
11

0
        
a
a
  
          
a   
        
b
          
...
          
       
          
          
(2,1)
(2,1)
(2,1)
(2,1)

2
22
2N
23

          
          
a
          
  
          
a   
          
         
b
...
       
a
        
0
(3,1)
(3,1)
(3,1)
(3,1)

3
32
3N
33
:  
          
        
          
      
         
          
       
        
          
          
:
:
          
:
:
:


a
          
          
         
a
          
     
          
a    
          
          
b
...
a   


 
Where  

NN

N2

N3

N1

N

a
a
b
bλ
b  ,aλ
(3,1)
(3,1)
=
−
=
−
1j
3j
3j
31
3
3
31
1
For our system with (A(2,1),  b (2,1)) given by (1.2.1-18), 
 

     (1.2.1-24) 

a
a

=

31

11

3
1

λ

31

=

=

3

  (1.2.1-25) 

 

     (1.2.1-23) 











and 

 
 
 
 
 
 
 
 
 
 

 

(A(3,1),  b (3,1)) = 

=

4
        
1
         
          
1
       
          
          
1     


0     
          
      
          
1
          
       
1
      
1
−
−

1     
(3)(1)
      
(3)(1)
3
(3)(1)
6
(3)(4)
2     

−
−
−
−

4
1
        
1
1
      
        




     0
      
     1
1
1
−
−


     0
     3     2
10


−
−



     (1.2.1-26) 

 







8

In general, for N > 3, we continue this process of row operations until all elements of the 
1st column are zero except aN.  The augmented system matrix at this stage of the 
calculation will be: 
 

(N,1)

(A

b,

(N,1)

)

=

  (1.2.1-27) 

b
        
a
       
        
...
a
       
a    
a

11
1N
13
     
12

0
a
a
       
b
       
a
...
     
       
       
(2,1)
(2,1)
(2,1)

2N
23
22

       
a
a
...
       
a
b
       
     
       
0
(3,1)
(3,1)
(3,1)

3N
33
32
          
    
:
          
          
:
:
: 
          
:


a
a
...
       
       
       
a
    
0
(N,1)
(N,1)
(N,1)


NN
N3
N2

b
       











1
(2,1)
2
(3,1)
3

(N,1)
N

 
We now move to the 2nd column and perform row operations to place all zeros below the 
(2,2) position. 

First, if 

a

(2,1)
22

≠

 
define
λ 
 we0

32

a

(3,2)
3j

=

a

(3,1)
3j

−

=

a
(3,1)
32
a
(2,1)
22
aλ
(2,1)
32
2j

 (1.2.1-28) and perform the row operation 

b     
,

(3,2)
3

=

b

(3,1)
3

−

bλ
31

1

  (1.2.1-29) 

 
so
a
 that 
 
 

0
32 =  
(3,2)

(3,2)

(A

b,

(3,2)

)

=

     (1.2.1-30) 











(N,1)
N

b
       

a
        
       
b
        
...
a
       
a    
a

11
12
1
1N
13
     

0
a
a
       
a
b
       
     
...
       
       
(2,1)
(2,1)
(2,1)
(2,1)

2
2N
23
22

        
a  
...
       
a
b
       
     
          
0
0
(3,2)
(3,2)
(3,2)

3
3N
33
          
          
          
: 
          
:
:
:
    
:


a
a
...
       
       
       
a
    
0
(N,1)
(N,1)
(N,1)


NN
N3
N2
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

 

9

For our system with (A(3,1),  b (3,1)) given by (1.2.1-26), 
 

λ

32

=

a
a

(3,1)
32
(2,1)
22

=

(
(

2)
−
1)
−
 

=

2

     (1.2.1-31) 

so that 
 
 

(3,2)

(A

b,

(3,2)

)

=

 4     
1     
          
          
1   
          
          
          
1


          
          
          
1   
          
          
1  
1  
0
−
−

     
     0
(3)
(2)(1)
(
(2)(
1)
(
     
10)
2)

−−
−
−
−
−

4     1     1     1




   1     1  0
1
−
−


8  1     0     0


−


 
In general for N > 3, we continue this process with another N - 3 row operations 
 to place all zeros in the 2nd column. 
(3,2)
(4,2)
(N,2)
(A
...
b ,
)
(A
b,
)
(A
b,
)
(3,2)
(4,2)
(N,2)
→
→→
 

     (1.2.1-32) 

(2)(

1)
−







=

 

(N,2)

(A

b,

(N,2)

)

=

(1.2.1-33) 

        
a
       
b
        
...
a
       
a    
a

1
1N
13
     
12
11

0
a
a
       
b
       
     
a
...
       
       
(2,1)
(2,1)
(2,1)
(2,1)

22
23
2N
2

        
a  
...
       
a
b
       
     
          
0
0
(3,2)
(3,2)
(3,2)

3
3N
33
          
: 
          
:
    
          
:
          
:
:


        
0
          
a  
...
       
a
    
0
(N,2)
(N,2)


NN
N3

b
       

(N,2)
N











 
We then move to the 3rd column and perform row operations to place all zeros below the 
(3,3) position then in column #4, we put all zeros below (4,4), etc. 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

 

10

When we are finished, the system augmented matrix is of the following upper triangular 
form 
 

1)-N(N,

(A

b,

1)-N(N,

)

=

a
         
       
b
        
        
...
a
a
       
a    
a

1N
14
13
1
     
12
11

0
a
       
a
a
       
       
      
     
b
a
...
       
(2,1)
(2,1)
(2,1)
(2,1)
(2,1)

22
23
24
2N
2

        
0
          
a  
a
...
       
a
b
       
      
     
0
(3,2)
(3,2)
(3,2)
(3,2)

3N
34
33
3
        
          
        
a
a
      
b
...
     
0   
          
0
0

(4,3)
(4,3)
(4,3)
4N
44
4

          
          
    
          
: 
          
          
          
:   
:   
:
:
:
:


        
0
          
0    
          
0
...
a
       
       
b
      
0
1)-N(N,
1)-N(N,

N
NN

     (1.2.1-34) 












 
For our example system with N =3, the final augmented matrix is 
 
 

(3,2)

(A

b,

(3,2)

)

=

          
1     
 4     
          
          
1   
          
          
1


          
          
1   
          
          
0
1  
          
1  
−
−

          
0
          
1   
          
          
0    
          
8-   









     (1.2.1-32, repeated) 

 

 
By “upper triangular” we mean that the only non-zero elements are found on or “above” 
the principal diagonal. 
 
a


11


     \


       
a


22


          
above
 
   \     
 " 
⇒




"
diagonal"
 
   the
a  
  
below
⇐
33


diagonal"
     \
the
 




          
          
a
      


 
 
                                                  the “principal diagonal” 
 
 
 
 
 
 
 
 
 
 
 

NN

 

11

N

 

[b

(N
2)N1,
−
−
1N
−

a

]x
N

a
2)N1,
(N
−
−
−
N1,N
−
(N
2)N1,
−
−
1N1,N
−
−

     (1.2.1-39) 

We now write out the equations of the system defined by this modified matrix,  
A(N, N-1)
1)N(N,b
−
x
 
=
 

               

(1.2.1-35) 

2

N

a11x1 + a12x2 + a13x3 + … + a1NxN = b1 
a
b
x
x
x
a
a
...
(2,1)
(2,1)
(2,1)
(2,1)
=
++
+
23
2N
3
2
22
a
x
...
x
b
a
(3,2)
(3,2)
(3,2)
++
=
3N
3
33
3
          
          
:  
          
          
:  
a
a
x
2)N1,
(N
2)N1,
(N
−
−
−
−
+
N1,N
1N
1N1,N
−
−
−
−
b
a
x
1)N(N,
1)N(N,
−
−
=
N
NN

(N
2)N1,
−
−
1N
−

x

=

b

N

N

 
For our system with N = 3, (1.2.1-32) gives the equations 
 

x1 + x2 + x3 = 4 
-x2 + x3 = -1 
                       x3 = -8        (1.2.1-36) 
 
We see that we can immediately solve for the last unknown from  
 

x

N

=

b
a

1)N(N,
−
N
1)N(N,
−
NN

     (1.2.1-36) 

 
 
For (1.2.1-36), we have x3 = -8/1 = -8     (1.2.1-38) 
 
Then, we can work backwards, next solving for xN-1, 
 

a

(N
2)N1,
−
−
1N1,N
−
−

x

1N
−

+

a

(N
2)N1,
−
−
N1,N
−

x

N

=

b

(N
2)N1,
−
−
1N
−

⇒

x

1N
−

=

For (1.2.1-36), 
 

x2 = 

1[
−−
(

(1)(
1)
−

 

−

8)]

7
−=

     (1.2.1-40) 

 
 
 
 
 
 
 
 

12

Next we solve for xN-2, 
 

x

2N
−

=

For (1.2.1-36) 
 

[b

(N
3)N2,
−
−
2N
−

−

a

x
(N
3)N2,
−
−
2N2,N
1N
−
−
−
a
(N
3)N2,
−
−
2N2,N
−
−
 

−

a

(N
3)N2,
−
−
N2,N
−

x

N

     (1.2.1-41) 

[4

−

(1)(

x1 = 

7)
−−
1

(1)(

8)]
−

 = 19     (1.2.1-42) 

 
Therefore, the solution to the set of equations 
 

x1 + x2 + x3 = 4 
                                      2x1 + x2 + 3x3 = 7     (1.2.1-15, repeated) 
3x1 + x2 +6x3 = 2 
 

is 
 

x

=

1

2

3

x
x
x



















     (1.2.1-43) 

19


7
−=

8

−

 
While we have found one solution to the set of equations (1.2.1-15) it remains to be 
proven in section 1.3 that this is the only solution. 
 
The process of solving for the unknowns by starting at the last position, and working 
backwards with the equation set generated by the upper triangular matrix is known as 
backward substitution. 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

 

13

We therefore have the following algorithm to transform our system to upper triangular 
form using Gaussian elimination: 
 
> allocate N2  memory locations to store A, and N each for 
    
 
For i = 1, 2, …, N-1      % iterate over columns from left (cid:198) right 
>if aii = 0, STOP to avoid division by zero 

and x
b 

 

For j = i+1, i+2, …, N   % iterate over rows below diagonal 
a
ji
λ ←  
a
ii

> 

 

For k = I, I+1, …, N  % iterate in row j from the ith column to right 
(cid:190) ajk (cid:197) ajk - 
 ikλa

end 

 

 

 

>bj(cid:197)bj - 

iλb

   

 

i
→
a  
ii
↓→

j

k








 








end 

 
 end 
    
We see that the basic computational unit of this algorithm is d (cid:197) a + b*c 
Comprised of two “floating point operations”, an addition and a multiplication, plus a 
memory assignment in d denoted as (cid:197). 
 
 
Each of these operations is equivalent, by most people’s definition, to 2 FLOP’s (FLOP = 
“floating point operation”, +, -, , / between two numbers in memory).  I will call the 
combined operation d (cid:197) a + b*c a “computational unit”, or CU, 1CU = 2 FLOP’s. 
 
 
We see that since there are three nested loops running over all or a part of [1,N], that the 
number of CU’s, or FLOP’s, scales as N3.  Gaussian elimination using this algorithm is 
very slow for large N! 
 
 
 
 
 
 
 

 

14

% perform backward substitution 
>Allocate N memory locations for the components of  x  
 

For I = N, N-1, … 1 % iterate over rows from bottom 
>sum = 0 
 
For j = I+1, I+2, …, N 
>sum (cid:197) sum + aij*xj 

end 
>xi (cid:197) 

sum]

 

[b −
i
a

ii

 

end 
 
As there are only two nested loops, the number of calculations required to perform 
backward substitution scales as N2. 
 
So, in the limit of large N (i.e. many unknowns) it takes far more time (N3) to perform the 
elimination row operations necessary to put the system in upper triangular form than it 
does (N2 << N3) to perform backward substitution. 
 
Let us now determine the exact number of FLOP’s, “floating point operations”, required 
to perform the elimination, 
and ,
υ
backward
 
 the
substituti
 
 υon,
 .
elim
sub
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

 

15

First, consider the Gaussian elimination step. 
 
Let v1 = # of FLOP’s required to put all zeros in the 1st column 
 
To put a zero at (2,1) to go from (1.2.1-10) to (1.2.1-14), we see on page 1.2.1-6 that we 
need to perform a row operation involving 2(N+1) FLOP’s,     d (cid:197) a + b*c = 2 FLOP’s 
 
λ 
calc.
 1    
FLOP
−
21
 1)
FLOP'
a  
calc.
(N x 2    
s
−
−
FLOP
b 
 1 x 2    
calc.
(2,1)
−
2
(N 2~
FLOP'
for the
 1)
row 
 s
+
 
To place all zeros in the remainder of column 1, we need to perform another (N-2) row 
operations to place zeros at (3,1), (4,1) … (N,1). 
Each row operation requires 2(N+1) FLOP’s. 
 
So, the total number of FLOP’s required to place all zeros below the diagonal in column1 
is 
 

operation
 

...,
a 
 ,

(2,1)
2N

(2,1)
22

a,

(2,1)
23

 

v1 = (N-1)2(N+1)     (1.2.1-44) 

 
 
 
                                  # of row operations      # of FLOP’s per row operation 
 
Next to move from (A(N,1), 
) (1.2.1-27) to (A(3,2), 
(3,2)b
(N,1)
) (1.2.1-30) 
b
We need to perform a row operation involving one FLOP less than those in column 1 – 
so each column 2 row operation involves 2N FLOP’s.  We need to perform now only (N-
2) row operations, so 
 

v2 = (N-2)(2N)     (1.2.1-45) 

 
 
 
 
                                  # of row operations      # of FLOP’s per row operation 
 
 
 
 
 
 
 
 
 

 

16

In general, to place zeros below the diagonal in column #I will require (N – i) # of row 
operations, each involving 2(N + 2 – i) FLOP’s.  The total number of FLOP’s required 
for column #I is therefore 
 

vi = (N – i)(N + 2 – i)2     (1.2.1-46) 
 

 
 
                                  # of row operations      # of FLOP’s per row operation 
 
The total number of FLOP’s required to perform the Gaussian elimination is therefore 
1N
1N
−
−
1N
−
∑∑
∫
     (1.2.1-47) 
(N
i)(N
i)2
2
(N
x)(N
x)dx
2
2
v
Velim = 
−+
−+
=
i
1
1i
1i
=
=

−

≈

−

 
                                                         For large N 
 
For N very large, N-1
≈
N
∫
v
2
(
≈
0
N
∫
N
dx
[2
2
≈
−
0
So, in the limit of large N,  

Nx2NN,
≈−+
N
∫
dx
xN
)
2
2
−
=
0
∫
+
0

so x,
 
−
N
2
(
2
−

xdx

dx

∫
0

N

elim

x

]

N

N

2

2

xN

+

2

x

)

=

[2

NN
2

dx
1(2
NN
2

−

2

)

+

 

N

3

]

1
3

velim 

     (1.2.1-48) 
 
For backward substitution, inspection of the algorithm on page 1.2.1-15 shows that vsub., 
the total number of required FLOP’s is 
 

3N

2
3

        

1
2

N
∑
1i
=

2

2

−

≈

≈

−

=

1)

(N

2[N

i
+−

x)dx

1)dx

x
+−

Vsub. = 

N]N
2
=

N
∫
(N2
1

N
∫
(N2
0
(1.2.1-49) 
 
Therefore, for large systems of equations, where the number of calculations required to 
solve the system is a concern, velim >> vsub, so the CPU time required to perform 
backward substitution is trivially small. 
 
 
 
 
 
 
 
 
 
 

 

17

Such scaling issues are a large concern, since in this course we will often solve large 
systems of linear equations. 
 
For example, let us say that we wish to solve a partial differential equation (e.g. the 
2 =∇ c
0
diffusion equation 
) on a 3-D domain.  We place a grid of points (x
i, yj, zk) 
throughout the computational domain, 
 
 

100 grid points in z-direction 
zk ∈ [z1, z2, …, z100] 

100 grid 
points in the 
x-direction 
xi 
 [x1, x2, 
∈
…, x100] 
                                  
 
 
The total number of grid points (xi, yj, zk) in the 3-D mesh is 102 x 102 x 102 = 106 
 
If we develop a method to solve a linear system of algebraic equations for the 
concentration at each point, we have a system of 106 equations for 106 unknowns. 
 
For Gaussian elimination, look at # FLOP’s and # of memory locations required to solve 
a system of N equations 
 

100 grid points in y-direction  
yj∈ [y1, y2, …, y100] 

 

N 

# FLOP’s (

3N

) 

# of memory locations to 
store A (N2) 
(102)2 = 10,000 

 

 

(104)2 = 108 = 100,000,000 

(106)2 = 1012 = 
1,000,000,000,000 

(10
 x 

2
3
2
(10
 x 
3
2
3

(10
 x 

6

 

10
 x 

2
3
2
10
 x 
3
2
3

10
 x 

12

18

102 = 100 

104 = 10,000 

106 = 1,000,000 

≈

≈

≈

 
 
 
 
 
 
 
 
 
 

 

2
3
≈

)
32

)
34

≈

)
36

≈

18

For a system of 106 unknowns we would need 1012 locations in memory to store A – not 
possible. 
 
Even if we could store A, then even on a tera-FLOP supercomputer (1012 FLOP’s per 
second performance), the CPU time required to perform the Gaussian elimination is 
1min
1hr
1day
10
FLOP'
s
18
s)(
24hr
60s
60min
FLOP'
s/sec.
10
12

CPU time 

(10

)(

)(

)

≈

12days!
!

 

 
Even though Gaussian elimination appears useful (as we have developed it) for small 
systems, we will need to develop other methods later to solve the large systems that arise 
when solving partial differential equations and other challenging problems. 
 
Note, even for small systems, some question’s remain: 
(cid:190) What do we do if a11=0, or another aji when we calculate the  λ  factors during 
Gaussian elimination. 
We have found a way to obtain one solution, if no problems                      
(cid:190) 
with division by zero.  Are there any other solutions? 

≈

≈

6

 

 

19

