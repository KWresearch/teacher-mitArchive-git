Massachusetts Institute of Technology 
6.042J/18.062J, Fall ’05: Mathematics for Computer Science 
Prof. Albert R. Meyer and Prof. Ronitt Rubinfeld 

October 3 
revised October 8, 2005, 979 minutes 

Solutions to Problem Set 3


Problem 1.  (a)  List all the different binary relations on the set {0,  1}. 
Solution.  There are altogether 16 binary relations. 
∅
1. 
{(0,  0)}
2. 
{(0,  1)}
3. 
{(1,  0)}
4. 
{(1,  1)}
5. 
{(0,  0),  (0,  1)}
6. 
{(0,  0),  (1,  0)}
7. 
{(0,  0),  (1,  1)}
8. 
{(0,  1),  (1,  0)}
9. 
10.  {(0,  1),  (1,  1)}
11.  {(1,  0),  (1,  1)}
12.  {(0,  0),  (0,  1),  (1,  0)}
13.  {(0,  0),  (0,  1),  (1,  1)}
14.  {(0,  0),  (1,  0),  (1,  1)}
15.  {(0,  1),  (1,  0),  (1,  1)}
16.  {(0,  0),  (0,  1),  (1,  0),  (1,  1)} 

� 

(b)  Over the domain {0,   1}, which of these relations are weak partial orders?  strict partial 
orders?  equivalence relations? 

Solution.  We ﬁrst list the relations that satisfy each of the following properties: 

•  reﬂexive:  8,   13,  14,  16  
•  symmetric:  1,   2,   5,   8,   9,   12,  15,  16 
•  antisymmetric:  1,   2,   3,   4,   5,   6,   7,  8,  10,  11,  13,  14 
•  transitive:  1,   2,   3,   4,   5,   6,   7,   8,   10,  11,  13,  14,  16 

Copyright © 2005, Prof. Albert R. Meyer and Prof. Ronitt Rubinfeld. 

Solutions to Problem Set 3 
2 
From  this we  can  see  that  the weak partial orders are {8, 13, 14},  the  strict partial orders 
are {1, 3, 4}, and the equivalence relations are {8, 16}. 
� 

Problem 2.  We partially order the power set, P ({1, 2, . . . , n}), by the subset relation, ⊆. 

(a)  Describe a maximum length chain in P ({1, 2, . . . , n}). Brieﬂy explain why there can’t 
be a longer chain than the one you described. 

Solution.  The length n +  1  chain 
∅, {1} , {1, 2} , {1, 2, 3} , . . . , {1, 2, . . . , n} 

is a maximum length chain.  There can’t be a longer one:  any longer chain would have to 
contain two subsets of the same size (think about why!), and no ﬁnite set is contained in 
� 
any other set of the same size. 

(b)  Describe a topological sort of P ({1, 2, . . . , n}), with a brief justiﬁcation that your sort 
is correct. 

Solution.  All sets of size 0, followed by all sets of size 1  (in any order), followed by all sets 
of size 2  (again,  in any order),  . . ., followed by all sets of size n.  See Figure 1 for the case 
of n = 3.  ∅, {1}, {2}, {3}, {1, 2}, {1, 3}, {2, 3}, {1, 2, 3} is a topological sort of this relation. 
Note that not all chains and antichains are labelled. A chain is any group that is connected 
in some manner with arrows. Antichains are groups of elements where no two members 
� 
are connected. 

(c)  Use Dilworth’s Lemma to show that there must be an antichain of size ≥ 2n/(n +  1). 
Describe the biggest antichain that you can ﬁnd. 

Solution.  Since  a maximum  length  chain  is  of  size  at most n +  1,  and  the powerset has 
2n  elements,  Dilworth’s  Lemma  tells  us  that  there  must  be  an  antichain  of  size  at  least 
2n/(n +  1). 
A maximum  length  antichain  is  the  set of  all  subsets  containing  exactly  �n/2�  elements; 
the  only  other  one  is  the  set  of  all  subsets  containing  exactly  �n/2�  elements  (of  course 
√
these are the same if n is even). A proof of this is actually tricky. The size of this antichain 
2πn. We can’t present proofs of either of these facts yet, because they depend 
is about 2n/
� 
on concepts that won’t be introduced for another month. 

Solutions to Problem Set 3


3 

{}
Q
Q
Q


Q
Q





Q
Q
Q



= 
{1} 
Q
Q

QQ
s
? 
{2} 
{3}
Q

 Q

 
Q
Q
 
Q 
Q 
Q 
Q 
 Q
 Q
Q
Q


QQ ?

QQ + 
?+ 
s 
s 
{2,3} 
{1,2} 
{1,3} 
HHHHHHHH


j  ? 
{1,2,3} 

antichain

antichain

chain 

Figure 1: DAG for Problem 4(c) with n = 3. 

Problem 3.  Consider the natural numbers partially ordered by divisibility. 

(a)  Prove that this partial order has an inﬁnite chain. 

Solution.  1 2 4 8 16 . . . is a chain with inﬁnite length.	

� 

(b)  Prove that this partial order has an inﬁnite antichain. 

Solution.  The set of prime numbers is inﬁnite.  Since no prime divides another, any two 
� 
primes are incomparable.  So the set of prime numbers is an antichain. 

(c)	 Now restrict the domain to the natural numbers ≤ n.  Consider the chain 1  �R  2  �R 
R  . . .  �R  2�log2  n� . Prove that it is maximal.
4  �
Solution.  Suppose there is a longer chain a0  �R  a1  �R  a2  �R  . . .  �R  am .  Since this chain 
is  longer, m  ≥ �log2  n� +  1.  For  i ∈ {1, 2, 3, . . . , m},  let ai  =  piai−1 , where pi  is an  integer 
greater than 1. Then am  =  p1p2  . . . pma0 .  Since each pi  ≥ 2  and a0  ≥ 1, we have 

Solutions to Problem Set 3


am  =	 p1p2  . . . pma0 
≥ 
2m a0
2m≥ 
≥  2�log2  n�+1 
>  2log2  n 
=  n, 
which is a contradiction since am  ≤ n as am  ∈ A.	

4 

� 

(d)  Let c be the length of the power of 2 chain. By Dilworth’s Lemma there is an antichain 
of length n/c. Describe one. 
Solution.  The set {� 2  � + 1, � 2 � + 2, . . . , n} is an antichain with size � 2 �, which is no less 
n	
n
n
� 
than the lower bound. 

Problem 4.  We  consider DAG’s where  each vertex  represents a  task  to be  completed.  If 
there is a path from one vertex, v , to another vertex, w , then the v task must be completed 
before the w task. Assuming all tasks take unit time to complete, we showed in the Notes 
that the minimum time schedule to complete all the tasks is the size (number of vertices), 
t, of the longest path (chain) in the DAG. 
Formally,  a  schedule  for  a DAG  is  a  partition  of  the  vertices.  Each  block  of  the  partition 
is supposed to correspond to a set of tasks that are to be performed simultaneously.  The 
number of processors required by a schedule is the maximum number of tasks that are sched­
uled to be performed simultaneously. 

(a)  Describe purely in terms of graph, partition, and partial order properties (no informal 
descriptions in terms of “jobs,” “parallel processing,” etc.): 

•	 exactly the properties a vertex partition of a DAG must satisfy in order to represent 
a possible schedule for the vertex tasks, 
•	 the total time required to complete a schedule, 
•	 the number of processors required by a schedule. 

Solutions to Problem Set 3 

5 

Solution. 
•  A schedule for a DAG, G,  is a partition of the edges of G into a sequence 
of blocks, B1 , B2 , . . . , Bk  such that if a  ∈ Bi , b ∈ Bj , and a  < b (that is, there is a path 
of positive  length  from vertex a  to vertex  b),  then  i  <  j .  Another way  to  say  this  is 
that the blocks are anti­chains, and the sequence consisting of the elements in B1  in 
any order, followed by the elements of B2  in any order, through the elements of Bk , 
is a topological sort of the partial order deﬁned by G. 
•  The total time required to complete a schedule is the number, k , of blocks it has. 
•  The number of processors required by a schedule is the size of the largest block. 

� 

(b)  Give a small example of a DAG with more than one minimum time schedule. 
Solution.  V  =  {1, 2, 3} , E =  {1 −→ 2}. There are two minimum time schedules: {{1, 3} {2}}
and {{1} {2, 3}}. 
� 

(c)  Explain why any schedule  that  requires only p processors  to complete n tasks must 
take time at least �n/p�. 
Solution.  If there are k < �n/p�, then the integer k is less than n/p.  So if there are k blocks 
and each block has at most p vertices, the total number of vertices is ≤ kp < (n/p) =  n,
· p
� 
a contradiction. 

(d)  Let Dn,t  be  the DAG with n vertices  that consists of a directed path of  t − 1  vertices 
ending  with  edges  from  the  ﬁnal,  (t −  1)st,  vertex  on  the  path  directly  to  each  of  the 
remaining n − (t − 1)  vertices, as in the following ﬁgure: 

What  is  the  minimum  time  schedule  for  Dn,t?  Explain  why  it  is  unique.  How  many 
processors does it require? 

. . .. . .t - 1n - (t - 1)Solutions to Problem Set 3 
6 
Solution.  There’s no choice but to schedule each of the t  − 1  vertices on the path one at a 
time in order.  A minimum time schedule then does all the remaining n  − (t  − 1)  vertices 
at the tth time interval. The number of processors required is therefore n  − t + 1. The time 
� 
is t, the number of vertices on the longest chain in the graph. 

(e)  Describe a minimum time p­processor schedule for Dn,t .  Write a simple formula for 
this minimum time, M (n,  t,   p). 
Solution.  As  in  part  (??),  there’s  no  choice  but  to  schedule  each  of  the  t  − 1  vertices  on 
the  path  one  at  a  time  in  order.  A minimum  time  schedule  then  does  all  the  remaining 
� 
� 
n  − (t  − 1)  vertices p  at a time, for a total time of 
n  − (t  − 1) 
. 
p 

M (n,  t,   p) ::=  (t  − 1)  + 

(1) 

� 

(f)  Show  that  every DAG with n  vertices and maximum chain  size,  t, has a p­processor 
schedule that runs in time M (n,  t,   p). 
Hint:  Induction – you decide on what variable. You may ﬁnd it helpful to use the fact that 
if a  ≥ b  ≥ 0, then 
�
a  − b� ≤ 1  +  �
a� − �b� 

(2)

for all real numbers a,   b. 

Solution.  Proof.  Induction on t.  Induction hypothesis: 
P (t) ::=  ∀ DAGs G,  ∀n,  p   ∈  N+ ,  if G  has  n  vertices  and maximum  chain  size  t, 
then there is a p­processor schedule for G  that takes time M (n,   t,  p). 

Base  case  t  = 1:  In  this  case  there  are  n  vertices  and  no  edges  between  them.  So  any 
partition of the vertices into �n/p� blocks of size at most p  will be a p­processor schedule 
taking time �n/p� = 0  +  �(n  − 0)/p� =  M (n,  1,  p). 
Inductive step: Assume P (t) and conclude P (t  +  1) where t  ≥ 1. 
Let  G  be  any  DAG  with  n  vertices  and  maximum  chain  size  t  +  1.  Suppose  k  vertices 
are  endpoints  of  maximum­size  chains  in  G.  Note  that  no  edge  can  leave  any  of  these 
endpoint vertices, for otherwise there would be a chain of length one more than the max­
imum chain size. Let H  be the subgraph of G  obtained by removing these k  vertices. 
Now H  is a DAG with n  − k  vertices and maximum chain size t, so by Induction Hypoth­
esis, there is a p­processor schedule for H  taking time M (n   − k ,   t,  p). 

(def of M ) 

=  (t  − 1) + 

=  (t  − 1) + 

Solutions to Problem Set 3 
7 
This  p­processor  schedule  for H  can  be  extended  to  one  for  G  by  adding  �k/p�  disjoint 
�  � 
blocks of the endpoints, all of size ≤ p.  So the time for this schedule for G  is 
�  �  � 
� 
M (n  − k , t,  p) + 
k 
p 
n  − k  − (t  − 1) 
�  �  � 
� 
k 
+ 
p 
p
k  − 1
n  − t
− 
k 
+ 
p 
p 
p
We complete the proof by showing that the expression (??) is ≤ M (n,   t  + 1, p).  To do this, 
we consider two cases: 
�  �  � 
� 
•  Case 1 (k   − 1 is not a multiple of p): We have 
k  − 1
k
= 
, 
p 
p
�� � � 
� 
�
k  − 1
� �� � � 
�
− 
k
+ 
p
p
− 
k 
k
+ 
p
p 

� 
n  − t
� 
p 
n  − t 
p 

(by (??)) 

(by (??)) 

so 

=  t  + 

� 
� 
(??) ≤ (t  − 1) +  1 + 
� 
� 
=  (t  − 1) +  1 + 
n  − t 
p 
=  M (n, t  + 1, p).  
�  � 
•  Case 2 (k   − 1 is a multiple of p): Now we have 
k  − 1 
k 
=  1 + 
p 
p 
�  �  � 
+ � 
k 
p 
k  − 1 
+  1 + 
p 

� 
�� 
n  − t 
k  − 1 
p � 
(??) =  (t  − 1) +  � 
− 
p 
k  − 1 
n  − t 
� 
p� 
=  (t  − 1) + 
− 
p 
n  − t 
p 
=  M (n,  t  + 1, p).  

=  t  + 

so 

, 

(3) 

(4) 

(def of M ) 

� 

(since (k  − 1)/p  ∈ Z) 

(by (??)) 

(def of M ) 

(5) 

� 

