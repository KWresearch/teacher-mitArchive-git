Massachusetts Institute of Technology 
6.042J/18.062J, Fall ’05: Mathematics for Computer Science 
Prof. Albert R. Meyer and Prof. Ronitt Rubinfeld 

October 21 
revised October 21, 2005, 1022 minutes 

In­Class Problems Week 7, Fri. 

Problem 1.  By now you are very familiar with the 6.042 icon that appears on the course webpage 
and lecture slides.  This icon is a picture of a game called the Fifteen Puzzle.  In this problem you 
will  establish  a  basic  property  of  the  Fifteen  Puzzle  using  the method  of  invariants,  which may 
help you appreciate why this icon was chosen as the course logo. 
The Fifteen Puzzle  consists of  sliding  square  tiles numbered  1, . . . , 15  held  in  a  4  × 4  frame with 
one empty square. Any tile adjacent to the empty square can slide into it. 
The standard initial position is 

4 
3 
2 
1 
5 
6 
7 
8 
9 
10  11  12 
13  14  15 

We would like to reach the target position (known in my youth as “the impossible” — ARM):


15  14  13  12 
11  10 
9 
8 
5 
6 
7 
4 
3 
2 
1 

A state machine model of the puzzle has states consisting of a 4× 4 matrix with 16 entries consisting 
of the integers 1, . . . , 15  as well as one “empty” entry—like each of the two arrays above. 
The state  transitions correspond  to exchanging  the empty square and an adjacent numbered  tile. 
For example, an empty at position (2, 2)  can exchange position with tile above it, namely, at posi­
tion (1, 2): 

n2 

n1 
n3 
n4 
n5 
n7 
n6 
n8 
n9  n10  n11 
n12  n13  n14  n15 

−→ 

n1 
n3 
n4 
n5 
n2 
n7 
n6 
n8 
n9  n10  n11 
n12  n13  n14  n15 

We will  use  the  invariant method  to  prove  that  there  is  no way  to  reach  the  target  state  starting 
from the initial state. 
We begin by noting that a state can also be represented as a pair consisting of two things: 

1.  a list of the numbers 1, . . . , 15  in the order in which they appear—reading rows left­to­right 
from the top row down, ignoring the empty square, and 

Copyright © 2005, Prof. Albert R. Meyer. 

2 

In­Class Problems Week 7, Fri. 

2.  the coordinates of the empty square—where the upper left square has coordinates (1, 1), the 
lower right (4, 4). 

(a)  Write out the “list” representation of the start state and the “impossible” state. 

Let L be a  list of  the numbers 1, . . . , 15  in  some order.  A pair of  integers  is an  out­of­order pair  in 
L when  the  ﬁrst  element  of  the  pair  both  comes  earlier  in  the  list  and  is  larger,  than  the  second 
element of the pair.  For example, the list 1, 2, 4, 5, 3 has two out­of­order pairs:  (4,3) and (5,3). The 
increasing list 1, 2 . . . n has no out­of­order pairs. 
Let a state, S , be a pair (L, (i, j ))  described above. We deﬁne the parity of S to be the mod 2 sum of 
the number, p(L), of out­of­order pairs in L and the row­number of the empty square,  that is the 
parity of S is p(L) +  i  (mod  2). 

(b)  Verify that the parity of the start state and the target state are different. 

(c)  Show that the parity of a state is invariant under transitions.  Conclude that “the impossible” 
is impossible to reach. 

By  the way,  if  two  states  have  the  same  parity,  then  in  fact  there  is  a way  to  get  from  one  to  the 
other.  If you like puzzles, this is a good one to think about on your own about after class. 

In­Class Problems Week 7, Fri. 

3 

Problem 2.  The most straightforward way to compute the bth power of a number, a, is to multiply 
a  by itself b times. This of course requires b − 1 multiplications. There is another way to do it using 
considerably fewer multiplications. This algorithm is called Fast Exponentiation: 
Given inputs a  ∈ R, b  ∈ N, initialize registers x, y , z   to a,  1, b  respectively, and repeat the following 
sequence of steps until termination: 

•  if z  = 0 return y  and terminate 

•  r  :=  remainder(z , 2) 

•  z  :=  quotient(z , 2) 

•  if r  = 1, then y   :=  xy  

•  x  :=  x2 

We claim this algorithm always terminates and leaves y  =  a . 
b

(a)  Model this algorithm with a state machine, carefully deﬁning the states and transitions. 

(b)  Let d ::=  ab . Verify that the following predicate, P , is an invariant: 

P ((x,  y , z ))  ::= [yx z  =  d]. 

(c)  Prove that the algorithm is partially correct:  if it halts, it does so with y  =  d. 

(d)  Prove that the algorithm terminates. 

(e)  In fact, prove that it requires at most 2 log2  b  multiplications for the Fast Exponentiation algo­
rithm to compute ab  for b   >   1. 

