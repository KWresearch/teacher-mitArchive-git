Mathematics for Computer Science 
MIT  6.042J/18.062J 

State Machines, I: 
Invariants 

State machines 

State machine: 
Step by step procedure, 
possibly responding to input. 

Copyright © Albert R. Meyer, 2005. 

October 21, 2005 

lec 7f.1 

Copyright © Albert R. Meyer, 2005. 

October 21, 2005 

lec 7f.2 

State machines 
The state graph of a 99-bounded counter: 

start state 
0 

overflow  
1 
2 
99 
States: {0,1,…,99, overflow}

Transitions: 

 0 ≤ i < 99 
i
 i+1

99 
overflow  

overflow  

overflow  

Die Hard 

Picture source: http://movieweb.com/movie/diehard3/ 

Copyright © Albert R. Meyer, 2005. 

October 21, 2005 

lec 7f.3 

Copyright © Albert R. Meyer, 2005. 

October 21, 2005 

lec 7f.4 

Die Hard Once & For All 

State machines 

Supplies: 

3 Gallon Jug 

9 Gallon Jug 

Water 

Die hard state machine 
State  =  amount of water in the jug: (b,l) 
where  0 ≤ b ≤ 9 and 0 ≤l ≤ 3. 
Start State = (0,0) 

Copyright © Albert R. Meyer, 2005. 

October 21, 2005 

lec 7f.5 

Copyright © Albert R. Meyer, 2005. 

October 21, 2005 

lec 7f.6 

1 

State machines 

Die Hard Transitions: 
l b  ) → (b 3,  )
,
(
l b  ) → ( ,9 l ) 
(
,

1. Fill the little jug:  	

2. Fill the big jug:	

for  < 3 
l 
b 
for  < 9 

3. Empty the little jug:	
4. Empty the big jug: 

l b  ) → (b 0,  )
,
(
l b  ) → ( ,0  l ) 
,
(

for  > 0 
l 
b 
for  > 0 

State machines 
5. Pour from big jug into little jug (for b > 0): 
(i) If no overflow, then (b,l) → (0, b+l),
{ 
b + l (cid:47) 3 
(ii) otherwise (b,l) → (b−(3−l), 3). 

6. Pour from little jug into big jug. 
Likewise. 

Copyright © Albert R. Meyer, 2005. 

October 21, 2005	

lec 7f.7 

Copyright © Albert R. Meyer, 2005. 

October 21, 2005 	

lec 7f.8 

State Invariants 
Die hard once and for all 
Invariant: 
P(state) ::= “3 divides the number of gallons 
in each jug.” 
l b 
= (3 | b ∧ 3 | l )
(( 
:: 
)) 
, 

P

State Invariants 
Floyd’s Invariant Method 
(just like induction)

1)  Base case: Show P(start).

2)  Invariant case: Show

r  ,  then P(r).

if P(q) and  q 
3)  Conclusion: P holds for all reachable

states, including ﬁnal state (if any).


Copyright © Albert R. Meyer, 2005. 

October 21, 2005	

lec 7f.9 

Copyright © Albert R. Meyer, 2005. 

October 21, 2005 	

lec 7f.10 

Die Hard Once & For All 

Corollary:  No state 
(4,x) is reachable, so 
Bruce Dies! 

A Robot on the Diagonal 
The robot is on a grid. 
y 

2


1


0


Copyright © Albert R. Meyer, 2005. 

October 21, 2005	

lec 7f.11 

Copyright © Albert R. Meyer, 2005. 

October 21, 2005 	

lec 7f.12 

0 

1 

2 

3 

x

2 

A Robot on the Diagonal 
It can move diagonally
y 

.

A Robot on the Diagonal 
Can it reach from (0,0) to (1,0)? 
y 

2


1


0


0 

1 

2 

3 

x

2


1


0


GOAL 

0 

1 

2 

3 

? 

x 

Copyright © Albert R. Meyer, 2005. 

October 21, 2005 

lec 7f.13 

Copyright © Albert R. Meyer, 2005. 

October 21, 2005 

lec 7f.14 

Robot Invariant 
NO! 
P((x, y)) ::= x + y is even

P((0, 0)) is true.


Transition adds ±1 to both x and y 

Robot Invariant 

So all positions (x, y) reachable by 
robot have x + y even, 
but 1 + 0 = 1 is odd. 

Therefore (1,0) is not reachable. 

Copyright © Albert R. Meyer, 2005. 

October 21, 2005 

lec 7f.15 

Copyright © Albert R. Meyer, 2005. 

October 21, 2005 

lec 7f.16 

Team Problem 
Problem 1

The Fifteen Puzzle 
Explained! 

GCD correctness 

The Euclidean Algorithm: 
Computing GCD(a, b) 
1.  Set x := a,  y := b. 
2.  If y = 0, return x & terminate; 
3.  else set (x, y) := (y, rem(x,y))
simultaneously; 

4.  Go to step 2. 

Copyright © Albert R. Meyer, 2005. 

October 21, 2005 

lec 7f.17 

Copyright © Albert R. Meyer, 2005. 

October 21, 2005 

lec 7f.18 

3 

GCD correctness 

GCD correctness 

Example: GCD(414,662) 
= GCD(662, 414)  
since rem(414,662) = 414 
since rem(662,414) = 248 
= GCD(414, 248) 
since rem(414,248) = 166 
= GCD(248, 166) 
= GCD(166, 82) 
since rem(248,166) =  82 
2 
since rem(166,82)  = 
= GCD(82, 2) 
= GCD(2, 0) 
since rem(82,2) 
= 
0 
Return value: 2. 

Euclid Algorithm as State Machine: 
•  States ::= `×`, 
•  start ::=  (a,b), 
•  state transitions defined by the rule 
 for  y ≠ 0. 
(x,y) → (y, rem(x,y))

Copyright © Albert R. Meyer, 2005. 

October 21, 2005 

lec 7f.19 

Copyright © Albert R. Meyer, 2005. 

October 21, 2005 

lec 7f.20 

GCD correctness 

GCD correctness 

The Invariant is 
P((x,y)) ::=  [gcd(a,b) = gcd(x,y)]. 

P(start):  at start x = a , y = b, so

P(start)  ≡  [gcd(a,b) = gcd(a,b)]

which holds trivially. 


Transitions: (x, y) → (y, rem(x, y)) 

Invariant holds by 
Lemma: gcd(x, y) = gcd(y, rem(x,y)),  

for y ≠ 0.


Copyright © Albert R. Meyer, 2005. 

October 21, 2005 

lec 7f.21 

Copyright © Albert R. Meyer, 2005.. 

October 21, 2005 

lec 7f.22 

GCD correctness 
Conclusion: on termination 
x = gcd(a,b). 

Proof: On termination,  y = 0, so 
x = gcd(x, 0) =  gcd( x  y
a
b
 
,  = 
)
) gcd( ,
144424443 
invariant 

 

 

GCD Termination 
y decreases at each step & 
y ∈ N

(another invariant). 
Well Ordering implies 
reaches minimum & stops. 

Copyright © Albert R. Meyer, 2005. 

October 21, 2005 

lec 7f.23 

Copyright © Albert R. Meyer, 2005. 

October 21, 2005 

lec 7f.24 

4 

Robert W Floyd (1934−2001) 

Team Problem 

Problem 2 

Eulogy by Knuth: http://www.acm.org/pubs/membernet/stories/floyd.pdf 
Picture source: http://www.stanford.edu/dept/news/report/news/november7/floydobit-117.html 

Copyright © Albert R. Meyer, 2005. 

October 21, 2005 

lec 7f.25 

Copyright © Albert R. Meyer, 2005. 

October 21, 2005 

lec 7f.26 

5


