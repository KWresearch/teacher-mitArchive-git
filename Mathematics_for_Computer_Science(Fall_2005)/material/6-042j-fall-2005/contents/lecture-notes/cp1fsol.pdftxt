Massachusetts Institute of Technology 
6.042J/18.062J, Fall ’05: Mathematics for Computer Science 
Prof. Albert R. Meyer and Prof. Ronitt Rubinfeld 

September 9 
revised September 8, 2005, 1167 minutes 

Solutions to In­Class Problems Week 1, Fri. 

Problem 1.  Albert & Ronitt announce  that  they plan a  surprise 6.042 quiz next week.  Their  stu­
dents  wonder  if  the  quiz  could  be  next  Friday.  The  students  realize  that  it  obviously  cannot, 
because  if  it  hadn’t  been  given  before  Friday,  everyone would  know  that  there was  only  Friday 
left on which to give it, so it wouldn’t be a surprise any more. 

So the students ask whether Albert & Ronitt could give the surprise quiz Thursday? They observe 
that  if  the  quiz  wasn’t  given  before  Thursday,  it  would  have  to  be  given  on  the  Thursday,  since 
they  already  know  it  can’t  be  given  on  Friday.  But  having  ﬁgured  that  out,  it  wouldn’t  be  a 
surprise  if  the quiz was on Thursday  either.  Similarly,  the  students  reason  that  the quiz  can’t be 
on Wednesday, Tuesday, or Monday. Namely, it’s impossible for Albert & Ronitt to give a surprise 
quiz next week. All the students now relax having concluded that Albert & Ronitt must have been 
blufﬁng. 

And since no one expects the quiz, that’s why, when Albert & Ronitt give it on Tuesday next week, 
it really is a surprise! 

What do you think is wrong with the students’ reasoning? 

Solution.  The  basic  problem  is  that  “surprise”  is  not  a  mathematical  concept,  nor  is  there  any 
generally  accepted  way  to  give  it  a  mathematical  deﬁnition.  The  “proof ”  above  assumes  some 
plausible axioms about surprise, without deﬁning it.  The paradox is that these axioms are incon­
sistent.  But that’s no surprise :­), since—mathematically speaking—we don’t know what we’re 
talking about. 

Mathematicians and philosophers have had a lot more to say about what might be wrong with the 
students’ reasoning, (see Chow, Timothy Y. The surprise examination or unexpected hanging paradox, 
� 
American Math. Monthly (January 1998), pp.41–51.) 

Problem  2.  Identify  the  antecedents  and  conclusions  of  each  of  the  following  deductions  and 

Copyright © 2005, Prof. Albert R. Meyer and Prof. Ronitt Rubinfeld. 

2 

Solutions to In­Class Problems Week 1, Fri. 

translate them into propositional logic notation using logical operators: 
∧ 
::=  AND, 
∨ 
::=  OR, 
¬ 
::=  NOT, 
−→ 
::= 
IMPLIES, 
←→ 
::= 
IFF (if and only if) 

This may require that you “pin down” a statement that could be interpreted in more than one way. 
Identify which of the deductions are sound ones. 

(a)  Jane  and  Pete  won’t  both  win  the  math  prize.  Pete  will  win  either  the  math  prize  or  the 
chemistry prize.  Jane will win the math prize. Thus, Pete will win the chemistry prize. 
Solution.  The deduction is: 

¬ (J   ∧ M ), M  ∨ C,  
C 

J 

where 

J 

M 

C 

::=  “Jane will win the math prize.” 
::=  “Pete will win the math prize.” 
::=  “Pete will win the chemistry prize.” 

This deduction is sound. 

� 

(b)  The main  course will  be  beef  or  ﬁsh.  The  vegetable will  be  peas  or  corn.  We will  not  have 
both ﬁsh as a main course and corn as a vegetable. Therefore, we will not have both beef as a main 
course and peas as a vegetable. 
Solution.  The deduction is: 

B  ∨ F ,  C  ∨ P ,  ¬ (F  ∧ C ) 
¬ (B  ∧ P ) 

where 

F 

C 

B 

::=  “The main course will be beef.” 
::=  “The main course will be ﬁsh.” 
::=  “The vegetable will be corn.” 
::=  “The vegetable will be peas.” 
P 
This deduction is not sound.  For example, B  ∧ ¬ F  ∧ C  ∧ P  is consistent with the antecedents but 
not  with  the  conclusion.  Note  that  as  formalized,  there  need  not  be  only  one  main  course  and 
only one vegetable; it is possible, for example, for the vegetable to be both corn and peas, as in the 
scenario given. 
If we wished to exclude the possibility of multiple courses we could have used exclusive­or instead 
of inclusive­or.  So our antecedent about the main course would then read B  ⊕ F  or, equivalently, 
(B ∨ F ) ∧ ¬ (B ∧ F ). The antecedent about the vegetable could be changed similarly. The deduction 
� 
is still unsound in this formalization. 

Solutions to In­Class Problems Week 1, Fri. 

3 

(c)  Either  John or Bill  is  telling  the  truth.  Either Sam or Bill  is  lying.  Thus,  either  John  is  telling 
the truth or Sam is lying. 

Solution.  We interpret “John is lying,” to be the negation of “John is telling the truth.”  Similarly

for the corresponding propositions involving Bill and Sam. The deduction is:

J ∨ B ,   ¬S ∨ ¬B  
J ∨ ¬S  

where 

J 

::=  “John is telling the truth.” 
::=  “Bill is telling the truth.” 
::=  “Sam is telling the truth.” 
S 
This deduction  is sound.  It  is an example of a common “cancellation” or cut  rule  that  lets us get 
� 
rid of the proposition B in the conclusion. 

B 

(d)  Either sales will go up and the boss will be happy, or expenses will go up and the boss won’t 
be happy. Therefore, sales and expenses will not both go up. 
Solution.  The deduction is: 
(S ∧ H ) ∨ (E ∧ ¬H ) 
¬(S ∧ E ) 

where 

S 

::=  “Sales will go up.” 
::=  “The boss will be happy.” 
::=  “Expenses will go up.” 
E 
This  deduction  is  not  sound.  For  example,  S ∧ E ∧ H  is  consistent with  the  antecedent  but  not 
� 
with the conclusion. 

H 

Problem  3.  Boolean  logic  comes  up  in  digital  circuit  design  using  the  convention  that  T  corre­
sponds  to  1  and  F  to  0.  For  example,  suppose  we  want  to  describe  a  circuit  with  n +  1   inputs 
an , an−1 , . . . , a1 , a0  which are the n + 1 bits of the binary representation of an integer, k , between 0 
and 2n+1  − 1. We want outputs on+1 , on , . . . , o1 , o0  to be the bits of k +  b where b is a single bit. 
For example, for n = 1, the formulas 
o0  ::=  a0  ⊕ b 
c1  ::=  a0  ∧ b 
o1  ::=  c1  ⊕ a1 
c2  ::=  c1  ∧ a1 
o2  ::=  c2 
do the job. Here ⊕ is the “mod 2 sum” operator:  a ⊕ b is 1 iff a +  b is even. 

the carry into column 2 

the carry into column 1 

Solutions to In­Class Problems Week 1, Fri. 
4 
(a)  Generalize  the  example above  for  any n  ≥  0.  That  is,  give  simple  formulas  for  oi  and  ci  for 
0  ≤ i ≤ n +  1. 
Solution.  Deﬁne 

o0  ::=  a0  ⊕ b, 
ci+1   ::=  ai  ∧ ci 
oi+1   ::=  ci+1   ⊕ ai+1 
on+1  ::=  cn+1 . 

for 0  ≤ i ≤ n, 
for 0  ≤ i < n, 

� 

(b)  Write similar deﬁnitions for the n+1 bits of the sum of two binary numbers an , an−1 , . . . , a1 , a0 
and bn , bn−1 , . . . , b1 , b0 . 

Solution.  Deﬁne 

o0  ::=  a0  ⊕ b0 , 
ci+1   ::=  (ai  ∧ bi ) ∨ (ai  ∧ ci ) ∨ (bi  ∧ ci ) 
oi+1   ::=  ci+1   ⊕ ai+1   ⊕ bi+1 
on+1  ::=  cn+1 . 

for 0  ≤ i ≤ n, 
for 0  ≤ i < n, 

� 

(c)  How many Boolean operations does your system use to calculate the sum? 

Solution.  The scheme above uses 3(n +  1)  AND’S, 2n +  1   MOD­2­SUMS and 2(n +  1)  OR’s for a 
� 
total of 7n +  5 operations. 

