MatLab Programming – Algorithms to Solve
Differential Equations

y(x)

2

4

1

3

5

x1

x2
x
Adapted from Figure 16.1.2. In Numerical Recipes in C: The Art of Scientific Computing.
2nd Ed. W. H. Press, S. A. Teukolsky, W. T. Vetterling, and B. P. Flannery.
 Cambridge, UK: Cambridge University Press, 1992. p. 711. ISBN: 9780521431088. Figure by MIT OCW.

x3

Cite as: Peter So, course materials for 2.003J/1.053J Dynamics and Control I, Spring 2007. 
MIT OpenCourseWare (http://ocw.mit.edu), Massachusetts Institute of Technology. Downloaded on [DD Month YYYY].

Revisit the task of recovering the motion of a 
dynamical system from its equation of motion

Consider the simplest 1st order system:

+ kx

xb &
What does this system corresponds to?

0=

The solution of this system can of course be
obtained analytically but also simply numerically
by a single integration

Cite as: Peter So, course materials for 2.003J/1.053J Dynamics and Control I, Spring 2007. 
MIT OpenCourseWare (http://ocw.mit.edu), Massachusetts Institute of Technology. Downloaded on [DD Month YYYY].

Limitation of Simple Integration: Quad

Simple integration is very limited and does not solve
a large class of dynamic problems.  As examples:

by’

mg

θ1

θ2

Coupled multiple degree 
Falling ball –
of freedom system
2nd order
Cite as: Peter So, course materials for 2.003J/1.053J Dynamics and Control I, Spring 2007. 
MIT OpenCourseWare (http://ocw.mit.edu), Massachusetts Institute of Technology. Downloaded on [DD Month YYYY].

How did we solve this class of problems?
We use a very simple straight forward approach of
doing numerical integration:

Projec t ile  trajec tory  with x0=0,  y0=0,  vx0=5,  vy0=5

start

X=0; y=0; vx=5;vy=5;t=0;dt=0.1

1.4

1.2

1

0.8

)
t
(
y

0.6

0.4

0.2

0

y=vx*dt;y=vy*dt;vy=vy-9.8*dt;t=t+dt;

-0.2

yes

0
1
2
3
4
5
6
x (t)
Actually, this simple approach
Has a name – it is called 
Euler Method
In general, you should NEVER 
ever use Euler Method.
People uses it only if 
they don’t know any better.
Cite as: Peter So, course materials for 2.003J/1.053J Dynamics and Control I, Spring 2007. 
IT OpenCourseWare (http://ocw.mit.edu), Massachusetts Institute of Technology. Downloaded on [DD Month YYYY]
M
.

Y=<0
no

output x, t

end

The General Numerical Problem of Solving
Ordinary Differential Equations (ODEs)

n
)(

y

=

yf
(

(

n

)1
−

,

L

,

tyy
,'
),

Note that y does not have to be a scaler
but can be a vector as in the case for
multiple degrees of freedom systems

y

=

(

yy
,
1

2

,

my

)

L

Cite as: Peter So, course materials for 2.003J/1.053J Dynamics and Control I, Spring 2007. 
MIT OpenCourseWare (http://ocw.mit.edu), Massachusetts Institute of Technology. Downloaded on [DD Month YYYY].

Converting higher order differential equation to 
a system of first order differential equation
Consider probably the most important case:
thytgyt
y
f
')(
''
)(
)(
=
+
+

This can be readily converted to a system
of first order differential equations

y

2

=

y

'

y
1

=

y

y
1
y

2

'
=
'
=

y
2
f
yt
)(

+

ytg
)(
1

2

+

th
)(

Cite as: Peter So, course materials for 2.003J/1.053J Dynamics and Control I, Spring 2007. 
MIT OpenCourseWare (http://ocw.mit.edu), Massachusetts Institute of Technology. Downloaded on [DD Month YYYY].

General equivalence between higher order differential
equation and a system of first order equations

n
)(

y

=

yf
(

(

n

)1
−

,

L

,

tyy
,'
),

y
1
y

n

=
'
=

yy
;
2
yf
(

n

=
,

y
y
;'
,
L
n
1
−
tyy
),
,
,
2
1

L

(

n

−

)2

=

y

;

y

n

=

y

(

n

)1
−

The problem of solving all higher order ordinary 
differential equation is thus reduced to solving a system
of linear differential equations
Cite as: Peter So, course materials for 2.003J/1.053J Dynamics and Control I, Spring 2007. 
MIT OpenCourseWare (http://ocw.mit.edu), Massachusetts Institute of Technology. Downloaded on [DD Month YYYY].

Solving linear first order differential equation 
by Euler Method
In general, the system of equations look like:

y

=

t
)('

yyf
(
,
L
i
i
1
2
Euler Method says:

,

,

ty
),
n

i

=

1
L

n

t
jy
y
(
)
=Δ
i
i
n
1
=
L

i

((

j

t
)1
)
+Δ−

yf
(
i
1

((

j

t
)1
Δ−

),

,

y

n

L

((

j

t
)1
Δ−

(),

j

t
t
)1
)
ΔΔ−

This equation can be solved if we have the 
initial conditions:
y
)0(
1

)0(

)0(

y
10

=

=

,

y

y

2

=

y

,

,

20

L

n

y

n

0

Cite as: Peter So, course materials for 2.003J/1.053J Dynamics and Control I, Spring 2007. 
MIT OpenCourseWare (http://ocw.mit.edu), Massachusetts Institute of Technology. Downloaded on [DD Month YYYY].

What is the accuracy of the Euler Method?

Euler method is equivalent to taking the
1st order Taylor series expansion for yi(t);
it is unsymmetric and uses only the derivative
information at the start of the time step

t
jy
y
(
)
=Δ
i
i
n
1
=
L

i

((

j

t
)1
)
+Δ−

yf
(
i
1

((

j

t
)1
Δ−

),

,

y

n

L

((

j

t
)1
Δ−

(),

j

tOt
t
)1
)
(
+ΔΔ−
Δ

2

)

Correction is only one less order then the correction term.
How do we get better accuracy?  

Cite as: Peter So, course materials for 2.003J/1.053J Dynamics and Control I, Spring 2007. 
MIT OpenCourseWare (http://ocw.mit.edu), Massachusetts Institute of Technology. Downloaded on [DD Month YYYY].

Schematically, the differences between 
Euler and 2nd order Runge-Kutta are fairly clear

y(x)

1

x1

2

x2
x

x3

y(x)

2

1

4

3

5

x3

x1

x2
x
From Numerical Recipe in C
Cite as: Peter So, course materials for 2.003J/1.053J Dynamics and Control I, Spring 2007. 
MIT OpenCourseWare (http://ocw.mit.edu), Massachusetts Institute of Technology. Downloaded on [DD Month YYYY].

Euler Method
Adapted from Figure 16.1.1. In Numerical Recipes in
C
: The Art of Scientific Computing.
2
nd Ed. W. H. Press, S. A. Teukolsky, W. T. Vetterling,
nd B. P. Flannery. Cambridge, UK: Cambridge
a
niversity Press, 1992. p. 711. ISBN: 9780521431088.
 U
igure by MIT OCW.
F

2nd order 
Runge-Kutta
Adapted from Figure 16.1.1. In Numerical Recipes in
C: The Art of Scientific Computing.
2nd Ed. W. H. Press, S. A. Teukolsky, W. T. Vetterling,
and B. P. Flannery. Cambridge, UK: Cambridge
niversity Press, 1992. p. 711. ISBN: 9780521431088.
U
Figure by MIT OCW.

A working ODE solver – Runge-Kutta Method

Estimate where the mid-point for yi is first.  Then,
Evaluate the slope at the mid-point to estimate 
the next value of yi.

i

i

n

j

−

)2/1

t
t
)
ΔΔ

L

t
)1
(),
Δ−
y
j
((
,

t
t
j
)1
)
ΔΔ−
k
t
)1
(),2/1
+Δ−
n

t
j
y
,
),
((
)1
Δ−
L
n
t
k
)1
,2/1
)
+Δ−
1
j
t
k
)1
2
)
+Δ−

j
yf
k
(
((
1
=
i
i
1
yf
j
k
((
(
2
=
i
i
1
jy
t
y
((
)
(
=Δ
i
n
i
1
=
L
Because of symmetry, this method is good to
O(Δt3)
This is called the 2nd order Runge-Kutta method.
Cite as: Peter So, course materials for 2.003J/1.053J Dynamics and Control I, Spring 2007. 
MIT OpenCourseWare (http://ocw.mit.edu), Massachusetts Institute of Technology. Downloaded on [DD Month YYYY].

Cite as: Peter So, course materials for 2.003J/1.053J Dynamics and Control I, Spring 2007. 
MIT OpenCourseWare (http://ocw.mit.edu), Massachusetts Institute of Technology. Downloaded on [DD Month YYYY].

Higher Order Runge-Kutta Method
Just like Simpson method can be extended to higher
order estimate, Runge-Kutta also has straightforward
Higher order analog.  The most commonly used
one is the 4th order Runge-Kutta method

i

k
j
yf
1
(
((
=
i
i
1
k
yf
j
2
((
(
=
i
1
k
yf
j
3
((
(
=
i
i
1
k
yf
j
4
((
(
=
i
i
1
jy
t
y
(
((
)
=Δ
i
i
n
1
=
L

i

t
y
j
,
),
((
)1
Δ−
L
n
t
k
)1
,2/1
)
+Δ−
L
1
t
k
,2/2
)1
)
+Δ−
1
t
k
3
)1
)
,
+Δ−
L
1
j
t
k
)1
6/1
)
+Δ−
i

t
j
t
t
)1
)1
)
(),
Δ−
ΔΔ−
y
k
j
t
j
)1
((
(),2/1
,
+Δ−
n
n
k
y
j
t
)1
,
((
(),2/2
+Δ−
L
n
n
t
t
y
j
j
t
k
((
),3
)1
)
+Δ−
ΔΔ
n
n
k
k
k
3/2
6/4
3/3
+
+
+
+
i
i
i

t
t
)2/1
)
ΔΔ
−
j
t
t
)2/1
)
−
ΔΔ

tO
(
Δ

5

)

Runge-Kutta methods are implemented in MatLab
as ODE23 and ODE45 functions
Cite as: Peter So, course materials for 2.003J/1.053J Dynamics and Control I, Spring 2007. 
MIT OpenCourseWare (http://ocw.mit.edu), Massachusetts Institute of Technology. Downloaded on [DD Month YYYY].

Using MatLab to solve a system of differential equations

Consider solving the following system of ODE:

y' 1 = y 2 y 3
y' 2 = -y 1 y 3
y' 3 = -0.51y 1 y 2

y1(0) = 0
y2(0) = 1
y3(0) = 1

Adapted from MATLAB Help Sections. Figure by MIT OCW.

Cite as: Peter So, course materials for 2.003J/1.053J Dynamics and Control I, Spring 2007. 
MIT OpenCourseWare (http://ocw.mit.edu), Massachusetts Institute of Technology. Downloaded on [DD Month YYYY].

Using MatLab to solve a system of differential equations

(1) First define the system of ODEs as a function:
function dy = system(t,y)
dy = zeros(3,1);    % a column vector
dy(1) = y(2) * y(3);
dy(2) = -y(1) * y(3);
dy(3) = -0.51 * y(1) * y(2);

(2) Call ODE45 or ODE23 using the function handle
[T,Y] = ode45(@system,[0 12],[0 1 1]);
(3) Plot result
plot(T,Y(:,1),'-',T,Y(:,2),'-.',T,Y(:,3),'.')
Cite as: Peter So, course materials for 2.003J/1.053J Dynamics and Control I, Spring 2007. 
MIT OpenCourseWare (http://ocw.mit.edu), Massachusetts Institute of Technology. Downloaded on [DD Month YYYY].

